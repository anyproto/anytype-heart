// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5-devel
// 	protoc        v5.28.2
// source: pb/protos/events.proto

package pb

import (
	model "github.com/anyproto/anytype-heart/pkg/lib/pb/model"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventBlockDataviewSliceOperation int32

const (
	EventBlockDataview_SliceOperationNone    EventBlockDataviewSliceOperation = 0 // not used
	EventBlockDataview_SliceOperationAdd     EventBlockDataviewSliceOperation = 1
	EventBlockDataview_SliceOperationMove    EventBlockDataviewSliceOperation = 2
	EventBlockDataview_SliceOperationRemove  EventBlockDataviewSliceOperation = 3
	EventBlockDataview_SliceOperationReplace EventBlockDataviewSliceOperation = 4
)

// Enum value maps for EventBlockDataviewSliceOperation.
var (
	EventBlockDataviewSliceOperation_name = map[int32]string{
		0: "SliceOperationNone",
		1: "SliceOperationAdd",
		2: "SliceOperationMove",
		3: "SliceOperationRemove",
		4: "SliceOperationReplace",
	}
	EventBlockDataviewSliceOperation_value = map[string]int32{
		"SliceOperationNone":    0,
		"SliceOperationAdd":     1,
		"SliceOperationMove":    2,
		"SliceOperationRemove":  3,
		"SliceOperationReplace": 4,
	}
)

func (x EventBlockDataviewSliceOperation) Enum() *EventBlockDataviewSliceOperation {
	p := new(EventBlockDataviewSliceOperation)
	*p = x
	return p
}

func (x EventBlockDataviewSliceOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventBlockDataviewSliceOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_protos_events_proto_enumTypes[0].Descriptor()
}

func (EventBlockDataviewSliceOperation) Type() protoreflect.EnumType {
	return &file_pb_protos_events_proto_enumTypes[0]
}

func (x EventBlockDataviewSliceOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventBlockDataviewSliceOperation.Descriptor instead.
func (EventBlockDataviewSliceOperation) EnumDescriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 0}
}

type EventStatusThreadSyncStatus int32

const (
	EventStatusThread_Unknown             EventStatusThreadSyncStatus = 0
	EventStatusThread_Offline             EventStatusThreadSyncStatus = 1
	EventStatusThread_Syncing             EventStatusThreadSyncStatus = 2
	EventStatusThread_Synced              EventStatusThreadSyncStatus = 3
	EventStatusThread_Failed              EventStatusThreadSyncStatus = 4
	EventStatusThread_IncompatibleVersion EventStatusThreadSyncStatus = 5
	EventStatusThread_NetworkNeedsUpdate  EventStatusThreadSyncStatus = 6
)

// Enum value maps for EventStatusThreadSyncStatus.
var (
	EventStatusThreadSyncStatus_name = map[int32]string{
		0: "Unknown",
		1: "Offline",
		2: "Syncing",
		3: "Synced",
		4: "Failed",
		5: "IncompatibleVersion",
		6: "NetworkNeedsUpdate",
	}
	EventStatusThreadSyncStatus_value = map[string]int32{
		"Unknown":             0,
		"Offline":             1,
		"Syncing":             2,
		"Synced":              3,
		"Failed":              4,
		"IncompatibleVersion": 5,
		"NetworkNeedsUpdate":  6,
	}
)

func (x EventStatusThreadSyncStatus) Enum() *EventStatusThreadSyncStatus {
	p := new(EventStatusThreadSyncStatus)
	*p = x
	return p
}

func (x EventStatusThreadSyncStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventStatusThreadSyncStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_protos_events_proto_enumTypes[1].Descriptor()
}

func (EventStatusThreadSyncStatus) Type() protoreflect.EnumType {
	return &file_pb_protos_events_proto_enumTypes[1]
}

func (x EventStatusThreadSyncStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventStatusThreadSyncStatus.Descriptor instead.
func (EventStatusThreadSyncStatus) EnumDescriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 8, 0, 0}
}

type EventSpaceStatus int32

const (
	EventSpace_Synced             EventSpaceStatus = 0
	EventSpace_Syncing            EventSpaceStatus = 1
	EventSpace_Error              EventSpaceStatus = 2
	EventSpace_Offline            EventSpaceStatus = 3
	EventSpace_NetworkNeedsUpdate EventSpaceStatus = 4
)

// Enum value maps for EventSpaceStatus.
var (
	EventSpaceStatus_name = map[int32]string{
		0: "Synced",
		1: "Syncing",
		2: "Error",
		3: "Offline",
		4: "NetworkNeedsUpdate",
	}
	EventSpaceStatus_value = map[string]int32{
		"Synced":             0,
		"Syncing":            1,
		"Error":              2,
		"Offline":            3,
		"NetworkNeedsUpdate": 4,
	}
)

func (x EventSpaceStatus) Enum() *EventSpaceStatus {
	p := new(EventSpaceStatus)
	*p = x
	return p
}

func (x EventSpaceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventSpaceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_protos_events_proto_enumTypes[2].Descriptor()
}

func (EventSpaceStatus) Type() protoreflect.EnumType {
	return &file_pb_protos_events_proto_enumTypes[2]
}

func (x EventSpaceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventSpaceStatus.Descriptor instead.
func (EventSpaceStatus) EnumDescriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 13, 0}
}

type EventSpaceNetwork int32

const (
	EventSpace_Anytype   EventSpaceNetwork = 0
	EventSpace_SelfHost  EventSpaceNetwork = 1
	EventSpace_LocalOnly EventSpaceNetwork = 2
)

// Enum value maps for EventSpaceNetwork.
var (
	EventSpaceNetwork_name = map[int32]string{
		0: "Anytype",
		1: "SelfHost",
		2: "LocalOnly",
	}
	EventSpaceNetwork_value = map[string]int32{
		"Anytype":   0,
		"SelfHost":  1,
		"LocalOnly": 2,
	}
)

func (x EventSpaceNetwork) Enum() *EventSpaceNetwork {
	p := new(EventSpaceNetwork)
	*p = x
	return p
}

func (x EventSpaceNetwork) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventSpaceNetwork) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_protos_events_proto_enumTypes[3].Descriptor()
}

func (EventSpaceNetwork) Type() protoreflect.EnumType {
	return &file_pb_protos_events_proto_enumTypes[3]
}

func (x EventSpaceNetwork) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventSpaceNetwork.Descriptor instead.
func (EventSpaceNetwork) EnumDescriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 13, 1}
}

type EventSpaceSyncError int32

const (
	EventSpace_Null                EventSpaceSyncError = 0
	EventSpace_StorageLimitExceed  EventSpaceSyncError = 1
	EventSpace_IncompatibleVersion EventSpaceSyncError = 2
	EventSpace_NetworkError        EventSpaceSyncError = 3
)

// Enum value maps for EventSpaceSyncError.
var (
	EventSpaceSyncError_name = map[int32]string{
		0: "Null",
		1: "StorageLimitExceed",
		2: "IncompatibleVersion",
		3: "NetworkError",
	}
	EventSpaceSyncError_value = map[string]int32{
		"Null":                0,
		"StorageLimitExceed":  1,
		"IncompatibleVersion": 2,
		"NetworkError":        3,
	}
)

func (x EventSpaceSyncError) Enum() *EventSpaceSyncError {
	p := new(EventSpaceSyncError)
	*p = x
	return p
}

func (x EventSpaceSyncError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventSpaceSyncError) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_protos_events_proto_enumTypes[4].Descriptor()
}

func (EventSpaceSyncError) Type() protoreflect.EnumType {
	return &file_pb_protos_events_proto_enumTypes[4]
}

func (x EventSpaceSyncError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventSpaceSyncError.Descriptor instead.
func (EventSpaceSyncError) EnumDescriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 13, 2}
}

type EventP2PStatusStatus int32

const (
	EventP2PStatus_NotConnected EventP2PStatusStatus = 0
	EventP2PStatus_NotPossible  EventP2PStatusStatus = 1
	EventP2PStatus_Connected    EventP2PStatusStatus = 2
	EventP2PStatus_Restricted   EventP2PStatusStatus = 3 // only for ios for now, fallback to NotPossible if not implemented on client
)

// Enum value maps for EventP2PStatusStatus.
var (
	EventP2PStatusStatus_name = map[int32]string{
		0: "NotConnected",
		1: "NotPossible",
		2: "Connected",
		3: "Restricted",
	}
	EventP2PStatusStatus_value = map[string]int32{
		"NotConnected": 0,
		"NotPossible":  1,
		"Connected":    2,
		"Restricted":   3,
	}
)

func (x EventP2PStatusStatus) Enum() *EventP2PStatusStatus {
	p := new(EventP2PStatusStatus)
	*p = x
	return p
}

func (x EventP2PStatusStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventP2PStatusStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_protos_events_proto_enumTypes[5].Descriptor()
}

func (EventP2PStatusStatus) Type() protoreflect.EnumType {
	return &file_pb_protos_events_proto_enumTypes[5]
}

func (x EventP2PStatusStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventP2PStatusStatus.Descriptor instead.
func (EventP2PStatusStatus) EnumDescriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 14, 0}
}

type ModelProcessState int32

const (
	ModelProcess_None     ModelProcessState = 0
	ModelProcess_Running  ModelProcessState = 1
	ModelProcess_Done     ModelProcessState = 2
	ModelProcess_Canceled ModelProcessState = 3
	ModelProcess_Error    ModelProcessState = 4
)

// Enum value maps for ModelProcessState.
var (
	ModelProcessState_name = map[int32]string{
		0: "None",
		1: "Running",
		2: "Done",
		3: "Canceled",
		4: "Error",
	}
	ModelProcessState_value = map[string]int32{
		"None":     0,
		"Running":  1,
		"Done":     2,
		"Canceled": 3,
		"Error":    4,
	}
)

func (x ModelProcessState) Enum() *ModelProcessState {
	p := new(ModelProcessState)
	*p = x
	return p
}

func (x ModelProcessState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelProcessState) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_protos_events_proto_enumTypes[6].Descriptor()
}

func (ModelProcessState) Type() protoreflect.EnumType {
	return &file_pb_protos_events_proto_enumTypes[6]
}

func (x ModelProcessState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelProcessState.Descriptor instead.
func (ModelProcessState) EnumDescriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{2, 0, 0}
}

// Event – type of message, that could be sent from a middleware to the corresponding front-end.
type Event struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Messages      []*EventMessage        `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	ContextId     string                 `protobuf:"bytes,2,opt,name=contextId,proto3" json:"contextId,omitempty"`
	Initiator     *model.Account         `protobuf:"bytes,3,opt,name=initiator,proto3" json:"initiator,omitempty"`
	TraceId       string                 `protobuf:"bytes,4,opt,name=traceId,proto3" json:"traceId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_pb_protos_events_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetMessages() []*EventMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *Event) GetContextId() string {
	if x != nil {
		return x.ContextId
	}
	return ""
}

func (x *Event) GetInitiator() *model.Account {
	if x != nil {
		return x.Initiator
	}
	return nil
}

func (x *Event) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type ResponseEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Messages      []*EventMessage        `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	ContextId     string                 `protobuf:"bytes,2,opt,name=contextId,proto3" json:"contextId,omitempty"`
	TraceId       string                 `protobuf:"bytes,4,opt,name=traceId,proto3" json:"traceId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponseEvent) Reset() {
	*x = ResponseEvent{}
	mi := &file_pb_protos_events_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseEvent) ProtoMessage() {}

func (x *ResponseEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseEvent.ProtoReflect.Descriptor instead.
func (*ResponseEvent) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{1}
}

func (x *ResponseEvent) GetMessages() []*EventMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *ResponseEvent) GetContextId() string {
	if x != nil {
		return x.ContextId
	}
	return ""
}

func (x *ResponseEvent) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type Model struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Model) Reset() {
	*x = Model{}
	mi := &file_pb_protos_events_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Model) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model) ProtoMessage() {}

func (x *Model) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model.ProtoReflect.Descriptor instead.
func (*Model) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{2}
}

type EventMessage struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	SpaceId string                 `protobuf:"bytes,132,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
	// Types that are valid to be assigned to Value:
	//
	//	*EventMessageValueOfAccountShow
	//	*EventMessageValueOfAccountDetails
	//	*EventMessageValueOfAccountConfigUpdate
	//	*EventMessageValueOfAccountUpdate
	//	*EventMessageValueOfAccountLinkChallenge
	//	*EventMessageValueOfAccountLinkChallengeHide
	//	*EventMessageValueOfObjectDetailsSet
	//	*EventMessageValueOfObjectDetailsAmend
	//	*EventMessageValueOfObjectDetailsUnset
	//	*EventMessageValueOfObjectRelationsAmend
	//	*EventMessageValueOfObjectRelationsRemove
	//	*EventMessageValueOfObjectRemove
	//	*EventMessageValueOfObjectClose
	//	*EventMessageValueOfObjectRestrictionsSet
	//	*EventMessageValueOfSubscriptionAdd
	//	*EventMessageValueOfSubscriptionRemove
	//	*EventMessageValueOfSubscriptionPosition
	//	*EventMessageValueOfSubscriptionCounters
	//	*EventMessageValueOfSubscriptionGroups
	//	*EventMessageValueOfBlockAdd
	//	*EventMessageValueOfBlockDelete
	//	*EventMessageValueOfFilesUpload
	//	*EventMessageValueOfMarksInfo
	//	*EventMessageValueOfBlockSetFields
	//	*EventMessageValueOfBlockSetChildrenIds
	//	*EventMessageValueOfBlockSetRestrictions
	//	*EventMessageValueOfBlockSetBackgroundColor
	//	*EventMessageValueOfBlockSetText
	//	*EventMessageValueOfBlockSetFile
	//	*EventMessageValueOfBlockSetLink
	//	*EventMessageValueOfBlockSetBookmark
	//	*EventMessageValueOfBlockSetAlign
	//	*EventMessageValueOfBlockSetDiv
	//	*EventMessageValueOfBlockSetRelation
	//	*EventMessageValueOfBlockSetLatex
	//	*EventMessageValueOfBlockSetVerticalAlign
	//	*EventMessageValueOfBlockSetTableRow
	//	*EventMessageValueOfBlockSetWidget
	//	*EventMessageValueOfBlockDataviewViewSet
	//	*EventMessageValueOfBlockDataviewViewDelete
	//	*EventMessageValueOfBlockDataviewViewOrder
	//	*EventMessageValueOfBlockDataviewSourceSet
	//	*EventMessageValueOfBlockDataViewGroupOrderUpdate
	//	*EventMessageValueOfBlockDataViewObjectOrderUpdate
	//	*EventMessageValueOfBlockDataviewRelationDelete
	//	*EventMessageValueOfBlockDataviewRelationSet
	//	*EventMessageValueOfBlockDataviewViewUpdate
	//	*EventMessageValueOfBlockDataviewTargetObjectIdSet
	//	*EventMessageValueOfBlockDataviewIsCollectionSet
	//	*EventMessageValueOfBlockDataviewOldRelationDelete
	//	*EventMessageValueOfBlockDataviewOldRelationSet
	//	*EventMessageValueOfUserBlockJoin
	//	*EventMessageValueOfUserBlockLeft
	//	*EventMessageValueOfUserBlockSelectRange
	//	*EventMessageValueOfUserBlockTextRange
	//	*EventMessageValueOfPing
	//	*EventMessageValueOfProcessNew
	//	*EventMessageValueOfProcessUpdate
	//	*EventMessageValueOfProcessDone
	//	*EventMessageValueOfThreadStatus
	//	*EventMessageValueOfFileLimitReached
	//	*EventMessageValueOfFileSpaceUsage
	//	*EventMessageValueOfFileLocalUsage
	//	*EventMessageValueOfFileLimitUpdated
	//	*EventMessageValueOfNotificationSend
	//	*EventMessageValueOfNotificationUpdate
	//	*EventMessageValueOfPayloadBroadcast
	//	*EventMessageValueOfMembershipUpdate
	//	*EventMessageValueOfSpaceSyncStatusUpdate
	//	*EventMessageValueOfP2PStatusUpdate
	//	*EventMessageValueOfImportFinish
	//	*EventMessageValueOfChatAdd
	//	*EventMessageValueOfChatUpdate
	//	*EventMessageValueOfChatUpdateReactions
	//	*EventMessageValueOfChatUpdateReadStatus
	//	*EventMessageValueOfChatDelete
	//	*EventMessageValueOfChatStateUpdate
	Value         IsEventMessageValue `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventMessage) Reset() {
	*x = EventMessage{}
	mi := &file_pb_protos_events_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMessage) ProtoMessage() {}

func (x *EventMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMessage.ProtoReflect.Descriptor instead.
func (*EventMessage) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 0}
}

func (x *EventMessage) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *EventMessage) GetValue() IsEventMessageValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *EventMessage) GetAccountShow() *EventAccountShow {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfAccountShow); ok {
			return x.AccountShow
		}
	}
	return nil
}

func (x *EventMessage) GetAccountDetails() *EventAccountDetails {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfAccountDetails); ok {
			return x.AccountDetails
		}
	}
	return nil
}

func (x *EventMessage) GetAccountConfigUpdate() *EventAccountConfigUpdate {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfAccountConfigUpdate); ok {
			return x.AccountConfigUpdate
		}
	}
	return nil
}

func (x *EventMessage) GetAccountUpdate() *EventAccountUpdate {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfAccountUpdate); ok {
			return x.AccountUpdate
		}
	}
	return nil
}

func (x *EventMessage) GetAccountLinkChallenge() *EventAccountLinkChallenge {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfAccountLinkChallenge); ok {
			return x.AccountLinkChallenge
		}
	}
	return nil
}

func (x *EventMessage) GetAccountLinkChallengeHide() *EventAccountLinkChallengeHide {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfAccountLinkChallengeHide); ok {
			return x.AccountLinkChallengeHide
		}
	}
	return nil
}

func (x *EventMessage) GetObjectDetailsSet() *EventObjectDetailsSet {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfObjectDetailsSet); ok {
			return x.ObjectDetailsSet
		}
	}
	return nil
}

func (x *EventMessage) GetObjectDetailsAmend() *EventObjectDetailsAmend {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfObjectDetailsAmend); ok {
			return x.ObjectDetailsAmend
		}
	}
	return nil
}

func (x *EventMessage) GetObjectDetailsUnset() *EventObjectDetailsUnset {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfObjectDetailsUnset); ok {
			return x.ObjectDetailsUnset
		}
	}
	return nil
}

func (x *EventMessage) GetObjectRelationsAmend() *EventObjectRelationsAmend {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfObjectRelationsAmend); ok {
			return x.ObjectRelationsAmend
		}
	}
	return nil
}

func (x *EventMessage) GetObjectRelationsRemove() *EventObjectRelationsRemove {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfObjectRelationsRemove); ok {
			return x.ObjectRelationsRemove
		}
	}
	return nil
}

func (x *EventMessage) GetObjectRemove() *EventObjectRemove {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfObjectRemove); ok {
			return x.ObjectRemove
		}
	}
	return nil
}

func (x *EventMessage) GetObjectClose() *EventObjectClose {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfObjectClose); ok {
			return x.ObjectClose
		}
	}
	return nil
}

func (x *EventMessage) GetObjectRestrictionsSet() *EventObjectRestrictionsSet {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfObjectRestrictionsSet); ok {
			return x.ObjectRestrictionsSet
		}
	}
	return nil
}

func (x *EventMessage) GetSubscriptionAdd() *EventObjectSubscriptionAdd {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfSubscriptionAdd); ok {
			return x.SubscriptionAdd
		}
	}
	return nil
}

func (x *EventMessage) GetSubscriptionRemove() *EventObjectSubscriptionRemove {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfSubscriptionRemove); ok {
			return x.SubscriptionRemove
		}
	}
	return nil
}

func (x *EventMessage) GetSubscriptionPosition() *EventObjectSubscriptionPosition {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfSubscriptionPosition); ok {
			return x.SubscriptionPosition
		}
	}
	return nil
}

func (x *EventMessage) GetSubscriptionCounters() *EventObjectSubscriptionCounters {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfSubscriptionCounters); ok {
			return x.SubscriptionCounters
		}
	}
	return nil
}

func (x *EventMessage) GetSubscriptionGroups() *EventObjectSubscriptionGroups {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfSubscriptionGroups); ok {
			return x.SubscriptionGroups
		}
	}
	return nil
}

func (x *EventMessage) GetBlockAdd() *EventBlockAdd {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfBlockAdd); ok {
			return x.BlockAdd
		}
	}
	return nil
}

func (x *EventMessage) GetBlockDelete() *EventBlockDelete {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfBlockDelete); ok {
			return x.BlockDelete
		}
	}
	return nil
}

func (x *EventMessage) GetFilesUpload() *EventBlockFilesUpload {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfFilesUpload); ok {
			return x.FilesUpload
		}
	}
	return nil
}

func (x *EventMessage) GetMarksInfo() *EventBlockMarksInfo {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfMarksInfo); ok {
			return x.MarksInfo
		}
	}
	return nil
}

func (x *EventMessage) GetBlockSetFields() *EventBlockSetFields {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfBlockSetFields); ok {
			return x.BlockSetFields
		}
	}
	return nil
}

func (x *EventMessage) GetBlockSetChildrenIds() *EventBlockSetChildrenIds {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfBlockSetChildrenIds); ok {
			return x.BlockSetChildrenIds
		}
	}
	return nil
}

func (x *EventMessage) GetBlockSetRestrictions() *EventBlockSetRestrictions {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfBlockSetRestrictions); ok {
			return x.BlockSetRestrictions
		}
	}
	return nil
}

func (x *EventMessage) GetBlockSetBackgroundColor() *EventBlockSetBackgroundColor {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfBlockSetBackgroundColor); ok {
			return x.BlockSetBackgroundColor
		}
	}
	return nil
}

func (x *EventMessage) GetBlockSetText() *EventBlockSetText {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfBlockSetText); ok {
			return x.BlockSetText
		}
	}
	return nil
}

func (x *EventMessage) GetBlockSetFile() *EventBlockSetFile {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfBlockSetFile); ok {
			return x.BlockSetFile
		}
	}
	return nil
}

func (x *EventMessage) GetBlockSetLink() *EventBlockSetLink {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfBlockSetLink); ok {
			return x.BlockSetLink
		}
	}
	return nil
}

func (x *EventMessage) GetBlockSetBookmark() *EventBlockSetBookmark {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfBlockSetBookmark); ok {
			return x.BlockSetBookmark
		}
	}
	return nil
}

func (x *EventMessage) GetBlockSetAlign() *EventBlockSetAlign {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfBlockSetAlign); ok {
			return x.BlockSetAlign
		}
	}
	return nil
}

func (x *EventMessage) GetBlockSetDiv() *EventBlockSetDiv {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfBlockSetDiv); ok {
			return x.BlockSetDiv
		}
	}
	return nil
}

func (x *EventMessage) GetBlockSetRelation() *EventBlockSetRelation {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfBlockSetRelation); ok {
			return x.BlockSetRelation
		}
	}
	return nil
}

func (x *EventMessage) GetBlockSetLatex() *EventBlockSetLatex {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfBlockSetLatex); ok {
			return x.BlockSetLatex
		}
	}
	return nil
}

func (x *EventMessage) GetBlockSetVerticalAlign() *EventBlockSetVerticalAlign {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfBlockSetVerticalAlign); ok {
			return x.BlockSetVerticalAlign
		}
	}
	return nil
}

func (x *EventMessage) GetBlockSetTableRow() *EventBlockSetTableRow {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfBlockSetTableRow); ok {
			return x.BlockSetTableRow
		}
	}
	return nil
}

func (x *EventMessage) GetBlockSetWidget() *EventBlockSetWidget {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfBlockSetWidget); ok {
			return x.BlockSetWidget
		}
	}
	return nil
}

func (x *EventMessage) GetBlockDataviewViewSet() *EventBlockDataviewViewSet {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfBlockDataviewViewSet); ok {
			return x.BlockDataviewViewSet
		}
	}
	return nil
}

func (x *EventMessage) GetBlockDataviewViewDelete() *EventBlockDataviewViewDelete {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfBlockDataviewViewDelete); ok {
			return x.BlockDataviewViewDelete
		}
	}
	return nil
}

func (x *EventMessage) GetBlockDataviewViewOrder() *EventBlockDataviewViewOrder {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfBlockDataviewViewOrder); ok {
			return x.BlockDataviewViewOrder
		}
	}
	return nil
}

func (x *EventMessage) GetBlockDataviewSourceSet() *EventBlockDataviewSourceSet {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfBlockDataviewSourceSet); ok {
			return x.BlockDataviewSourceSet
		}
	}
	return nil
}

func (x *EventMessage) GetBlockDataViewGroupOrderUpdate() *EventBlockDataviewGroupOrderUpdate {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfBlockDataViewGroupOrderUpdate); ok {
			return x.BlockDataViewGroupOrderUpdate
		}
	}
	return nil
}

func (x *EventMessage) GetBlockDataViewObjectOrderUpdate() *EventBlockDataviewObjectOrderUpdate {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfBlockDataViewObjectOrderUpdate); ok {
			return x.BlockDataViewObjectOrderUpdate
		}
	}
	return nil
}

func (x *EventMessage) GetBlockDataviewRelationDelete() *EventBlockDataviewRelationDelete {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfBlockDataviewRelationDelete); ok {
			return x.BlockDataviewRelationDelete
		}
	}
	return nil
}

func (x *EventMessage) GetBlockDataviewRelationSet() *EventBlockDataviewRelationSet {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfBlockDataviewRelationSet); ok {
			return x.BlockDataviewRelationSet
		}
	}
	return nil
}

func (x *EventMessage) GetBlockDataviewViewUpdate() *EventBlockDataviewViewUpdate {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfBlockDataviewViewUpdate); ok {
			return x.BlockDataviewViewUpdate
		}
	}
	return nil
}

func (x *EventMessage) GetBlockDataviewTargetObjectIdSet() *EventBlockDataviewTargetObjectIdSet {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfBlockDataviewTargetObjectIdSet); ok {
			return x.BlockDataviewTargetObjectIdSet
		}
	}
	return nil
}

func (x *EventMessage) GetBlockDataviewIsCollectionSet() *EventBlockDataviewIsCollectionSet {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfBlockDataviewIsCollectionSet); ok {
			return x.BlockDataviewIsCollectionSet
		}
	}
	return nil
}

func (x *EventMessage) GetBlockDataviewOldRelationDelete() *EventBlockDataviewOldRelationDelete {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfBlockDataviewOldRelationDelete); ok {
			return x.BlockDataviewOldRelationDelete
		}
	}
	return nil
}

func (x *EventMessage) GetBlockDataviewOldRelationSet() *EventBlockDataviewOldRelationSet {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfBlockDataviewOldRelationSet); ok {
			return x.BlockDataviewOldRelationSet
		}
	}
	return nil
}

func (x *EventMessage) GetUserBlockJoin() *EventUserBlockJoin {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfUserBlockJoin); ok {
			return x.UserBlockJoin
		}
	}
	return nil
}

func (x *EventMessage) GetUserBlockLeft() *EventUserBlockLeft {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfUserBlockLeft); ok {
			return x.UserBlockLeft
		}
	}
	return nil
}

func (x *EventMessage) GetUserBlockSelectRange() *EventUserBlockSelectRange {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfUserBlockSelectRange); ok {
			return x.UserBlockSelectRange
		}
	}
	return nil
}

func (x *EventMessage) GetUserBlockTextRange() *EventUserBlockTextRange {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfUserBlockTextRange); ok {
			return x.UserBlockTextRange
		}
	}
	return nil
}

func (x *EventMessage) GetPing() *EventPing {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfPing); ok {
			return x.Ping
		}
	}
	return nil
}

func (x *EventMessage) GetProcessNew() *EventProcessNew {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfProcessNew); ok {
			return x.ProcessNew
		}
	}
	return nil
}

func (x *EventMessage) GetProcessUpdate() *EventProcessUpdate {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfProcessUpdate); ok {
			return x.ProcessUpdate
		}
	}
	return nil
}

func (x *EventMessage) GetProcessDone() *EventProcessDone {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfProcessDone); ok {
			return x.ProcessDone
		}
	}
	return nil
}

func (x *EventMessage) GetThreadStatus() *EventStatusThread {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfThreadStatus); ok {
			return x.ThreadStatus
		}
	}
	return nil
}

func (x *EventMessage) GetFileLimitReached() *EventFileLimitReached {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfFileLimitReached); ok {
			return x.FileLimitReached
		}
	}
	return nil
}

func (x *EventMessage) GetFileSpaceUsage() *EventFileSpaceUsage {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfFileSpaceUsage); ok {
			return x.FileSpaceUsage
		}
	}
	return nil
}

func (x *EventMessage) GetFileLocalUsage() *EventFileLocalUsage {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfFileLocalUsage); ok {
			return x.FileLocalUsage
		}
	}
	return nil
}

func (x *EventMessage) GetFileLimitUpdated() *EventFileLimitUpdated {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfFileLimitUpdated); ok {
			return x.FileLimitUpdated
		}
	}
	return nil
}

func (x *EventMessage) GetNotificationSend() *EventNotificationSend {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfNotificationSend); ok {
			return x.NotificationSend
		}
	}
	return nil
}

func (x *EventMessage) GetNotificationUpdate() *EventNotificationUpdate {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfNotificationUpdate); ok {
			return x.NotificationUpdate
		}
	}
	return nil
}

func (x *EventMessage) GetPayloadBroadcast() *EventPayloadBroadcast {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfPayloadBroadcast); ok {
			return x.PayloadBroadcast
		}
	}
	return nil
}

func (x *EventMessage) GetMembershipUpdate() *EventMembershipUpdate {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfMembershipUpdate); ok {
			return x.MembershipUpdate
		}
	}
	return nil
}

func (x *EventMessage) GetSpaceSyncStatusUpdate() *EventSpaceSyncStatusUpdate {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfSpaceSyncStatusUpdate); ok {
			return x.SpaceSyncStatusUpdate
		}
	}
	return nil
}

func (x *EventMessage) GetP2PStatusUpdate() *EventP2PStatusUpdate {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfP2PStatusUpdate); ok {
			return x.P2PStatusUpdate
		}
	}
	return nil
}

func (x *EventMessage) GetImportFinish() *EventImportFinish {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfImportFinish); ok {
			return x.ImportFinish
		}
	}
	return nil
}

func (x *EventMessage) GetChatAdd() *EventChatAdd {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfChatAdd); ok {
			return x.ChatAdd
		}
	}
	return nil
}

func (x *EventMessage) GetChatUpdate() *EventChatUpdate {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfChatUpdate); ok {
			return x.ChatUpdate
		}
	}
	return nil
}

func (x *EventMessage) GetChatUpdateReactions() *EventChatUpdateReactions {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfChatUpdateReactions); ok {
			return x.ChatUpdateReactions
		}
	}
	return nil
}

func (x *EventMessage) GetChatUpdateReadStatus() *EventChatUpdateReadStatus {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfChatUpdateReadStatus); ok {
			return x.ChatUpdateReadStatus
		}
	}
	return nil
}

func (x *EventMessage) GetChatDelete() *EventChatDelete {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfChatDelete); ok {
			return x.ChatDelete
		}
	}
	return nil
}

func (x *EventMessage) GetChatStateUpdate() *EventChatUpdateState {
	if x != nil {
		if x, ok := x.Value.(*EventMessageValueOfChatStateUpdate); ok {
			return x.ChatStateUpdate
		}
	}
	return nil
}

type IsEventMessageValue interface {
	IsEventMessageValue()
}

type EventMessageValueOfAccountShow struct {
	AccountShow *EventAccountShow `protobuf:"bytes,1,opt,name=accountShow,proto3,oneof" json:"accountShow,omitempty"`
}

type EventMessageValueOfAccountDetails struct {
	AccountDetails *EventAccountDetails `protobuf:"bytes,201,opt,name=accountDetails,proto3,oneof" json:"accountDetails,omitempty"`
}

type EventMessageValueOfAccountConfigUpdate struct {
	AccountConfigUpdate *EventAccountConfigUpdate `protobuf:"bytes,202,opt,name=accountConfigUpdate,proto3,oneof" json:"accountConfigUpdate,omitempty"`
}

type EventMessageValueOfAccountUpdate struct {
	AccountUpdate *EventAccountUpdate `protobuf:"bytes,203,opt,name=accountUpdate,proto3,oneof" json:"accountUpdate,omitempty"`
}

type EventMessageValueOfAccountLinkChallenge struct {
	AccountLinkChallenge *EventAccountLinkChallenge `protobuf:"bytes,204,opt,name=accountLinkChallenge,proto3,oneof" json:"accountLinkChallenge,omitempty"`
}

type EventMessageValueOfAccountLinkChallengeHide struct {
	AccountLinkChallengeHide *EventAccountLinkChallengeHide `protobuf:"bytes,205,opt,name=accountLinkChallengeHide,proto3,oneof" json:"accountLinkChallengeHide,omitempty"`
}

type EventMessageValueOfObjectDetailsSet struct {
	ObjectDetailsSet *EventObjectDetailsSet `protobuf:"bytes,16,opt,name=objectDetailsSet,proto3,oneof" json:"objectDetailsSet,omitempty"`
}

type EventMessageValueOfObjectDetailsAmend struct {
	ObjectDetailsAmend *EventObjectDetailsAmend `protobuf:"bytes,50,opt,name=objectDetailsAmend,proto3,oneof" json:"objectDetailsAmend,omitempty"`
}

type EventMessageValueOfObjectDetailsUnset struct {
	ObjectDetailsUnset *EventObjectDetailsUnset `protobuf:"bytes,51,opt,name=objectDetailsUnset,proto3,oneof" json:"objectDetailsUnset,omitempty"`
}

type EventMessageValueOfObjectRelationsAmend struct {
	ObjectRelationsAmend *EventObjectRelationsAmend `protobuf:"bytes,52,opt,name=objectRelationsAmend,proto3,oneof" json:"objectRelationsAmend,omitempty"`
}

type EventMessageValueOfObjectRelationsRemove struct {
	ObjectRelationsRemove *EventObjectRelationsRemove `protobuf:"bytes,53,opt,name=objectRelationsRemove,proto3,oneof" json:"objectRelationsRemove,omitempty"`
}

type EventMessageValueOfObjectRemove struct {
	ObjectRemove *EventObjectRemove `protobuf:"bytes,54,opt,name=objectRemove,proto3,oneof" json:"objectRemove,omitempty"`
}

type EventMessageValueOfObjectClose struct {
	ObjectClose *EventObjectClose `protobuf:"bytes,65,opt,name=objectClose,proto3,oneof" json:"objectClose,omitempty"`
}

type EventMessageValueOfObjectRestrictionsSet struct {
	ObjectRestrictionsSet *EventObjectRestrictionsSet `protobuf:"bytes,55,opt,name=objectRestrictionsSet,proto3,oneof" json:"objectRestrictionsSet,omitempty"`
}

type EventMessageValueOfSubscriptionAdd struct {
	SubscriptionAdd *EventObjectSubscriptionAdd `protobuf:"bytes,60,opt,name=subscriptionAdd,proto3,oneof" json:"subscriptionAdd,omitempty"`
}

type EventMessageValueOfSubscriptionRemove struct {
	SubscriptionRemove *EventObjectSubscriptionRemove `protobuf:"bytes,61,opt,name=subscriptionRemove,proto3,oneof" json:"subscriptionRemove,omitempty"`
}

type EventMessageValueOfSubscriptionPosition struct {
	SubscriptionPosition *EventObjectSubscriptionPosition `protobuf:"bytes,62,opt,name=subscriptionPosition,proto3,oneof" json:"subscriptionPosition,omitempty"`
}

type EventMessageValueOfSubscriptionCounters struct {
	SubscriptionCounters *EventObjectSubscriptionCounters `protobuf:"bytes,63,opt,name=subscriptionCounters,proto3,oneof" json:"subscriptionCounters,omitempty"`
}

type EventMessageValueOfSubscriptionGroups struct {
	SubscriptionGroups *EventObjectSubscriptionGroups `protobuf:"bytes,64,opt,name=subscriptionGroups,proto3,oneof" json:"subscriptionGroups,omitempty"`
}

type EventMessageValueOfBlockAdd struct {
	BlockAdd *EventBlockAdd `protobuf:"bytes,2,opt,name=blockAdd,proto3,oneof" json:"blockAdd,omitempty"`
}

type EventMessageValueOfBlockDelete struct {
	BlockDelete *EventBlockDelete `protobuf:"bytes,3,opt,name=blockDelete,proto3,oneof" json:"blockDelete,omitempty"`
}

type EventMessageValueOfFilesUpload struct {
	FilesUpload *EventBlockFilesUpload `protobuf:"bytes,4,opt,name=filesUpload,proto3,oneof" json:"filesUpload,omitempty"`
}

type EventMessageValueOfMarksInfo struct {
	MarksInfo *EventBlockMarksInfo `protobuf:"bytes,5,opt,name=marksInfo,proto3,oneof" json:"marksInfo,omitempty"`
}

type EventMessageValueOfBlockSetFields struct {
	BlockSetFields *EventBlockSetFields `protobuf:"bytes,6,opt,name=blockSetFields,proto3,oneof" json:"blockSetFields,omitempty"`
}

type EventMessageValueOfBlockSetChildrenIds struct {
	BlockSetChildrenIds *EventBlockSetChildrenIds `protobuf:"bytes,7,opt,name=blockSetChildrenIds,proto3,oneof" json:"blockSetChildrenIds,omitempty"`
}

type EventMessageValueOfBlockSetRestrictions struct {
	BlockSetRestrictions *EventBlockSetRestrictions `protobuf:"bytes,8,opt,name=blockSetRestrictions,proto3,oneof" json:"blockSetRestrictions,omitempty"`
}

type EventMessageValueOfBlockSetBackgroundColor struct {
	BlockSetBackgroundColor *EventBlockSetBackgroundColor `protobuf:"bytes,9,opt,name=blockSetBackgroundColor,proto3,oneof" json:"blockSetBackgroundColor,omitempty"`
}

type EventMessageValueOfBlockSetText struct {
	BlockSetText *EventBlockSetText `protobuf:"bytes,10,opt,name=blockSetText,proto3,oneof" json:"blockSetText,omitempty"`
}

type EventMessageValueOfBlockSetFile struct {
	BlockSetFile *EventBlockSetFile `protobuf:"bytes,11,opt,name=blockSetFile,proto3,oneof" json:"blockSetFile,omitempty"`
}

type EventMessageValueOfBlockSetLink struct {
	BlockSetLink *EventBlockSetLink `protobuf:"bytes,13,opt,name=blockSetLink,proto3,oneof" json:"blockSetLink,omitempty"`
}

type EventMessageValueOfBlockSetBookmark struct {
	BlockSetBookmark *EventBlockSetBookmark `protobuf:"bytes,14,opt,name=blockSetBookmark,proto3,oneof" json:"blockSetBookmark,omitempty"`
}

type EventMessageValueOfBlockSetAlign struct {
	BlockSetAlign *EventBlockSetAlign `protobuf:"bytes,15,opt,name=blockSetAlign,proto3,oneof" json:"blockSetAlign,omitempty"`
}

type EventMessageValueOfBlockSetDiv struct {
	BlockSetDiv *EventBlockSetDiv `protobuf:"bytes,17,opt,name=blockSetDiv,proto3,oneof" json:"blockSetDiv,omitempty"`
}

type EventMessageValueOfBlockSetRelation struct {
	BlockSetRelation *EventBlockSetRelation `protobuf:"bytes,21,opt,name=blockSetRelation,proto3,oneof" json:"blockSetRelation,omitempty"`
}

type EventMessageValueOfBlockSetLatex struct {
	BlockSetLatex *EventBlockSetLatex `protobuf:"bytes,25,opt,name=blockSetLatex,proto3,oneof" json:"blockSetLatex,omitempty"`
}

type EventMessageValueOfBlockSetVerticalAlign struct {
	BlockSetVerticalAlign *EventBlockSetVerticalAlign `protobuf:"bytes,36,opt,name=blockSetVerticalAlign,proto3,oneof" json:"blockSetVerticalAlign,omitempty"`
}

type EventMessageValueOfBlockSetTableRow struct {
	BlockSetTableRow *EventBlockSetTableRow `protobuf:"bytes,37,opt,name=blockSetTableRow,proto3,oneof" json:"blockSetTableRow,omitempty"`
}

type EventMessageValueOfBlockSetWidget struct {
	BlockSetWidget *EventBlockSetWidget `protobuf:"bytes,40,opt,name=blockSetWidget,proto3,oneof" json:"blockSetWidget,omitempty"`
}

type EventMessageValueOfBlockDataviewViewSet struct {
	BlockDataviewViewSet *EventBlockDataviewViewSet `protobuf:"bytes,19,opt,name=blockDataviewViewSet,proto3,oneof" json:"blockDataviewViewSet,omitempty"`
}

type EventMessageValueOfBlockDataviewViewDelete struct {
	BlockDataviewViewDelete *EventBlockDataviewViewDelete `protobuf:"bytes,20,opt,name=blockDataviewViewDelete,proto3,oneof" json:"blockDataviewViewDelete,omitempty"`
}

type EventMessageValueOfBlockDataviewViewOrder struct {
	BlockDataviewViewOrder *EventBlockDataviewViewOrder `protobuf:"bytes,29,opt,name=blockDataviewViewOrder,proto3,oneof" json:"blockDataviewViewOrder,omitempty"`
}

type EventMessageValueOfBlockDataviewSourceSet struct {
	BlockDataviewSourceSet *EventBlockDataviewSourceSet `protobuf:"bytes,35,opt,name=blockDataviewSourceSet,proto3,oneof" json:"blockDataviewSourceSet,omitempty"` // deprecated, source is no longer used
}

type EventMessageValueOfBlockDataViewGroupOrderUpdate struct {
	BlockDataViewGroupOrderUpdate *EventBlockDataviewGroupOrderUpdate `protobuf:"bytes,38,opt,name=blockDataViewGroupOrderUpdate,proto3,oneof" json:"blockDataViewGroupOrderUpdate,omitempty"`
}

type EventMessageValueOfBlockDataViewObjectOrderUpdate struct {
	BlockDataViewObjectOrderUpdate *EventBlockDataviewObjectOrderUpdate `protobuf:"bytes,39,opt,name=blockDataViewObjectOrderUpdate,proto3,oneof" json:"blockDataViewObjectOrderUpdate,omitempty"`
}

type EventMessageValueOfBlockDataviewRelationDelete struct {
	BlockDataviewRelationDelete *EventBlockDataviewRelationDelete `protobuf:"bytes,124,opt,name=blockDataviewRelationDelete,proto3,oneof" json:"blockDataviewRelationDelete,omitempty"`
}

type EventMessageValueOfBlockDataviewRelationSet struct {
	BlockDataviewRelationSet *EventBlockDataviewRelationSet `protobuf:"bytes,123,opt,name=blockDataviewRelationSet,proto3,oneof" json:"blockDataviewRelationSet,omitempty"`
}

type EventMessageValueOfBlockDataviewViewUpdate struct {
	BlockDataviewViewUpdate *EventBlockDataviewViewUpdate `protobuf:"bytes,125,opt,name=blockDataviewViewUpdate,proto3,oneof" json:"blockDataviewViewUpdate,omitempty"`
}

type EventMessageValueOfBlockDataviewTargetObjectIdSet struct {
	BlockDataviewTargetObjectIdSet *EventBlockDataviewTargetObjectIdSet `protobuf:"bytes,126,opt,name=blockDataviewTargetObjectIdSet,proto3,oneof" json:"blockDataviewTargetObjectIdSet,omitempty"`
}

type EventMessageValueOfBlockDataviewIsCollectionSet struct {
	BlockDataviewIsCollectionSet *EventBlockDataviewIsCollectionSet `protobuf:"bytes,127,opt,name=blockDataviewIsCollectionSet,proto3,oneof" json:"blockDataviewIsCollectionSet,omitempty"`
}

type EventMessageValueOfBlockDataviewOldRelationDelete struct {
	// deprecated
	BlockDataviewOldRelationDelete *EventBlockDataviewOldRelationDelete `protobuf:"bytes,24,opt,name=blockDataviewOldRelationDelete,proto3,oneof" json:"blockDataviewOldRelationDelete,omitempty"`
}

type EventMessageValueOfBlockDataviewOldRelationSet struct {
	// deprecated
	BlockDataviewOldRelationSet *EventBlockDataviewOldRelationSet `protobuf:"bytes,23,opt,name=blockDataviewOldRelationSet,proto3,oneof" json:"blockDataviewOldRelationSet,omitempty"`
}

type EventMessageValueOfUserBlockJoin struct {
	UserBlockJoin *EventUserBlockJoin `protobuf:"bytes,31,opt,name=userBlockJoin,proto3,oneof" json:"userBlockJoin,omitempty"`
}

type EventMessageValueOfUserBlockLeft struct {
	UserBlockLeft *EventUserBlockLeft `protobuf:"bytes,32,opt,name=userBlockLeft,proto3,oneof" json:"userBlockLeft,omitempty"`
}

type EventMessageValueOfUserBlockSelectRange struct {
	UserBlockSelectRange *EventUserBlockSelectRange `protobuf:"bytes,33,opt,name=userBlockSelectRange,proto3,oneof" json:"userBlockSelectRange,omitempty"`
}

type EventMessageValueOfUserBlockTextRange struct {
	UserBlockTextRange *EventUserBlockTextRange `protobuf:"bytes,34,opt,name=userBlockTextRange,proto3,oneof" json:"userBlockTextRange,omitempty"`
}

type EventMessageValueOfPing struct {
	Ping *EventPing `protobuf:"bytes,100,opt,name=ping,proto3,oneof" json:"ping,omitempty"`
}

type EventMessageValueOfProcessNew struct {
	ProcessNew *EventProcessNew `protobuf:"bytes,101,opt,name=processNew,proto3,oneof" json:"processNew,omitempty"`
}

type EventMessageValueOfProcessUpdate struct {
	ProcessUpdate *EventProcessUpdate `protobuf:"bytes,102,opt,name=processUpdate,proto3,oneof" json:"processUpdate,omitempty"`
}

type EventMessageValueOfProcessDone struct {
	ProcessDone *EventProcessDone `protobuf:"bytes,103,opt,name=processDone,proto3,oneof" json:"processDone,omitempty"`
}

type EventMessageValueOfThreadStatus struct {
	ThreadStatus *EventStatusThread `protobuf:"bytes,110,opt,name=threadStatus,proto3,oneof" json:"threadStatus,omitempty"`
}

type EventMessageValueOfFileLimitReached struct {
	FileLimitReached *EventFileLimitReached `protobuf:"bytes,111,opt,name=fileLimitReached,proto3,oneof" json:"fileLimitReached,omitempty"`
}

type EventMessageValueOfFileSpaceUsage struct {
	FileSpaceUsage *EventFileSpaceUsage `protobuf:"bytes,112,opt,name=fileSpaceUsage,proto3,oneof" json:"fileSpaceUsage,omitempty"`
}

type EventMessageValueOfFileLocalUsage struct {
	FileLocalUsage *EventFileLocalUsage `protobuf:"bytes,113,opt,name=fileLocalUsage,proto3,oneof" json:"fileLocalUsage,omitempty"`
}

type EventMessageValueOfFileLimitUpdated struct {
	FileLimitUpdated *EventFileLimitUpdated `protobuf:"bytes,118,opt,name=fileLimitUpdated,proto3,oneof" json:"fileLimitUpdated,omitempty"`
}

type EventMessageValueOfNotificationSend struct {
	NotificationSend *EventNotificationSend `protobuf:"bytes,114,opt,name=notificationSend,proto3,oneof" json:"notificationSend,omitempty"`
}

type EventMessageValueOfNotificationUpdate struct {
	NotificationUpdate *EventNotificationUpdate `protobuf:"bytes,115,opt,name=notificationUpdate,proto3,oneof" json:"notificationUpdate,omitempty"`
}

type EventMessageValueOfPayloadBroadcast struct {
	PayloadBroadcast *EventPayloadBroadcast `protobuf:"bytes,116,opt,name=payloadBroadcast,proto3,oneof" json:"payloadBroadcast,omitempty"`
}

type EventMessageValueOfMembershipUpdate struct {
	MembershipUpdate *EventMembershipUpdate `protobuf:"bytes,117,opt,name=membershipUpdate,proto3,oneof" json:"membershipUpdate,omitempty"`
}

type EventMessageValueOfSpaceSyncStatusUpdate struct {
	SpaceSyncStatusUpdate *EventSpaceSyncStatusUpdate `protobuf:"bytes,119,opt,name=spaceSyncStatusUpdate,proto3,oneof" json:"spaceSyncStatusUpdate,omitempty"`
}

type EventMessageValueOfP2PStatusUpdate struct {
	P2PStatusUpdate *EventP2PStatusUpdate `protobuf:"bytes,120,opt,name=p2pStatusUpdate,proto3,oneof" json:"p2pStatusUpdate,omitempty"`
}

type EventMessageValueOfImportFinish struct {
	ImportFinish *EventImportFinish `protobuf:"bytes,121,opt,name=importFinish,proto3,oneof" json:"importFinish,omitempty"`
}

type EventMessageValueOfChatAdd struct {
	ChatAdd *EventChatAdd `protobuf:"bytes,128,opt,name=chatAdd,proto3,oneof" json:"chatAdd,omitempty"`
}

type EventMessageValueOfChatUpdate struct {
	ChatUpdate *EventChatUpdate `protobuf:"bytes,129,opt,name=chatUpdate,proto3,oneof" json:"chatUpdate,omitempty"`
}

type EventMessageValueOfChatUpdateReactions struct {
	ChatUpdateReactions *EventChatUpdateReactions `protobuf:"bytes,130,opt,name=chatUpdateReactions,proto3,oneof" json:"chatUpdateReactions,omitempty"`
}

type EventMessageValueOfChatUpdateReadStatus struct {
	ChatUpdateReadStatus *EventChatUpdateReadStatus `protobuf:"bytes,134,opt,name=chatUpdateReadStatus,proto3,oneof" json:"chatUpdateReadStatus,omitempty"` // received to update per-message read status (if needed to highlight the unread messages in the UI)
}

type EventMessageValueOfChatDelete struct {
	ChatDelete *EventChatDelete `protobuf:"bytes,131,opt,name=chatDelete,proto3,oneof" json:"chatDelete,omitempty"`
}

type EventMessageValueOfChatStateUpdate struct {
	ChatStateUpdate *EventChatUpdateState `protobuf:"bytes,133,opt,name=chatStateUpdate,proto3,oneof" json:"chatStateUpdate,omitempty"` // in case new unread messages received or chat state changed (e.g. message read on another device)
}

func (*EventMessageValueOfAccountShow) IsEventMessageValue() {}

func (*EventMessageValueOfAccountDetails) IsEventMessageValue() {}

func (*EventMessageValueOfAccountConfigUpdate) IsEventMessageValue() {}

func (*EventMessageValueOfAccountUpdate) IsEventMessageValue() {}

func (*EventMessageValueOfAccountLinkChallenge) IsEventMessageValue() {}

func (*EventMessageValueOfAccountLinkChallengeHide) IsEventMessageValue() {}

func (*EventMessageValueOfObjectDetailsSet) IsEventMessageValue() {}

func (*EventMessageValueOfObjectDetailsAmend) IsEventMessageValue() {}

func (*EventMessageValueOfObjectDetailsUnset) IsEventMessageValue() {}

func (*EventMessageValueOfObjectRelationsAmend) IsEventMessageValue() {}

func (*EventMessageValueOfObjectRelationsRemove) IsEventMessageValue() {}

func (*EventMessageValueOfObjectRemove) IsEventMessageValue() {}

func (*EventMessageValueOfObjectClose) IsEventMessageValue() {}

func (*EventMessageValueOfObjectRestrictionsSet) IsEventMessageValue() {}

func (*EventMessageValueOfSubscriptionAdd) IsEventMessageValue() {}

func (*EventMessageValueOfSubscriptionRemove) IsEventMessageValue() {}

func (*EventMessageValueOfSubscriptionPosition) IsEventMessageValue() {}

func (*EventMessageValueOfSubscriptionCounters) IsEventMessageValue() {}

func (*EventMessageValueOfSubscriptionGroups) IsEventMessageValue() {}

func (*EventMessageValueOfBlockAdd) IsEventMessageValue() {}

func (*EventMessageValueOfBlockDelete) IsEventMessageValue() {}

func (*EventMessageValueOfFilesUpload) IsEventMessageValue() {}

func (*EventMessageValueOfMarksInfo) IsEventMessageValue() {}

func (*EventMessageValueOfBlockSetFields) IsEventMessageValue() {}

func (*EventMessageValueOfBlockSetChildrenIds) IsEventMessageValue() {}

func (*EventMessageValueOfBlockSetRestrictions) IsEventMessageValue() {}

func (*EventMessageValueOfBlockSetBackgroundColor) IsEventMessageValue() {}

func (*EventMessageValueOfBlockSetText) IsEventMessageValue() {}

func (*EventMessageValueOfBlockSetFile) IsEventMessageValue() {}

func (*EventMessageValueOfBlockSetLink) IsEventMessageValue() {}

func (*EventMessageValueOfBlockSetBookmark) IsEventMessageValue() {}

func (*EventMessageValueOfBlockSetAlign) IsEventMessageValue() {}

func (*EventMessageValueOfBlockSetDiv) IsEventMessageValue() {}

func (*EventMessageValueOfBlockSetRelation) IsEventMessageValue() {}

func (*EventMessageValueOfBlockSetLatex) IsEventMessageValue() {}

func (*EventMessageValueOfBlockSetVerticalAlign) IsEventMessageValue() {}

func (*EventMessageValueOfBlockSetTableRow) IsEventMessageValue() {}

func (*EventMessageValueOfBlockSetWidget) IsEventMessageValue() {}

func (*EventMessageValueOfBlockDataviewViewSet) IsEventMessageValue() {}

func (*EventMessageValueOfBlockDataviewViewDelete) IsEventMessageValue() {}

func (*EventMessageValueOfBlockDataviewViewOrder) IsEventMessageValue() {}

func (*EventMessageValueOfBlockDataviewSourceSet) IsEventMessageValue() {}

func (*EventMessageValueOfBlockDataViewGroupOrderUpdate) IsEventMessageValue() {}

func (*EventMessageValueOfBlockDataViewObjectOrderUpdate) IsEventMessageValue() {}

func (*EventMessageValueOfBlockDataviewRelationDelete) IsEventMessageValue() {}

func (*EventMessageValueOfBlockDataviewRelationSet) IsEventMessageValue() {}

func (*EventMessageValueOfBlockDataviewViewUpdate) IsEventMessageValue() {}

func (*EventMessageValueOfBlockDataviewTargetObjectIdSet) IsEventMessageValue() {}

func (*EventMessageValueOfBlockDataviewIsCollectionSet) IsEventMessageValue() {}

func (*EventMessageValueOfBlockDataviewOldRelationDelete) IsEventMessageValue() {}

func (*EventMessageValueOfBlockDataviewOldRelationSet) IsEventMessageValue() {}

func (*EventMessageValueOfUserBlockJoin) IsEventMessageValue() {}

func (*EventMessageValueOfUserBlockLeft) IsEventMessageValue() {}

func (*EventMessageValueOfUserBlockSelectRange) IsEventMessageValue() {}

func (*EventMessageValueOfUserBlockTextRange) IsEventMessageValue() {}

func (*EventMessageValueOfPing) IsEventMessageValue() {}

func (*EventMessageValueOfProcessNew) IsEventMessageValue() {}

func (*EventMessageValueOfProcessUpdate) IsEventMessageValue() {}

func (*EventMessageValueOfProcessDone) IsEventMessageValue() {}

func (*EventMessageValueOfThreadStatus) IsEventMessageValue() {}

func (*EventMessageValueOfFileLimitReached) IsEventMessageValue() {}

func (*EventMessageValueOfFileSpaceUsage) IsEventMessageValue() {}

func (*EventMessageValueOfFileLocalUsage) IsEventMessageValue() {}

func (*EventMessageValueOfFileLimitUpdated) IsEventMessageValue() {}

func (*EventMessageValueOfNotificationSend) IsEventMessageValue() {}

func (*EventMessageValueOfNotificationUpdate) IsEventMessageValue() {}

func (*EventMessageValueOfPayloadBroadcast) IsEventMessageValue() {}

func (*EventMessageValueOfMembershipUpdate) IsEventMessageValue() {}

func (*EventMessageValueOfSpaceSyncStatusUpdate) IsEventMessageValue() {}

func (*EventMessageValueOfP2PStatusUpdate) IsEventMessageValue() {}

func (*EventMessageValueOfImportFinish) IsEventMessageValue() {}

func (*EventMessageValueOfChatAdd) IsEventMessageValue() {}

func (*EventMessageValueOfChatUpdate) IsEventMessageValue() {}

func (*EventMessageValueOfChatUpdateReactions) IsEventMessageValue() {}

func (*EventMessageValueOfChatUpdateReadStatus) IsEventMessageValue() {}

func (*EventMessageValueOfChatDelete) IsEventMessageValue() {}

func (*EventMessageValueOfChatStateUpdate) IsEventMessageValue() {}

type EventChat struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventChat) Reset() {
	*x = EventChat{}
	mi := &file_pb_protos_events_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventChat) ProtoMessage() {}

func (x *EventChat) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventChat.ProtoReflect.Descriptor instead.
func (*EventChat) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 1}
}

type EventAccount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventAccount) Reset() {
	*x = EventAccount{}
	mi := &file_pb_protos_events_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAccount) ProtoMessage() {}

func (x *EventAccount) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAccount.ProtoReflect.Descriptor instead.
func (*EventAccount) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 2}
}

type EventObject struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventObject) Reset() {
	*x = EventObject{}
	mi := &file_pb_protos_events_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventObject) ProtoMessage() {}

func (x *EventObject) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventObject.ProtoReflect.Descriptor instead.
func (*EventObject) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 3}
}

type EventBlock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlock) Reset() {
	*x = EventBlock{}
	mi := &file_pb_protos_events_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlock) ProtoMessage() {}

func (x *EventBlock) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlock.ProtoReflect.Descriptor instead.
func (*EventBlock) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4}
}

type EventUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventUser) Reset() {
	*x = EventUser{}
	mi := &file_pb_protos_events_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventUser) ProtoMessage() {}

func (x *EventUser) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventUser.ProtoReflect.Descriptor instead.
func (*EventUser) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 5}
}

type EventPing struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         int32                  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventPing) Reset() {
	*x = EventPing{}
	mi := &file_pb_protos_events_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventPing) ProtoMessage() {}

func (x *EventPing) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventPing.ProtoReflect.Descriptor instead.
func (*EventPing) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 6}
}

func (x *EventPing) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type EventProcess struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventProcess) Reset() {
	*x = EventProcess{}
	mi := &file_pb_protos_events_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventProcess) ProtoMessage() {}

func (x *EventProcess) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventProcess.ProtoReflect.Descriptor instead.
func (*EventProcess) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 7}
}

type EventStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventStatus) Reset() {
	*x = EventStatus{}
	mi := &file_pb_protos_events_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStatus) ProtoMessage() {}

func (x *EventStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStatus.ProtoReflect.Descriptor instead.
func (*EventStatus) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 8}
}

type EventFile struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventFile) Reset() {
	*x = EventFile{}
	mi := &file_pb_protos_events_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventFile) ProtoMessage() {}

func (x *EventFile) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventFile.ProtoReflect.Descriptor instead.
func (*EventFile) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 9}
}

type EventMembership struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventMembership) Reset() {
	*x = EventMembership{}
	mi := &file_pb_protos_events_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventMembership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMembership) ProtoMessage() {}

func (x *EventMembership) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMembership.ProtoReflect.Descriptor instead.
func (*EventMembership) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 10}
}

type EventNotification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventNotification) Reset() {
	*x = EventNotification{}
	mi := &file_pb_protos_events_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventNotification) ProtoMessage() {}

func (x *EventNotification) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventNotification.ProtoReflect.Descriptor instead.
func (*EventNotification) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 11}
}

type EventPayload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventPayload) Reset() {
	*x = EventPayload{}
	mi := &file_pb_protos_events_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventPayload) ProtoMessage() {}

func (x *EventPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventPayload.ProtoReflect.Descriptor instead.
func (*EventPayload) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 12}
}

type EventSpace struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventSpace) Reset() {
	*x = EventSpace{}
	mi := &file_pb_protos_events_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSpace) ProtoMessage() {}

func (x *EventSpace) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSpace.ProtoReflect.Descriptor instead.
func (*EventSpace) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 13}
}

type EventP2PStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventP2PStatus) Reset() {
	*x = EventP2PStatus{}
	mi := &file_pb_protos_events_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventP2PStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventP2PStatus) ProtoMessage() {}

func (x *EventP2PStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventP2PStatus.ProtoReflect.Descriptor instead.
func (*EventP2PStatus) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 14}
}

type EventImport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventImport) Reset() {
	*x = EventImport{}
	mi := &file_pb_protos_events_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventImport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventImport) ProtoMessage() {}

func (x *EventImport) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventImport.ProtoReflect.Descriptor instead.
func (*EventImport) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 15}
}

type EventChatAdd struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrderId       string                 `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
	AfterOrderId  string                 `protobuf:"bytes,6,opt,name=afterOrderId,proto3" json:"afterOrderId,omitempty"`
	Message       *model.ChatMessage     `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	SubIds        []string               `protobuf:"bytes,4,rep,name=subIds,proto3" json:"subIds,omitempty"`
	Dependencies  []*structpb.Struct     `protobuf:"bytes,5,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventChatAdd) Reset() {
	*x = EventChatAdd{}
	mi := &file_pb_protos_events_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventChatAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventChatAdd) ProtoMessage() {}

func (x *EventChatAdd) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventChatAdd.ProtoReflect.Descriptor instead.
func (*EventChatAdd) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *EventChatAdd) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventChatAdd) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *EventChatAdd) GetAfterOrderId() string {
	if x != nil {
		return x.AfterOrderId
	}
	return ""
}

func (x *EventChatAdd) GetMessage() *model.ChatMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *EventChatAdd) GetSubIds() []string {
	if x != nil {
		return x.SubIds
	}
	return nil
}

func (x *EventChatAdd) GetDependencies() []*structpb.Struct {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

type EventChatDelete struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SubIds        []string               `protobuf:"bytes,2,rep,name=subIds,proto3" json:"subIds,omitempty"`
	State         *model.ChatState       `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"` // Chat state. dbState should be persisted after rendered
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventChatDelete) Reset() {
	*x = EventChatDelete{}
	mi := &file_pb_protos_events_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventChatDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventChatDelete) ProtoMessage() {}

func (x *EventChatDelete) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventChatDelete.ProtoReflect.Descriptor instead.
func (*EventChatDelete) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *EventChatDelete) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventChatDelete) GetSubIds() []string {
	if x != nil {
		return x.SubIds
	}
	return nil
}

func (x *EventChatDelete) GetState() *model.ChatState {
	if x != nil {
		return x.State
	}
	return nil
}

type EventChatUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message       *model.ChatMessage     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	SubIds        []string               `protobuf:"bytes,3,rep,name=subIds,proto3" json:"subIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventChatUpdate) Reset() {
	*x = EventChatUpdate{}
	mi := &file_pb_protos_events_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventChatUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventChatUpdate) ProtoMessage() {}

func (x *EventChatUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventChatUpdate.ProtoReflect.Descriptor instead.
func (*EventChatUpdate) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 1, 2}
}

func (x *EventChatUpdate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventChatUpdate) GetMessage() *model.ChatMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *EventChatUpdate) GetSubIds() []string {
	if x != nil {
		return x.SubIds
	}
	return nil
}

type EventChatUpdateReactions struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Id            string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Reactions     *model.ChatMessageReactions `protobuf:"bytes,2,opt,name=reactions,proto3" json:"reactions,omitempty"`
	SubIds        []string                    `protobuf:"bytes,3,rep,name=subIds,proto3" json:"subIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventChatUpdateReactions) Reset() {
	*x = EventChatUpdateReactions{}
	mi := &file_pb_protos_events_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventChatUpdateReactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventChatUpdateReactions) ProtoMessage() {}

func (x *EventChatUpdateReactions) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventChatUpdateReactions.ProtoReflect.Descriptor instead.
func (*EventChatUpdateReactions) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 1, 3}
}

func (x *EventChatUpdateReactions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventChatUpdateReactions) GetReactions() *model.ChatMessageReactions {
	if x != nil {
		return x.Reactions
	}
	return nil
}

func (x *EventChatUpdateReactions) GetSubIds() []string {
	if x != nil {
		return x.SubIds
	}
	return nil
}

type EventChatUpdateReadStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []string               `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	IsRead        bool                   `protobuf:"varint,2,opt,name=isRead,proto3" json:"isRead,omitempty"`
	SubIds        []string               `protobuf:"bytes,3,rep,name=subIds,proto3" json:"subIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventChatUpdateReadStatus) Reset() {
	*x = EventChatUpdateReadStatus{}
	mi := &file_pb_protos_events_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventChatUpdateReadStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventChatUpdateReadStatus) ProtoMessage() {}

func (x *EventChatUpdateReadStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventChatUpdateReadStatus.ProtoReflect.Descriptor instead.
func (*EventChatUpdateReadStatus) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 1, 4}
}

func (x *EventChatUpdateReadStatus) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *EventChatUpdateReadStatus) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

func (x *EventChatUpdateReadStatus) GetSubIds() []string {
	if x != nil {
		return x.SubIds
	}
	return nil
}

type EventChatUpdateState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         *model.ChatState       `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	SubIds        []string               `protobuf:"bytes,2,rep,name=subIds,proto3" json:"subIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventChatUpdateState) Reset() {
	*x = EventChatUpdateState{}
	mi := &file_pb_protos_events_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventChatUpdateState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventChatUpdateState) ProtoMessage() {}

func (x *EventChatUpdateState) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventChatUpdateState.ProtoReflect.Descriptor instead.
func (*EventChatUpdateState) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 1, 5}
}

func (x *EventChatUpdateState) GetState() *model.ChatState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *EventChatUpdateState) GetSubIds() []string {
	if x != nil {
		return x.SubIds
	}
	return nil
}

// *
// Message, that will be sent to the front on each account found after an AccountRecoverRequest
type EventAccountShow struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         int32                  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`    // Number of an account in an all found accounts list
	Account       *model.Account         `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"` // An Account, that has been found for the mnemonic
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventAccountShow) Reset() {
	*x = EventAccountShow{}
	mi := &file_pb_protos_events_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventAccountShow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAccountShow) ProtoMessage() {}

func (x *EventAccountShow) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAccountShow.ProtoReflect.Descriptor instead.
func (*EventAccountShow) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *EventAccountShow) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *EventAccountShow) GetAccount() *model.Account {
	if x != nil {
		return x.Account
	}
	return nil
}

type EventAccountDetails struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProfileId     string                 `protobuf:"bytes,1,opt,name=profileId,proto3" json:"profileId,omitempty"`
	Details       *structpb.Struct       `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventAccountDetails) Reset() {
	*x = EventAccountDetails{}
	mi := &file_pb_protos_events_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventAccountDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAccountDetails) ProtoMessage() {}

func (x *EventAccountDetails) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAccountDetails.ProtoReflect.Descriptor instead.
func (*EventAccountDetails) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *EventAccountDetails) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *EventAccountDetails) GetDetails() *structpb.Struct {
	if x != nil {
		return x.Details
	}
	return nil
}

type EventAccountConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventAccountConfig) Reset() {
	*x = EventAccountConfig{}
	mi := &file_pb_protos_events_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventAccountConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAccountConfig) ProtoMessage() {}

func (x *EventAccountConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAccountConfig.ProtoReflect.Descriptor instead.
func (*EventAccountConfig) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 2, 2}
}

type EventAccountUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *model.AccountConfig   `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	Status        *model.AccountStatus   `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventAccountUpdate) Reset() {
	*x = EventAccountUpdate{}
	mi := &file_pb_protos_events_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventAccountUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAccountUpdate) ProtoMessage() {}

func (x *EventAccountUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAccountUpdate.ProtoReflect.Descriptor instead.
func (*EventAccountUpdate) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 2, 3}
}

func (x *EventAccountUpdate) GetConfig() *model.AccountConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *EventAccountUpdate) GetStatus() *model.AccountStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type EventAccountLinkChallenge struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Challenge     string                               `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
	ClientInfo    *EventAccountLinkChallengeClientInfo `protobuf:"bytes,2,opt,name=clientInfo,proto3" json:"clientInfo,omitempty"`
	Scope         model.AccountAuthLocalApiScope       `protobuf:"varint,3,opt,name=scope,proto3,enum=anytype.model.AccountAuthLocalApiScope" json:"scope,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventAccountLinkChallenge) Reset() {
	*x = EventAccountLinkChallenge{}
	mi := &file_pb_protos_events_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventAccountLinkChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAccountLinkChallenge) ProtoMessage() {}

func (x *EventAccountLinkChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAccountLinkChallenge.ProtoReflect.Descriptor instead.
func (*EventAccountLinkChallenge) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 2, 4}
}

func (x *EventAccountLinkChallenge) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

func (x *EventAccountLinkChallenge) GetClientInfo() *EventAccountLinkChallengeClientInfo {
	if x != nil {
		return x.ClientInfo
	}
	return nil
}

func (x *EventAccountLinkChallenge) GetScope() model.AccountAuthLocalApiScope {
	if x != nil {
		return x.Scope
	}
	return model.AccountAuthLocalApiScope(0)
}

type EventAccountLinkChallengeHide struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Challenge     string                 `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"` // verify code before hiding to protect from MITM attacks
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventAccountLinkChallengeHide) Reset() {
	*x = EventAccountLinkChallengeHide{}
	mi := &file_pb_protos_events_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventAccountLinkChallengeHide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAccountLinkChallengeHide) ProtoMessage() {}

func (x *EventAccountLinkChallengeHide) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAccountLinkChallengeHide.ProtoReflect.Descriptor instead.
func (*EventAccountLinkChallengeHide) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 2, 5}
}

func (x *EventAccountLinkChallengeHide) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

type EventAccountConfigUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *model.AccountConfig   `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	Status        *model.AccountStatus   `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventAccountConfigUpdate) Reset() {
	*x = EventAccountConfigUpdate{}
	mi := &file_pb_protos_events_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventAccountConfigUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAccountConfigUpdate) ProtoMessage() {}

func (x *EventAccountConfigUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAccountConfigUpdate.ProtoReflect.Descriptor instead.
func (*EventAccountConfigUpdate) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 2, 2, 0}
}

func (x *EventAccountConfigUpdate) GetConfig() *model.AccountConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *EventAccountConfigUpdate) GetStatus() *model.AccountStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type EventAccountLinkChallengeClientInfo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ProcessName       string                 `protobuf:"bytes,1,opt,name=processName,proto3" json:"processName,omitempty"`
	ProcessPath       string                 `protobuf:"bytes,2,opt,name=processPath,proto3" json:"processPath,omitempty"`
	SignatureVerified bool                   `protobuf:"varint,3,opt,name=signatureVerified,proto3" json:"signatureVerified,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *EventAccountLinkChallengeClientInfo) Reset() {
	*x = EventAccountLinkChallengeClientInfo{}
	mi := &file_pb_protos_events_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventAccountLinkChallengeClientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAccountLinkChallengeClientInfo) ProtoMessage() {}

func (x *EventAccountLinkChallengeClientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAccountLinkChallengeClientInfo.ProtoReflect.Descriptor instead.
func (*EventAccountLinkChallengeClientInfo) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 2, 4, 0}
}

func (x *EventAccountLinkChallengeClientInfo) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *EventAccountLinkChallengeClientInfo) GetProcessPath() string {
	if x != nil {
		return x.ProcessPath
	}
	return ""
}

func (x *EventAccountLinkChallengeClientInfo) GetSignatureVerified() bool {
	if x != nil {
		return x.SignatureVerified
	}
	return false
}

type EventObjectDetails struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventObjectDetails) Reset() {
	*x = EventObjectDetails{}
	mi := &file_pb_protos_events_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventObjectDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventObjectDetails) ProtoMessage() {}

func (x *EventObjectDetails) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventObjectDetails.ProtoReflect.Descriptor instead.
func (*EventObjectDetails) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 3, 0}
}

type EventObjectSubscription struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventObjectSubscription) Reset() {
	*x = EventObjectSubscription{}
	mi := &file_pb_protos_events_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventObjectSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventObjectSubscription) ProtoMessage() {}

func (x *EventObjectSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventObjectSubscription.ProtoReflect.Descriptor instead.
func (*EventObjectSubscription) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 3, 1}
}

type EventObjectRelations struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventObjectRelations) Reset() {
	*x = EventObjectRelations{}
	mi := &file_pb_protos_events_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventObjectRelations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventObjectRelations) ProtoMessage() {}

func (x *EventObjectRelations) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventObjectRelations.ProtoReflect.Descriptor instead.
func (*EventObjectRelations) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 3, 2}
}

type EventObjectRemove struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// notifies that objects were removed
	Ids           []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventObjectRemove) Reset() {
	*x = EventObjectRemove{}
	mi := &file_pb_protos_events_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventObjectRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventObjectRemove) ProtoMessage() {}

func (x *EventObjectRemove) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventObjectRemove.ProtoReflect.Descriptor instead.
func (*EventObjectRemove) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 3, 3}
}

func (x *EventObjectRemove) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type EventObjectRestrictions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventObjectRestrictions) Reset() {
	*x = EventObjectRestrictions{}
	mi := &file_pb_protos_events_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventObjectRestrictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventObjectRestrictions) ProtoMessage() {}

func (x *EventObjectRestrictions) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventObjectRestrictions.ProtoReflect.Descriptor instead.
func (*EventObjectRestrictions) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 3, 4}
}

type EventObjectClose struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventObjectClose) Reset() {
	*x = EventObjectClose{}
	mi := &file_pb_protos_events_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventObjectClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventObjectClose) ProtoMessage() {}

func (x *EventObjectClose) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventObjectClose.ProtoReflect.Descriptor instead.
func (*EventObjectClose) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 3, 5}
}

func (x *EventObjectClose) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Amend (i.e. add a new key-value pair or update an existing key-value pair) existing state
type EventObjectDetailsAmend struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	Id            string                             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`           // context objectId
	Details       []*EventObjectDetailsAmendKeyValue `protobuf:"bytes,2,rep,name=details,proto3" json:"details,omitempty"` // slice of changed key-values
	SubIds        []string                           `protobuf:"bytes,3,rep,name=subIds,proto3" json:"subIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventObjectDetailsAmend) Reset() {
	*x = EventObjectDetailsAmend{}
	mi := &file_pb_protos_events_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventObjectDetailsAmend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventObjectDetailsAmend) ProtoMessage() {}

func (x *EventObjectDetailsAmend) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventObjectDetailsAmend.ProtoReflect.Descriptor instead.
func (*EventObjectDetailsAmend) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 3, 0, 0}
}

func (x *EventObjectDetailsAmend) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventObjectDetailsAmend) GetDetails() []*EventObjectDetailsAmendKeyValue {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *EventObjectDetailsAmend) GetSubIds() []string {
	if x != nil {
		return x.SubIds
	}
	return nil
}

// Overwrite current state
type EventObjectDetailsSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`           // context objectId
	Details       *structpb.Struct       `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"` // can not be a partial state. Should replace client details state
	SubIds        []string               `protobuf:"bytes,3,rep,name=subIds,proto3" json:"subIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventObjectDetailsSet) Reset() {
	*x = EventObjectDetailsSet{}
	mi := &file_pb_protos_events_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventObjectDetailsSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventObjectDetailsSet) ProtoMessage() {}

func (x *EventObjectDetailsSet) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventObjectDetailsSet.ProtoReflect.Descriptor instead.
func (*EventObjectDetailsSet) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 3, 0, 1}
}

func (x *EventObjectDetailsSet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventObjectDetailsSet) GetDetails() *structpb.Struct {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *EventObjectDetailsSet) GetSubIds() []string {
	if x != nil {
		return x.SubIds
	}
	return nil
}

// Unset existing detail keys
type EventObjectDetailsUnset struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // context objectId
	Keys          []string               `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	SubIds        []string               `protobuf:"bytes,3,rep,name=subIds,proto3" json:"subIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventObjectDetailsUnset) Reset() {
	*x = EventObjectDetailsUnset{}
	mi := &file_pb_protos_events_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventObjectDetailsUnset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventObjectDetailsUnset) ProtoMessage() {}

func (x *EventObjectDetailsUnset) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventObjectDetailsUnset.ProtoReflect.Descriptor instead.
func (*EventObjectDetailsUnset) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 3, 0, 2}
}

func (x *EventObjectDetailsUnset) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventObjectDetailsUnset) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *EventObjectDetailsUnset) GetSubIds() []string {
	if x != nil {
		return x.SubIds
	}
	return nil
}

type EventObjectDetailsAmendKeyValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         *structpb.Value        `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` // should not be null
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventObjectDetailsAmendKeyValue) Reset() {
	*x = EventObjectDetailsAmendKeyValue{}
	mi := &file_pb_protos_events_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventObjectDetailsAmendKeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventObjectDetailsAmendKeyValue) ProtoMessage() {}

func (x *EventObjectDetailsAmendKeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventObjectDetailsAmendKeyValue.ProtoReflect.Descriptor instead.
func (*EventObjectDetailsAmendKeyValue) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0}
}

func (x *EventObjectDetailsAmendKeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *EventObjectDetailsAmendKeyValue) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Adds new document to subscriptions
type EventObjectSubscriptionAdd struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`           // object id
	AfterId       string                 `protobuf:"bytes,2,opt,name=afterId,proto3" json:"afterId,omitempty"` // id of previous doc in order, empty means first
	SubId         string                 `protobuf:"bytes,3,opt,name=subId,proto3" json:"subId,omitempty"`     // subscription id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventObjectSubscriptionAdd) Reset() {
	*x = EventObjectSubscriptionAdd{}
	mi := &file_pb_protos_events_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventObjectSubscriptionAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventObjectSubscriptionAdd) ProtoMessage() {}

func (x *EventObjectSubscriptionAdd) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventObjectSubscriptionAdd.ProtoReflect.Descriptor instead.
func (*EventObjectSubscriptionAdd) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 3, 1, 0}
}

func (x *EventObjectSubscriptionAdd) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventObjectSubscriptionAdd) GetAfterId() string {
	if x != nil {
		return x.AfterId
	}
	return ""
}

func (x *EventObjectSubscriptionAdd) GetSubId() string {
	if x != nil {
		return x.SubId
	}
	return ""
}

// Removes document from subscription
type EventObjectSubscriptionRemove struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`       // object id
	SubId         string                 `protobuf:"bytes,2,opt,name=subId,proto3" json:"subId,omitempty"` // subscription id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventObjectSubscriptionRemove) Reset() {
	*x = EventObjectSubscriptionRemove{}
	mi := &file_pb_protos_events_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventObjectSubscriptionRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventObjectSubscriptionRemove) ProtoMessage() {}

func (x *EventObjectSubscriptionRemove) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventObjectSubscriptionRemove.ProtoReflect.Descriptor instead.
func (*EventObjectSubscriptionRemove) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 3, 1, 1}
}

func (x *EventObjectSubscriptionRemove) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventObjectSubscriptionRemove) GetSubId() string {
	if x != nil {
		return x.SubId
	}
	return ""
}

// Indicates new position of document
type EventObjectSubscriptionPosition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`           // object id
	AfterId       string                 `protobuf:"bytes,2,opt,name=afterId,proto3" json:"afterId,omitempty"` // id of previous doc in order, empty means first
	SubId         string                 `protobuf:"bytes,3,opt,name=subId,proto3" json:"subId,omitempty"`     // subscription id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventObjectSubscriptionPosition) Reset() {
	*x = EventObjectSubscriptionPosition{}
	mi := &file_pb_protos_events_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventObjectSubscriptionPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventObjectSubscriptionPosition) ProtoMessage() {}

func (x *EventObjectSubscriptionPosition) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventObjectSubscriptionPosition.ProtoReflect.Descriptor instead.
func (*EventObjectSubscriptionPosition) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 3, 1, 2}
}

func (x *EventObjectSubscriptionPosition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventObjectSubscriptionPosition) GetAfterId() string {
	if x != nil {
		return x.AfterId
	}
	return ""
}

func (x *EventObjectSubscriptionPosition) GetSubId() string {
	if x != nil {
		return x.SubId
	}
	return ""
}

type EventObjectSubscriptionCounters struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// total available records
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// how many records available after
	NextCount int64 `protobuf:"varint,2,opt,name=nextCount,proto3" json:"nextCount,omitempty"`
	// how many records available before
	PrevCount     int64  `protobuf:"varint,3,opt,name=prevCount,proto3" json:"prevCount,omitempty"`
	SubId         string `protobuf:"bytes,4,opt,name=subId,proto3" json:"subId,omitempty"` // subscription id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventObjectSubscriptionCounters) Reset() {
	*x = EventObjectSubscriptionCounters{}
	mi := &file_pb_protos_events_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventObjectSubscriptionCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventObjectSubscriptionCounters) ProtoMessage() {}

func (x *EventObjectSubscriptionCounters) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventObjectSubscriptionCounters.ProtoReflect.Descriptor instead.
func (*EventObjectSubscriptionCounters) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 3, 1, 3}
}

func (x *EventObjectSubscriptionCounters) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *EventObjectSubscriptionCounters) GetNextCount() int64 {
	if x != nil {
		return x.NextCount
	}
	return 0
}

func (x *EventObjectSubscriptionCounters) GetPrevCount() int64 {
	if x != nil {
		return x.PrevCount
	}
	return 0
}

func (x *EventObjectSubscriptionCounters) GetSubId() string {
	if x != nil {
		return x.SubId
	}
	return ""
}

type EventObjectSubscriptionGroups struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	SubId         string                           `protobuf:"bytes,1,opt,name=subId,proto3" json:"subId,omitempty"`
	Group         *model.BlockContentDataviewGroup `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	Remove        bool                             `protobuf:"varint,3,opt,name=remove,proto3" json:"remove,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventObjectSubscriptionGroups) Reset() {
	*x = EventObjectSubscriptionGroups{}
	mi := &file_pb_protos_events_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventObjectSubscriptionGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventObjectSubscriptionGroups) ProtoMessage() {}

func (x *EventObjectSubscriptionGroups) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventObjectSubscriptionGroups.ProtoReflect.Descriptor instead.
func (*EventObjectSubscriptionGroups) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 3, 1, 4}
}

func (x *EventObjectSubscriptionGroups) GetSubId() string {
	if x != nil {
		return x.SubId
	}
	return ""
}

func (x *EventObjectSubscriptionGroups) GetGroup() *model.BlockContentDataviewGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *EventObjectSubscriptionGroups) GetRemove() bool {
	if x != nil {
		return x.Remove
	}
	return false
}

type EventObjectRelationsAmend struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // context objectId
	RelationLinks []*model.RelationLink  `protobuf:"bytes,2,rep,name=relationLinks,proto3" json:"relationLinks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventObjectRelationsAmend) Reset() {
	*x = EventObjectRelationsAmend{}
	mi := &file_pb_protos_events_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventObjectRelationsAmend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventObjectRelationsAmend) ProtoMessage() {}

func (x *EventObjectRelationsAmend) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventObjectRelationsAmend.ProtoReflect.Descriptor instead.
func (*EventObjectRelationsAmend) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 3, 2, 0}
}

func (x *EventObjectRelationsAmend) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventObjectRelationsAmend) GetRelationLinks() []*model.RelationLink {
	if x != nil {
		return x.RelationLinks
	}
	return nil
}

type EventObjectRelationsRemove struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // context objectId
	RelationKeys  []string               `protobuf:"bytes,2,rep,name=relationKeys,proto3" json:"relationKeys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventObjectRelationsRemove) Reset() {
	*x = EventObjectRelationsRemove{}
	mi := &file_pb_protos_events_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventObjectRelationsRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventObjectRelationsRemove) ProtoMessage() {}

func (x *EventObjectRelationsRemove) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventObjectRelationsRemove.ProtoReflect.Descriptor instead.
func (*EventObjectRelationsRemove) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 3, 2, 1}
}

func (x *EventObjectRelationsRemove) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventObjectRelationsRemove) GetRelationKeys() []string {
	if x != nil {
		return x.RelationKeys
	}
	return nil
}

type EventObjectRestrictionsSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Restrictions  *model.Restrictions    `protobuf:"bytes,2,opt,name=restrictions,proto3" json:"restrictions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventObjectRestrictionsSet) Reset() {
	*x = EventObjectRestrictionsSet{}
	mi := &file_pb_protos_events_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventObjectRestrictionsSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventObjectRestrictionsSet) ProtoMessage() {}

func (x *EventObjectRestrictionsSet) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventObjectRestrictionsSet.ProtoReflect.Descriptor instead.
func (*EventObjectRestrictionsSet) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 3, 4, 0}
}

func (x *EventObjectRestrictionsSet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventObjectRestrictionsSet) GetRestrictions() *model.Restrictions {
	if x != nil {
		return x.Restrictions
	}
	return nil
}

// Event to show internal blocks on a client.
// Example Scenarios
// A. Block Creation
// 1. Block A have been created on a client C1
// 2. Client C2 receives Event.Block.Add(Block A), Event.Block.Update(Page.children)
// B. Partial block load
// 1. Client C1 opens Page1, that contains, for example, 133 blocks.
// 2. M -> F: ShowFullScreen(Root, blocks1-50)
// 3. M -> F: Block.Add(blocks51-100)
// 3. M -> F: Block.Add(blocks101-133)
type EventBlockAdd struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blocks        []*model.Block         `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"` // id -> block
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockAdd) Reset() {
	*x = EventBlockAdd{}
	mi := &file_pb_protos_events_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockAdd) ProtoMessage() {}

func (x *EventBlockAdd) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockAdd.ProtoReflect.Descriptor instead.
func (*EventBlockAdd) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *EventBlockAdd) GetBlocks() []*model.Block {
	if x != nil {
		return x.Blocks
	}
	return nil
}

// *
// Middleware to front end event message, that will be sent on one of this scenarios:
// Precondition: user A opened a block
// 1. User A drops a set of files/pictures/videos
// 2. User A creates a MediaBlock and drops a single media, that corresponds to its type.
type EventBlockFilesUpload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockId       string                 `protobuf:"bytes,1,opt,name=blockId,proto3" json:"blockId,omitempty"`   // if empty => create new blocks
	FilePath      []string               `protobuf:"bytes,2,rep,name=filePath,proto3" json:"filePath,omitempty"` // filepaths to the files
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFilesUpload) Reset() {
	*x = EventBlockFilesUpload{}
	mi := &file_pb_protos_events_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFilesUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFilesUpload) ProtoMessage() {}

func (x *EventBlockFilesUpload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFilesUpload.ProtoReflect.Descriptor instead.
func (*EventBlockFilesUpload) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 1}
}

func (x *EventBlockFilesUpload) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *EventBlockFilesUpload) GetFilePath() []string {
	if x != nil {
		return x.FilePath
	}
	return nil
}

type EventBlockDelete struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockIds      []string               `protobuf:"bytes,1,rep,name=blockIds,proto3" json:"blockIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockDelete) Reset() {
	*x = EventBlockDelete{}
	mi := &file_pb_protos_events_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDelete) ProtoMessage() {}

func (x *EventBlockDelete) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDelete.ProtoReflect.Descriptor instead.
func (*EventBlockDelete) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 2}
}

func (x *EventBlockDelete) GetBlockIds() []string {
	if x != nil {
		return x.BlockIds
	}
	return nil
}

type EventBlockMarksInfo struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	MarksInRange  []model.BlockContentTextMarkType `protobuf:"varint,1,rep,packed,name=marksInRange,proto3,enum=anytype.model.BlockContentTextMarkType" json:"marksInRange,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockMarksInfo) Reset() {
	*x = EventBlockMarksInfo{}
	mi := &file_pb_protos_events_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockMarksInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockMarksInfo) ProtoMessage() {}

func (x *EventBlockMarksInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockMarksInfo.ProtoReflect.Descriptor instead.
func (*EventBlockMarksInfo) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 3}
}

func (x *EventBlockMarksInfo) GetMarksInRange() []model.BlockContentTextMarkType {
	if x != nil {
		return x.MarksInRange
	}
	return nil
}

type EventBlockSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSet) Reset() {
	*x = EventBlockSet{}
	mi := &file_pb_protos_events_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSet) ProtoMessage() {}

func (x *EventBlockSet) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSet.ProtoReflect.Descriptor instead.
func (*EventBlockSet) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4}
}

type EventBlockFill struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFill) Reset() {
	*x = EventBlockFill{}
	mi := &file_pb_protos_events_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFill) ProtoMessage() {}

func (x *EventBlockFill) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFill.ProtoReflect.Descriptor instead.
func (*EventBlockFill) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5}
}

type EventBlockDataview struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockDataview) Reset() {
	*x = EventBlockDataview{}
	mi := &file_pb_protos_events_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataview) ProtoMessage() {}

func (x *EventBlockDataview) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataview.ProtoReflect.Descriptor instead.
func (*EventBlockDataview) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6}
}

type EventBlockSetRelation struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Id            string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Key           *EventBlockSetRelationKey `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetRelation) Reset() {
	*x = EventBlockSetRelation{}
	mi := &file_pb_protos_events_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetRelation) ProtoMessage() {}

func (x *EventBlockSetRelation) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetRelation.ProtoReflect.Descriptor instead.
func (*EventBlockSetRelation) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 0}
}

func (x *EventBlockSetRelation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockSetRelation) GetKey() *EventBlockSetRelationKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type EventBlockSetFields struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Fields        *structpb.Struct       `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetFields) Reset() {
	*x = EventBlockSetFields{}
	mi := &file_pb_protos_events_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetFields) ProtoMessage() {}

func (x *EventBlockSetFields) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetFields.ProtoReflect.Descriptor instead.
func (*EventBlockSetFields) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 1}
}

func (x *EventBlockSetFields) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockSetFields) GetFields() *structpb.Struct {
	if x != nil {
		return x.Fields
	}
	return nil
}

type EventBlockSetChildrenIds struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ChildrenIds   []string               `protobuf:"bytes,2,rep,name=childrenIds,proto3" json:"childrenIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetChildrenIds) Reset() {
	*x = EventBlockSetChildrenIds{}
	mi := &file_pb_protos_events_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetChildrenIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetChildrenIds) ProtoMessage() {}

func (x *EventBlockSetChildrenIds) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetChildrenIds.ProtoReflect.Descriptor instead.
func (*EventBlockSetChildrenIds) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 2}
}

func (x *EventBlockSetChildrenIds) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockSetChildrenIds) GetChildrenIds() []string {
	if x != nil {
		return x.ChildrenIds
	}
	return nil
}

type EventBlockSetRestrictions struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Id            string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Restrictions  *model.BlockRestrictions `protobuf:"bytes,2,opt,name=restrictions,proto3" json:"restrictions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetRestrictions) Reset() {
	*x = EventBlockSetRestrictions{}
	mi := &file_pb_protos_events_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetRestrictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetRestrictions) ProtoMessage() {}

func (x *EventBlockSetRestrictions) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetRestrictions.ProtoReflect.Descriptor instead.
func (*EventBlockSetRestrictions) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 3}
}

func (x *EventBlockSetRestrictions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockSetRestrictions) GetRestrictions() *model.BlockRestrictions {
	if x != nil {
		return x.Restrictions
	}
	return nil
}

type EventBlockSetBackgroundColor struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BackgroundColor string                 `protobuf:"bytes,2,opt,name=backgroundColor,proto3" json:"backgroundColor,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EventBlockSetBackgroundColor) Reset() {
	*x = EventBlockSetBackgroundColor{}
	mi := &file_pb_protos_events_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetBackgroundColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetBackgroundColor) ProtoMessage() {}

func (x *EventBlockSetBackgroundColor) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetBackgroundColor.ProtoReflect.Descriptor instead.
func (*EventBlockSetBackgroundColor) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 4}
}

func (x *EventBlockSetBackgroundColor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockSetBackgroundColor) GetBackgroundColor() string {
	if x != nil {
		return x.BackgroundColor
	}
	return ""
}

type EventBlockSetAlign struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Align         model.BlockAlign       `protobuf:"varint,2,opt,name=align,proto3,enum=anytype.model.BlockAlign" json:"align,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetAlign) Reset() {
	*x = EventBlockSetAlign{}
	mi := &file_pb_protos_events_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetAlign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetAlign) ProtoMessage() {}

func (x *EventBlockSetAlign) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetAlign.ProtoReflect.Descriptor instead.
func (*EventBlockSetAlign) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 5}
}

func (x *EventBlockSetAlign) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockSetAlign) GetAlign() model.BlockAlign {
	if x != nil {
		return x.Align
	}
	return model.BlockAlign(0)
}

type EventBlockSetVerticalAlign struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Id            string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	VerticalAlign model.BlockVerticalAlign `protobuf:"varint,2,opt,name=verticalAlign,proto3,enum=anytype.model.BlockVerticalAlign" json:"verticalAlign,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetVerticalAlign) Reset() {
	*x = EventBlockSetVerticalAlign{}
	mi := &file_pb_protos_events_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetVerticalAlign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetVerticalAlign) ProtoMessage() {}

func (x *EventBlockSetVerticalAlign) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetVerticalAlign.ProtoReflect.Descriptor instead.
func (*EventBlockSetVerticalAlign) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 6}
}

func (x *EventBlockSetVerticalAlign) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockSetVerticalAlign) GetVerticalAlign() model.BlockVerticalAlign {
	if x != nil {
		return x.VerticalAlign
	}
	return model.BlockVerticalAlign(0)
}

type EventBlockSetText struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Id            string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Text          *EventBlockSetTextText      `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Style         *EventBlockSetTextStyle     `protobuf:"bytes,3,opt,name=style,proto3" json:"style,omitempty"`
	Marks         *EventBlockSetTextMarks     `protobuf:"bytes,4,opt,name=marks,proto3" json:"marks,omitempty"`
	Checked       *EventBlockSetTextChecked   `protobuf:"bytes,5,opt,name=checked,proto3" json:"checked,omitempty"`
	Color         *EventBlockSetTextColor     `protobuf:"bytes,6,opt,name=color,proto3" json:"color,omitempty"`
	IconEmoji     *EventBlockSetTextIconEmoji `protobuf:"bytes,7,opt,name=iconEmoji,proto3" json:"iconEmoji,omitempty"`
	IconImage     *EventBlockSetTextIconImage `protobuf:"bytes,8,opt,name=iconImage,proto3" json:"iconImage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetText) Reset() {
	*x = EventBlockSetText{}
	mi := &file_pb_protos_events_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetText) ProtoMessage() {}

func (x *EventBlockSetText) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetText.ProtoReflect.Descriptor instead.
func (*EventBlockSetText) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 7}
}

func (x *EventBlockSetText) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockSetText) GetText() *EventBlockSetTextText {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *EventBlockSetText) GetStyle() *EventBlockSetTextStyle {
	if x != nil {
		return x.Style
	}
	return nil
}

func (x *EventBlockSetText) GetMarks() *EventBlockSetTextMarks {
	if x != nil {
		return x.Marks
	}
	return nil
}

func (x *EventBlockSetText) GetChecked() *EventBlockSetTextChecked {
	if x != nil {
		return x.Checked
	}
	return nil
}

func (x *EventBlockSetText) GetColor() *EventBlockSetTextColor {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *EventBlockSetText) GetIconEmoji() *EventBlockSetTextIconEmoji {
	if x != nil {
		return x.IconEmoji
	}
	return nil
}

func (x *EventBlockSetText) GetIconImage() *EventBlockSetTextIconImage {
	if x != nil {
		return x.IconImage
	}
	return nil
}

type EventBlockSetLatex struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Id            string                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Text          *EventBlockSetLatexText      `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Processor     *EventBlockSetLatexProcessor `protobuf:"bytes,3,opt,name=processor,proto3" json:"processor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetLatex) Reset() {
	*x = EventBlockSetLatex{}
	mi := &file_pb_protos_events_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetLatex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetLatex) ProtoMessage() {}

func (x *EventBlockSetLatex) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetLatex.ProtoReflect.Descriptor instead.
func (*EventBlockSetLatex) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 8}
}

func (x *EventBlockSetLatex) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockSetLatex) GetText() *EventBlockSetLatexText {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *EventBlockSetLatex) GetProcessor() *EventBlockSetLatexProcessor {
	if x != nil {
		return x.Processor
	}
	return nil
}

type EventBlockSetDiv struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Style         *EventBlockSetDivStyle `protobuf:"bytes,2,opt,name=style,proto3" json:"style,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetDiv) Reset() {
	*x = EventBlockSetDiv{}
	mi := &file_pb_protos_events_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetDiv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetDiv) ProtoMessage() {}

func (x *EventBlockSetDiv) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetDiv.ProtoReflect.Descriptor instead.
func (*EventBlockSetDiv) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 9}
}

func (x *EventBlockSetDiv) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockSetDiv) GetStyle() *EventBlockSetDivStyle {
	if x != nil {
		return x.Style
	}
	return nil
}

type EventBlockSetFile struct {
	state          protoimpl.MessageState           `protogen:"open.v1"`
	Id             string                           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type           *EventBlockSetFileType           `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	State          *EventBlockSetFileState          `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Mime           *EventBlockSetFileMime           `protobuf:"bytes,4,opt,name=mime,proto3" json:"mime,omitempty"`
	Hash           *EventBlockSetFileHash           `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`
	Name           *EventBlockSetFileName           `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Size           *EventBlockSetFileSize           `protobuf:"bytes,7,opt,name=size,proto3" json:"size,omitempty"`
	Style          *EventBlockSetFileStyle          `protobuf:"bytes,8,opt,name=style,proto3" json:"style,omitempty"`
	TargetObjectId *EventBlockSetFileTargetObjectId `protobuf:"bytes,9,opt,name=targetObjectId,proto3" json:"targetObjectId,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EventBlockSetFile) Reset() {
	*x = EventBlockSetFile{}
	mi := &file_pb_protos_events_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetFile) ProtoMessage() {}

func (x *EventBlockSetFile) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetFile.ProtoReflect.Descriptor instead.
func (*EventBlockSetFile) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 10}
}

func (x *EventBlockSetFile) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockSetFile) GetType() *EventBlockSetFileType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *EventBlockSetFile) GetState() *EventBlockSetFileState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *EventBlockSetFile) GetMime() *EventBlockSetFileMime {
	if x != nil {
		return x.Mime
	}
	return nil
}

func (x *EventBlockSetFile) GetHash() *EventBlockSetFileHash {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *EventBlockSetFile) GetName() *EventBlockSetFileName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *EventBlockSetFile) GetSize() *EventBlockSetFileSize {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *EventBlockSetFile) GetStyle() *EventBlockSetFileStyle {
	if x != nil {
		return x.Style
	}
	return nil
}

func (x *EventBlockSetFile) GetTargetObjectId() *EventBlockSetFileTargetObjectId {
	if x != nil {
		return x.TargetObjectId
	}
	return nil
}

type EventBlockSetLink struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Id            string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TargetBlockId *EventBlockSetLinkTargetBlockId `protobuf:"bytes,2,opt,name=targetBlockId,proto3" json:"targetBlockId,omitempty"`
	Style         *EventBlockSetLinkStyle         `protobuf:"bytes,3,opt,name=style,proto3" json:"style,omitempty"`
	Fields        *EventBlockSetLinkFields        `protobuf:"bytes,4,opt,name=fields,proto3" json:"fields,omitempty"`
	IconSize      *EventBlockSetLinkIconSize      `protobuf:"bytes,5,opt,name=iconSize,proto3" json:"iconSize,omitempty"`
	CardStyle     *EventBlockSetLinkCardStyle     `protobuf:"bytes,6,opt,name=cardStyle,proto3" json:"cardStyle,omitempty"`
	Description   *EventBlockSetLinkDescription   `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Relations     *EventBlockSetLinkRelations     `protobuf:"bytes,8,opt,name=relations,proto3" json:"relations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetLink) Reset() {
	*x = EventBlockSetLink{}
	mi := &file_pb_protos_events_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetLink) ProtoMessage() {}

func (x *EventBlockSetLink) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetLink.ProtoReflect.Descriptor instead.
func (*EventBlockSetLink) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 11}
}

func (x *EventBlockSetLink) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockSetLink) GetTargetBlockId() *EventBlockSetLinkTargetBlockId {
	if x != nil {
		return x.TargetBlockId
	}
	return nil
}

func (x *EventBlockSetLink) GetStyle() *EventBlockSetLinkStyle {
	if x != nil {
		return x.Style
	}
	return nil
}

func (x *EventBlockSetLink) GetFields() *EventBlockSetLinkFields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *EventBlockSetLink) GetIconSize() *EventBlockSetLinkIconSize {
	if x != nil {
		return x.IconSize
	}
	return nil
}

func (x *EventBlockSetLink) GetCardStyle() *EventBlockSetLinkCardStyle {
	if x != nil {
		return x.CardStyle
	}
	return nil
}

func (x *EventBlockSetLink) GetDescription() *EventBlockSetLinkDescription {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *EventBlockSetLink) GetRelations() *EventBlockSetLinkRelations {
	if x != nil {
		return x.Relations
	}
	return nil
}

type EventBlockSetBookmark struct {
	state          protoimpl.MessageState               `protogen:"open.v1"`
	Id             string                               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url            *EventBlockSetBookmarkUrl            `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Title          *EventBlockSetBookmarkTitle          `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description    *EventBlockSetBookmarkDescription    `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	ImageHash      *EventBlockSetBookmarkImageHash      `protobuf:"bytes,5,opt,name=imageHash,proto3" json:"imageHash,omitempty"`
	FaviconHash    *EventBlockSetBookmarkFaviconHash    `protobuf:"bytes,6,opt,name=faviconHash,proto3" json:"faviconHash,omitempty"`
	Type           *EventBlockSetBookmarkType           `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	TargetObjectId *EventBlockSetBookmarkTargetObjectId `protobuf:"bytes,8,opt,name=targetObjectId,proto3" json:"targetObjectId,omitempty"`
	State          *EventBlockSetBookmarkState          `protobuf:"bytes,9,opt,name=state,proto3" json:"state,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EventBlockSetBookmark) Reset() {
	*x = EventBlockSetBookmark{}
	mi := &file_pb_protos_events_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetBookmark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetBookmark) ProtoMessage() {}

func (x *EventBlockSetBookmark) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetBookmark.ProtoReflect.Descriptor instead.
func (*EventBlockSetBookmark) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 12}
}

func (x *EventBlockSetBookmark) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockSetBookmark) GetUrl() *EventBlockSetBookmarkUrl {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *EventBlockSetBookmark) GetTitle() *EventBlockSetBookmarkTitle {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *EventBlockSetBookmark) GetDescription() *EventBlockSetBookmarkDescription {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *EventBlockSetBookmark) GetImageHash() *EventBlockSetBookmarkImageHash {
	if x != nil {
		return x.ImageHash
	}
	return nil
}

func (x *EventBlockSetBookmark) GetFaviconHash() *EventBlockSetBookmarkFaviconHash {
	if x != nil {
		return x.FaviconHash
	}
	return nil
}

func (x *EventBlockSetBookmark) GetType() *EventBlockSetBookmarkType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *EventBlockSetBookmark) GetTargetObjectId() *EventBlockSetBookmarkTargetObjectId {
	if x != nil {
		return x.TargetObjectId
	}
	return nil
}

func (x *EventBlockSetBookmark) GetState() *EventBlockSetBookmarkState {
	if x != nil {
		return x.State
	}
	return nil
}

type EventBlockSetTableRow struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Id            string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IsHeader      *EventBlockSetTableRowIsHeader `protobuf:"bytes,2,opt,name=isHeader,proto3" json:"isHeader,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetTableRow) Reset() {
	*x = EventBlockSetTableRow{}
	mi := &file_pb_protos_events_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetTableRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetTableRow) ProtoMessage() {}

func (x *EventBlockSetTableRow) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetTableRow.ProtoReflect.Descriptor instead.
func (*EventBlockSetTableRow) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 13}
}

func (x *EventBlockSetTableRow) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockSetTableRow) GetIsHeader() *EventBlockSetTableRowIsHeader {
	if x != nil {
		return x.IsHeader
	}
	return nil
}

type EventBlockSetWidget struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Id            string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Layout        *EventBlockSetWidgetLayout `protobuf:"bytes,2,opt,name=layout,proto3" json:"layout,omitempty"`
	Limit         *EventBlockSetWidgetLimit  `protobuf:"bytes,3,opt,name=limit,proto3" json:"limit,omitempty"`
	ViewId        *EventBlockSetWidgetViewId `protobuf:"bytes,4,opt,name=viewId,proto3" json:"viewId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetWidget) Reset() {
	*x = EventBlockSetWidget{}
	mi := &file_pb_protos_events_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetWidget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetWidget) ProtoMessage() {}

func (x *EventBlockSetWidget) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetWidget.ProtoReflect.Descriptor instead.
func (*EventBlockSetWidget) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 14}
}

func (x *EventBlockSetWidget) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockSetWidget) GetLayout() *EventBlockSetWidgetLayout {
	if x != nil {
		return x.Layout
	}
	return nil
}

func (x *EventBlockSetWidget) GetLimit() *EventBlockSetWidgetLimit {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *EventBlockSetWidget) GetViewId() *EventBlockSetWidgetViewId {
	if x != nil {
		return x.ViewId
	}
	return nil
}

type EventBlockSetRelationKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetRelationKey) Reset() {
	*x = EventBlockSetRelationKey{}
	mi := &file_pb_protos_events_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetRelationKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetRelationKey) ProtoMessage() {}

func (x *EventBlockSetRelationKey) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetRelationKey.ProtoReflect.Descriptor instead.
func (*EventBlockSetRelationKey) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 0, 0}
}

func (x *EventBlockSetRelationKey) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EventBlockSetTextText struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetTextText) Reset() {
	*x = EventBlockSetTextText{}
	mi := &file_pb_protos_events_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetTextText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetTextText) ProtoMessage() {}

func (x *EventBlockSetTextText) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetTextText.ProtoReflect.Descriptor instead.
func (*EventBlockSetTextText) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 7, 0}
}

func (x *EventBlockSetTextText) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EventBlockSetTextStyle struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Value         model.BlockContentTextStyle `protobuf:"varint,1,opt,name=value,proto3,enum=anytype.model.BlockContentTextStyle" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetTextStyle) Reset() {
	*x = EventBlockSetTextStyle{}
	mi := &file_pb_protos_events_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetTextStyle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetTextStyle) ProtoMessage() {}

func (x *EventBlockSetTextStyle) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetTextStyle.ProtoReflect.Descriptor instead.
func (*EventBlockSetTextStyle) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 7, 1}
}

func (x *EventBlockSetTextStyle) GetValue() model.BlockContentTextStyle {
	if x != nil {
		return x.Value
	}
	return model.BlockContentTextStyle(0)
}

type EventBlockSetTextMarks struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Value         *model.BlockContentTextMarks `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetTextMarks) Reset() {
	*x = EventBlockSetTextMarks{}
	mi := &file_pb_protos_events_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetTextMarks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetTextMarks) ProtoMessage() {}

func (x *EventBlockSetTextMarks) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetTextMarks.ProtoReflect.Descriptor instead.
func (*EventBlockSetTextMarks) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 7, 2}
}

func (x *EventBlockSetTextMarks) GetValue() *model.BlockContentTextMarks {
	if x != nil {
		return x.Value
	}
	return nil
}

type EventBlockSetTextChecked struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         bool                   `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetTextChecked) Reset() {
	*x = EventBlockSetTextChecked{}
	mi := &file_pb_protos_events_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetTextChecked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetTextChecked) ProtoMessage() {}

func (x *EventBlockSetTextChecked) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetTextChecked.ProtoReflect.Descriptor instead.
func (*EventBlockSetTextChecked) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 7, 3}
}

func (x *EventBlockSetTextChecked) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type EventBlockSetTextColor struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetTextColor) Reset() {
	*x = EventBlockSetTextColor{}
	mi := &file_pb_protos_events_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetTextColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetTextColor) ProtoMessage() {}

func (x *EventBlockSetTextColor) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetTextColor.ProtoReflect.Descriptor instead.
func (*EventBlockSetTextColor) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 7, 4}
}

func (x *EventBlockSetTextColor) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EventBlockSetTextIconEmoji struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetTextIconEmoji) Reset() {
	*x = EventBlockSetTextIconEmoji{}
	mi := &file_pb_protos_events_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetTextIconEmoji) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetTextIconEmoji) ProtoMessage() {}

func (x *EventBlockSetTextIconEmoji) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetTextIconEmoji.ProtoReflect.Descriptor instead.
func (*EventBlockSetTextIconEmoji) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 7, 5}
}

func (x *EventBlockSetTextIconEmoji) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EventBlockSetTextIconImage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetTextIconImage) Reset() {
	*x = EventBlockSetTextIconImage{}
	mi := &file_pb_protos_events_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetTextIconImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetTextIconImage) ProtoMessage() {}

func (x *EventBlockSetTextIconImage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetTextIconImage.ProtoReflect.Descriptor instead.
func (*EventBlockSetTextIconImage) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 7, 6}
}

func (x *EventBlockSetTextIconImage) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EventBlockSetLatexText struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetLatexText) Reset() {
	*x = EventBlockSetLatexText{}
	mi := &file_pb_protos_events_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetLatexText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetLatexText) ProtoMessage() {}

func (x *EventBlockSetLatexText) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetLatexText.ProtoReflect.Descriptor instead.
func (*EventBlockSetLatexText) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 8, 0}
}

func (x *EventBlockSetLatexText) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EventBlockSetLatexProcessor struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Value         model.BlockContentLatexProcessor `protobuf:"varint,1,opt,name=value,proto3,enum=anytype.model.BlockContentLatexProcessor" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetLatexProcessor) Reset() {
	*x = EventBlockSetLatexProcessor{}
	mi := &file_pb_protos_events_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetLatexProcessor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetLatexProcessor) ProtoMessage() {}

func (x *EventBlockSetLatexProcessor) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetLatexProcessor.ProtoReflect.Descriptor instead.
func (*EventBlockSetLatexProcessor) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 8, 1}
}

func (x *EventBlockSetLatexProcessor) GetValue() model.BlockContentLatexProcessor {
	if x != nil {
		return x.Value
	}
	return model.BlockContentLatexProcessor(0)
}

type EventBlockSetDivStyle struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Value         model.BlockContentDivStyle `protobuf:"varint,1,opt,name=value,proto3,enum=anytype.model.BlockContentDivStyle" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetDivStyle) Reset() {
	*x = EventBlockSetDivStyle{}
	mi := &file_pb_protos_events_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetDivStyle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetDivStyle) ProtoMessage() {}

func (x *EventBlockSetDivStyle) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetDivStyle.ProtoReflect.Descriptor instead.
func (*EventBlockSetDivStyle) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 9, 0}
}

func (x *EventBlockSetDivStyle) GetValue() model.BlockContentDivStyle {
	if x != nil {
		return x.Value
	}
	return model.BlockContentDivStyle(0)
}

type EventBlockSetFileName struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetFileName) Reset() {
	*x = EventBlockSetFileName{}
	mi := &file_pb_protos_events_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetFileName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetFileName) ProtoMessage() {}

func (x *EventBlockSetFileName) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetFileName.ProtoReflect.Descriptor instead.
func (*EventBlockSetFileName) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 10, 0}
}

func (x *EventBlockSetFileName) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EventBlockSetFileWidth struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         int32                  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetFileWidth) Reset() {
	*x = EventBlockSetFileWidth{}
	mi := &file_pb_protos_events_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetFileWidth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetFileWidth) ProtoMessage() {}

func (x *EventBlockSetFileWidth) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetFileWidth.ProtoReflect.Descriptor instead.
func (*EventBlockSetFileWidth) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 10, 1}
}

func (x *EventBlockSetFileWidth) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type EventBlockSetFileState struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Value         model.BlockContentFileState `protobuf:"varint,1,opt,name=value,proto3,enum=anytype.model.BlockContentFileState" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetFileState) Reset() {
	*x = EventBlockSetFileState{}
	mi := &file_pb_protos_events_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetFileState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetFileState) ProtoMessage() {}

func (x *EventBlockSetFileState) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetFileState.ProtoReflect.Descriptor instead.
func (*EventBlockSetFileState) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 10, 2}
}

func (x *EventBlockSetFileState) GetValue() model.BlockContentFileState {
	if x != nil {
		return x.Value
	}
	return model.BlockContentFileState(0)
}

type EventBlockSetFileType struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Value         model.BlockContentFileType `protobuf:"varint,1,opt,name=value,proto3,enum=anytype.model.BlockContentFileType" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetFileType) Reset() {
	*x = EventBlockSetFileType{}
	mi := &file_pb_protos_events_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetFileType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetFileType) ProtoMessage() {}

func (x *EventBlockSetFileType) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetFileType.ProtoReflect.Descriptor instead.
func (*EventBlockSetFileType) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 10, 3}
}

func (x *EventBlockSetFileType) GetValue() model.BlockContentFileType {
	if x != nil {
		return x.Value
	}
	return model.BlockContentFileType(0)
}

type EventBlockSetFileStyle struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Value         model.BlockContentFileStyle `protobuf:"varint,1,opt,name=value,proto3,enum=anytype.model.BlockContentFileStyle" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetFileStyle) Reset() {
	*x = EventBlockSetFileStyle{}
	mi := &file_pb_protos_events_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetFileStyle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetFileStyle) ProtoMessage() {}

func (x *EventBlockSetFileStyle) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetFileStyle.ProtoReflect.Descriptor instead.
func (*EventBlockSetFileStyle) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 10, 4}
}

func (x *EventBlockSetFileStyle) GetValue() model.BlockContentFileStyle {
	if x != nil {
		return x.Value
	}
	return model.BlockContentFileStyle(0)
}

type EventBlockSetFileHash struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetFileHash) Reset() {
	*x = EventBlockSetFileHash{}
	mi := &file_pb_protos_events_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetFileHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetFileHash) ProtoMessage() {}

func (x *EventBlockSetFileHash) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetFileHash.ProtoReflect.Descriptor instead.
func (*EventBlockSetFileHash) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 10, 5}
}

func (x *EventBlockSetFileHash) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EventBlockSetFileMime struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetFileMime) Reset() {
	*x = EventBlockSetFileMime{}
	mi := &file_pb_protos_events_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetFileMime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetFileMime) ProtoMessage() {}

func (x *EventBlockSetFileMime) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetFileMime.ProtoReflect.Descriptor instead.
func (*EventBlockSetFileMime) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 10, 6}
}

func (x *EventBlockSetFileMime) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EventBlockSetFileSize struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         int64                  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetFileSize) Reset() {
	*x = EventBlockSetFileSize{}
	mi := &file_pb_protos_events_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetFileSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetFileSize) ProtoMessage() {}

func (x *EventBlockSetFileSize) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetFileSize.ProtoReflect.Descriptor instead.
func (*EventBlockSetFileSize) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 10, 7}
}

func (x *EventBlockSetFileSize) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type EventBlockSetFileTargetObjectId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetFileTargetObjectId) Reset() {
	*x = EventBlockSetFileTargetObjectId{}
	mi := &file_pb_protos_events_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetFileTargetObjectId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetFileTargetObjectId) ProtoMessage() {}

func (x *EventBlockSetFileTargetObjectId) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetFileTargetObjectId.ProtoReflect.Descriptor instead.
func (*EventBlockSetFileTargetObjectId) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 10, 8}
}

func (x *EventBlockSetFileTargetObjectId) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EventBlockSetLinkTargetBlockId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetLinkTargetBlockId) Reset() {
	*x = EventBlockSetLinkTargetBlockId{}
	mi := &file_pb_protos_events_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetLinkTargetBlockId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetLinkTargetBlockId) ProtoMessage() {}

func (x *EventBlockSetLinkTargetBlockId) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetLinkTargetBlockId.ProtoReflect.Descriptor instead.
func (*EventBlockSetLinkTargetBlockId) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 11, 0}
}

func (x *EventBlockSetLinkTargetBlockId) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EventBlockSetLinkStyle struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Value         model.BlockContentLinkStyle `protobuf:"varint,1,opt,name=value,proto3,enum=anytype.model.BlockContentLinkStyle" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetLinkStyle) Reset() {
	*x = EventBlockSetLinkStyle{}
	mi := &file_pb_protos_events_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetLinkStyle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetLinkStyle) ProtoMessage() {}

func (x *EventBlockSetLinkStyle) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetLinkStyle.ProtoReflect.Descriptor instead.
func (*EventBlockSetLinkStyle) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 11, 1}
}

func (x *EventBlockSetLinkStyle) GetValue() model.BlockContentLinkStyle {
	if x != nil {
		return x.Value
	}
	return model.BlockContentLinkStyle(0)
}

type EventBlockSetLinkFields struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *structpb.Struct       `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetLinkFields) Reset() {
	*x = EventBlockSetLinkFields{}
	mi := &file_pb_protos_events_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetLinkFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetLinkFields) ProtoMessage() {}

func (x *EventBlockSetLinkFields) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetLinkFields.ProtoReflect.Descriptor instead.
func (*EventBlockSetLinkFields) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 11, 2}
}

func (x *EventBlockSetLinkFields) GetValue() *structpb.Struct {
	if x != nil {
		return x.Value
	}
	return nil
}

type EventBlockSetLinkIconSize struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Value         model.BlockContentLinkIconSize `protobuf:"varint,1,opt,name=value,proto3,enum=anytype.model.BlockContentLinkIconSize" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetLinkIconSize) Reset() {
	*x = EventBlockSetLinkIconSize{}
	mi := &file_pb_protos_events_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetLinkIconSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetLinkIconSize) ProtoMessage() {}

func (x *EventBlockSetLinkIconSize) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetLinkIconSize.ProtoReflect.Descriptor instead.
func (*EventBlockSetLinkIconSize) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 11, 3}
}

func (x *EventBlockSetLinkIconSize) GetValue() model.BlockContentLinkIconSize {
	if x != nil {
		return x.Value
	}
	return model.BlockContentLinkIconSize(0)
}

type EventBlockSetLinkCardStyle struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Value         model.BlockContentLinkCardStyle `protobuf:"varint,1,opt,name=value,proto3,enum=anytype.model.BlockContentLinkCardStyle" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetLinkCardStyle) Reset() {
	*x = EventBlockSetLinkCardStyle{}
	mi := &file_pb_protos_events_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetLinkCardStyle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetLinkCardStyle) ProtoMessage() {}

func (x *EventBlockSetLinkCardStyle) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetLinkCardStyle.ProtoReflect.Descriptor instead.
func (*EventBlockSetLinkCardStyle) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 11, 4}
}

func (x *EventBlockSetLinkCardStyle) GetValue() model.BlockContentLinkCardStyle {
	if x != nil {
		return x.Value
	}
	return model.BlockContentLinkCardStyle(0)
}

type EventBlockSetLinkDescription struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Value         model.BlockContentLinkDescription `protobuf:"varint,1,opt,name=value,proto3,enum=anytype.model.BlockContentLinkDescription" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetLinkDescription) Reset() {
	*x = EventBlockSetLinkDescription{}
	mi := &file_pb_protos_events_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetLinkDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetLinkDescription) ProtoMessage() {}

func (x *EventBlockSetLinkDescription) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetLinkDescription.ProtoReflect.Descriptor instead.
func (*EventBlockSetLinkDescription) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 11, 5}
}

func (x *EventBlockSetLinkDescription) GetValue() model.BlockContentLinkDescription {
	if x != nil {
		return x.Value
	}
	return model.BlockContentLinkDescription(0)
}

type EventBlockSetLinkRelations struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         []string               `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetLinkRelations) Reset() {
	*x = EventBlockSetLinkRelations{}
	mi := &file_pb_protos_events_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetLinkRelations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetLinkRelations) ProtoMessage() {}

func (x *EventBlockSetLinkRelations) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetLinkRelations.ProtoReflect.Descriptor instead.
func (*EventBlockSetLinkRelations) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 11, 6}
}

func (x *EventBlockSetLinkRelations) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type EventBlockSetBookmarkUrl struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetBookmarkUrl) Reset() {
	*x = EventBlockSetBookmarkUrl{}
	mi := &file_pb_protos_events_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetBookmarkUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetBookmarkUrl) ProtoMessage() {}

func (x *EventBlockSetBookmarkUrl) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetBookmarkUrl.ProtoReflect.Descriptor instead.
func (*EventBlockSetBookmarkUrl) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 12, 0}
}

func (x *EventBlockSetBookmarkUrl) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EventBlockSetBookmarkTitle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetBookmarkTitle) Reset() {
	*x = EventBlockSetBookmarkTitle{}
	mi := &file_pb_protos_events_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetBookmarkTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetBookmarkTitle) ProtoMessage() {}

func (x *EventBlockSetBookmarkTitle) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetBookmarkTitle.ProtoReflect.Descriptor instead.
func (*EventBlockSetBookmarkTitle) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 12, 1}
}

func (x *EventBlockSetBookmarkTitle) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EventBlockSetBookmarkDescription struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetBookmarkDescription) Reset() {
	*x = EventBlockSetBookmarkDescription{}
	mi := &file_pb_protos_events_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetBookmarkDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetBookmarkDescription) ProtoMessage() {}

func (x *EventBlockSetBookmarkDescription) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetBookmarkDescription.ProtoReflect.Descriptor instead.
func (*EventBlockSetBookmarkDescription) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 12, 2}
}

func (x *EventBlockSetBookmarkDescription) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EventBlockSetBookmarkImageHash struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetBookmarkImageHash) Reset() {
	*x = EventBlockSetBookmarkImageHash{}
	mi := &file_pb_protos_events_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetBookmarkImageHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetBookmarkImageHash) ProtoMessage() {}

func (x *EventBlockSetBookmarkImageHash) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetBookmarkImageHash.ProtoReflect.Descriptor instead.
func (*EventBlockSetBookmarkImageHash) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 12, 3}
}

func (x *EventBlockSetBookmarkImageHash) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EventBlockSetBookmarkFaviconHash struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetBookmarkFaviconHash) Reset() {
	*x = EventBlockSetBookmarkFaviconHash{}
	mi := &file_pb_protos_events_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetBookmarkFaviconHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetBookmarkFaviconHash) ProtoMessage() {}

func (x *EventBlockSetBookmarkFaviconHash) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetBookmarkFaviconHash.ProtoReflect.Descriptor instead.
func (*EventBlockSetBookmarkFaviconHash) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 12, 4}
}

func (x *EventBlockSetBookmarkFaviconHash) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EventBlockSetBookmarkType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         model.LinkPreviewType  `protobuf:"varint,1,opt,name=value,proto3,enum=anytype.model.LinkPreviewType" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetBookmarkType) Reset() {
	*x = EventBlockSetBookmarkType{}
	mi := &file_pb_protos_events_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetBookmarkType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetBookmarkType) ProtoMessage() {}

func (x *EventBlockSetBookmarkType) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetBookmarkType.ProtoReflect.Descriptor instead.
func (*EventBlockSetBookmarkType) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 12, 5}
}

func (x *EventBlockSetBookmarkType) GetValue() model.LinkPreviewType {
	if x != nil {
		return x.Value
	}
	return model.LinkPreviewType(0)
}

type EventBlockSetBookmarkTargetObjectId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetBookmarkTargetObjectId) Reset() {
	*x = EventBlockSetBookmarkTargetObjectId{}
	mi := &file_pb_protos_events_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetBookmarkTargetObjectId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetBookmarkTargetObjectId) ProtoMessage() {}

func (x *EventBlockSetBookmarkTargetObjectId) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetBookmarkTargetObjectId.ProtoReflect.Descriptor instead.
func (*EventBlockSetBookmarkTargetObjectId) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 12, 6}
}

func (x *EventBlockSetBookmarkTargetObjectId) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EventBlockSetBookmarkState struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Value         model.BlockContentBookmarkState `protobuf:"varint,1,opt,name=value,proto3,enum=anytype.model.BlockContentBookmarkState" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetBookmarkState) Reset() {
	*x = EventBlockSetBookmarkState{}
	mi := &file_pb_protos_events_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetBookmarkState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetBookmarkState) ProtoMessage() {}

func (x *EventBlockSetBookmarkState) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetBookmarkState.ProtoReflect.Descriptor instead.
func (*EventBlockSetBookmarkState) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 12, 7}
}

func (x *EventBlockSetBookmarkState) GetValue() model.BlockContentBookmarkState {
	if x != nil {
		return x.Value
	}
	return model.BlockContentBookmarkState(0)
}

type EventBlockSetTableRowIsHeader struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         bool                   `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetTableRowIsHeader) Reset() {
	*x = EventBlockSetTableRowIsHeader{}
	mi := &file_pb_protos_events_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetTableRowIsHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetTableRowIsHeader) ProtoMessage() {}

func (x *EventBlockSetTableRowIsHeader) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetTableRowIsHeader.ProtoReflect.Descriptor instead.
func (*EventBlockSetTableRowIsHeader) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 13, 0}
}

func (x *EventBlockSetTableRowIsHeader) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type EventBlockSetWidgetLayout struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Value         model.BlockContentWidgetLayout `protobuf:"varint,1,opt,name=value,proto3,enum=anytype.model.BlockContentWidgetLayout" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetWidgetLayout) Reset() {
	*x = EventBlockSetWidgetLayout{}
	mi := &file_pb_protos_events_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetWidgetLayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetWidgetLayout) ProtoMessage() {}

func (x *EventBlockSetWidgetLayout) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetWidgetLayout.ProtoReflect.Descriptor instead.
func (*EventBlockSetWidgetLayout) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 14, 0}
}

func (x *EventBlockSetWidgetLayout) GetValue() model.BlockContentWidgetLayout {
	if x != nil {
		return x.Value
	}
	return model.BlockContentWidgetLayout(0)
}

type EventBlockSetWidgetLimit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         int32                  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetWidgetLimit) Reset() {
	*x = EventBlockSetWidgetLimit{}
	mi := &file_pb_protos_events_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetWidgetLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetWidgetLimit) ProtoMessage() {}

func (x *EventBlockSetWidgetLimit) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetWidgetLimit.ProtoReflect.Descriptor instead.
func (*EventBlockSetWidgetLimit) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 14, 1}
}

func (x *EventBlockSetWidgetLimit) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type EventBlockSetWidgetViewId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockSetWidgetViewId) Reset() {
	*x = EventBlockSetWidgetViewId{}
	mi := &file_pb_protos_events_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockSetWidgetViewId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockSetWidgetViewId) ProtoMessage() {}

func (x *EventBlockSetWidgetViewId) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockSetWidgetViewId.ProtoReflect.Descriptor instead.
func (*EventBlockSetWidgetViewId) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 4, 14, 2}
}

func (x *EventBlockSetWidgetViewId) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EventBlockFillDetails struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Details       *structpb.Struct       `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillDetails) Reset() {
	*x = EventBlockFillDetails{}
	mi := &file_pb_protos_events_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillDetails) ProtoMessage() {}

func (x *EventBlockFillDetails) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillDetails.ProtoReflect.Descriptor instead.
func (*EventBlockFillDetails) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 0}
}

func (x *EventBlockFillDetails) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockFillDetails) GetDetails() *structpb.Struct {
	if x != nil {
		return x.Details
	}
	return nil
}

type EventBlockFillDatabaseRecords struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Records       []*structpb.Struct     `protobuf:"bytes,2,rep,name=records,proto3" json:"records,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillDatabaseRecords) Reset() {
	*x = EventBlockFillDatabaseRecords{}
	mi := &file_pb_protos_events_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillDatabaseRecords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillDatabaseRecords) ProtoMessage() {}

func (x *EventBlockFillDatabaseRecords) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillDatabaseRecords.ProtoReflect.Descriptor instead.
func (*EventBlockFillDatabaseRecords) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 1}
}

func (x *EventBlockFillDatabaseRecords) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockFillDatabaseRecords) GetRecords() []*structpb.Struct {
	if x != nil {
		return x.Records
	}
	return nil
}

type EventBlockFillFields struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Fields        *structpb.Struct       `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillFields) Reset() {
	*x = EventBlockFillFields{}
	mi := &file_pb_protos_events_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillFields) ProtoMessage() {}

func (x *EventBlockFillFields) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillFields.ProtoReflect.Descriptor instead.
func (*EventBlockFillFields) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 2}
}

func (x *EventBlockFillFields) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockFillFields) GetFields() *structpb.Struct {
	if x != nil {
		return x.Fields
	}
	return nil
}

type EventBlockFillChildrenIds struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ChildrenIds   []string               `protobuf:"bytes,2,rep,name=childrenIds,proto3" json:"childrenIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillChildrenIds) Reset() {
	*x = EventBlockFillChildrenIds{}
	mi := &file_pb_protos_events_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillChildrenIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillChildrenIds) ProtoMessage() {}

func (x *EventBlockFillChildrenIds) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillChildrenIds.ProtoReflect.Descriptor instead.
func (*EventBlockFillChildrenIds) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 3}
}

func (x *EventBlockFillChildrenIds) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockFillChildrenIds) GetChildrenIds() []string {
	if x != nil {
		return x.ChildrenIds
	}
	return nil
}

type EventBlockFillRestrictions struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Id            string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Restrictions  *model.BlockRestrictions `protobuf:"bytes,2,opt,name=restrictions,proto3" json:"restrictions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillRestrictions) Reset() {
	*x = EventBlockFillRestrictions{}
	mi := &file_pb_protos_events_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillRestrictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillRestrictions) ProtoMessage() {}

func (x *EventBlockFillRestrictions) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillRestrictions.ProtoReflect.Descriptor instead.
func (*EventBlockFillRestrictions) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 4}
}

func (x *EventBlockFillRestrictions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockFillRestrictions) GetRestrictions() *model.BlockRestrictions {
	if x != nil {
		return x.Restrictions
	}
	return nil
}

type EventBlockFillBackgroundColor struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BackgroundColor string                 `protobuf:"bytes,2,opt,name=backgroundColor,proto3" json:"backgroundColor,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EventBlockFillBackgroundColor) Reset() {
	*x = EventBlockFillBackgroundColor{}
	mi := &file_pb_protos_events_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillBackgroundColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillBackgroundColor) ProtoMessage() {}

func (x *EventBlockFillBackgroundColor) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillBackgroundColor.ProtoReflect.Descriptor instead.
func (*EventBlockFillBackgroundColor) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 5}
}

func (x *EventBlockFillBackgroundColor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockFillBackgroundColor) GetBackgroundColor() string {
	if x != nil {
		return x.BackgroundColor
	}
	return ""
}

type EventBlockFillAlign struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Align         model.BlockAlign       `protobuf:"varint,2,opt,name=align,proto3,enum=anytype.model.BlockAlign" json:"align,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillAlign) Reset() {
	*x = EventBlockFillAlign{}
	mi := &file_pb_protos_events_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillAlign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillAlign) ProtoMessage() {}

func (x *EventBlockFillAlign) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillAlign.ProtoReflect.Descriptor instead.
func (*EventBlockFillAlign) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 6}
}

func (x *EventBlockFillAlign) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockFillAlign) GetAlign() model.BlockAlign {
	if x != nil {
		return x.Align
	}
	return model.BlockAlign(0)
}

type EventBlockFillText struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Id            string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Text          *EventBlockFillTextText    `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Style         *EventBlockFillTextStyle   `protobuf:"bytes,3,opt,name=style,proto3" json:"style,omitempty"`
	Marks         *EventBlockFillTextMarks   `protobuf:"bytes,4,opt,name=marks,proto3" json:"marks,omitempty"`
	Checked       *EventBlockFillTextChecked `protobuf:"bytes,5,opt,name=checked,proto3" json:"checked,omitempty"`
	Color         *EventBlockFillTextColor   `protobuf:"bytes,6,opt,name=color,proto3" json:"color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillText) Reset() {
	*x = EventBlockFillText{}
	mi := &file_pb_protos_events_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillText) ProtoMessage() {}

func (x *EventBlockFillText) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillText.ProtoReflect.Descriptor instead.
func (*EventBlockFillText) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 7}
}

func (x *EventBlockFillText) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockFillText) GetText() *EventBlockFillTextText {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *EventBlockFillText) GetStyle() *EventBlockFillTextStyle {
	if x != nil {
		return x.Style
	}
	return nil
}

func (x *EventBlockFillText) GetMarks() *EventBlockFillTextMarks {
	if x != nil {
		return x.Marks
	}
	return nil
}

func (x *EventBlockFillText) GetChecked() *EventBlockFillTextChecked {
	if x != nil {
		return x.Checked
	}
	return nil
}

func (x *EventBlockFillText) GetColor() *EventBlockFillTextColor {
	if x != nil {
		return x.Color
	}
	return nil
}

type EventBlockFillDiv struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Id            string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Style         *EventBlockFillDivStyle `protobuf:"bytes,2,opt,name=style,proto3" json:"style,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillDiv) Reset() {
	*x = EventBlockFillDiv{}
	mi := &file_pb_protos_events_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillDiv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillDiv) ProtoMessage() {}

func (x *EventBlockFillDiv) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillDiv.ProtoReflect.Descriptor instead.
func (*EventBlockFillDiv) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 8}
}

func (x *EventBlockFillDiv) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockFillDiv) GetStyle() *EventBlockFillDivStyle {
	if x != nil {
		return x.Style
	}
	return nil
}

type EventBlockFillFile struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Id            string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type          *EventBlockFillFileType  `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	State         *EventBlockFillFileState `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Mime          *EventBlockFillFileMime  `protobuf:"bytes,4,opt,name=mime,proto3" json:"mime,omitempty"`
	Hash          *EventBlockFillFileHash  `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`
	Name          *EventBlockFillFileName  `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Size          *EventBlockFillFileSize  `protobuf:"bytes,7,opt,name=size,proto3" json:"size,omitempty"`
	Style         *EventBlockFillFileStyle `protobuf:"bytes,8,opt,name=style,proto3" json:"style,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillFile) Reset() {
	*x = EventBlockFillFile{}
	mi := &file_pb_protos_events_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillFile) ProtoMessage() {}

func (x *EventBlockFillFile) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillFile.ProtoReflect.Descriptor instead.
func (*EventBlockFillFile) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 9}
}

func (x *EventBlockFillFile) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockFillFile) GetType() *EventBlockFillFileType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *EventBlockFillFile) GetState() *EventBlockFillFileState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *EventBlockFillFile) GetMime() *EventBlockFillFileMime {
	if x != nil {
		return x.Mime
	}
	return nil
}

func (x *EventBlockFillFile) GetHash() *EventBlockFillFileHash {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *EventBlockFillFile) GetName() *EventBlockFillFileName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *EventBlockFillFile) GetSize() *EventBlockFillFileSize {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *EventBlockFillFile) GetStyle() *EventBlockFillFileStyle {
	if x != nil {
		return x.Style
	}
	return nil
}

type EventBlockFillLink struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Id            string                           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TargetBlockId *EventBlockFillLinkTargetBlockId `protobuf:"bytes,2,opt,name=targetBlockId,proto3" json:"targetBlockId,omitempty"`
	Style         *EventBlockFillLinkStyle         `protobuf:"bytes,3,opt,name=style,proto3" json:"style,omitempty"`
	Fields        *EventBlockFillLinkFields        `protobuf:"bytes,4,opt,name=fields,proto3" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillLink) Reset() {
	*x = EventBlockFillLink{}
	mi := &file_pb_protos_events_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillLink) ProtoMessage() {}

func (x *EventBlockFillLink) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillLink.ProtoReflect.Descriptor instead.
func (*EventBlockFillLink) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 10}
}

func (x *EventBlockFillLink) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockFillLink) GetTargetBlockId() *EventBlockFillLinkTargetBlockId {
	if x != nil {
		return x.TargetBlockId
	}
	return nil
}

func (x *EventBlockFillLink) GetStyle() *EventBlockFillLinkStyle {
	if x != nil {
		return x.Style
	}
	return nil
}

func (x *EventBlockFillLink) GetFields() *EventBlockFillLinkFields {
	if x != nil {
		return x.Fields
	}
	return nil
}

type EventBlockFillBookmark struct {
	state          protoimpl.MessageState                `protogen:"open.v1"`
	Id             string                                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url            *EventBlockFillBookmarkUrl            `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Title          *EventBlockFillBookmarkTitle          `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description    *EventBlockFillBookmarkDescription    `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	ImageHash      *EventBlockFillBookmarkImageHash      `protobuf:"bytes,5,opt,name=imageHash,proto3" json:"imageHash,omitempty"`
	FaviconHash    *EventBlockFillBookmarkFaviconHash    `protobuf:"bytes,6,opt,name=faviconHash,proto3" json:"faviconHash,omitempty"`
	Type           *EventBlockFillBookmarkType           `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	TargetObjectId *EventBlockFillBookmarkTargetObjectId `protobuf:"bytes,8,opt,name=targetObjectId,proto3" json:"targetObjectId,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EventBlockFillBookmark) Reset() {
	*x = EventBlockFillBookmark{}
	mi := &file_pb_protos_events_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillBookmark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillBookmark) ProtoMessage() {}

func (x *EventBlockFillBookmark) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillBookmark.ProtoReflect.Descriptor instead.
func (*EventBlockFillBookmark) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 11}
}

func (x *EventBlockFillBookmark) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockFillBookmark) GetUrl() *EventBlockFillBookmarkUrl {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *EventBlockFillBookmark) GetTitle() *EventBlockFillBookmarkTitle {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *EventBlockFillBookmark) GetDescription() *EventBlockFillBookmarkDescription {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *EventBlockFillBookmark) GetImageHash() *EventBlockFillBookmarkImageHash {
	if x != nil {
		return x.ImageHash
	}
	return nil
}

func (x *EventBlockFillBookmark) GetFaviconHash() *EventBlockFillBookmarkFaviconHash {
	if x != nil {
		return x.FaviconHash
	}
	return nil
}

func (x *EventBlockFillBookmark) GetType() *EventBlockFillBookmarkType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *EventBlockFillBookmark) GetTargetObjectId() *EventBlockFillBookmarkTargetObjectId {
	if x != nil {
		return x.TargetObjectId
	}
	return nil
}

type EventBlockFillTextText struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillTextText) Reset() {
	*x = EventBlockFillTextText{}
	mi := &file_pb_protos_events_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillTextText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillTextText) ProtoMessage() {}

func (x *EventBlockFillTextText) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillTextText.ProtoReflect.Descriptor instead.
func (*EventBlockFillTextText) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 7, 0}
}

func (x *EventBlockFillTextText) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EventBlockFillTextStyle struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Value         model.BlockContentTextStyle `protobuf:"varint,1,opt,name=value,proto3,enum=anytype.model.BlockContentTextStyle" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillTextStyle) Reset() {
	*x = EventBlockFillTextStyle{}
	mi := &file_pb_protos_events_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillTextStyle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillTextStyle) ProtoMessage() {}

func (x *EventBlockFillTextStyle) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillTextStyle.ProtoReflect.Descriptor instead.
func (*EventBlockFillTextStyle) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 7, 1}
}

func (x *EventBlockFillTextStyle) GetValue() model.BlockContentTextStyle {
	if x != nil {
		return x.Value
	}
	return model.BlockContentTextStyle(0)
}

type EventBlockFillTextMarks struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Value         *model.BlockContentTextMarks `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillTextMarks) Reset() {
	*x = EventBlockFillTextMarks{}
	mi := &file_pb_protos_events_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillTextMarks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillTextMarks) ProtoMessage() {}

func (x *EventBlockFillTextMarks) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillTextMarks.ProtoReflect.Descriptor instead.
func (*EventBlockFillTextMarks) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 7, 2}
}

func (x *EventBlockFillTextMarks) GetValue() *model.BlockContentTextMarks {
	if x != nil {
		return x.Value
	}
	return nil
}

type EventBlockFillTextChecked struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         bool                   `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillTextChecked) Reset() {
	*x = EventBlockFillTextChecked{}
	mi := &file_pb_protos_events_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillTextChecked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillTextChecked) ProtoMessage() {}

func (x *EventBlockFillTextChecked) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillTextChecked.ProtoReflect.Descriptor instead.
func (*EventBlockFillTextChecked) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 7, 3}
}

func (x *EventBlockFillTextChecked) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type EventBlockFillTextColor struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillTextColor) Reset() {
	*x = EventBlockFillTextColor{}
	mi := &file_pb_protos_events_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillTextColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillTextColor) ProtoMessage() {}

func (x *EventBlockFillTextColor) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillTextColor.ProtoReflect.Descriptor instead.
func (*EventBlockFillTextColor) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 7, 4}
}

func (x *EventBlockFillTextColor) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EventBlockFillDivStyle struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Value         model.BlockContentDivStyle `protobuf:"varint,1,opt,name=value,proto3,enum=anytype.model.BlockContentDivStyle" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillDivStyle) Reset() {
	*x = EventBlockFillDivStyle{}
	mi := &file_pb_protos_events_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillDivStyle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillDivStyle) ProtoMessage() {}

func (x *EventBlockFillDivStyle) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillDivStyle.ProtoReflect.Descriptor instead.
func (*EventBlockFillDivStyle) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 8, 0}
}

func (x *EventBlockFillDivStyle) GetValue() model.BlockContentDivStyle {
	if x != nil {
		return x.Value
	}
	return model.BlockContentDivStyle(0)
}

type EventBlockFillFileName struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillFileName) Reset() {
	*x = EventBlockFillFileName{}
	mi := &file_pb_protos_events_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillFileName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillFileName) ProtoMessage() {}

func (x *EventBlockFillFileName) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillFileName.ProtoReflect.Descriptor instead.
func (*EventBlockFillFileName) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 9, 0}
}

func (x *EventBlockFillFileName) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EventBlockFillFileWidth struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         int32                  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillFileWidth) Reset() {
	*x = EventBlockFillFileWidth{}
	mi := &file_pb_protos_events_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillFileWidth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillFileWidth) ProtoMessage() {}

func (x *EventBlockFillFileWidth) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillFileWidth.ProtoReflect.Descriptor instead.
func (*EventBlockFillFileWidth) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 9, 1}
}

func (x *EventBlockFillFileWidth) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type EventBlockFillFileState struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Value         model.BlockContentFileState `protobuf:"varint,1,opt,name=value,proto3,enum=anytype.model.BlockContentFileState" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillFileState) Reset() {
	*x = EventBlockFillFileState{}
	mi := &file_pb_protos_events_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillFileState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillFileState) ProtoMessage() {}

func (x *EventBlockFillFileState) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillFileState.ProtoReflect.Descriptor instead.
func (*EventBlockFillFileState) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 9, 2}
}

func (x *EventBlockFillFileState) GetValue() model.BlockContentFileState {
	if x != nil {
		return x.Value
	}
	return model.BlockContentFileState(0)
}

type EventBlockFillFileType struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Value         model.BlockContentFileType `protobuf:"varint,1,opt,name=value,proto3,enum=anytype.model.BlockContentFileType" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillFileType) Reset() {
	*x = EventBlockFillFileType{}
	mi := &file_pb_protos_events_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillFileType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillFileType) ProtoMessage() {}

func (x *EventBlockFillFileType) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillFileType.ProtoReflect.Descriptor instead.
func (*EventBlockFillFileType) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 9, 3}
}

func (x *EventBlockFillFileType) GetValue() model.BlockContentFileType {
	if x != nil {
		return x.Value
	}
	return model.BlockContentFileType(0)
}

type EventBlockFillFileStyle struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Value         model.BlockContentFileStyle `protobuf:"varint,1,opt,name=value,proto3,enum=anytype.model.BlockContentFileStyle" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillFileStyle) Reset() {
	*x = EventBlockFillFileStyle{}
	mi := &file_pb_protos_events_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillFileStyle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillFileStyle) ProtoMessage() {}

func (x *EventBlockFillFileStyle) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillFileStyle.ProtoReflect.Descriptor instead.
func (*EventBlockFillFileStyle) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 9, 4}
}

func (x *EventBlockFillFileStyle) GetValue() model.BlockContentFileStyle {
	if x != nil {
		return x.Value
	}
	return model.BlockContentFileStyle(0)
}

type EventBlockFillFileHash struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillFileHash) Reset() {
	*x = EventBlockFillFileHash{}
	mi := &file_pb_protos_events_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillFileHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillFileHash) ProtoMessage() {}

func (x *EventBlockFillFileHash) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillFileHash.ProtoReflect.Descriptor instead.
func (*EventBlockFillFileHash) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 9, 5}
}

func (x *EventBlockFillFileHash) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EventBlockFillFileMime struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillFileMime) Reset() {
	*x = EventBlockFillFileMime{}
	mi := &file_pb_protos_events_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillFileMime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillFileMime) ProtoMessage() {}

func (x *EventBlockFillFileMime) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillFileMime.ProtoReflect.Descriptor instead.
func (*EventBlockFillFileMime) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 9, 6}
}

func (x *EventBlockFillFileMime) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EventBlockFillFileSize struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         int64                  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillFileSize) Reset() {
	*x = EventBlockFillFileSize{}
	mi := &file_pb_protos_events_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillFileSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillFileSize) ProtoMessage() {}

func (x *EventBlockFillFileSize) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillFileSize.ProtoReflect.Descriptor instead.
func (*EventBlockFillFileSize) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 9, 7}
}

func (x *EventBlockFillFileSize) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type EventBlockFillLinkTargetBlockId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillLinkTargetBlockId) Reset() {
	*x = EventBlockFillLinkTargetBlockId{}
	mi := &file_pb_protos_events_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillLinkTargetBlockId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillLinkTargetBlockId) ProtoMessage() {}

func (x *EventBlockFillLinkTargetBlockId) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillLinkTargetBlockId.ProtoReflect.Descriptor instead.
func (*EventBlockFillLinkTargetBlockId) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 10, 0}
}

func (x *EventBlockFillLinkTargetBlockId) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EventBlockFillLinkStyle struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Value         model.BlockContentLinkStyle `protobuf:"varint,1,opt,name=value,proto3,enum=anytype.model.BlockContentLinkStyle" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillLinkStyle) Reset() {
	*x = EventBlockFillLinkStyle{}
	mi := &file_pb_protos_events_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillLinkStyle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillLinkStyle) ProtoMessage() {}

func (x *EventBlockFillLinkStyle) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillLinkStyle.ProtoReflect.Descriptor instead.
func (*EventBlockFillLinkStyle) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 10, 1}
}

func (x *EventBlockFillLinkStyle) GetValue() model.BlockContentLinkStyle {
	if x != nil {
		return x.Value
	}
	return model.BlockContentLinkStyle(0)
}

type EventBlockFillLinkFields struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *structpb.Struct       `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillLinkFields) Reset() {
	*x = EventBlockFillLinkFields{}
	mi := &file_pb_protos_events_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillLinkFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillLinkFields) ProtoMessage() {}

func (x *EventBlockFillLinkFields) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillLinkFields.ProtoReflect.Descriptor instead.
func (*EventBlockFillLinkFields) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 10, 2}
}

func (x *EventBlockFillLinkFields) GetValue() *structpb.Struct {
	if x != nil {
		return x.Value
	}
	return nil
}

type EventBlockFillBookmarkUrl struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillBookmarkUrl) Reset() {
	*x = EventBlockFillBookmarkUrl{}
	mi := &file_pb_protos_events_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillBookmarkUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillBookmarkUrl) ProtoMessage() {}

func (x *EventBlockFillBookmarkUrl) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillBookmarkUrl.ProtoReflect.Descriptor instead.
func (*EventBlockFillBookmarkUrl) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 11, 0}
}

func (x *EventBlockFillBookmarkUrl) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EventBlockFillBookmarkTitle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillBookmarkTitle) Reset() {
	*x = EventBlockFillBookmarkTitle{}
	mi := &file_pb_protos_events_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillBookmarkTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillBookmarkTitle) ProtoMessage() {}

func (x *EventBlockFillBookmarkTitle) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillBookmarkTitle.ProtoReflect.Descriptor instead.
func (*EventBlockFillBookmarkTitle) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 11, 1}
}

func (x *EventBlockFillBookmarkTitle) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EventBlockFillBookmarkDescription struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillBookmarkDescription) Reset() {
	*x = EventBlockFillBookmarkDescription{}
	mi := &file_pb_protos_events_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillBookmarkDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillBookmarkDescription) ProtoMessage() {}

func (x *EventBlockFillBookmarkDescription) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillBookmarkDescription.ProtoReflect.Descriptor instead.
func (*EventBlockFillBookmarkDescription) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 11, 2}
}

func (x *EventBlockFillBookmarkDescription) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EventBlockFillBookmarkImageHash struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillBookmarkImageHash) Reset() {
	*x = EventBlockFillBookmarkImageHash{}
	mi := &file_pb_protos_events_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillBookmarkImageHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillBookmarkImageHash) ProtoMessage() {}

func (x *EventBlockFillBookmarkImageHash) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillBookmarkImageHash.ProtoReflect.Descriptor instead.
func (*EventBlockFillBookmarkImageHash) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 11, 3}
}

func (x *EventBlockFillBookmarkImageHash) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EventBlockFillBookmarkFaviconHash struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillBookmarkFaviconHash) Reset() {
	*x = EventBlockFillBookmarkFaviconHash{}
	mi := &file_pb_protos_events_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillBookmarkFaviconHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillBookmarkFaviconHash) ProtoMessage() {}

func (x *EventBlockFillBookmarkFaviconHash) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillBookmarkFaviconHash.ProtoReflect.Descriptor instead.
func (*EventBlockFillBookmarkFaviconHash) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 11, 4}
}

func (x *EventBlockFillBookmarkFaviconHash) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EventBlockFillBookmarkType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         model.LinkPreviewType  `protobuf:"varint,1,opt,name=value,proto3,enum=anytype.model.LinkPreviewType" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillBookmarkType) Reset() {
	*x = EventBlockFillBookmarkType{}
	mi := &file_pb_protos_events_proto_msgTypes[146]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillBookmarkType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillBookmarkType) ProtoMessage() {}

func (x *EventBlockFillBookmarkType) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[146]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillBookmarkType.ProtoReflect.Descriptor instead.
func (*EventBlockFillBookmarkType) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 11, 5}
}

func (x *EventBlockFillBookmarkType) GetValue() model.LinkPreviewType {
	if x != nil {
		return x.Value
	}
	return model.LinkPreviewType(0)
}

type EventBlockFillBookmarkTargetObjectId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockFillBookmarkTargetObjectId) Reset() {
	*x = EventBlockFillBookmarkTargetObjectId{}
	mi := &file_pb_protos_events_proto_msgTypes[147]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockFillBookmarkTargetObjectId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockFillBookmarkTargetObjectId) ProtoMessage() {}

func (x *EventBlockFillBookmarkTargetObjectId) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[147]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockFillBookmarkTargetObjectId.ProtoReflect.Descriptor instead.
func (*EventBlockFillBookmarkTargetObjectId) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 5, 11, 6}
}

func (x *EventBlockFillBookmarkTargetObjectId) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// sent when the view have been changed or added
type EventBlockDataviewViewSet struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Id            string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`         // dataview block's id
	ViewId        string                          `protobuf:"bytes,2,opt,name=viewId,proto3" json:"viewId,omitempty"` // view id, client should double check this to make sure client doesn't switch the active view in the middle
	View          *model.BlockContentDataviewView `protobuf:"bytes,3,opt,name=view,proto3" json:"view,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockDataviewViewSet) Reset() {
	*x = EventBlockDataviewViewSet{}
	mi := &file_pb_protos_events_proto_msgTypes[148]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataviewViewSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataviewViewSet) ProtoMessage() {}

func (x *EventBlockDataviewViewSet) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[148]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataviewViewSet.ProtoReflect.Descriptor instead.
func (*EventBlockDataviewViewSet) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 0}
}

func (x *EventBlockDataviewViewSet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockDataviewViewSet) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

func (x *EventBlockDataviewViewSet) GetView() *model.BlockContentDataviewView {
	if x != nil {
		return x.View
	}
	return nil
}

type EventBlockDataviewViewUpdate struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	Id            string                                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ViewId        string                                  `protobuf:"bytes,2,opt,name=viewId,proto3" json:"viewId,omitempty"`
	Filter        []*EventBlockDataviewViewUpdateFilter   `protobuf:"bytes,3,rep,name=filter,proto3" json:"filter,omitempty"`
	Relation      []*EventBlockDataviewViewUpdateRelation `protobuf:"bytes,4,rep,name=relation,proto3" json:"relation,omitempty"`
	Sort          []*EventBlockDataviewViewUpdateSort     `protobuf:"bytes,5,rep,name=sort,proto3" json:"sort,omitempty"`
	Fields        *EventBlockDataviewViewUpdateFields     `protobuf:"bytes,6,opt,name=fields,proto3" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockDataviewViewUpdate) Reset() {
	*x = EventBlockDataviewViewUpdate{}
	mi := &file_pb_protos_events_proto_msgTypes[149]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataviewViewUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataviewViewUpdate) ProtoMessage() {}

func (x *EventBlockDataviewViewUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[149]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataviewViewUpdate.ProtoReflect.Descriptor instead.
func (*EventBlockDataviewViewUpdate) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 1}
}

func (x *EventBlockDataviewViewUpdate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockDataviewViewUpdate) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

func (x *EventBlockDataviewViewUpdate) GetFilter() []*EventBlockDataviewViewUpdateFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *EventBlockDataviewViewUpdate) GetRelation() []*EventBlockDataviewViewUpdateRelation {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *EventBlockDataviewViewUpdate) GetSort() []*EventBlockDataviewViewUpdateSort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *EventBlockDataviewViewUpdate) GetFields() *EventBlockDataviewViewUpdateFields {
	if x != nil {
		return x.Fields
	}
	return nil
}

type EventBlockDataviewViewDelete struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`         // dataview block's id
	ViewId        string                 `protobuf:"bytes,2,opt,name=viewId,proto3" json:"viewId,omitempty"` // view id to remove
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockDataviewViewDelete) Reset() {
	*x = EventBlockDataviewViewDelete{}
	mi := &file_pb_protos_events_proto_msgTypes[150]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataviewViewDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataviewViewDelete) ProtoMessage() {}

func (x *EventBlockDataviewViewDelete) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[150]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataviewViewDelete.ProtoReflect.Descriptor instead.
func (*EventBlockDataviewViewDelete) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 2}
}

func (x *EventBlockDataviewViewDelete) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockDataviewViewDelete) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

type EventBlockDataviewViewOrder struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`           // dataview block's id
	ViewIds       []string               `protobuf:"bytes,2,rep,name=viewIds,proto3" json:"viewIds,omitempty"` // view ids in new order
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockDataviewViewOrder) Reset() {
	*x = EventBlockDataviewViewOrder{}
	mi := &file_pb_protos_events_proto_msgTypes[151]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataviewViewOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataviewViewOrder) ProtoMessage() {}

func (x *EventBlockDataviewViewOrder) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[151]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataviewViewOrder.ProtoReflect.Descriptor instead.
func (*EventBlockDataviewViewOrder) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 3}
}

func (x *EventBlockDataviewViewOrder) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockDataviewViewOrder) GetViewIds() []string {
	if x != nil {
		return x.ViewIds
	}
	return nil
}

type EventBlockDataviewSourceSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // dataview block's id
	Source        []string               `protobuf:"bytes,2,rep,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockDataviewSourceSet) Reset() {
	*x = EventBlockDataviewSourceSet{}
	mi := &file_pb_protos_events_proto_msgTypes[152]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataviewSourceSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataviewSourceSet) ProtoMessage() {}

func (x *EventBlockDataviewSourceSet) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[152]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataviewSourceSet.ProtoReflect.Descriptor instead.
func (*EventBlockDataviewSourceSet) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 4}
}

func (x *EventBlockDataviewSourceSet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockDataviewSourceSet) GetSource() []string {
	if x != nil {
		return x.Source
	}
	return nil
}

type EventBlockDataviewOldRelationDelete struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                   // dataview block's id
	RelationKey   string                 `protobuf:"bytes,2,opt,name=relationKey,proto3" json:"relationKey,omitempty"` // relation key to remove
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockDataviewOldRelationDelete) Reset() {
	*x = EventBlockDataviewOldRelationDelete{}
	mi := &file_pb_protos_events_proto_msgTypes[153]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataviewOldRelationDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataviewOldRelationDelete) ProtoMessage() {}

func (x *EventBlockDataviewOldRelationDelete) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[153]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataviewOldRelationDelete.ProtoReflect.Descriptor instead.
func (*EventBlockDataviewOldRelationDelete) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 5}
}

func (x *EventBlockDataviewOldRelationDelete) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockDataviewOldRelationDelete) GetRelationKey() string {
	if x != nil {
		return x.RelationKey
	}
	return ""
}

// sent when the dataview relation has been changed or added
type EventBlockDataviewOldRelationSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                   // dataview block's id
	RelationKey   string                 `protobuf:"bytes,2,opt,name=relationKey,proto3" json:"relationKey,omitempty"` // relation key to update
	Relation      *model.Relation        `protobuf:"bytes,3,opt,name=relation,proto3" json:"relation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockDataviewOldRelationSet) Reset() {
	*x = EventBlockDataviewOldRelationSet{}
	mi := &file_pb_protos_events_proto_msgTypes[154]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataviewOldRelationSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataviewOldRelationSet) ProtoMessage() {}

func (x *EventBlockDataviewOldRelationSet) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[154]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataviewOldRelationSet.ProtoReflect.Descriptor instead.
func (*EventBlockDataviewOldRelationSet) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 6}
}

func (x *EventBlockDataviewOldRelationSet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockDataviewOldRelationSet) GetRelationKey() string {
	if x != nil {
		return x.RelationKey
	}
	return ""
}

func (x *EventBlockDataviewOldRelationSet) GetRelation() *model.Relation {
	if x != nil {
		return x.Relation
	}
	return nil
}

type EventBlockDataviewRelationDelete struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                     // dataview block's id
	RelationKeys  []string               `protobuf:"bytes,2,rep,name=relationKeys,proto3" json:"relationKeys,omitempty"` // relation key to remove
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockDataviewRelationDelete) Reset() {
	*x = EventBlockDataviewRelationDelete{}
	mi := &file_pb_protos_events_proto_msgTypes[155]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataviewRelationDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataviewRelationDelete) ProtoMessage() {}

func (x *EventBlockDataviewRelationDelete) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[155]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataviewRelationDelete.ProtoReflect.Descriptor instead.
func (*EventBlockDataviewRelationDelete) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 7}
}

func (x *EventBlockDataviewRelationDelete) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockDataviewRelationDelete) GetRelationKeys() []string {
	if x != nil {
		return x.RelationKeys
	}
	return nil
}

// sent when the dataview relation has been changed or added
type EventBlockDataviewRelationSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                       // dataview block's id
	RelationLinks []*model.RelationLink  `protobuf:"bytes,2,rep,name=relationLinks,proto3" json:"relationLinks,omitempty"` // relation id to update
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockDataviewRelationSet) Reset() {
	*x = EventBlockDataviewRelationSet{}
	mi := &file_pb_protos_events_proto_msgTypes[156]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataviewRelationSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataviewRelationSet) ProtoMessage() {}

func (x *EventBlockDataviewRelationSet) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[156]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataviewRelationSet.ProtoReflect.Descriptor instead.
func (*EventBlockDataviewRelationSet) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 8}
}

func (x *EventBlockDataviewRelationSet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockDataviewRelationSet) GetRelationLinks() []*model.RelationLink {
	if x != nil {
		return x.RelationLinks
	}
	return nil
}

type EventBlockDataviewGroupOrderUpdate struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	Id            string                                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // dataview block's id
	GroupOrder    *model.BlockContentDataviewGroupOrder `protobuf:"bytes,2,opt,name=groupOrder,proto3" json:"groupOrder,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockDataviewGroupOrderUpdate) Reset() {
	*x = EventBlockDataviewGroupOrderUpdate{}
	mi := &file_pb_protos_events_proto_msgTypes[157]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataviewGroupOrderUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataviewGroupOrderUpdate) ProtoMessage() {}

func (x *EventBlockDataviewGroupOrderUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[157]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataviewGroupOrderUpdate.ProtoReflect.Descriptor instead.
func (*EventBlockDataviewGroupOrderUpdate) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 9}
}

func (x *EventBlockDataviewGroupOrderUpdate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockDataviewGroupOrderUpdate) GetGroupOrder() *model.BlockContentDataviewGroupOrder {
	if x != nil {
		return x.GroupOrder
	}
	return nil
}

type EventBlockDataviewObjectOrderUpdate struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Id            string                           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // dataview block's id
	ViewId        string                           `protobuf:"bytes,2,opt,name=viewId,proto3" json:"viewId,omitempty"`
	GroupId       string                           `protobuf:"bytes,3,opt,name=groupId,proto3" json:"groupId,omitempty"`
	SliceChanges  []*EventBlockDataviewSliceChange `protobuf:"bytes,4,rep,name=sliceChanges,proto3" json:"sliceChanges,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockDataviewObjectOrderUpdate) Reset() {
	*x = EventBlockDataviewObjectOrderUpdate{}
	mi := &file_pb_protos_events_proto_msgTypes[158]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataviewObjectOrderUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataviewObjectOrderUpdate) ProtoMessage() {}

func (x *EventBlockDataviewObjectOrderUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[158]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataviewObjectOrderUpdate.ProtoReflect.Descriptor instead.
func (*EventBlockDataviewObjectOrderUpdate) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 10}
}

func (x *EventBlockDataviewObjectOrderUpdate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockDataviewObjectOrderUpdate) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

func (x *EventBlockDataviewObjectOrderUpdate) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *EventBlockDataviewObjectOrderUpdate) GetSliceChanges() []*EventBlockDataviewSliceChange {
	if x != nil {
		return x.SliceChanges
	}
	return nil
}

type EventBlockDataviewSliceChange struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Op            EventBlockDataviewSliceOperation `protobuf:"varint,1,opt,name=op,proto3,enum=anytype.EventBlockDataviewSliceOperation" json:"op,omitempty"`
	Ids           []string                         `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	AfterId       string                           `protobuf:"bytes,3,opt,name=afterId,proto3" json:"afterId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockDataviewSliceChange) Reset() {
	*x = EventBlockDataviewSliceChange{}
	mi := &file_pb_protos_events_proto_msgTypes[159]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataviewSliceChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataviewSliceChange) ProtoMessage() {}

func (x *EventBlockDataviewSliceChange) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[159]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataviewSliceChange.ProtoReflect.Descriptor instead.
func (*EventBlockDataviewSliceChange) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 11}
}

func (x *EventBlockDataviewSliceChange) GetOp() EventBlockDataviewSliceOperation {
	if x != nil {
		return x.Op
	}
	return EventBlockDataview_SliceOperationNone
}

func (x *EventBlockDataviewSliceChange) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *EventBlockDataviewSliceChange) GetAfterId() string {
	if x != nil {
		return x.AfterId
	}
	return ""
}

type EventBlockDataviewTargetObjectIdSet struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // dataview block's id
	TargetObjectId string                 `protobuf:"bytes,2,opt,name=targetObjectId,proto3" json:"targetObjectId,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EventBlockDataviewTargetObjectIdSet) Reset() {
	*x = EventBlockDataviewTargetObjectIdSet{}
	mi := &file_pb_protos_events_proto_msgTypes[160]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataviewTargetObjectIdSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataviewTargetObjectIdSet) ProtoMessage() {}

func (x *EventBlockDataviewTargetObjectIdSet) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[160]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataviewTargetObjectIdSet.ProtoReflect.Descriptor instead.
func (*EventBlockDataviewTargetObjectIdSet) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 12}
}

func (x *EventBlockDataviewTargetObjectIdSet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockDataviewTargetObjectIdSet) GetTargetObjectId() string {
	if x != nil {
		return x.TargetObjectId
	}
	return ""
}

type EventBlockDataviewIsCollectionSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // dataview block's id
	Value         bool                   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockDataviewIsCollectionSet) Reset() {
	*x = EventBlockDataviewIsCollectionSet{}
	mi := &file_pb_protos_events_proto_msgTypes[161]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataviewIsCollectionSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataviewIsCollectionSet) ProtoMessage() {}

func (x *EventBlockDataviewIsCollectionSet) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[161]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataviewIsCollectionSet.ProtoReflect.Descriptor instead.
func (*EventBlockDataviewIsCollectionSet) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 13}
}

func (x *EventBlockDataviewIsCollectionSet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockDataviewIsCollectionSet) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type EventBlockDataviewViewUpdateFields struct {
	state                 protoimpl.MessageState             `protogen:"open.v1"`
	Type                  model.BlockContentDataviewViewType `protobuf:"varint,1,opt,name=type,proto3,enum=anytype.model.BlockContentDataviewViewType" json:"type,omitempty"`
	Name                  string                             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CoverRelationKey      string                             `protobuf:"bytes,3,opt,name=coverRelationKey,proto3" json:"coverRelationKey,omitempty"`                                  // Relation used for cover in gallery
	HideIcon              bool                               `protobuf:"varint,4,opt,name=hideIcon,proto3" json:"hideIcon,omitempty"`                                                 // Hide icon near name
	CardSize              model.BlockContentDataviewViewSize `protobuf:"varint,5,opt,name=cardSize,proto3,enum=anytype.model.BlockContentDataviewViewSize" json:"cardSize,omitempty"` // Gallery card size
	CoverFit              bool                               `protobuf:"varint,6,opt,name=coverFit,proto3" json:"coverFit,omitempty"`                                                 // Image fits container
	GroupRelationKey      string                             `protobuf:"bytes,7,opt,name=groupRelationKey,proto3" json:"groupRelationKey,omitempty"`                                  // Group view by this relationKey
	GroupBackgroundColors bool                               `protobuf:"varint,8,opt,name=groupBackgroundColors,proto3" json:"groupBackgroundColors,omitempty"`                       // Enable backgrounds in groups
	PageLimit             int32                              `protobuf:"varint,9,opt,name=pageLimit,proto3" json:"pageLimit,omitempty"`                                               // Limit of objects shown in widget
	DefaultTemplateId     string                             `protobuf:"bytes,10,opt,name=defaultTemplateId,proto3" json:"defaultTemplateId,omitempty"`                               // Id of template object set default for the view
	DefaultObjectTypeId   string                             `protobuf:"bytes,15,opt,name=defaultObjectTypeId,proto3" json:"defaultObjectTypeId,omitempty"`                           // Default object type that is chosen for new object created within the view
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *EventBlockDataviewViewUpdateFields) Reset() {
	*x = EventBlockDataviewViewUpdateFields{}
	mi := &file_pb_protos_events_proto_msgTypes[162]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataviewViewUpdateFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataviewViewUpdateFields) ProtoMessage() {}

func (x *EventBlockDataviewViewUpdateFields) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[162]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataviewViewUpdateFields.ProtoReflect.Descriptor instead.
func (*EventBlockDataviewViewUpdateFields) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 1, 0}
}

func (x *EventBlockDataviewViewUpdateFields) GetType() model.BlockContentDataviewViewType {
	if x != nil {
		return x.Type
	}
	return model.BlockContentDataviewViewType(0)
}

func (x *EventBlockDataviewViewUpdateFields) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventBlockDataviewViewUpdateFields) GetCoverRelationKey() string {
	if x != nil {
		return x.CoverRelationKey
	}
	return ""
}

func (x *EventBlockDataviewViewUpdateFields) GetHideIcon() bool {
	if x != nil {
		return x.HideIcon
	}
	return false
}

func (x *EventBlockDataviewViewUpdateFields) GetCardSize() model.BlockContentDataviewViewSize {
	if x != nil {
		return x.CardSize
	}
	return model.BlockContentDataviewViewSize(0)
}

func (x *EventBlockDataviewViewUpdateFields) GetCoverFit() bool {
	if x != nil {
		return x.CoverFit
	}
	return false
}

func (x *EventBlockDataviewViewUpdateFields) GetGroupRelationKey() string {
	if x != nil {
		return x.GroupRelationKey
	}
	return ""
}

func (x *EventBlockDataviewViewUpdateFields) GetGroupBackgroundColors() bool {
	if x != nil {
		return x.GroupBackgroundColors
	}
	return false
}

func (x *EventBlockDataviewViewUpdateFields) GetPageLimit() int32 {
	if x != nil {
		return x.PageLimit
	}
	return 0
}

func (x *EventBlockDataviewViewUpdateFields) GetDefaultTemplateId() string {
	if x != nil {
		return x.DefaultTemplateId
	}
	return ""
}

func (x *EventBlockDataviewViewUpdateFields) GetDefaultObjectTypeId() string {
	if x != nil {
		return x.DefaultObjectTypeId
	}
	return ""
}

type EventBlockDataviewViewUpdateFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Operation:
	//
	//	*EventBlockDataviewViewUpdateFilterOperationOfAdd
	//	*EventBlockDataviewViewUpdateFilterOperationOfRemove
	//	*EventBlockDataviewViewUpdateFilterOperationOfUpdate
	//	*EventBlockDataviewViewUpdateFilterOperationOfMove
	Operation     IsEventBlockDataviewViewUpdateFilterOperation `protobuf_oneof:"operation"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockDataviewViewUpdateFilter) Reset() {
	*x = EventBlockDataviewViewUpdateFilter{}
	mi := &file_pb_protos_events_proto_msgTypes[163]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataviewViewUpdateFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataviewViewUpdateFilter) ProtoMessage() {}

func (x *EventBlockDataviewViewUpdateFilter) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[163]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataviewViewUpdateFilter.ProtoReflect.Descriptor instead.
func (*EventBlockDataviewViewUpdateFilter) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 1, 1}
}

func (x *EventBlockDataviewViewUpdateFilter) GetOperation() IsEventBlockDataviewViewUpdateFilterOperation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *EventBlockDataviewViewUpdateFilter) GetAdd() *EventBlockDataviewViewUpdateFilterAdd {
	if x != nil {
		if x, ok := x.Operation.(*EventBlockDataviewViewUpdateFilterOperationOfAdd); ok {
			return x.Add
		}
	}
	return nil
}

func (x *EventBlockDataviewViewUpdateFilter) GetRemove() *EventBlockDataviewViewUpdateFilterRemove {
	if x != nil {
		if x, ok := x.Operation.(*EventBlockDataviewViewUpdateFilterOperationOfRemove); ok {
			return x.Remove
		}
	}
	return nil
}

func (x *EventBlockDataviewViewUpdateFilter) GetUpdate() *EventBlockDataviewViewUpdateFilterUpdate {
	if x != nil {
		if x, ok := x.Operation.(*EventBlockDataviewViewUpdateFilterOperationOfUpdate); ok {
			return x.Update
		}
	}
	return nil
}

func (x *EventBlockDataviewViewUpdateFilter) GetMove() *EventBlockDataviewViewUpdateFilterMove {
	if x != nil {
		if x, ok := x.Operation.(*EventBlockDataviewViewUpdateFilterOperationOfMove); ok {
			return x.Move
		}
	}
	return nil
}

type IsEventBlockDataviewViewUpdateFilterOperation interface {
	IsEventBlockDataviewViewUpdateFilterOperation()
}

type EventBlockDataviewViewUpdateFilterOperationOfAdd struct {
	Add *EventBlockDataviewViewUpdateFilterAdd `protobuf:"bytes,1,opt,name=add,proto3,oneof" json:"add,omitempty"`
}

type EventBlockDataviewViewUpdateFilterOperationOfRemove struct {
	Remove *EventBlockDataviewViewUpdateFilterRemove `protobuf:"bytes,2,opt,name=remove,proto3,oneof" json:"remove,omitempty"`
}

type EventBlockDataviewViewUpdateFilterOperationOfUpdate struct {
	Update *EventBlockDataviewViewUpdateFilterUpdate `protobuf:"bytes,3,opt,name=update,proto3,oneof" json:"update,omitempty"`
}

type EventBlockDataviewViewUpdateFilterOperationOfMove struct {
	Move *EventBlockDataviewViewUpdateFilterMove `protobuf:"bytes,4,opt,name=move,proto3,oneof" json:"move,omitempty"`
}

func (*EventBlockDataviewViewUpdateFilterOperationOfAdd) IsEventBlockDataviewViewUpdateFilterOperation() {
}

func (*EventBlockDataviewViewUpdateFilterOperationOfRemove) IsEventBlockDataviewViewUpdateFilterOperation() {
}

func (*EventBlockDataviewViewUpdateFilterOperationOfUpdate) IsEventBlockDataviewViewUpdateFilterOperation() {
}

func (*EventBlockDataviewViewUpdateFilterOperationOfMove) IsEventBlockDataviewViewUpdateFilterOperation() {
}

type EventBlockDataviewViewUpdateRelation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Operation:
	//
	//	*EventBlockDataviewViewUpdateRelationOperationOfAdd
	//	*EventBlockDataviewViewUpdateRelationOperationOfRemove
	//	*EventBlockDataviewViewUpdateRelationOperationOfUpdate
	//	*EventBlockDataviewViewUpdateRelationOperationOfMove
	Operation     IsEventBlockDataviewViewUpdateRelationOperation `protobuf_oneof:"operation"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockDataviewViewUpdateRelation) Reset() {
	*x = EventBlockDataviewViewUpdateRelation{}
	mi := &file_pb_protos_events_proto_msgTypes[164]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataviewViewUpdateRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataviewViewUpdateRelation) ProtoMessage() {}

func (x *EventBlockDataviewViewUpdateRelation) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[164]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataviewViewUpdateRelation.ProtoReflect.Descriptor instead.
func (*EventBlockDataviewViewUpdateRelation) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 1, 2}
}

func (x *EventBlockDataviewViewUpdateRelation) GetOperation() IsEventBlockDataviewViewUpdateRelationOperation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *EventBlockDataviewViewUpdateRelation) GetAdd() *EventBlockDataviewViewUpdateRelationAdd {
	if x != nil {
		if x, ok := x.Operation.(*EventBlockDataviewViewUpdateRelationOperationOfAdd); ok {
			return x.Add
		}
	}
	return nil
}

func (x *EventBlockDataviewViewUpdateRelation) GetRemove() *EventBlockDataviewViewUpdateRelationRemove {
	if x != nil {
		if x, ok := x.Operation.(*EventBlockDataviewViewUpdateRelationOperationOfRemove); ok {
			return x.Remove
		}
	}
	return nil
}

func (x *EventBlockDataviewViewUpdateRelation) GetUpdate() *EventBlockDataviewViewUpdateRelationUpdate {
	if x != nil {
		if x, ok := x.Operation.(*EventBlockDataviewViewUpdateRelationOperationOfUpdate); ok {
			return x.Update
		}
	}
	return nil
}

func (x *EventBlockDataviewViewUpdateRelation) GetMove() *EventBlockDataviewViewUpdateRelationMove {
	if x != nil {
		if x, ok := x.Operation.(*EventBlockDataviewViewUpdateRelationOperationOfMove); ok {
			return x.Move
		}
	}
	return nil
}

type IsEventBlockDataviewViewUpdateRelationOperation interface {
	IsEventBlockDataviewViewUpdateRelationOperation()
}

type EventBlockDataviewViewUpdateRelationOperationOfAdd struct {
	Add *EventBlockDataviewViewUpdateRelationAdd `protobuf:"bytes,1,opt,name=add,proto3,oneof" json:"add,omitempty"`
}

type EventBlockDataviewViewUpdateRelationOperationOfRemove struct {
	Remove *EventBlockDataviewViewUpdateRelationRemove `protobuf:"bytes,2,opt,name=remove,proto3,oneof" json:"remove,omitempty"`
}

type EventBlockDataviewViewUpdateRelationOperationOfUpdate struct {
	Update *EventBlockDataviewViewUpdateRelationUpdate `protobuf:"bytes,3,opt,name=update,proto3,oneof" json:"update,omitempty"`
}

type EventBlockDataviewViewUpdateRelationOperationOfMove struct {
	Move *EventBlockDataviewViewUpdateRelationMove `protobuf:"bytes,4,opt,name=move,proto3,oneof" json:"move,omitempty"`
}

func (*EventBlockDataviewViewUpdateRelationOperationOfAdd) IsEventBlockDataviewViewUpdateRelationOperation() {
}

func (*EventBlockDataviewViewUpdateRelationOperationOfRemove) IsEventBlockDataviewViewUpdateRelationOperation() {
}

func (*EventBlockDataviewViewUpdateRelationOperationOfUpdate) IsEventBlockDataviewViewUpdateRelationOperation() {
}

func (*EventBlockDataviewViewUpdateRelationOperationOfMove) IsEventBlockDataviewViewUpdateRelationOperation() {
}

type EventBlockDataviewViewUpdateSort struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Operation:
	//
	//	*EventBlockDataviewViewUpdateSortOperationOfAdd
	//	*EventBlockDataviewViewUpdateSortOperationOfRemove
	//	*EventBlockDataviewViewUpdateSortOperationOfUpdate
	//	*EventBlockDataviewViewUpdateSortOperationOfMove
	Operation     IsEventBlockDataviewViewUpdateSortOperation `protobuf_oneof:"operation"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockDataviewViewUpdateSort) Reset() {
	*x = EventBlockDataviewViewUpdateSort{}
	mi := &file_pb_protos_events_proto_msgTypes[165]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataviewViewUpdateSort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataviewViewUpdateSort) ProtoMessage() {}

func (x *EventBlockDataviewViewUpdateSort) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[165]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataviewViewUpdateSort.ProtoReflect.Descriptor instead.
func (*EventBlockDataviewViewUpdateSort) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 1, 3}
}

func (x *EventBlockDataviewViewUpdateSort) GetOperation() IsEventBlockDataviewViewUpdateSortOperation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *EventBlockDataviewViewUpdateSort) GetAdd() *EventBlockDataviewViewUpdateSortAdd {
	if x != nil {
		if x, ok := x.Operation.(*EventBlockDataviewViewUpdateSortOperationOfAdd); ok {
			return x.Add
		}
	}
	return nil
}

func (x *EventBlockDataviewViewUpdateSort) GetRemove() *EventBlockDataviewViewUpdateSortRemove {
	if x != nil {
		if x, ok := x.Operation.(*EventBlockDataviewViewUpdateSortOperationOfRemove); ok {
			return x.Remove
		}
	}
	return nil
}

func (x *EventBlockDataviewViewUpdateSort) GetUpdate() *EventBlockDataviewViewUpdateSortUpdate {
	if x != nil {
		if x, ok := x.Operation.(*EventBlockDataviewViewUpdateSortOperationOfUpdate); ok {
			return x.Update
		}
	}
	return nil
}

func (x *EventBlockDataviewViewUpdateSort) GetMove() *EventBlockDataviewViewUpdateSortMove {
	if x != nil {
		if x, ok := x.Operation.(*EventBlockDataviewViewUpdateSortOperationOfMove); ok {
			return x.Move
		}
	}
	return nil
}

type IsEventBlockDataviewViewUpdateSortOperation interface {
	IsEventBlockDataviewViewUpdateSortOperation()
}

type EventBlockDataviewViewUpdateSortOperationOfAdd struct {
	Add *EventBlockDataviewViewUpdateSortAdd `protobuf:"bytes,1,opt,name=add,proto3,oneof" json:"add,omitempty"`
}

type EventBlockDataviewViewUpdateSortOperationOfRemove struct {
	Remove *EventBlockDataviewViewUpdateSortRemove `protobuf:"bytes,2,opt,name=remove,proto3,oneof" json:"remove,omitempty"`
}

type EventBlockDataviewViewUpdateSortOperationOfUpdate struct {
	Update *EventBlockDataviewViewUpdateSortUpdate `protobuf:"bytes,3,opt,name=update,proto3,oneof" json:"update,omitempty"`
}

type EventBlockDataviewViewUpdateSortOperationOfMove struct {
	Move *EventBlockDataviewViewUpdateSortMove `protobuf:"bytes,4,opt,name=move,proto3,oneof" json:"move,omitempty"`
}

func (*EventBlockDataviewViewUpdateSortOperationOfAdd) IsEventBlockDataviewViewUpdateSortOperation() {
}

func (*EventBlockDataviewViewUpdateSortOperationOfRemove) IsEventBlockDataviewViewUpdateSortOperation() {
}

func (*EventBlockDataviewViewUpdateSortOperationOfUpdate) IsEventBlockDataviewViewUpdateSortOperation() {
}

func (*EventBlockDataviewViewUpdateSortOperationOfMove) IsEventBlockDataviewViewUpdateSortOperation() {
}

type EventBlockDataviewViewUpdateFilterAdd struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	AfterId       string                              `protobuf:"bytes,1,opt,name=afterId,proto3" json:"afterId,omitempty"`
	Items         []*model.BlockContentDataviewFilter `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockDataviewViewUpdateFilterAdd) Reset() {
	*x = EventBlockDataviewViewUpdateFilterAdd{}
	mi := &file_pb_protos_events_proto_msgTypes[166]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataviewViewUpdateFilterAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataviewViewUpdateFilterAdd) ProtoMessage() {}

func (x *EventBlockDataviewViewUpdateFilterAdd) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[166]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataviewViewUpdateFilterAdd.ProtoReflect.Descriptor instead.
func (*EventBlockDataviewViewUpdateFilterAdd) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 1, 1, 0}
}

func (x *EventBlockDataviewViewUpdateFilterAdd) GetAfterId() string {
	if x != nil {
		return x.AfterId
	}
	return ""
}

func (x *EventBlockDataviewViewUpdateFilterAdd) GetItems() []*model.BlockContentDataviewFilter {
	if x != nil {
		return x.Items
	}
	return nil
}

type EventBlockDataviewViewUpdateFilterRemove struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []string               `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockDataviewViewUpdateFilterRemove) Reset() {
	*x = EventBlockDataviewViewUpdateFilterRemove{}
	mi := &file_pb_protos_events_proto_msgTypes[167]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataviewViewUpdateFilterRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataviewViewUpdateFilterRemove) ProtoMessage() {}

func (x *EventBlockDataviewViewUpdateFilterRemove) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[167]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataviewViewUpdateFilterRemove.ProtoReflect.Descriptor instead.
func (*EventBlockDataviewViewUpdateFilterRemove) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 1, 1, 1}
}

func (x *EventBlockDataviewViewUpdateFilterRemove) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type EventBlockDataviewViewUpdateFilterUpdate struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Id            string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Item          *model.BlockContentDataviewFilter `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockDataviewViewUpdateFilterUpdate) Reset() {
	*x = EventBlockDataviewViewUpdateFilterUpdate{}
	mi := &file_pb_protos_events_proto_msgTypes[168]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataviewViewUpdateFilterUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataviewViewUpdateFilterUpdate) ProtoMessage() {}

func (x *EventBlockDataviewViewUpdateFilterUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[168]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataviewViewUpdateFilterUpdate.ProtoReflect.Descriptor instead.
func (*EventBlockDataviewViewUpdateFilterUpdate) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 1, 1, 2}
}

func (x *EventBlockDataviewViewUpdateFilterUpdate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockDataviewViewUpdateFilterUpdate) GetItem() *model.BlockContentDataviewFilter {
	if x != nil {
		return x.Item
	}
	return nil
}

type EventBlockDataviewViewUpdateFilterMove struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AfterId       string                 `protobuf:"bytes,1,opt,name=afterId,proto3" json:"afterId,omitempty"`
	Ids           []string               `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockDataviewViewUpdateFilterMove) Reset() {
	*x = EventBlockDataviewViewUpdateFilterMove{}
	mi := &file_pb_protos_events_proto_msgTypes[169]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataviewViewUpdateFilterMove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataviewViewUpdateFilterMove) ProtoMessage() {}

func (x *EventBlockDataviewViewUpdateFilterMove) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[169]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataviewViewUpdateFilterMove.ProtoReflect.Descriptor instead.
func (*EventBlockDataviewViewUpdateFilterMove) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 1, 1, 3}
}

func (x *EventBlockDataviewViewUpdateFilterMove) GetAfterId() string {
	if x != nil {
		return x.AfterId
	}
	return ""
}

func (x *EventBlockDataviewViewUpdateFilterMove) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type EventBlockDataviewViewUpdateRelationAdd struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	AfterId       string                                `protobuf:"bytes,1,opt,name=afterId,proto3" json:"afterId,omitempty"`
	Items         []*model.BlockContentDataviewRelation `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockDataviewViewUpdateRelationAdd) Reset() {
	*x = EventBlockDataviewViewUpdateRelationAdd{}
	mi := &file_pb_protos_events_proto_msgTypes[170]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataviewViewUpdateRelationAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataviewViewUpdateRelationAdd) ProtoMessage() {}

func (x *EventBlockDataviewViewUpdateRelationAdd) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[170]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataviewViewUpdateRelationAdd.ProtoReflect.Descriptor instead.
func (*EventBlockDataviewViewUpdateRelationAdd) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 1, 2, 0}
}

func (x *EventBlockDataviewViewUpdateRelationAdd) GetAfterId() string {
	if x != nil {
		return x.AfterId
	}
	return ""
}

func (x *EventBlockDataviewViewUpdateRelationAdd) GetItems() []*model.BlockContentDataviewRelation {
	if x != nil {
		return x.Items
	}
	return nil
}

type EventBlockDataviewViewUpdateRelationRemove struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []string               `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockDataviewViewUpdateRelationRemove) Reset() {
	*x = EventBlockDataviewViewUpdateRelationRemove{}
	mi := &file_pb_protos_events_proto_msgTypes[171]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataviewViewUpdateRelationRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataviewViewUpdateRelationRemove) ProtoMessage() {}

func (x *EventBlockDataviewViewUpdateRelationRemove) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[171]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataviewViewUpdateRelationRemove.ProtoReflect.Descriptor instead.
func (*EventBlockDataviewViewUpdateRelationRemove) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 1, 2, 1}
}

func (x *EventBlockDataviewViewUpdateRelationRemove) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type EventBlockDataviewViewUpdateRelationUpdate struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Id            string                              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Item          *model.BlockContentDataviewRelation `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockDataviewViewUpdateRelationUpdate) Reset() {
	*x = EventBlockDataviewViewUpdateRelationUpdate{}
	mi := &file_pb_protos_events_proto_msgTypes[172]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataviewViewUpdateRelationUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataviewViewUpdateRelationUpdate) ProtoMessage() {}

func (x *EventBlockDataviewViewUpdateRelationUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[172]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataviewViewUpdateRelationUpdate.ProtoReflect.Descriptor instead.
func (*EventBlockDataviewViewUpdateRelationUpdate) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 1, 2, 2}
}

func (x *EventBlockDataviewViewUpdateRelationUpdate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockDataviewViewUpdateRelationUpdate) GetItem() *model.BlockContentDataviewRelation {
	if x != nil {
		return x.Item
	}
	return nil
}

type EventBlockDataviewViewUpdateRelationMove struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AfterId       string                 `protobuf:"bytes,1,opt,name=afterId,proto3" json:"afterId,omitempty"`
	Ids           []string               `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockDataviewViewUpdateRelationMove) Reset() {
	*x = EventBlockDataviewViewUpdateRelationMove{}
	mi := &file_pb_protos_events_proto_msgTypes[173]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataviewViewUpdateRelationMove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataviewViewUpdateRelationMove) ProtoMessage() {}

func (x *EventBlockDataviewViewUpdateRelationMove) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[173]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataviewViewUpdateRelationMove.ProtoReflect.Descriptor instead.
func (*EventBlockDataviewViewUpdateRelationMove) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 1, 2, 3}
}

func (x *EventBlockDataviewViewUpdateRelationMove) GetAfterId() string {
	if x != nil {
		return x.AfterId
	}
	return ""
}

func (x *EventBlockDataviewViewUpdateRelationMove) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type EventBlockDataviewViewUpdateSortAdd struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	AfterId       string                            `protobuf:"bytes,1,opt,name=afterId,proto3" json:"afterId,omitempty"`
	Items         []*model.BlockContentDataviewSort `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockDataviewViewUpdateSortAdd) Reset() {
	*x = EventBlockDataviewViewUpdateSortAdd{}
	mi := &file_pb_protos_events_proto_msgTypes[174]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataviewViewUpdateSortAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataviewViewUpdateSortAdd) ProtoMessage() {}

func (x *EventBlockDataviewViewUpdateSortAdd) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[174]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataviewViewUpdateSortAdd.ProtoReflect.Descriptor instead.
func (*EventBlockDataviewViewUpdateSortAdd) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 1, 3, 0}
}

func (x *EventBlockDataviewViewUpdateSortAdd) GetAfterId() string {
	if x != nil {
		return x.AfterId
	}
	return ""
}

func (x *EventBlockDataviewViewUpdateSortAdd) GetItems() []*model.BlockContentDataviewSort {
	if x != nil {
		return x.Items
	}
	return nil
}

type EventBlockDataviewViewUpdateSortRemove struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []string               `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockDataviewViewUpdateSortRemove) Reset() {
	*x = EventBlockDataviewViewUpdateSortRemove{}
	mi := &file_pb_protos_events_proto_msgTypes[175]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataviewViewUpdateSortRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataviewViewUpdateSortRemove) ProtoMessage() {}

func (x *EventBlockDataviewViewUpdateSortRemove) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[175]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataviewViewUpdateSortRemove.ProtoReflect.Descriptor instead.
func (*EventBlockDataviewViewUpdateSortRemove) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 1, 3, 1}
}

func (x *EventBlockDataviewViewUpdateSortRemove) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type EventBlockDataviewViewUpdateSortUpdate struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Id            string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Item          *model.BlockContentDataviewSort `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockDataviewViewUpdateSortUpdate) Reset() {
	*x = EventBlockDataviewViewUpdateSortUpdate{}
	mi := &file_pb_protos_events_proto_msgTypes[176]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataviewViewUpdateSortUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataviewViewUpdateSortUpdate) ProtoMessage() {}

func (x *EventBlockDataviewViewUpdateSortUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[176]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataviewViewUpdateSortUpdate.ProtoReflect.Descriptor instead.
func (*EventBlockDataviewViewUpdateSortUpdate) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 1, 3, 2}
}

func (x *EventBlockDataviewViewUpdateSortUpdate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBlockDataviewViewUpdateSortUpdate) GetItem() *model.BlockContentDataviewSort {
	if x != nil {
		return x.Item
	}
	return nil
}

type EventBlockDataviewViewUpdateSortMove struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AfterId       string                 `protobuf:"bytes,1,opt,name=afterId,proto3" json:"afterId,omitempty"`
	Ids           []string               `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBlockDataviewViewUpdateSortMove) Reset() {
	*x = EventBlockDataviewViewUpdateSortMove{}
	mi := &file_pb_protos_events_proto_msgTypes[177]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBlockDataviewViewUpdateSortMove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBlockDataviewViewUpdateSortMove) ProtoMessage() {}

func (x *EventBlockDataviewViewUpdateSortMove) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[177]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBlockDataviewViewUpdateSortMove.ProtoReflect.Descriptor instead.
func (*EventBlockDataviewViewUpdateSortMove) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 4, 6, 1, 3, 3}
}

func (x *EventBlockDataviewViewUpdateSortMove) GetAfterId() string {
	if x != nil {
		return x.AfterId
	}
	return ""
}

func (x *EventBlockDataviewViewUpdateSortMove) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type EventUserBlock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventUserBlock) Reset() {
	*x = EventUserBlock{}
	mi := &file_pb_protos_events_proto_msgTypes[178]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventUserBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventUserBlock) ProtoMessage() {}

func (x *EventUserBlock) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[178]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventUserBlock.ProtoReflect.Descriptor instead.
func (*EventUserBlock) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 5, 0}
}

// *
//
//	Middleware to front end event message, that will be sent in this scenario:
//
// Precondition: user A opened a block
// 1. User B opens the same block
// 2. User A receives a message about p.1
type EventUserBlockJoin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Account       *EventAccount          `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"` // Account of the user, that opened a block
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventUserBlockJoin) Reset() {
	*x = EventUserBlockJoin{}
	mi := &file_pb_protos_events_proto_msgTypes[179]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventUserBlockJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventUserBlockJoin) ProtoMessage() {}

func (x *EventUserBlockJoin) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[179]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventUserBlockJoin.ProtoReflect.Descriptor instead.
func (*EventUserBlockJoin) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 5, 0, 0}
}

func (x *EventUserBlockJoin) GetAccount() *EventAccount {
	if x != nil {
		return x.Account
	}
	return nil
}

// *
//
//	Middleware to front end event message, that will be sent in this scenario:
//
// Precondition: user A and user B opened the same block
// 1. User B closes the block
// 2. User A receives a message about p.1
type EventUserBlockLeft struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Account       *EventAccount          `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"` // Account of the user, that left the block
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventUserBlockLeft) Reset() {
	*x = EventUserBlockLeft{}
	mi := &file_pb_protos_events_proto_msgTypes[180]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventUserBlockLeft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventUserBlockLeft) ProtoMessage() {}

func (x *EventUserBlockLeft) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[180]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventUserBlockLeft.ProtoReflect.Descriptor instead.
func (*EventUserBlockLeft) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 5, 0, 1}
}

func (x *EventUserBlockLeft) GetAccount() *EventAccount {
	if x != nil {
		return x.Account
	}
	return nil
}

// *
// Middleware to front end event message, that will be sent in this scenario:
// Precondition: user A and user B opened the same block
// 1. User B sets cursor or selects a text region into a text block
// 2. User A receives a message about p.1
type EventUserBlockTextRange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Account       *EventAccount          `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"` // Account of the user, that selected a text
	BlockId       string                 `protobuf:"bytes,2,opt,name=blockId,proto3" json:"blockId,omitempty"` // Id of the text block, that have a selection
	Range         *model.Range           `protobuf:"bytes,3,opt,name=range,proto3" json:"range,omitempty"`     // Range of the selection
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventUserBlockTextRange) Reset() {
	*x = EventUserBlockTextRange{}
	mi := &file_pb_protos_events_proto_msgTypes[181]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventUserBlockTextRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventUserBlockTextRange) ProtoMessage() {}

func (x *EventUserBlockTextRange) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[181]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventUserBlockTextRange.ProtoReflect.Descriptor instead.
func (*EventUserBlockTextRange) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 5, 0, 2}
}

func (x *EventUserBlockTextRange) GetAccount() *EventAccount {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *EventUserBlockTextRange) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *EventUserBlockTextRange) GetRange() *model.Range {
	if x != nil {
		return x.Range
	}
	return nil
}

// *
// Middleware to front end event message, that will be sent in this scenario:
// Precondition: user A and user B opened the same block
// 1. User B selects some inner blocks
// 2. User A receives a message about p.1
type EventUserBlockSelectRange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Account       *EventAccount          `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`             // Account of the user, that selected blocks
	BlockIdsArray []string               `protobuf:"bytes,2,rep,name=blockIdsArray,proto3" json:"blockIdsArray,omitempty"` // Ids of selected blocks.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventUserBlockSelectRange) Reset() {
	*x = EventUserBlockSelectRange{}
	mi := &file_pb_protos_events_proto_msgTypes[182]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventUserBlockSelectRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventUserBlockSelectRange) ProtoMessage() {}

func (x *EventUserBlockSelectRange) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[182]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventUserBlockSelectRange.ProtoReflect.Descriptor instead.
func (*EventUserBlockSelectRange) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 5, 0, 3}
}

func (x *EventUserBlockSelectRange) GetAccount() *EventAccount {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *EventUserBlockSelectRange) GetBlockIdsArray() []string {
	if x != nil {
		return x.BlockIdsArray
	}
	return nil
}

type EventProcessNew struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Process       *ModelProcess          `protobuf:"bytes,1,opt,name=process,proto3" json:"process,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventProcessNew) Reset() {
	*x = EventProcessNew{}
	mi := &file_pb_protos_events_proto_msgTypes[183]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventProcessNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventProcessNew) ProtoMessage() {}

func (x *EventProcessNew) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[183]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventProcessNew.ProtoReflect.Descriptor instead.
func (*EventProcessNew) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 7, 0}
}

func (x *EventProcessNew) GetProcess() *ModelProcess {
	if x != nil {
		return x.Process
	}
	return nil
}

type EventProcessUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Process       *ModelProcess          `protobuf:"bytes,1,opt,name=process,proto3" json:"process,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventProcessUpdate) Reset() {
	*x = EventProcessUpdate{}
	mi := &file_pb_protos_events_proto_msgTypes[184]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventProcessUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventProcessUpdate) ProtoMessage() {}

func (x *EventProcessUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[184]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventProcessUpdate.ProtoReflect.Descriptor instead.
func (*EventProcessUpdate) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 7, 1}
}

func (x *EventProcessUpdate) GetProcess() *ModelProcess {
	if x != nil {
		return x.Process
	}
	return nil
}

type EventProcessDone struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Process       *ModelProcess          `protobuf:"bytes,1,opt,name=process,proto3" json:"process,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventProcessDone) Reset() {
	*x = EventProcessDone{}
	mi := &file_pb_protos_events_proto_msgTypes[185]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventProcessDone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventProcessDone) ProtoMessage() {}

func (x *EventProcessDone) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[185]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventProcessDone.ProtoReflect.Descriptor instead.
func (*EventProcessDone) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 7, 2}
}

func (x *EventProcessDone) GetProcess() *ModelProcess {
	if x != nil {
		return x.Process
	}
	return nil
}

type EventStatusThread struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Summary       *EventStatusThreadSummary   `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	Cafe          *EventStatusThreadCafe      `protobuf:"bytes,2,opt,name=cafe,proto3" json:"cafe,omitempty"`
	Accounts      []*EventStatusThreadAccount `protobuf:"bytes,3,rep,name=accounts,proto3" json:"accounts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventStatusThread) Reset() {
	*x = EventStatusThread{}
	mi := &file_pb_protos_events_proto_msgTypes[186]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventStatusThread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStatusThread) ProtoMessage() {}

func (x *EventStatusThread) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[186]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStatusThread.ProtoReflect.Descriptor instead.
func (*EventStatusThread) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 8, 0}
}

func (x *EventStatusThread) GetSummary() *EventStatusThreadSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *EventStatusThread) GetCafe() *EventStatusThreadCafe {
	if x != nil {
		return x.Cafe
	}
	return nil
}

func (x *EventStatusThread) GetAccounts() []*EventStatusThreadAccount {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type EventStatusThreadSummary struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Status        EventStatusThreadSyncStatus `protobuf:"varint,1,opt,name=status,proto3,enum=anytype.EventStatusThreadSyncStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventStatusThreadSummary) Reset() {
	*x = EventStatusThreadSummary{}
	mi := &file_pb_protos_events_proto_msgTypes[187]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventStatusThreadSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStatusThreadSummary) ProtoMessage() {}

func (x *EventStatusThreadSummary) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[187]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStatusThreadSummary.ProtoReflect.Descriptor instead.
func (*EventStatusThreadSummary) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 8, 0, 0}
}

func (x *EventStatusThreadSummary) GetStatus() EventStatusThreadSyncStatus {
	if x != nil {
		return x.Status
	}
	return EventStatusThread_Unknown
}

type EventStatusThreadCafe struct {
	state           protoimpl.MessageState          `protogen:"open.v1"`
	Status          EventStatusThreadSyncStatus     `protobuf:"varint,1,opt,name=status,proto3,enum=anytype.EventStatusThreadSyncStatus" json:"status,omitempty"`
	LastPulled      int64                           `protobuf:"varint,2,opt,name=lastPulled,proto3" json:"lastPulled,omitempty"`
	LastPushSucceed bool                            `protobuf:"varint,3,opt,name=lastPushSucceed,proto3" json:"lastPushSucceed,omitempty"`
	Files           *EventStatusThreadCafePinStatus `protobuf:"bytes,4,opt,name=files,proto3" json:"files,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EventStatusThreadCafe) Reset() {
	*x = EventStatusThreadCafe{}
	mi := &file_pb_protos_events_proto_msgTypes[188]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventStatusThreadCafe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStatusThreadCafe) ProtoMessage() {}

func (x *EventStatusThreadCafe) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[188]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStatusThreadCafe.ProtoReflect.Descriptor instead.
func (*EventStatusThreadCafe) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 8, 0, 1}
}

func (x *EventStatusThreadCafe) GetStatus() EventStatusThreadSyncStatus {
	if x != nil {
		return x.Status
	}
	return EventStatusThread_Unknown
}

func (x *EventStatusThreadCafe) GetLastPulled() int64 {
	if x != nil {
		return x.LastPulled
	}
	return 0
}

func (x *EventStatusThreadCafe) GetLastPushSucceed() bool {
	if x != nil {
		return x.LastPushSucceed
	}
	return false
}

func (x *EventStatusThreadCafe) GetFiles() *EventStatusThreadCafePinStatus {
	if x != nil {
		return x.Files
	}
	return nil
}

type EventStatusThreadAccount struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Id            string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ImageHash     string                     `protobuf:"bytes,3,opt,name=imageHash,proto3" json:"imageHash,omitempty"`
	Online        bool                       `protobuf:"varint,4,opt,name=online,proto3" json:"online,omitempty"`
	LastPulled    int64                      `protobuf:"varint,5,opt,name=lastPulled,proto3" json:"lastPulled,omitempty"`
	LastEdited    int64                      `protobuf:"varint,6,opt,name=lastEdited,proto3" json:"lastEdited,omitempty"`
	Devices       []*EventStatusThreadDevice `protobuf:"bytes,7,rep,name=devices,proto3" json:"devices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventStatusThreadAccount) Reset() {
	*x = EventStatusThreadAccount{}
	mi := &file_pb_protos_events_proto_msgTypes[189]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventStatusThreadAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStatusThreadAccount) ProtoMessage() {}

func (x *EventStatusThreadAccount) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[189]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStatusThreadAccount.ProtoReflect.Descriptor instead.
func (*EventStatusThreadAccount) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 8, 0, 2}
}

func (x *EventStatusThreadAccount) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventStatusThreadAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventStatusThreadAccount) GetImageHash() string {
	if x != nil {
		return x.ImageHash
	}
	return ""
}

func (x *EventStatusThreadAccount) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *EventStatusThreadAccount) GetLastPulled() int64 {
	if x != nil {
		return x.LastPulled
	}
	return 0
}

func (x *EventStatusThreadAccount) GetLastEdited() int64 {
	if x != nil {
		return x.LastEdited
	}
	return 0
}

func (x *EventStatusThreadAccount) GetDevices() []*EventStatusThreadDevice {
	if x != nil {
		return x.Devices
	}
	return nil
}

type EventStatusThreadDevice struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Online        bool                   `protobuf:"varint,2,opt,name=online,proto3" json:"online,omitempty"`
	LastPulled    int64                  `protobuf:"varint,3,opt,name=lastPulled,proto3" json:"lastPulled,omitempty"`
	LastEdited    int64                  `protobuf:"varint,4,opt,name=lastEdited,proto3" json:"lastEdited,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventStatusThreadDevice) Reset() {
	*x = EventStatusThreadDevice{}
	mi := &file_pb_protos_events_proto_msgTypes[190]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventStatusThreadDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStatusThreadDevice) ProtoMessage() {}

func (x *EventStatusThreadDevice) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[190]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStatusThreadDevice.ProtoReflect.Descriptor instead.
func (*EventStatusThreadDevice) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 8, 0, 3}
}

func (x *EventStatusThreadDevice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventStatusThreadDevice) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *EventStatusThreadDevice) GetLastPulled() int64 {
	if x != nil {
		return x.LastPulled
	}
	return 0
}

func (x *EventStatusThreadDevice) GetLastEdited() int64 {
	if x != nil {
		return x.LastEdited
	}
	return 0
}

type EventStatusThreadCafePinStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pinning       int32                  `protobuf:"varint,1,opt,name=pinning,proto3" json:"pinning,omitempty"`
	Pinned        int32                  `protobuf:"varint,2,opt,name=pinned,proto3" json:"pinned,omitempty"`
	Failed        int32                  `protobuf:"varint,3,opt,name=failed,proto3" json:"failed,omitempty"`
	Updated       int64                  `protobuf:"varint,4,opt,name=updated,proto3" json:"updated,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventStatusThreadCafePinStatus) Reset() {
	*x = EventStatusThreadCafePinStatus{}
	mi := &file_pb_protos_events_proto_msgTypes[191]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventStatusThreadCafePinStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStatusThreadCafePinStatus) ProtoMessage() {}

func (x *EventStatusThreadCafePinStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[191]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStatusThreadCafePinStatus.ProtoReflect.Descriptor instead.
func (*EventStatusThreadCafePinStatus) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 8, 0, 1, 0}
}

func (x *EventStatusThreadCafePinStatus) GetPinning() int32 {
	if x != nil {
		return x.Pinning
	}
	return 0
}

func (x *EventStatusThreadCafePinStatus) GetPinned() int32 {
	if x != nil {
		return x.Pinned
	}
	return 0
}

func (x *EventStatusThreadCafePinStatus) GetFailed() int32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

func (x *EventStatusThreadCafePinStatus) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

type EventFileLimitReached struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpaceId       string                 `protobuf:"bytes,1,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
	FileId        string                 `protobuf:"bytes,2,opt,name=fileId,proto3" json:"fileId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventFileLimitReached) Reset() {
	*x = EventFileLimitReached{}
	mi := &file_pb_protos_events_proto_msgTypes[192]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventFileLimitReached) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventFileLimitReached) ProtoMessage() {}

func (x *EventFileLimitReached) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[192]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventFileLimitReached.ProtoReflect.Descriptor instead.
func (*EventFileLimitReached) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 9, 0}
}

func (x *EventFileLimitReached) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *EventFileLimitReached) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

type EventFileSpaceUsage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BytesUsage    uint64                 `protobuf:"varint,1,opt,name=bytesUsage,proto3" json:"bytesUsage,omitempty"`
	SpaceId       string                 `protobuf:"bytes,2,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventFileSpaceUsage) Reset() {
	*x = EventFileSpaceUsage{}
	mi := &file_pb_protos_events_proto_msgTypes[193]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventFileSpaceUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventFileSpaceUsage) ProtoMessage() {}

func (x *EventFileSpaceUsage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[193]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventFileSpaceUsage.ProtoReflect.Descriptor instead.
func (*EventFileSpaceUsage) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 9, 1}
}

func (x *EventFileSpaceUsage) GetBytesUsage() uint64 {
	if x != nil {
		return x.BytesUsage
	}
	return 0
}

func (x *EventFileSpaceUsage) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

type EventFileLocalUsage struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	LocalBytesUsage uint64                 `protobuf:"varint,1,opt,name=localBytesUsage,proto3" json:"localBytesUsage,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EventFileLocalUsage) Reset() {
	*x = EventFileLocalUsage{}
	mi := &file_pb_protos_events_proto_msgTypes[194]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventFileLocalUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventFileLocalUsage) ProtoMessage() {}

func (x *EventFileLocalUsage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[194]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventFileLocalUsage.ProtoReflect.Descriptor instead.
func (*EventFileLocalUsage) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 9, 2}
}

func (x *EventFileLocalUsage) GetLocalBytesUsage() uint64 {
	if x != nil {
		return x.LocalBytesUsage
	}
	return 0
}

type EventFileLimitUpdated struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BytesLimit    uint64                 `protobuf:"varint,1,opt,name=bytesLimit,proto3" json:"bytesLimit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventFileLimitUpdated) Reset() {
	*x = EventFileLimitUpdated{}
	mi := &file_pb_protos_events_proto_msgTypes[195]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventFileLimitUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventFileLimitUpdated) ProtoMessage() {}

func (x *EventFileLimitUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[195]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventFileLimitUpdated.ProtoReflect.Descriptor instead.
func (*EventFileLimitUpdated) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 9, 3}
}

func (x *EventFileLimitUpdated) GetBytesLimit() uint64 {
	if x != nil {
		return x.BytesLimit
	}
	return 0
}

type EventMembershipUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *model.Membership      `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventMembershipUpdate) Reset() {
	*x = EventMembershipUpdate{}
	mi := &file_pb_protos_events_proto_msgTypes[196]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventMembershipUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMembershipUpdate) ProtoMessage() {}

func (x *EventMembershipUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[196]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMembershipUpdate.ProtoReflect.Descriptor instead.
func (*EventMembershipUpdate) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 10, 0}
}

func (x *EventMembershipUpdate) GetData() *model.Membership {
	if x != nil {
		return x.Data
	}
	return nil
}

type EventNotificationSend struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Notification  *model.Notification    `protobuf:"bytes,1,opt,name=notification,proto3" json:"notification,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventNotificationSend) Reset() {
	*x = EventNotificationSend{}
	mi := &file_pb_protos_events_proto_msgTypes[197]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventNotificationSend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventNotificationSend) ProtoMessage() {}

func (x *EventNotificationSend) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[197]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventNotificationSend.ProtoReflect.Descriptor instead.
func (*EventNotificationSend) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 11, 0}
}

func (x *EventNotificationSend) GetNotification() *model.Notification {
	if x != nil {
		return x.Notification
	}
	return nil
}

type EventNotificationUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Notification  *model.Notification    `protobuf:"bytes,1,opt,name=notification,proto3" json:"notification,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventNotificationUpdate) Reset() {
	*x = EventNotificationUpdate{}
	mi := &file_pb_protos_events_proto_msgTypes[198]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventNotificationUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventNotificationUpdate) ProtoMessage() {}

func (x *EventNotificationUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[198]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventNotificationUpdate.ProtoReflect.Descriptor instead.
func (*EventNotificationUpdate) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 11, 1}
}

func (x *EventNotificationUpdate) GetNotification() *model.Notification {
	if x != nil {
		return x.Notification
	}
	return nil
}

type EventPayloadBroadcast struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Payload       string                 `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventPayloadBroadcast) Reset() {
	*x = EventPayloadBroadcast{}
	mi := &file_pb_protos_events_proto_msgTypes[199]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventPayloadBroadcast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventPayloadBroadcast) ProtoMessage() {}

func (x *EventPayloadBroadcast) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[199]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventPayloadBroadcast.ProtoReflect.Descriptor instead.
func (*EventPayloadBroadcast) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 12, 0}
}

func (x *EventPayloadBroadcast) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type EventSpaceSyncStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventSpaceSyncStatus) Reset() {
	*x = EventSpaceSyncStatus{}
	mi := &file_pb_protos_events_proto_msgTypes[200]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventSpaceSyncStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSpaceSyncStatus) ProtoMessage() {}

func (x *EventSpaceSyncStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[200]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSpaceSyncStatus.ProtoReflect.Descriptor instead.
func (*EventSpaceSyncStatus) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 13, 0}
}

type EventSpaceSyncStatusUpdate struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Id                    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status                EventSpaceStatus       `protobuf:"varint,2,opt,name=status,proto3,enum=anytype.EventSpaceStatus" json:"status,omitempty"`
	Network               EventSpaceNetwork      `protobuf:"varint,3,opt,name=network,proto3,enum=anytype.EventSpaceNetwork" json:"network,omitempty"`
	Error                 EventSpaceSyncError    `protobuf:"varint,4,opt,name=error,proto3,enum=anytype.EventSpaceSyncError" json:"error,omitempty"`
	SyncingObjectsCounter int64                  `protobuf:"varint,5,opt,name=syncingObjectsCounter,proto3" json:"syncingObjectsCounter,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *EventSpaceSyncStatusUpdate) Reset() {
	*x = EventSpaceSyncStatusUpdate{}
	mi := &file_pb_protos_events_proto_msgTypes[201]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventSpaceSyncStatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSpaceSyncStatusUpdate) ProtoMessage() {}

func (x *EventSpaceSyncStatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[201]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSpaceSyncStatusUpdate.ProtoReflect.Descriptor instead.
func (*EventSpaceSyncStatusUpdate) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 13, 0, 0}
}

func (x *EventSpaceSyncStatusUpdate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventSpaceSyncStatusUpdate) GetStatus() EventSpaceStatus {
	if x != nil {
		return x.Status
	}
	return EventSpace_Synced
}

func (x *EventSpaceSyncStatusUpdate) GetNetwork() EventSpaceNetwork {
	if x != nil {
		return x.Network
	}
	return EventSpace_Anytype
}

func (x *EventSpaceSyncStatusUpdate) GetError() EventSpaceSyncError {
	if x != nil {
		return x.Error
	}
	return EventSpace_Null
}

func (x *EventSpaceSyncStatusUpdate) GetSyncingObjectsCounter() int64 {
	if x != nil {
		return x.SyncingObjectsCounter
	}
	return 0
}

type EventP2PStatusUpdate struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SpaceId        string                 `protobuf:"bytes,1,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
	Status         EventP2PStatusStatus   `protobuf:"varint,2,opt,name=status,proto3,enum=anytype.EventP2PStatusStatus" json:"status,omitempty"`
	DevicesCounter int64                  `protobuf:"varint,3,opt,name=devicesCounter,proto3" json:"devicesCounter,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EventP2PStatusUpdate) Reset() {
	*x = EventP2PStatusUpdate{}
	mi := &file_pb_protos_events_proto_msgTypes[202]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventP2PStatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventP2PStatusUpdate) ProtoMessage() {}

func (x *EventP2PStatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[202]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventP2PStatusUpdate.ProtoReflect.Descriptor instead.
func (*EventP2PStatusUpdate) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 14, 0}
}

func (x *EventP2PStatusUpdate) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *EventP2PStatusUpdate) GetStatus() EventP2PStatusStatus {
	if x != nil {
		return x.Status
	}
	return EventP2PStatus_NotConnected
}

func (x *EventP2PStatusUpdate) GetDevicesCounter() int64 {
	if x != nil {
		return x.DevicesCounter
	}
	return 0
}

type EventImportFinish struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	RootCollectionID string                 `protobuf:"bytes,1,opt,name=rootCollectionID,proto3" json:"rootCollectionID,omitempty"`
	ObjectsCount     int64                  `protobuf:"varint,2,opt,name=objectsCount,proto3" json:"objectsCount,omitempty"`
	ImportType       model.ImportType       `protobuf:"varint,3,opt,name=importType,proto3,enum=anytype.model.ImportType" json:"importType,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *EventImportFinish) Reset() {
	*x = EventImportFinish{}
	mi := &file_pb_protos_events_proto_msgTypes[203]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventImportFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventImportFinish) ProtoMessage() {}

func (x *EventImportFinish) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[203]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventImportFinish.ProtoReflect.Descriptor instead.
func (*EventImportFinish) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{0, 15, 0}
}

func (x *EventImportFinish) GetRootCollectionID() string {
	if x != nil {
		return x.RootCollectionID
	}
	return ""
}

func (x *EventImportFinish) GetObjectsCount() int64 {
	if x != nil {
		return x.ObjectsCount
	}
	return 0
}

func (x *EventImportFinish) GetImportType() model.ImportType {
	if x != nil {
		return x.ImportType
	}
	return model.ImportType(0)
}

type ModelProcess struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Id       string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	State    ModelProcessState      `protobuf:"varint,3,opt,name=state,proto3,enum=anytype.ModelProcessState" json:"state,omitempty"`
	Progress *ModelProcessProgress  `protobuf:"bytes,4,opt,name=progress,proto3" json:"progress,omitempty"`
	SpaceId  string                 `protobuf:"bytes,5,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
	// Types that are valid to be assigned to Message:
	//
	//	*ModelProcessMessageOfDropFiles
	//	*ModelProcessMessageOfImport
	//	*ModelProcessMessageOfExport
	//	*ModelProcessMessageOfSaveFile
	//	*ModelProcessMessageOfMigration
	Message       IsModelProcessMessage `protobuf_oneof:"message"`
	Error         string                `protobuf:"bytes,11,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModelProcess) Reset() {
	*x = ModelProcess{}
	mi := &file_pb_protos_events_proto_msgTypes[204]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelProcess) ProtoMessage() {}

func (x *ModelProcess) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[204]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelProcess.ProtoReflect.Descriptor instead.
func (*ModelProcess) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ModelProcess) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ModelProcess) GetState() ModelProcessState {
	if x != nil {
		return x.State
	}
	return ModelProcess_None
}

func (x *ModelProcess) GetProgress() *ModelProcessProgress {
	if x != nil {
		return x.Progress
	}
	return nil
}

func (x *ModelProcess) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *ModelProcess) GetMessage() IsModelProcessMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ModelProcess) GetDropFiles() *ModelProcessDropFiles {
	if x != nil {
		if x, ok := x.Message.(*ModelProcessMessageOfDropFiles); ok {
			return x.DropFiles
		}
	}
	return nil
}

func (x *ModelProcess) GetImport() *ModelProcessImport {
	if x != nil {
		if x, ok := x.Message.(*ModelProcessMessageOfImport); ok {
			return x.Import
		}
	}
	return nil
}

func (x *ModelProcess) GetExport() *ModelProcessExport {
	if x != nil {
		if x, ok := x.Message.(*ModelProcessMessageOfExport); ok {
			return x.Export
		}
	}
	return nil
}

func (x *ModelProcess) GetSaveFile() *ModelProcessSaveFile {
	if x != nil {
		if x, ok := x.Message.(*ModelProcessMessageOfSaveFile); ok {
			return x.SaveFile
		}
	}
	return nil
}

func (x *ModelProcess) GetMigration() *ModelProcessMigration {
	if x != nil {
		if x, ok := x.Message.(*ModelProcessMessageOfMigration); ok {
			return x.Migration
		}
	}
	return nil
}

func (x *ModelProcess) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type IsModelProcessMessage interface {
	IsModelProcessMessage()
}

type ModelProcessMessageOfDropFiles struct {
	DropFiles *ModelProcessDropFiles `protobuf:"bytes,6,opt,name=dropFiles,proto3,oneof" json:"dropFiles,omitempty"`
}

type ModelProcessMessageOfImport struct {
	Import *ModelProcessImport `protobuf:"bytes,7,opt,name=import,proto3,oneof" json:"import,omitempty"`
}

type ModelProcessMessageOfExport struct {
	Export *ModelProcessExport `protobuf:"bytes,8,opt,name=export,proto3,oneof" json:"export,omitempty"`
}

type ModelProcessMessageOfSaveFile struct {
	SaveFile *ModelProcessSaveFile `protobuf:"bytes,9,opt,name=saveFile,proto3,oneof" json:"saveFile,omitempty"`
}

type ModelProcessMessageOfMigration struct {
	Migration *ModelProcessMigration `protobuf:"bytes,10,opt,name=migration,proto3,oneof" json:"migration,omitempty"`
}

func (*ModelProcessMessageOfDropFiles) IsModelProcessMessage() {}

func (*ModelProcessMessageOfImport) IsModelProcessMessage() {}

func (*ModelProcessMessageOfExport) IsModelProcessMessage() {}

func (*ModelProcessMessageOfSaveFile) IsModelProcessMessage() {}

func (*ModelProcessMessageOfMigration) IsModelProcessMessage() {}

type ModelProcessDropFiles struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModelProcessDropFiles) Reset() {
	*x = ModelProcessDropFiles{}
	mi := &file_pb_protos_events_proto_msgTypes[205]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelProcessDropFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelProcessDropFiles) ProtoMessage() {}

func (x *ModelProcessDropFiles) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[205]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelProcessDropFiles.ProtoReflect.Descriptor instead.
func (*ModelProcessDropFiles) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{2, 0, 0}
}

type ModelProcessImport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModelProcessImport) Reset() {
	*x = ModelProcessImport{}
	mi := &file_pb_protos_events_proto_msgTypes[206]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelProcessImport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelProcessImport) ProtoMessage() {}

func (x *ModelProcessImport) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[206]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelProcessImport.ProtoReflect.Descriptor instead.
func (*ModelProcessImport) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{2, 0, 1}
}

type ModelProcessExport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModelProcessExport) Reset() {
	*x = ModelProcessExport{}
	mi := &file_pb_protos_events_proto_msgTypes[207]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelProcessExport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelProcessExport) ProtoMessage() {}

func (x *ModelProcessExport) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[207]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelProcessExport.ProtoReflect.Descriptor instead.
func (*ModelProcessExport) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{2, 0, 2}
}

type ModelProcessSaveFile struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModelProcessSaveFile) Reset() {
	*x = ModelProcessSaveFile{}
	mi := &file_pb_protos_events_proto_msgTypes[208]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelProcessSaveFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelProcessSaveFile) ProtoMessage() {}

func (x *ModelProcessSaveFile) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[208]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelProcessSaveFile.ProtoReflect.Descriptor instead.
func (*ModelProcessSaveFile) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{2, 0, 3}
}

type ModelProcessMigration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModelProcessMigration) Reset() {
	*x = ModelProcessMigration{}
	mi := &file_pb_protos_events_proto_msgTypes[209]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelProcessMigration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelProcessMigration) ProtoMessage() {}

func (x *ModelProcessMigration) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[209]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelProcessMigration.ProtoReflect.Descriptor instead.
func (*ModelProcessMigration) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{2, 0, 4}
}

type ModelProcessProgress struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Done          int64                  `protobuf:"varint,2,opt,name=done,proto3" json:"done,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModelProcessProgress) Reset() {
	*x = ModelProcessProgress{}
	mi := &file_pb_protos_events_proto_msgTypes[210]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelProcessProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelProcessProgress) ProtoMessage() {}

func (x *ModelProcessProgress) ProtoReflect() protoreflect.Message {
	mi := &file_pb_protos_events_proto_msgTypes[210]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelProcessProgress.ProtoReflect.Descriptor instead.
func (*ModelProcessProgress) Descriptor() ([]byte, []int) {
	return file_pb_protos_events_proto_rawDescGZIP(), []int{2, 0, 5}
}

func (x *ModelProcessProgress) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ModelProcessProgress) GetDone() int64 {
	if x != nil {
		return x.Done
	}
	return 0
}

func (x *ModelProcessProgress) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_pb_protos_events_proto protoreflect.FileDescriptor

var file_pb_protos_events_proto_rawDesc = string([]byte{
	0x0a, 0x16, 0x70, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x1a, 0x24, 0x70, 0x6b, 0x67, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x70, 0x62, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe4, 0xc4, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x32, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x49, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x1a, 0xf4, 0x32, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19,
	0x0a, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x49, 0x0a, 0x0e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0xc9, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x59, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0xca, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x13, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x46, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x5b, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x14, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x67, 0x0a, 0x18, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x48, 0x69, 0x64,
	0x65, 0x18, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x48, 0x69,
	0x64, 0x65, 0x48, 0x00, 0x52, 0x18, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x48, 0x69, 0x64, 0x65, 0x12, 0x4f,
	0x0a, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x53,
	0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x10, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x53, 0x65, 0x74, 0x12,
	0x55, 0x0a, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x41, 0x6d, 0x65, 0x6e, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e,
	0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x41, 0x6d, 0x65, 0x6e, 0x64,
	0x48, 0x00, 0x52, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x55, 0x0a, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x12, 0x5b, 0x0a,
	0x14, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x41, 0x6d, 0x65, 0x6e, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e,
	0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x6d, 0x65,
	0x6e, 0x64, 0x48, 0x00, 0x52, 0x14, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x5e, 0x0a, 0x15, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x79, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x48, 0x00, 0x52, 0x15, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x00,
	0x52, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x3f,
	0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x41, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12,
	0x5e, 0x0a, 0x15, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x15, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x74, 0x12,
	0x52, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x64, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64,
	0x48, 0x00, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x64, 0x64, 0x12, 0x5b, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x12, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x12, 0x61, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00,
	0x52, 0x14, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x40, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x48, 0x00, 0x52,
	0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x64, 0x64, 0x48,
	0x00, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0b,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x3e, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x49, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x53, 0x65, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x58, 0x0a,
	0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x49, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x53, 0x65, 0x74, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x49, 0x64, 0x73,
	0x48, 0x00, 0x52, 0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x5b, 0x0a, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x14,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x64, 0x0a, 0x17, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74,
	0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e,
	0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x17, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x54, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x48,
	0x00, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x43, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74,
	0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x53, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x4f, 0x0a, 0x10, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e, 0x42, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x48, 0x00, 0x52, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x46, 0x0a, 0x0d, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x6c, 0x69, 0x67,
	0x6e, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x69,
	0x67, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x44, 0x69,
	0x76, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65,
	0x74, 0x2e, 0x44, 0x69, 0x76, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65,
	0x74, 0x44, 0x69, 0x76, 0x12, 0x4f, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65,
	0x74, 0x4c, 0x61, 0x74, 0x65, 0x78, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x78, 0x48, 0x00, 0x52, 0x0d,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x78, 0x12, 0x5e, 0x0a,
	0x15, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41,
	0x6c, 0x69, 0x67, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x12, 0x4f, 0x0a,
	0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f,
	0x77, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65,
	0x74, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x10, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x12, 0x49,
	0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74,
	0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x65, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x12, 0x5b, 0x0a, 0x14, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x56, 0x69, 0x65, 0x77, 0x53, 0x65,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x53, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x56,
	0x69, 0x65, 0x77, 0x53, 0x65, 0x74, 0x12, 0x64, 0x0a, 0x17, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x56, 0x69, 0x65, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x17, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69,
	0x65, 0x77, 0x56, 0x69, 0x65, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x61, 0x0a, 0x16,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x56, 0x69, 0x65,
	0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x16, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x61, 0x0a, 0x16, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x16, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x12, 0x76, 0x0a, 0x1d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x56,
	0x69, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x6e, 0x79, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x1d, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x56, 0x69, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x79, 0x0a, 0x1e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65,
	0x77, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x1e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x56, 0x69, 0x65, 0x77, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x70, 0x0a, 0x1b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x67, 0x0a, 0x18, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6e, 0x79, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x18, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x12, 0x64, 0x0a, 0x17, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65,
	0x77, 0x56, 0x69, 0x65, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x7d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77,
	0x2e, 0x56, 0x69, 0x65, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x17, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x56, 0x69, 0x65, 0x77,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x79, 0x0a, 0x1e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x53, 0x65, 0x74, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x53, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x1e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x53, 0x65,
	0x74, 0x12, 0x73, 0x0a, 0x1c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69,
	0x65, 0x77, 0x49, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x49, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x49, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x79, 0x0a, 0x1e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x6c, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x4f, 0x6c,
	0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x1e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77,
	0x4f, 0x6c, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x70, 0x0a, 0x1b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69,
	0x65, 0x77, 0x4f, 0x6c, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x4f, 0x6c, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x6c, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x12, 0x46, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4a, 0x6f, 0x69, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x75, 0x73,
	0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x46, 0x0a, 0x0d, 0x75,
	0x73, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x66, 0x74, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4c, 0x65,
	0x66, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c,
	0x65, 0x66, 0x74, 0x12, 0x5b, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x55, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x12, 0x75, 0x73, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69,
	0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x65, 0x77,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x4e,
	0x65, 0x77, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x65, 0x77,
	0x12, 0x45, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x6f, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0c,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4e, 0x0a, 0x10,
	0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x48, 0x00, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x0e,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x70,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x4e, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x2e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x10,
	0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x4e, 0x0a, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x6e, 0x64, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x10,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64,
	0x12, 0x54, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53,
	0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x15, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x70, 0x32, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x50, 0x32, 0x50, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x0f, 0x70, 0x32, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6e, 0x79, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x41,
	0x64, 0x64, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6e, 0x79, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x41,
	0x64, 0x64, 0x48, 0x00, 0x52, 0x07, 0x63, 0x68, 0x61, 0x74, 0x41, 0x64, 0x64, 0x12, 0x3d, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x81, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x13,
	0x63, 0x68, 0x61, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48,
	0x00, 0x52, 0x13, 0x63, 0x68, 0x61, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5b, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x86,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x14, 0x63,
	0x68, 0x61, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x0f, 0x63, 0x68, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xdd, 0x05, 0x0a, 0x04, 0x43, 0x68,
	0x61, 0x74, 0x1a, 0xde, 0x01, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x66, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6e, 0x79, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x75, 0x62, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x75, 0x62, 0x49, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x1a, 0x60, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x75, 0x62, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x75, 0x62, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x66, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x49, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x49, 0x64, 0x73, 0x1a, 0x7d, 0x0a,
	0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x42, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x49, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x49, 0x64, 0x73, 0x1a, 0x54, 0x0a, 0x10,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75,
	0x62, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x49,
	0x64, 0x73, 0x1a, 0x55, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x49, 0x64, 0x73, 0x1a, 0xa5, 0x06, 0x0a, 0x07, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x4e, 0x0a, 0x04, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x30, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x5a, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x31,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x1a, 0x80, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x76, 0x0a, 0x06,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x1a, 0x76, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x35,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xbf, 0x02, 0x0a,
	0x0d, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x4f, 0x0a, 0x0a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41,
	0x70, 0x69, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x1a, 0x7e,
	0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x2c, 0x0a, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x1a, 0x31,
	0x0a, 0x11, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x48,
	0x69, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x1a, 0x89, 0x09, 0x0a, 0x06, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0xf6, 0x02, 0x0a,
	0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0xc3, 0x01, 0x0a, 0x05, 0x41, 0x6d, 0x65,
	0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x46, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75,
	0x62, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x49,
	0x64, 0x73, 0x1a, 0x4a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x60,
	0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x49,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x49, 0x64, 0x73,
	0x1a, 0x43, 0x0a, 0x05, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x75, 0x62, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x75, 0x62, 0x49, 0x64, 0x73, 0x1a, 0xc0, 0x03, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x45, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x75, 0x62, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x75, 0x62, 0x49, 0x64, 0x1a, 0x2e, 0x0a,
	0x06, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x75, 0x62, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x75, 0x62, 0x49, 0x64, 0x1a, 0x4a, 0x0a,
	0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x75, 0x62, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x75, 0x62, 0x49, 0x64, 0x1a, 0x72, 0x0a, 0x08, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x65, 0x78, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65,
	0x76, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72,
	0x65, 0x76, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x75, 0x62, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x75, 0x62, 0x49, 0x64, 0x1a, 0x79, 0x0a,
	0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x75, 0x62, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x75, 0x62, 0x49, 0x64, 0x12, 0x41, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76,
	0x69, 0x65, 0x77, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x1a, 0xa5, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x5a, 0x0a, 0x05, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x41, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x1a, 0x3c, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73,
	0x1a, 0x1a, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x1a, 0x66, 0x0a, 0x0c,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x56, 0x0a, 0x03,
	0x53, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6e, 0x79, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x17, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x9a, 0x63,
	0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x33, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x2c,
	0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x1a, 0x43, 0x0a, 0x0b,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x1a, 0x24, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x1a, 0x5c, 0x0a, 0x09, 0x4d, 0x61, 0x72, 0x6b, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x49, 0x6e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x49, 0x6e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x85, 0x28, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x1a, 0x70, 0x0a,
	0x08, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x1a, 0x1b, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x49, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x3f, 0x0a, 0x0b, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x49, 0x64, 0x73, 0x1a, 0x65, 0x0a, 0x0c, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x4b, 0x0a, 0x0f, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x1a,
	0x49, 0x0a, 0x05, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x67,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x6c,
	0x69, 0x67, 0x6e, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x1a, 0x69, 0x0a, 0x0d, 0x56, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x0d, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x41, 0x6c, 0x69, 0x67, 0x6e, 0x1a, 0x82, 0x06, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x12, 0x39, 0x0a, 0x05, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x73, 0x52, 0x05, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x3f, 0x0a, 0x07,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x64, 0x52, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x39, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x09, 0x69, 0x63, 0x6f, 0x6e,
	0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6e,
	0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x49, 0x63, 0x6f, 0x6e, 0x45,
	0x6d, 0x6f, 0x6a, 0x69, 0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x12,
	0x45, 0x0a, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x2e, 0x49, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x09, 0x69, 0x63, 0x6f,
	0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0x1c, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x46, 0x0a, 0x05, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x3d, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x46, 0x0a, 0x05,
	0x4d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1f, 0x0a, 0x07, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1d, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x21, 0x0a, 0x09, 0x49, 0x63, 0x6f, 0x6e, 0x45, 0x6d, 0x6f, 0x6a,
	0x69, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x21, 0x0a, 0x09, 0x49, 0x63, 0x6f, 0x6e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x87, 0x02, 0x0a, 0x05, 0x4c,
	0x61, 0x74, 0x65, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e, 0x4c, 0x61, 0x74,
	0x65, 0x78, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x46, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x78,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x1a, 0x1c, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x4f, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61,
	0x74, 0x65, 0x78, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x96, 0x01, 0x0a, 0x03, 0x44, 0x69, 0x76, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x05,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e,
	0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e, 0x44, 0x69, 0x76, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x1a, 0x45, 0x0a, 0x05, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12,
	0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x76,
	0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x8f, 0x07,
	0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x6d, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65,
	0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x4d, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x6d, 0x69, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65,
	0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x53,
	0x69, 0x7a, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53,
	0x65, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x1a, 0x1c, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1d, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x46, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x44, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x46, 0x0a, 0x05, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x3d,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1c, 0x0a,
	0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1c, 0x0a, 0x04, 0x4d,
	0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1c, 0x0a, 0x04, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x26, 0x0a, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0xbe, 0x07, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x52, 0x0d, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x53, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x49, 0x63, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x08,
	0x69, 0x63, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6e,
	0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x52, 0x09, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12,
	0x4b, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x09,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x25, 0x0a, 0x0d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x46, 0x0a, 0x05, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x37, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x4c, 0x0a, 0x08, 0x49,
	0x63, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x49, 0x63, 0x6f, 0x6e, 0x53, 0x69,
	0x7a, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x4e, 0x0a, 0x09, 0x43, 0x61, 0x72,
	0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x52, 0x0a, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x21, 0x0a,
	0x09, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0xb0, 0x07, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x53, 0x65, 0x74, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x55, 0x72,
	0x6c, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3d, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e,
	0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x53, 0x65, 0x74, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x79, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
	0x53, 0x65, 0x74, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x4f, 0x0a, 0x0b, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74,
	0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x46, 0x61, 0x76, 0x69, 0x63, 0x6f,
	0x6e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x0b, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x58,
	0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74,
	0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65,
	0x74, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x1b, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1d, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x23, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x21, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x23, 0x0a, 0x0b, 0x46,
	0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x3d, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x26, 0x0a, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x4a, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x84, 0x01, 0x0a, 0x08, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x46, 0x0a, 0x08, 0x69, 0x73, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x6f, 0x77, 0x2e, 0x49, 0x73, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x08,
	0x69, 0x73, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x1a, 0x20, 0x0a, 0x08, 0x49, 0x73, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xe0, 0x02, 0x0a, 0x06, 0x57,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e,
	0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x06, 0x6c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e, 0x57,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x2e, 0x57, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x49, 0x64, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77,
	0x49, 0x64, 0x1a, 0x4a, 0x0a, 0x06, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x40, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x61, 0x6e,
	0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1d,
	0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1e, 0x0a,
	0x06, 0x56, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xdf, 0x19,
	0x0a, 0x04, 0x46, 0x69, 0x6c, 0x6c, 0x1a, 0x4c, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x1a, 0x54, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x1a, 0x49, 0x0a, 0x06, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x3f, 0x0a, 0x0b, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x49, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x49, 0x64, 0x73, 0x1a, 0x65, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x4b, 0x0a,
	0x0f, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x1a, 0x49, 0x0a, 0x05, 0x41, 0x6c,
	0x69, 0x67, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x52, 0x05,
	0x61, 0x6c, 0x69, 0x67, 0x6e, 0x1a, 0xb3, 0x04, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x46, 0x69, 0x6c,
	0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x73, 0x52, 0x05, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12,
	0x40, 0x0a, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x3a, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x1a, 0x1c, 0x0a,
	0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x46, 0x0a, 0x05, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x46, 0x0a, 0x05, 0x4d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x3d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6e,
	0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1f, 0x0a, 0x07, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1d, 0x0a, 0x05,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x97, 0x01, 0x0a, 0x03,
	0x44, 0x69, 0x76, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x2e, 0x44, 0x69,
	0x76, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x1a, 0x45,
	0x0a, 0x05, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x76, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x98, 0x06, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x46, 0x69, 0x6c,
	0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x6d, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x2e, 0x4d, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x6d, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x69, 0x7a,
	0x65, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x46, 0x69, 0x6c,
	0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x1a, 0x1c, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x1d, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x46, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x44, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x46,
	0x0a, 0x05, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1c, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1c, 0x0a, 0x04, 0x4d, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x1c, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x8d, 0x03, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x0d, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x52, 0x0d,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x3a, 0x0a,
	0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x79, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
	0x46, 0x69, 0x6c, 0x6c, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x25, 0x0a, 0x0d, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x46, 0x0a, 0x05, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x37, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0xac, 0x06, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x55,
	0x72, 0x6c, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3e, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x46, 0x69, 0x6c,
	0x6c, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x50, 0x0a, 0x0b, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x46,
	0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x0b, 0x66, 0x61, 0x76, 0x69,
	0x63, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x46, 0x69, 0x6c, 0x6c,
	0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52,
	0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x1a,
	0x1b, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1d, 0x0a, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x23, 0x0a, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x21, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x23, 0x0a, 0x0b, 0x46, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x3d, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x26, 0x0a, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0xa8, 0x1f, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x1a, 0x71, 0x0a, 0x07,
	0x56, 0x69, 0x65, 0x77, 0x53, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12,
	0x3e, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x1a,
	0xf3, 0x14, 0x0a, 0x0a, 0x56, 0x69, 0x65, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x4d, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77,
	0x2e, 0x56, 0x69, 0x65, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x47, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77,
	0x2e, 0x56, 0x69, 0x65, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0xf2, 0x03, 0x0a, 0x06, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x69,
	0x64, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x69,
	0x64, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e,
	0x56, 0x69, 0x65, 0x77, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x46, 0x69, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x46, 0x69, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x1a,
	0xdf, 0x04, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x03, 0x61, 0x64,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x48, 0x00, 0x52, 0x03,
	0x61, 0x64, 0x64, 0x12, 0x50, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69,
	0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6d,
	0x6f, 0x76, 0x65, 0x1a, 0x63, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x1a, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x1a, 0x5a, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76,
	0x69, 0x65, 0x77, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x1a, 0x32, 0x0a, 0x04, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0xed, 0x04, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49,
	0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x6e,
	0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x64, 0x64, 0x48, 0x00, 0x52, 0x03, 0x61, 0x64, 0x64, 0x12, 0x52, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x6e, 0x79, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x52, 0x0a,
	0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65,
	0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x4c, 0x0a, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x1a,
	0x65, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x66, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x44, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x1a, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x1a, 0x5c, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65,
	0x77, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x1a, 0x32, 0x0a, 0x04, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0xd1, 0x04, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x45, 0x0a, 0x03, 0x61, 0x64,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x48, 0x00, 0x52, 0x03, 0x61, 0x64,
	0x64, 0x12, 0x4e, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77,
	0x2e, 0x56, 0x69, 0x65, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x12, 0x4e, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77,
	0x2e, 0x56, 0x69, 0x65, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x48, 0x0a, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x2e, 0x4d,
	0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x1a, 0x61, 0x0a, 0x03, 0x41,
	0x64, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6e,
	0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69,
	0x65, 0x77, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x1a,
	0x0a, 0x06, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x1a, 0x58, 0x0a, 0x06, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x1a, 0x32, 0x0a, 0x04, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x34, 0x0a, 0x0a, 0x56, 0x69, 0x65, 0x77, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x1a, 0x35, 0x0a, 0x09, 0x56,
	0x69, 0x65, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x65, 0x77,
	0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x65, 0x77, 0x49,
	0x64, 0x73, 0x1a, 0x33, 0x0a, 0x09, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x45, 0x0a, 0x11, 0x4f, 0x6c, 0x64, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x1a, 0x77,
	0x0a, 0x0e, 0x4f, 0x6c, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x44, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x1a, 0x60, 0x0a,
	0x0b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0d,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x1a,
	0x74, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0xa4, 0x01, 0x0a, 0x11, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x69, 0x65, 0x77, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65,
	0x77, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x4d, 0x0a,
	0x0c, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69,
	0x65, 0x77, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c,
	0x73, 0x6c, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x77, 0x0a, 0x0b,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x02, 0x6f,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x4b, 0x0a, 0x11, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x53, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x1a, 0x37, 0x0a, 0x0f, 0x49, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x0e,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x76, 0x65, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x10, 0x03, 0x12,
	0x19, 0x0a, 0x15, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x10, 0x04, 0x1a, 0xf1, 0x02, 0x0a, 0x04, 0x55,
	0x73, 0x65, 0x72, 0x1a, 0xe8, 0x02, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x38, 0x0a,
	0x04, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x38, 0x0a, 0x04, 0x4c, 0x65, 0x66, 0x74, 0x12,
	0x30, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0x83, 0x01, 0x0a, 0x09, 0x54, 0x65, 0x78, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x30, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x65, 0x0a, 0x0b, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x64, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x1a, 0x1c,
	0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0xb8, 0x01, 0x0a,
	0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x37, 0x0a, 0x03, 0x4e, 0x65, 0x77, 0x12,
	0x30, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x1a, 0x3a, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x38, 0x0a,
	0x04, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x1a, 0xb9, 0x08, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x1a, 0xae, 0x08, 0x0a, 0x06, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x3e, 0x0a,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x35, 0x0a,
	0x04, 0x63, 0x61, 0x66, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6e,
	0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x43, 0x61, 0x66, 0x65, 0x52, 0x04,
	0x63, 0x61, 0x66, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x4a, 0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x1a, 0xc5, 0x02, 0x0a, 0x04, 0x43, 0x61, 0x66, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6e,
	0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x50, 0x75, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x75, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x6c, 0x61, 0x73, 0x74, 0x50, 0x75, 0x73, 0x68, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x75, 0x73, 0x68, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x2e, 0x43, 0x61, 0x66, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x6f, 0x0a, 0x09, 0x50, 0x69, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x1a, 0xe2, 0x01, 0x0a, 0x07, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x75, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x75, 0x6c, 0x6c, 0x65, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x65, 0x64,
	0x12, 0x3d, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a,
	0x74, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x75, 0x6c,
	0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x50,
	0x75, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x64, 0x69,
	0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x45,
	0x64, 0x69, 0x74, 0x65, 0x64, 0x22, 0x7c, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x79,
	0x6e, 0x63, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x10, 0x06, 0x1a, 0xf8, 0x01, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x40, 0x0a, 0x0c,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x1a, 0x46,
	0x0a, 0x0a, 0x53, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x1a, 0x36, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x2e,
	0x0a, 0x0c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x45,
	0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x1a, 0x37, 0x0a, 0x06,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xa2, 0x01, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x47, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x3f,
	0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x49, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x30, 0x0a, 0x07, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x25, 0x0a, 0x09, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0xec, 0x03, 0x0a,
	0x05, 0x53, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x80, 0x02, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xf1, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x34, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x73, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x51, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e,
	0x65, 0x65, 0x64, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x04, 0x22, 0x33, 0x0a, 0x07,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x6e, 0x79, 0x74, 0x79,
	0x70, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x65, 0x6c, 0x66, 0x48, 0x6f, 0x73, 0x74,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x10,
	0x02, 0x22, 0x58, 0x0a, 0x09, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x1a, 0xdd, 0x01, 0x0a, 0x09,
	0x50, 0x32, 0x50, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x83, 0x01, 0x0a, 0x06, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50,
	0x32, 0x50, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22,
	0x4a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4e,
	0x6f, 0x74, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x10, 0x03, 0x1a, 0x9f, 0x01, 0x0a, 0x06,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x94, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x6f, 0x6f,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7b, 0x0a,
	0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x32,
	0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0xd1, 0x05, 0x0a, 0x05, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x1a, 0xc7, 0x05, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x64,
	0x72, 0x6f, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x09, 0x64, 0x72, 0x6f, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x37, 0x0a,
	0x06, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x06,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x3d, 0x0a, 0x08, 0x73, 0x61, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x48, 0x00, 0x52, 0x08, 0x73, 0x61, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x40,
	0x0a, 0x09, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x0b, 0x0a, 0x09, 0x44, 0x72, 0x6f, 0x70, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x1a, 0x08, 0x0a, 0x06, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x08, 0x0a,
	0x06, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x0a, 0x0a, 0x08, 0x53, 0x61, 0x76, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x1a, 0x0b, 0x0a, 0x09, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x4e, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x41, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x44, 0x6f, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x04, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x26,
	0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x79,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2d, 0x68, 0x65,
	0x61, 0x72, 0x74, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_pb_protos_events_proto_rawDescOnce sync.Once
	file_pb_protos_events_proto_rawDescData []byte
)

func file_pb_protos_events_proto_rawDescGZIP() []byte {
	file_pb_protos_events_proto_rawDescOnce.Do(func() {
		file_pb_protos_events_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pb_protos_events_proto_rawDesc), len(file_pb_protos_events_proto_rawDesc)))
	})
	return file_pb_protos_events_proto_rawDescData
}

var file_pb_protos_events_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_pb_protos_events_proto_msgTypes = make([]protoimpl.MessageInfo, 211)
var file_pb_protos_events_proto_goTypes = []any{
	(EventBlockDataviewSliceOperation)(0),              // 0: anytype.Event.Block.Dataview.SliceOperation
	(EventStatusThreadSyncStatus)(0),                   // 1: anytype.Event.Status.Thread.SyncStatus
	(EventSpaceStatus)(0),                              // 2: anytype.Event.Space.Status
	(EventSpaceNetwork)(0),                             // 3: anytype.Event.Space.Network
	(EventSpaceSyncError)(0),                           // 4: anytype.Event.Space.SyncError
	(EventP2PStatusStatus)(0),                          // 5: anytype.Event.P2PStatus.Status
	(ModelProcessState)(0),                             // 6: anytype.Model.Process.State
	(*Event)(nil),                                      // 7: anytype.Event
	(*ResponseEvent)(nil),                              // 8: anytype.ResponseEvent
	(*Model)(nil),                                      // 9: anytype.Model
	(*EventMessage)(nil),                               // 10: anytype.Event.Message
	(*EventChat)(nil),                                  // 11: anytype.Event.Chat
	(*EventAccount)(nil),                               // 12: anytype.Event.Account
	(*EventObject)(nil),                                // 13: anytype.Event.Object
	(*EventBlock)(nil),                                 // 14: anytype.Event.Block
	(*EventUser)(nil),                                  // 15: anytype.Event.User
	(*EventPing)(nil),                                  // 16: anytype.Event.Ping
	(*EventProcess)(nil),                               // 17: anytype.Event.Process
	(*EventStatus)(nil),                                // 18: anytype.Event.Status
	(*EventFile)(nil),                                  // 19: anytype.Event.File
	(*EventMembership)(nil),                            // 20: anytype.Event.Membership
	(*EventNotification)(nil),                          // 21: anytype.Event.Notification
	(*EventPayload)(nil),                               // 22: anytype.Event.Payload
	(*EventSpace)(nil),                                 // 23: anytype.Event.Space
	(*EventP2PStatus)(nil),                             // 24: anytype.Event.P2PStatus
	(*EventImport)(nil),                                // 25: anytype.Event.Import
	(*EventChatAdd)(nil),                               // 26: anytype.Event.Chat.Add
	(*EventChatDelete)(nil),                            // 27: anytype.Event.Chat.Delete
	(*EventChatUpdate)(nil),                            // 28: anytype.Event.Chat.Update
	(*EventChatUpdateReactions)(nil),                   // 29: anytype.Event.Chat.UpdateReactions
	(*EventChatUpdateReadStatus)(nil),                  // 30: anytype.Event.Chat.UpdateReadStatus
	(*EventChatUpdateState)(nil),                       // 31: anytype.Event.Chat.UpdateState
	(*EventAccountShow)(nil),                           // 32: anytype.Event.Account.Show
	(*EventAccountDetails)(nil),                        // 33: anytype.Event.Account.Details
	(*EventAccountConfig)(nil),                         // 34: anytype.Event.Account.Config
	(*EventAccountUpdate)(nil),                         // 35: anytype.Event.Account.Update
	(*EventAccountLinkChallenge)(nil),                  // 36: anytype.Event.Account.LinkChallenge
	(*EventAccountLinkChallengeHide)(nil),              // 37: anytype.Event.Account.LinkChallengeHide
	(*EventAccountConfigUpdate)(nil),                   // 38: anytype.Event.Account.Config.Update
	(*EventAccountLinkChallengeClientInfo)(nil),        // 39: anytype.Event.Account.LinkChallenge.ClientInfo
	(*EventObjectDetails)(nil),                         // 40: anytype.Event.Object.Details
	(*EventObjectSubscription)(nil),                    // 41: anytype.Event.Object.Subscription
	(*EventObjectRelations)(nil),                       // 42: anytype.Event.Object.Relations
	(*EventObjectRemove)(nil),                          // 43: anytype.Event.Object.Remove
	(*EventObjectRestrictions)(nil),                    // 44: anytype.Event.Object.Restrictions
	(*EventObjectClose)(nil),                           // 45: anytype.Event.Object.Close
	(*EventObjectDetailsAmend)(nil),                    // 46: anytype.Event.Object.Details.Amend
	(*EventObjectDetailsSet)(nil),                      // 47: anytype.Event.Object.Details.Set
	(*EventObjectDetailsUnset)(nil),                    // 48: anytype.Event.Object.Details.Unset
	(*EventObjectDetailsAmendKeyValue)(nil),            // 49: anytype.Event.Object.Details.Amend.KeyValue
	(*EventObjectSubscriptionAdd)(nil),                 // 50: anytype.Event.Object.Subscription.Add
	(*EventObjectSubscriptionRemove)(nil),              // 51: anytype.Event.Object.Subscription.Remove
	(*EventObjectSubscriptionPosition)(nil),            // 52: anytype.Event.Object.Subscription.Position
	(*EventObjectSubscriptionCounters)(nil),            // 53: anytype.Event.Object.Subscription.Counters
	(*EventObjectSubscriptionGroups)(nil),              // 54: anytype.Event.Object.Subscription.Groups
	(*EventObjectRelationsAmend)(nil),                  // 55: anytype.Event.Object.Relations.Amend
	(*EventObjectRelationsRemove)(nil),                 // 56: anytype.Event.Object.Relations.Remove
	(*EventObjectRestrictionsSet)(nil),                 // 57: anytype.Event.Object.Restrictions.Set
	(*EventBlockAdd)(nil),                              // 58: anytype.Event.Block.Add
	(*EventBlockFilesUpload)(nil),                      // 59: anytype.Event.Block.FilesUpload
	(*EventBlockDelete)(nil),                           // 60: anytype.Event.Block.Delete
	(*EventBlockMarksInfo)(nil),                        // 61: anytype.Event.Block.MarksInfo
	(*EventBlockSet)(nil),                              // 62: anytype.Event.Block.Set
	(*EventBlockFill)(nil),                             // 63: anytype.Event.Block.Fill
	(*EventBlockDataview)(nil),                         // 64: anytype.Event.Block.Dataview
	(*EventBlockSetRelation)(nil),                      // 65: anytype.Event.Block.Set.Relation
	(*EventBlockSetFields)(nil),                        // 66: anytype.Event.Block.Set.Fields
	(*EventBlockSetChildrenIds)(nil),                   // 67: anytype.Event.Block.Set.ChildrenIds
	(*EventBlockSetRestrictions)(nil),                  // 68: anytype.Event.Block.Set.Restrictions
	(*EventBlockSetBackgroundColor)(nil),               // 69: anytype.Event.Block.Set.BackgroundColor
	(*EventBlockSetAlign)(nil),                         // 70: anytype.Event.Block.Set.Align
	(*EventBlockSetVerticalAlign)(nil),                 // 71: anytype.Event.Block.Set.VerticalAlign
	(*EventBlockSetText)(nil),                          // 72: anytype.Event.Block.Set.Text
	(*EventBlockSetLatex)(nil),                         // 73: anytype.Event.Block.Set.Latex
	(*EventBlockSetDiv)(nil),                           // 74: anytype.Event.Block.Set.Div
	(*EventBlockSetFile)(nil),                          // 75: anytype.Event.Block.Set.File
	(*EventBlockSetLink)(nil),                          // 76: anytype.Event.Block.Set.Link
	(*EventBlockSetBookmark)(nil),                      // 77: anytype.Event.Block.Set.Bookmark
	(*EventBlockSetTableRow)(nil),                      // 78: anytype.Event.Block.Set.TableRow
	(*EventBlockSetWidget)(nil),                        // 79: anytype.Event.Block.Set.Widget
	(*EventBlockSetRelationKey)(nil),                   // 80: anytype.Event.Block.Set.Relation.Key
	(*EventBlockSetTextText)(nil),                      // 81: anytype.Event.Block.Set.Text.Text
	(*EventBlockSetTextStyle)(nil),                     // 82: anytype.Event.Block.Set.Text.Style
	(*EventBlockSetTextMarks)(nil),                     // 83: anytype.Event.Block.Set.Text.Marks
	(*EventBlockSetTextChecked)(nil),                   // 84: anytype.Event.Block.Set.Text.Checked
	(*EventBlockSetTextColor)(nil),                     // 85: anytype.Event.Block.Set.Text.Color
	(*EventBlockSetTextIconEmoji)(nil),                 // 86: anytype.Event.Block.Set.Text.IconEmoji
	(*EventBlockSetTextIconImage)(nil),                 // 87: anytype.Event.Block.Set.Text.IconImage
	(*EventBlockSetLatexText)(nil),                     // 88: anytype.Event.Block.Set.Latex.Text
	(*EventBlockSetLatexProcessor)(nil),                // 89: anytype.Event.Block.Set.Latex.Processor
	(*EventBlockSetDivStyle)(nil),                      // 90: anytype.Event.Block.Set.Div.Style
	(*EventBlockSetFileName)(nil),                      // 91: anytype.Event.Block.Set.File.Name
	(*EventBlockSetFileWidth)(nil),                     // 92: anytype.Event.Block.Set.File.Width
	(*EventBlockSetFileState)(nil),                     // 93: anytype.Event.Block.Set.File.State
	(*EventBlockSetFileType)(nil),                      // 94: anytype.Event.Block.Set.File.Type
	(*EventBlockSetFileStyle)(nil),                     // 95: anytype.Event.Block.Set.File.Style
	(*EventBlockSetFileHash)(nil),                      // 96: anytype.Event.Block.Set.File.Hash
	(*EventBlockSetFileMime)(nil),                      // 97: anytype.Event.Block.Set.File.Mime
	(*EventBlockSetFileSize)(nil),                      // 98: anytype.Event.Block.Set.File.Size
	(*EventBlockSetFileTargetObjectId)(nil),            // 99: anytype.Event.Block.Set.File.TargetObjectId
	(*EventBlockSetLinkTargetBlockId)(nil),             // 100: anytype.Event.Block.Set.Link.TargetBlockId
	(*EventBlockSetLinkStyle)(nil),                     // 101: anytype.Event.Block.Set.Link.Style
	(*EventBlockSetLinkFields)(nil),                    // 102: anytype.Event.Block.Set.Link.Fields
	(*EventBlockSetLinkIconSize)(nil),                  // 103: anytype.Event.Block.Set.Link.IconSize
	(*EventBlockSetLinkCardStyle)(nil),                 // 104: anytype.Event.Block.Set.Link.CardStyle
	(*EventBlockSetLinkDescription)(nil),               // 105: anytype.Event.Block.Set.Link.Description
	(*EventBlockSetLinkRelations)(nil),                 // 106: anytype.Event.Block.Set.Link.Relations
	(*EventBlockSetBookmarkUrl)(nil),                   // 107: anytype.Event.Block.Set.Bookmark.Url
	(*EventBlockSetBookmarkTitle)(nil),                 // 108: anytype.Event.Block.Set.Bookmark.Title
	(*EventBlockSetBookmarkDescription)(nil),           // 109: anytype.Event.Block.Set.Bookmark.Description
	(*EventBlockSetBookmarkImageHash)(nil),             // 110: anytype.Event.Block.Set.Bookmark.ImageHash
	(*EventBlockSetBookmarkFaviconHash)(nil),           // 111: anytype.Event.Block.Set.Bookmark.FaviconHash
	(*EventBlockSetBookmarkType)(nil),                  // 112: anytype.Event.Block.Set.Bookmark.Type
	(*EventBlockSetBookmarkTargetObjectId)(nil),        // 113: anytype.Event.Block.Set.Bookmark.TargetObjectId
	(*EventBlockSetBookmarkState)(nil),                 // 114: anytype.Event.Block.Set.Bookmark.State
	(*EventBlockSetTableRowIsHeader)(nil),              // 115: anytype.Event.Block.Set.TableRow.IsHeader
	(*EventBlockSetWidgetLayout)(nil),                  // 116: anytype.Event.Block.Set.Widget.Layout
	(*EventBlockSetWidgetLimit)(nil),                   // 117: anytype.Event.Block.Set.Widget.Limit
	(*EventBlockSetWidgetViewId)(nil),                  // 118: anytype.Event.Block.Set.Widget.ViewId
	(*EventBlockFillDetails)(nil),                      // 119: anytype.Event.Block.Fill.Details
	(*EventBlockFillDatabaseRecords)(nil),              // 120: anytype.Event.Block.Fill.DatabaseRecords
	(*EventBlockFillFields)(nil),                       // 121: anytype.Event.Block.Fill.Fields
	(*EventBlockFillChildrenIds)(nil),                  // 122: anytype.Event.Block.Fill.ChildrenIds
	(*EventBlockFillRestrictions)(nil),                 // 123: anytype.Event.Block.Fill.Restrictions
	(*EventBlockFillBackgroundColor)(nil),              // 124: anytype.Event.Block.Fill.BackgroundColor
	(*EventBlockFillAlign)(nil),                        // 125: anytype.Event.Block.Fill.Align
	(*EventBlockFillText)(nil),                         // 126: anytype.Event.Block.Fill.Text
	(*EventBlockFillDiv)(nil),                          // 127: anytype.Event.Block.Fill.Div
	(*EventBlockFillFile)(nil),                         // 128: anytype.Event.Block.Fill.File
	(*EventBlockFillLink)(nil),                         // 129: anytype.Event.Block.Fill.Link
	(*EventBlockFillBookmark)(nil),                     // 130: anytype.Event.Block.Fill.Bookmark
	(*EventBlockFillTextText)(nil),                     // 131: anytype.Event.Block.Fill.Text.Text
	(*EventBlockFillTextStyle)(nil),                    // 132: anytype.Event.Block.Fill.Text.Style
	(*EventBlockFillTextMarks)(nil),                    // 133: anytype.Event.Block.Fill.Text.Marks
	(*EventBlockFillTextChecked)(nil),                  // 134: anytype.Event.Block.Fill.Text.Checked
	(*EventBlockFillTextColor)(nil),                    // 135: anytype.Event.Block.Fill.Text.Color
	(*EventBlockFillDivStyle)(nil),                     // 136: anytype.Event.Block.Fill.Div.Style
	(*EventBlockFillFileName)(nil),                     // 137: anytype.Event.Block.Fill.File.Name
	(*EventBlockFillFileWidth)(nil),                    // 138: anytype.Event.Block.Fill.File.Width
	(*EventBlockFillFileState)(nil),                    // 139: anytype.Event.Block.Fill.File.State
	(*EventBlockFillFileType)(nil),                     // 140: anytype.Event.Block.Fill.File.Type
	(*EventBlockFillFileStyle)(nil),                    // 141: anytype.Event.Block.Fill.File.Style
	(*EventBlockFillFileHash)(nil),                     // 142: anytype.Event.Block.Fill.File.Hash
	(*EventBlockFillFileMime)(nil),                     // 143: anytype.Event.Block.Fill.File.Mime
	(*EventBlockFillFileSize)(nil),                     // 144: anytype.Event.Block.Fill.File.Size
	(*EventBlockFillLinkTargetBlockId)(nil),            // 145: anytype.Event.Block.Fill.Link.TargetBlockId
	(*EventBlockFillLinkStyle)(nil),                    // 146: anytype.Event.Block.Fill.Link.Style
	(*EventBlockFillLinkFields)(nil),                   // 147: anytype.Event.Block.Fill.Link.Fields
	(*EventBlockFillBookmarkUrl)(nil),                  // 148: anytype.Event.Block.Fill.Bookmark.Url
	(*EventBlockFillBookmarkTitle)(nil),                // 149: anytype.Event.Block.Fill.Bookmark.Title
	(*EventBlockFillBookmarkDescription)(nil),          // 150: anytype.Event.Block.Fill.Bookmark.Description
	(*EventBlockFillBookmarkImageHash)(nil),            // 151: anytype.Event.Block.Fill.Bookmark.ImageHash
	(*EventBlockFillBookmarkFaviconHash)(nil),          // 152: anytype.Event.Block.Fill.Bookmark.FaviconHash
	(*EventBlockFillBookmarkType)(nil),                 // 153: anytype.Event.Block.Fill.Bookmark.Type
	(*EventBlockFillBookmarkTargetObjectId)(nil),       // 154: anytype.Event.Block.Fill.Bookmark.TargetObjectId
	(*EventBlockDataviewViewSet)(nil),                  // 155: anytype.Event.Block.Dataview.ViewSet
	(*EventBlockDataviewViewUpdate)(nil),               // 156: anytype.Event.Block.Dataview.ViewUpdate
	(*EventBlockDataviewViewDelete)(nil),               // 157: anytype.Event.Block.Dataview.ViewDelete
	(*EventBlockDataviewViewOrder)(nil),                // 158: anytype.Event.Block.Dataview.ViewOrder
	(*EventBlockDataviewSourceSet)(nil),                // 159: anytype.Event.Block.Dataview.SourceSet
	(*EventBlockDataviewOldRelationDelete)(nil),        // 160: anytype.Event.Block.Dataview.OldRelationDelete
	(*EventBlockDataviewOldRelationSet)(nil),           // 161: anytype.Event.Block.Dataview.OldRelationSet
	(*EventBlockDataviewRelationDelete)(nil),           // 162: anytype.Event.Block.Dataview.RelationDelete
	(*EventBlockDataviewRelationSet)(nil),              // 163: anytype.Event.Block.Dataview.RelationSet
	(*EventBlockDataviewGroupOrderUpdate)(nil),         // 164: anytype.Event.Block.Dataview.GroupOrderUpdate
	(*EventBlockDataviewObjectOrderUpdate)(nil),        // 165: anytype.Event.Block.Dataview.ObjectOrderUpdate
	(*EventBlockDataviewSliceChange)(nil),              // 166: anytype.Event.Block.Dataview.SliceChange
	(*EventBlockDataviewTargetObjectIdSet)(nil),        // 167: anytype.Event.Block.Dataview.TargetObjectIdSet
	(*EventBlockDataviewIsCollectionSet)(nil),          // 168: anytype.Event.Block.Dataview.IsCollectionSet
	(*EventBlockDataviewViewUpdateFields)(nil),         // 169: anytype.Event.Block.Dataview.ViewUpdate.Fields
	(*EventBlockDataviewViewUpdateFilter)(nil),         // 170: anytype.Event.Block.Dataview.ViewUpdate.Filter
	(*EventBlockDataviewViewUpdateRelation)(nil),       // 171: anytype.Event.Block.Dataview.ViewUpdate.Relation
	(*EventBlockDataviewViewUpdateSort)(nil),           // 172: anytype.Event.Block.Dataview.ViewUpdate.Sort
	(*EventBlockDataviewViewUpdateFilterAdd)(nil),      // 173: anytype.Event.Block.Dataview.ViewUpdate.Filter.Add
	(*EventBlockDataviewViewUpdateFilterRemove)(nil),   // 174: anytype.Event.Block.Dataview.ViewUpdate.Filter.Remove
	(*EventBlockDataviewViewUpdateFilterUpdate)(nil),   // 175: anytype.Event.Block.Dataview.ViewUpdate.Filter.Update
	(*EventBlockDataviewViewUpdateFilterMove)(nil),     // 176: anytype.Event.Block.Dataview.ViewUpdate.Filter.Move
	(*EventBlockDataviewViewUpdateRelationAdd)(nil),    // 177: anytype.Event.Block.Dataview.ViewUpdate.Relation.Add
	(*EventBlockDataviewViewUpdateRelationRemove)(nil), // 178: anytype.Event.Block.Dataview.ViewUpdate.Relation.Remove
	(*EventBlockDataviewViewUpdateRelationUpdate)(nil), // 179: anytype.Event.Block.Dataview.ViewUpdate.Relation.Update
	(*EventBlockDataviewViewUpdateRelationMove)(nil),   // 180: anytype.Event.Block.Dataview.ViewUpdate.Relation.Move
	(*EventBlockDataviewViewUpdateSortAdd)(nil),        // 181: anytype.Event.Block.Dataview.ViewUpdate.Sort.Add
	(*EventBlockDataviewViewUpdateSortRemove)(nil),     // 182: anytype.Event.Block.Dataview.ViewUpdate.Sort.Remove
	(*EventBlockDataviewViewUpdateSortUpdate)(nil),     // 183: anytype.Event.Block.Dataview.ViewUpdate.Sort.Update
	(*EventBlockDataviewViewUpdateSortMove)(nil),       // 184: anytype.Event.Block.Dataview.ViewUpdate.Sort.Move
	(*EventUserBlock)(nil),                             // 185: anytype.Event.User.Block
	(*EventUserBlockJoin)(nil),                         // 186: anytype.Event.User.Block.Join
	(*EventUserBlockLeft)(nil),                         // 187: anytype.Event.User.Block.Left
	(*EventUserBlockTextRange)(nil),                    // 188: anytype.Event.User.Block.TextRange
	(*EventUserBlockSelectRange)(nil),                  // 189: anytype.Event.User.Block.SelectRange
	(*EventProcessNew)(nil),                            // 190: anytype.Event.Process.New
	(*EventProcessUpdate)(nil),                         // 191: anytype.Event.Process.Update
	(*EventProcessDone)(nil),                           // 192: anytype.Event.Process.Done
	(*EventStatusThread)(nil),                          // 193: anytype.Event.Status.Thread
	(*EventStatusThreadSummary)(nil),                   // 194: anytype.Event.Status.Thread.Summary
	(*EventStatusThreadCafe)(nil),                      // 195: anytype.Event.Status.Thread.Cafe
	(*EventStatusThreadAccount)(nil),                   // 196: anytype.Event.Status.Thread.Account
	(*EventStatusThreadDevice)(nil),                    // 197: anytype.Event.Status.Thread.Device
	(*EventStatusThreadCafePinStatus)(nil),             // 198: anytype.Event.Status.Thread.Cafe.PinStatus
	(*EventFileLimitReached)(nil),                      // 199: anytype.Event.File.LimitReached
	(*EventFileSpaceUsage)(nil),                        // 200: anytype.Event.File.SpaceUsage
	(*EventFileLocalUsage)(nil),                        // 201: anytype.Event.File.LocalUsage
	(*EventFileLimitUpdated)(nil),                      // 202: anytype.Event.File.LimitUpdated
	(*EventMembershipUpdate)(nil),                      // 203: anytype.Event.Membership.Update
	(*EventNotificationSend)(nil),                      // 204: anytype.Event.Notification.Send
	(*EventNotificationUpdate)(nil),                    // 205: anytype.Event.Notification.Update
	(*EventPayloadBroadcast)(nil),                      // 206: anytype.Event.Payload.Broadcast
	(*EventSpaceSyncStatus)(nil),                       // 207: anytype.Event.Space.SyncStatus
	(*EventSpaceSyncStatusUpdate)(nil),                 // 208: anytype.Event.Space.SyncStatus.Update
	(*EventP2PStatusUpdate)(nil),                       // 209: anytype.Event.P2PStatus.Update
	(*EventImportFinish)(nil),                          // 210: anytype.Event.Import.Finish
	(*ModelProcess)(nil),                               // 211: anytype.Model.Process
	(*ModelProcessDropFiles)(nil),                      // 212: anytype.Model.Process.DropFiles
	(*ModelProcessImport)(nil),                         // 213: anytype.Model.Process.Import
	(*ModelProcessExport)(nil),                         // 214: anytype.Model.Process.Export
	(*ModelProcessSaveFile)(nil),                       // 215: anytype.Model.Process.SaveFile
	(*ModelProcessMigration)(nil),                      // 216: anytype.Model.Process.Migration
	(*ModelProcessProgress)(nil),                       // 217: anytype.Model.Process.Progress
	(*model.Account)(nil),                              // 218: anytype.model.Account
	(*model.ChatMessage)(nil),                          // 219: anytype.model.ChatMessage
	(*structpb.Struct)(nil),                            // 220: google.protobuf.Struct
	(*model.ChatState)(nil),                            // 221: anytype.model.ChatState
	(*model.ChatMessageReactions)(nil),                 // 222: anytype.model.ChatMessage.Reactions
	(*model.AccountConfig)(nil),                        // 223: anytype.model.Account.Config
	(*model.AccountStatus)(nil),                        // 224: anytype.model.Account.Status
	(model.AccountAuthLocalApiScope)(0),                // 225: anytype.model.Account.Auth.LocalApiScope
	(*structpb.Value)(nil),                             // 226: google.protobuf.Value
	(*model.BlockContentDataviewGroup)(nil),            // 227: anytype.model.Block.Content.Dataview.Group
	(*model.RelationLink)(nil),                         // 228: anytype.model.RelationLink
	(*model.Restrictions)(nil),                         // 229: anytype.model.Restrictions
	(*model.Block)(nil),                                // 230: anytype.model.Block
	(model.BlockContentTextMarkType)(0),                // 231: anytype.model.Block.Content.Text.Mark.Type
	(*model.BlockRestrictions)(nil),                    // 232: anytype.model.Block.Restrictions
	(model.BlockAlign)(0),                              // 233: anytype.model.Block.Align
	(model.BlockVerticalAlign)(0),                      // 234: anytype.model.Block.VerticalAlign
	(model.BlockContentTextStyle)(0),                   // 235: anytype.model.Block.Content.Text.Style
	(*model.BlockContentTextMarks)(nil),                // 236: anytype.model.Block.Content.Text.Marks
	(model.BlockContentLatexProcessor)(0),              // 237: anytype.model.Block.Content.Latex.Processor
	(model.BlockContentDivStyle)(0),                    // 238: anytype.model.Block.Content.Div.Style
	(model.BlockContentFileState)(0),                   // 239: anytype.model.Block.Content.File.State
	(model.BlockContentFileType)(0),                    // 240: anytype.model.Block.Content.File.Type
	(model.BlockContentFileStyle)(0),                   // 241: anytype.model.Block.Content.File.Style
	(model.BlockContentLinkStyle)(0),                   // 242: anytype.model.Block.Content.Link.Style
	(model.BlockContentLinkIconSize)(0),                // 243: anytype.model.Block.Content.Link.IconSize
	(model.BlockContentLinkCardStyle)(0),               // 244: anytype.model.Block.Content.Link.CardStyle
	(model.BlockContentLinkDescription)(0),             // 245: anytype.model.Block.Content.Link.Description
	(model.LinkPreviewType)(0),                         // 246: anytype.model.LinkPreview.Type
	(model.BlockContentBookmarkState)(0),               // 247: anytype.model.Block.Content.Bookmark.State
	(model.BlockContentWidgetLayout)(0),                // 248: anytype.model.Block.Content.Widget.Layout
	(*model.BlockContentDataviewView)(nil),             // 249: anytype.model.Block.Content.Dataview.View
	(*model.Relation)(nil),                             // 250: anytype.model.Relation
	(*model.BlockContentDataviewGroupOrder)(nil),       // 251: anytype.model.Block.Content.Dataview.GroupOrder
	(model.BlockContentDataviewViewType)(0),            // 252: anytype.model.Block.Content.Dataview.View.Type
	(model.BlockContentDataviewViewSize)(0),            // 253: anytype.model.Block.Content.Dataview.View.Size
	(*model.BlockContentDataviewFilter)(nil),           // 254: anytype.model.Block.Content.Dataview.Filter
	(*model.BlockContentDataviewRelation)(nil),         // 255: anytype.model.Block.Content.Dataview.Relation
	(*model.BlockContentDataviewSort)(nil),             // 256: anytype.model.Block.Content.Dataview.Sort
	(*model.Range)(nil),                                // 257: anytype.model.Range
	(*model.Membership)(nil),                           // 258: anytype.model.Membership
	(*model.Notification)(nil),                         // 259: anytype.model.Notification
	(model.ImportType)(0),                              // 260: anytype.model.Import.Type
}
var file_pb_protos_events_proto_depIdxs = []int32{
	10,  // 0: anytype.Event.messages:type_name -> anytype.Event.Message
	218, // 1: anytype.Event.initiator:type_name -> anytype.model.Account
	10,  // 2: anytype.ResponseEvent.messages:type_name -> anytype.Event.Message
	32,  // 3: anytype.Event.Message.accountShow:type_name -> anytype.Event.Account.Show
	33,  // 4: anytype.Event.Message.accountDetails:type_name -> anytype.Event.Account.Details
	38,  // 5: anytype.Event.Message.accountConfigUpdate:type_name -> anytype.Event.Account.Config.Update
	35,  // 6: anytype.Event.Message.accountUpdate:type_name -> anytype.Event.Account.Update
	36,  // 7: anytype.Event.Message.accountLinkChallenge:type_name -> anytype.Event.Account.LinkChallenge
	37,  // 8: anytype.Event.Message.accountLinkChallengeHide:type_name -> anytype.Event.Account.LinkChallengeHide
	47,  // 9: anytype.Event.Message.objectDetailsSet:type_name -> anytype.Event.Object.Details.Set
	46,  // 10: anytype.Event.Message.objectDetailsAmend:type_name -> anytype.Event.Object.Details.Amend
	48,  // 11: anytype.Event.Message.objectDetailsUnset:type_name -> anytype.Event.Object.Details.Unset
	55,  // 12: anytype.Event.Message.objectRelationsAmend:type_name -> anytype.Event.Object.Relations.Amend
	56,  // 13: anytype.Event.Message.objectRelationsRemove:type_name -> anytype.Event.Object.Relations.Remove
	43,  // 14: anytype.Event.Message.objectRemove:type_name -> anytype.Event.Object.Remove
	45,  // 15: anytype.Event.Message.objectClose:type_name -> anytype.Event.Object.Close
	57,  // 16: anytype.Event.Message.objectRestrictionsSet:type_name -> anytype.Event.Object.Restrictions.Set
	50,  // 17: anytype.Event.Message.subscriptionAdd:type_name -> anytype.Event.Object.Subscription.Add
	51,  // 18: anytype.Event.Message.subscriptionRemove:type_name -> anytype.Event.Object.Subscription.Remove
	52,  // 19: anytype.Event.Message.subscriptionPosition:type_name -> anytype.Event.Object.Subscription.Position
	53,  // 20: anytype.Event.Message.subscriptionCounters:type_name -> anytype.Event.Object.Subscription.Counters
	54,  // 21: anytype.Event.Message.subscriptionGroups:type_name -> anytype.Event.Object.Subscription.Groups
	58,  // 22: anytype.Event.Message.blockAdd:type_name -> anytype.Event.Block.Add
	60,  // 23: anytype.Event.Message.blockDelete:type_name -> anytype.Event.Block.Delete
	59,  // 24: anytype.Event.Message.filesUpload:type_name -> anytype.Event.Block.FilesUpload
	61,  // 25: anytype.Event.Message.marksInfo:type_name -> anytype.Event.Block.MarksInfo
	66,  // 26: anytype.Event.Message.blockSetFields:type_name -> anytype.Event.Block.Set.Fields
	67,  // 27: anytype.Event.Message.blockSetChildrenIds:type_name -> anytype.Event.Block.Set.ChildrenIds
	68,  // 28: anytype.Event.Message.blockSetRestrictions:type_name -> anytype.Event.Block.Set.Restrictions
	69,  // 29: anytype.Event.Message.blockSetBackgroundColor:type_name -> anytype.Event.Block.Set.BackgroundColor
	72,  // 30: anytype.Event.Message.blockSetText:type_name -> anytype.Event.Block.Set.Text
	75,  // 31: anytype.Event.Message.blockSetFile:type_name -> anytype.Event.Block.Set.File
	76,  // 32: anytype.Event.Message.blockSetLink:type_name -> anytype.Event.Block.Set.Link
	77,  // 33: anytype.Event.Message.blockSetBookmark:type_name -> anytype.Event.Block.Set.Bookmark
	70,  // 34: anytype.Event.Message.blockSetAlign:type_name -> anytype.Event.Block.Set.Align
	74,  // 35: anytype.Event.Message.blockSetDiv:type_name -> anytype.Event.Block.Set.Div
	65,  // 36: anytype.Event.Message.blockSetRelation:type_name -> anytype.Event.Block.Set.Relation
	73,  // 37: anytype.Event.Message.blockSetLatex:type_name -> anytype.Event.Block.Set.Latex
	71,  // 38: anytype.Event.Message.blockSetVerticalAlign:type_name -> anytype.Event.Block.Set.VerticalAlign
	78,  // 39: anytype.Event.Message.blockSetTableRow:type_name -> anytype.Event.Block.Set.TableRow
	79,  // 40: anytype.Event.Message.blockSetWidget:type_name -> anytype.Event.Block.Set.Widget
	155, // 41: anytype.Event.Message.blockDataviewViewSet:type_name -> anytype.Event.Block.Dataview.ViewSet
	157, // 42: anytype.Event.Message.blockDataviewViewDelete:type_name -> anytype.Event.Block.Dataview.ViewDelete
	158, // 43: anytype.Event.Message.blockDataviewViewOrder:type_name -> anytype.Event.Block.Dataview.ViewOrder
	159, // 44: anytype.Event.Message.blockDataviewSourceSet:type_name -> anytype.Event.Block.Dataview.SourceSet
	164, // 45: anytype.Event.Message.blockDataViewGroupOrderUpdate:type_name -> anytype.Event.Block.Dataview.GroupOrderUpdate
	165, // 46: anytype.Event.Message.blockDataViewObjectOrderUpdate:type_name -> anytype.Event.Block.Dataview.ObjectOrderUpdate
	162, // 47: anytype.Event.Message.blockDataviewRelationDelete:type_name -> anytype.Event.Block.Dataview.RelationDelete
	163, // 48: anytype.Event.Message.blockDataviewRelationSet:type_name -> anytype.Event.Block.Dataview.RelationSet
	156, // 49: anytype.Event.Message.blockDataviewViewUpdate:type_name -> anytype.Event.Block.Dataview.ViewUpdate
	167, // 50: anytype.Event.Message.blockDataviewTargetObjectIdSet:type_name -> anytype.Event.Block.Dataview.TargetObjectIdSet
	168, // 51: anytype.Event.Message.blockDataviewIsCollectionSet:type_name -> anytype.Event.Block.Dataview.IsCollectionSet
	160, // 52: anytype.Event.Message.blockDataviewOldRelationDelete:type_name -> anytype.Event.Block.Dataview.OldRelationDelete
	161, // 53: anytype.Event.Message.blockDataviewOldRelationSet:type_name -> anytype.Event.Block.Dataview.OldRelationSet
	186, // 54: anytype.Event.Message.userBlockJoin:type_name -> anytype.Event.User.Block.Join
	187, // 55: anytype.Event.Message.userBlockLeft:type_name -> anytype.Event.User.Block.Left
	189, // 56: anytype.Event.Message.userBlockSelectRange:type_name -> anytype.Event.User.Block.SelectRange
	188, // 57: anytype.Event.Message.userBlockTextRange:type_name -> anytype.Event.User.Block.TextRange
	16,  // 58: anytype.Event.Message.ping:type_name -> anytype.Event.Ping
	190, // 59: anytype.Event.Message.processNew:type_name -> anytype.Event.Process.New
	191, // 60: anytype.Event.Message.processUpdate:type_name -> anytype.Event.Process.Update
	192, // 61: anytype.Event.Message.processDone:type_name -> anytype.Event.Process.Done
	193, // 62: anytype.Event.Message.threadStatus:type_name -> anytype.Event.Status.Thread
	199, // 63: anytype.Event.Message.fileLimitReached:type_name -> anytype.Event.File.LimitReached
	200, // 64: anytype.Event.Message.fileSpaceUsage:type_name -> anytype.Event.File.SpaceUsage
	201, // 65: anytype.Event.Message.fileLocalUsage:type_name -> anytype.Event.File.LocalUsage
	202, // 66: anytype.Event.Message.fileLimitUpdated:type_name -> anytype.Event.File.LimitUpdated
	204, // 67: anytype.Event.Message.notificationSend:type_name -> anytype.Event.Notification.Send
	205, // 68: anytype.Event.Message.notificationUpdate:type_name -> anytype.Event.Notification.Update
	206, // 69: anytype.Event.Message.payloadBroadcast:type_name -> anytype.Event.Payload.Broadcast
	203, // 70: anytype.Event.Message.membershipUpdate:type_name -> anytype.Event.Membership.Update
	208, // 71: anytype.Event.Message.spaceSyncStatusUpdate:type_name -> anytype.Event.Space.SyncStatus.Update
	209, // 72: anytype.Event.Message.p2pStatusUpdate:type_name -> anytype.Event.P2PStatus.Update
	210, // 73: anytype.Event.Message.importFinish:type_name -> anytype.Event.Import.Finish
	26,  // 74: anytype.Event.Message.chatAdd:type_name -> anytype.Event.Chat.Add
	28,  // 75: anytype.Event.Message.chatUpdate:type_name -> anytype.Event.Chat.Update
	29,  // 76: anytype.Event.Message.chatUpdateReactions:type_name -> anytype.Event.Chat.UpdateReactions
	30,  // 77: anytype.Event.Message.chatUpdateReadStatus:type_name -> anytype.Event.Chat.UpdateReadStatus
	27,  // 78: anytype.Event.Message.chatDelete:type_name -> anytype.Event.Chat.Delete
	31,  // 79: anytype.Event.Message.chatStateUpdate:type_name -> anytype.Event.Chat.UpdateState
	219, // 80: anytype.Event.Chat.Add.message:type_name -> anytype.model.ChatMessage
	220, // 81: anytype.Event.Chat.Add.dependencies:type_name -> google.protobuf.Struct
	221, // 82: anytype.Event.Chat.Delete.state:type_name -> anytype.model.ChatState
	219, // 83: anytype.Event.Chat.Update.message:type_name -> anytype.model.ChatMessage
	222, // 84: anytype.Event.Chat.UpdateReactions.reactions:type_name -> anytype.model.ChatMessage.Reactions
	221, // 85: anytype.Event.Chat.UpdateState.state:type_name -> anytype.model.ChatState
	218, // 86: anytype.Event.Account.Show.account:type_name -> anytype.model.Account
	220, // 87: anytype.Event.Account.Details.details:type_name -> google.protobuf.Struct
	223, // 88: anytype.Event.Account.Update.config:type_name -> anytype.model.Account.Config
	224, // 89: anytype.Event.Account.Update.status:type_name -> anytype.model.Account.Status
	39,  // 90: anytype.Event.Account.LinkChallenge.clientInfo:type_name -> anytype.Event.Account.LinkChallenge.ClientInfo
	225, // 91: anytype.Event.Account.LinkChallenge.scope:type_name -> anytype.model.Account.Auth.LocalApiScope
	223, // 92: anytype.Event.Account.Config.Update.config:type_name -> anytype.model.Account.Config
	224, // 93: anytype.Event.Account.Config.Update.status:type_name -> anytype.model.Account.Status
	49,  // 94: anytype.Event.Object.Details.Amend.details:type_name -> anytype.Event.Object.Details.Amend.KeyValue
	220, // 95: anytype.Event.Object.Details.Set.details:type_name -> google.protobuf.Struct
	226, // 96: anytype.Event.Object.Details.Amend.KeyValue.value:type_name -> google.protobuf.Value
	227, // 97: anytype.Event.Object.Subscription.Groups.group:type_name -> anytype.model.Block.Content.Dataview.Group
	228, // 98: anytype.Event.Object.Relations.Amend.relationLinks:type_name -> anytype.model.RelationLink
	229, // 99: anytype.Event.Object.Restrictions.Set.restrictions:type_name -> anytype.model.Restrictions
	230, // 100: anytype.Event.Block.Add.blocks:type_name -> anytype.model.Block
	231, // 101: anytype.Event.Block.MarksInfo.marksInRange:type_name -> anytype.model.Block.Content.Text.Mark.Type
	80,  // 102: anytype.Event.Block.Set.Relation.key:type_name -> anytype.Event.Block.Set.Relation.Key
	220, // 103: anytype.Event.Block.Set.Fields.fields:type_name -> google.protobuf.Struct
	232, // 104: anytype.Event.Block.Set.Restrictions.restrictions:type_name -> anytype.model.Block.Restrictions
	233, // 105: anytype.Event.Block.Set.Align.align:type_name -> anytype.model.Block.Align
	234, // 106: anytype.Event.Block.Set.VerticalAlign.verticalAlign:type_name -> anytype.model.Block.VerticalAlign
	81,  // 107: anytype.Event.Block.Set.Text.text:type_name -> anytype.Event.Block.Set.Text.Text
	82,  // 108: anytype.Event.Block.Set.Text.style:type_name -> anytype.Event.Block.Set.Text.Style
	83,  // 109: anytype.Event.Block.Set.Text.marks:type_name -> anytype.Event.Block.Set.Text.Marks
	84,  // 110: anytype.Event.Block.Set.Text.checked:type_name -> anytype.Event.Block.Set.Text.Checked
	85,  // 111: anytype.Event.Block.Set.Text.color:type_name -> anytype.Event.Block.Set.Text.Color
	86,  // 112: anytype.Event.Block.Set.Text.iconEmoji:type_name -> anytype.Event.Block.Set.Text.IconEmoji
	87,  // 113: anytype.Event.Block.Set.Text.iconImage:type_name -> anytype.Event.Block.Set.Text.IconImage
	88,  // 114: anytype.Event.Block.Set.Latex.text:type_name -> anytype.Event.Block.Set.Latex.Text
	89,  // 115: anytype.Event.Block.Set.Latex.processor:type_name -> anytype.Event.Block.Set.Latex.Processor
	90,  // 116: anytype.Event.Block.Set.Div.style:type_name -> anytype.Event.Block.Set.Div.Style
	94,  // 117: anytype.Event.Block.Set.File.type:type_name -> anytype.Event.Block.Set.File.Type
	93,  // 118: anytype.Event.Block.Set.File.state:type_name -> anytype.Event.Block.Set.File.State
	97,  // 119: anytype.Event.Block.Set.File.mime:type_name -> anytype.Event.Block.Set.File.Mime
	96,  // 120: anytype.Event.Block.Set.File.hash:type_name -> anytype.Event.Block.Set.File.Hash
	91,  // 121: anytype.Event.Block.Set.File.name:type_name -> anytype.Event.Block.Set.File.Name
	98,  // 122: anytype.Event.Block.Set.File.size:type_name -> anytype.Event.Block.Set.File.Size
	95,  // 123: anytype.Event.Block.Set.File.style:type_name -> anytype.Event.Block.Set.File.Style
	99,  // 124: anytype.Event.Block.Set.File.targetObjectId:type_name -> anytype.Event.Block.Set.File.TargetObjectId
	100, // 125: anytype.Event.Block.Set.Link.targetBlockId:type_name -> anytype.Event.Block.Set.Link.TargetBlockId
	101, // 126: anytype.Event.Block.Set.Link.style:type_name -> anytype.Event.Block.Set.Link.Style
	102, // 127: anytype.Event.Block.Set.Link.fields:type_name -> anytype.Event.Block.Set.Link.Fields
	103, // 128: anytype.Event.Block.Set.Link.iconSize:type_name -> anytype.Event.Block.Set.Link.IconSize
	104, // 129: anytype.Event.Block.Set.Link.cardStyle:type_name -> anytype.Event.Block.Set.Link.CardStyle
	105, // 130: anytype.Event.Block.Set.Link.description:type_name -> anytype.Event.Block.Set.Link.Description
	106, // 131: anytype.Event.Block.Set.Link.relations:type_name -> anytype.Event.Block.Set.Link.Relations
	107, // 132: anytype.Event.Block.Set.Bookmark.url:type_name -> anytype.Event.Block.Set.Bookmark.Url
	108, // 133: anytype.Event.Block.Set.Bookmark.title:type_name -> anytype.Event.Block.Set.Bookmark.Title
	109, // 134: anytype.Event.Block.Set.Bookmark.description:type_name -> anytype.Event.Block.Set.Bookmark.Description
	110, // 135: anytype.Event.Block.Set.Bookmark.imageHash:type_name -> anytype.Event.Block.Set.Bookmark.ImageHash
	111, // 136: anytype.Event.Block.Set.Bookmark.faviconHash:type_name -> anytype.Event.Block.Set.Bookmark.FaviconHash
	112, // 137: anytype.Event.Block.Set.Bookmark.type:type_name -> anytype.Event.Block.Set.Bookmark.Type
	113, // 138: anytype.Event.Block.Set.Bookmark.targetObjectId:type_name -> anytype.Event.Block.Set.Bookmark.TargetObjectId
	114, // 139: anytype.Event.Block.Set.Bookmark.state:type_name -> anytype.Event.Block.Set.Bookmark.State
	115, // 140: anytype.Event.Block.Set.TableRow.isHeader:type_name -> anytype.Event.Block.Set.TableRow.IsHeader
	116, // 141: anytype.Event.Block.Set.Widget.layout:type_name -> anytype.Event.Block.Set.Widget.Layout
	117, // 142: anytype.Event.Block.Set.Widget.limit:type_name -> anytype.Event.Block.Set.Widget.Limit
	118, // 143: anytype.Event.Block.Set.Widget.viewId:type_name -> anytype.Event.Block.Set.Widget.ViewId
	235, // 144: anytype.Event.Block.Set.Text.Style.value:type_name -> anytype.model.Block.Content.Text.Style
	236, // 145: anytype.Event.Block.Set.Text.Marks.value:type_name -> anytype.model.Block.Content.Text.Marks
	237, // 146: anytype.Event.Block.Set.Latex.Processor.value:type_name -> anytype.model.Block.Content.Latex.Processor
	238, // 147: anytype.Event.Block.Set.Div.Style.value:type_name -> anytype.model.Block.Content.Div.Style
	239, // 148: anytype.Event.Block.Set.File.State.value:type_name -> anytype.model.Block.Content.File.State
	240, // 149: anytype.Event.Block.Set.File.Type.value:type_name -> anytype.model.Block.Content.File.Type
	241, // 150: anytype.Event.Block.Set.File.Style.value:type_name -> anytype.model.Block.Content.File.Style
	242, // 151: anytype.Event.Block.Set.Link.Style.value:type_name -> anytype.model.Block.Content.Link.Style
	220, // 152: anytype.Event.Block.Set.Link.Fields.value:type_name -> google.protobuf.Struct
	243, // 153: anytype.Event.Block.Set.Link.IconSize.value:type_name -> anytype.model.Block.Content.Link.IconSize
	244, // 154: anytype.Event.Block.Set.Link.CardStyle.value:type_name -> anytype.model.Block.Content.Link.CardStyle
	245, // 155: anytype.Event.Block.Set.Link.Description.value:type_name -> anytype.model.Block.Content.Link.Description
	246, // 156: anytype.Event.Block.Set.Bookmark.Type.value:type_name -> anytype.model.LinkPreview.Type
	247, // 157: anytype.Event.Block.Set.Bookmark.State.value:type_name -> anytype.model.Block.Content.Bookmark.State
	248, // 158: anytype.Event.Block.Set.Widget.Layout.value:type_name -> anytype.model.Block.Content.Widget.Layout
	220, // 159: anytype.Event.Block.Fill.Details.details:type_name -> google.protobuf.Struct
	220, // 160: anytype.Event.Block.Fill.DatabaseRecords.records:type_name -> google.protobuf.Struct
	220, // 161: anytype.Event.Block.Fill.Fields.fields:type_name -> google.protobuf.Struct
	232, // 162: anytype.Event.Block.Fill.Restrictions.restrictions:type_name -> anytype.model.Block.Restrictions
	233, // 163: anytype.Event.Block.Fill.Align.align:type_name -> anytype.model.Block.Align
	131, // 164: anytype.Event.Block.Fill.Text.text:type_name -> anytype.Event.Block.Fill.Text.Text
	132, // 165: anytype.Event.Block.Fill.Text.style:type_name -> anytype.Event.Block.Fill.Text.Style
	133, // 166: anytype.Event.Block.Fill.Text.marks:type_name -> anytype.Event.Block.Fill.Text.Marks
	134, // 167: anytype.Event.Block.Fill.Text.checked:type_name -> anytype.Event.Block.Fill.Text.Checked
	135, // 168: anytype.Event.Block.Fill.Text.color:type_name -> anytype.Event.Block.Fill.Text.Color
	136, // 169: anytype.Event.Block.Fill.Div.style:type_name -> anytype.Event.Block.Fill.Div.Style
	140, // 170: anytype.Event.Block.Fill.File.type:type_name -> anytype.Event.Block.Fill.File.Type
	139, // 171: anytype.Event.Block.Fill.File.state:type_name -> anytype.Event.Block.Fill.File.State
	143, // 172: anytype.Event.Block.Fill.File.mime:type_name -> anytype.Event.Block.Fill.File.Mime
	142, // 173: anytype.Event.Block.Fill.File.hash:type_name -> anytype.Event.Block.Fill.File.Hash
	137, // 174: anytype.Event.Block.Fill.File.name:type_name -> anytype.Event.Block.Fill.File.Name
	144, // 175: anytype.Event.Block.Fill.File.size:type_name -> anytype.Event.Block.Fill.File.Size
	141, // 176: anytype.Event.Block.Fill.File.style:type_name -> anytype.Event.Block.Fill.File.Style
	145, // 177: anytype.Event.Block.Fill.Link.targetBlockId:type_name -> anytype.Event.Block.Fill.Link.TargetBlockId
	146, // 178: anytype.Event.Block.Fill.Link.style:type_name -> anytype.Event.Block.Fill.Link.Style
	147, // 179: anytype.Event.Block.Fill.Link.fields:type_name -> anytype.Event.Block.Fill.Link.Fields
	148, // 180: anytype.Event.Block.Fill.Bookmark.url:type_name -> anytype.Event.Block.Fill.Bookmark.Url
	149, // 181: anytype.Event.Block.Fill.Bookmark.title:type_name -> anytype.Event.Block.Fill.Bookmark.Title
	150, // 182: anytype.Event.Block.Fill.Bookmark.description:type_name -> anytype.Event.Block.Fill.Bookmark.Description
	151, // 183: anytype.Event.Block.Fill.Bookmark.imageHash:type_name -> anytype.Event.Block.Fill.Bookmark.ImageHash
	152, // 184: anytype.Event.Block.Fill.Bookmark.faviconHash:type_name -> anytype.Event.Block.Fill.Bookmark.FaviconHash
	153, // 185: anytype.Event.Block.Fill.Bookmark.type:type_name -> anytype.Event.Block.Fill.Bookmark.Type
	154, // 186: anytype.Event.Block.Fill.Bookmark.targetObjectId:type_name -> anytype.Event.Block.Fill.Bookmark.TargetObjectId
	235, // 187: anytype.Event.Block.Fill.Text.Style.value:type_name -> anytype.model.Block.Content.Text.Style
	236, // 188: anytype.Event.Block.Fill.Text.Marks.value:type_name -> anytype.model.Block.Content.Text.Marks
	238, // 189: anytype.Event.Block.Fill.Div.Style.value:type_name -> anytype.model.Block.Content.Div.Style
	239, // 190: anytype.Event.Block.Fill.File.State.value:type_name -> anytype.model.Block.Content.File.State
	240, // 191: anytype.Event.Block.Fill.File.Type.value:type_name -> anytype.model.Block.Content.File.Type
	241, // 192: anytype.Event.Block.Fill.File.Style.value:type_name -> anytype.model.Block.Content.File.Style
	242, // 193: anytype.Event.Block.Fill.Link.Style.value:type_name -> anytype.model.Block.Content.Link.Style
	220, // 194: anytype.Event.Block.Fill.Link.Fields.value:type_name -> google.protobuf.Struct
	246, // 195: anytype.Event.Block.Fill.Bookmark.Type.value:type_name -> anytype.model.LinkPreview.Type
	249, // 196: anytype.Event.Block.Dataview.ViewSet.view:type_name -> anytype.model.Block.Content.Dataview.View
	170, // 197: anytype.Event.Block.Dataview.ViewUpdate.filter:type_name -> anytype.Event.Block.Dataview.ViewUpdate.Filter
	171, // 198: anytype.Event.Block.Dataview.ViewUpdate.relation:type_name -> anytype.Event.Block.Dataview.ViewUpdate.Relation
	172, // 199: anytype.Event.Block.Dataview.ViewUpdate.sort:type_name -> anytype.Event.Block.Dataview.ViewUpdate.Sort
	169, // 200: anytype.Event.Block.Dataview.ViewUpdate.fields:type_name -> anytype.Event.Block.Dataview.ViewUpdate.Fields
	250, // 201: anytype.Event.Block.Dataview.OldRelationSet.relation:type_name -> anytype.model.Relation
	228, // 202: anytype.Event.Block.Dataview.RelationSet.relationLinks:type_name -> anytype.model.RelationLink
	251, // 203: anytype.Event.Block.Dataview.GroupOrderUpdate.groupOrder:type_name -> anytype.model.Block.Content.Dataview.GroupOrder
	166, // 204: anytype.Event.Block.Dataview.ObjectOrderUpdate.sliceChanges:type_name -> anytype.Event.Block.Dataview.SliceChange
	0,   // 205: anytype.Event.Block.Dataview.SliceChange.op:type_name -> anytype.Event.Block.Dataview.SliceOperation
	252, // 206: anytype.Event.Block.Dataview.ViewUpdate.Fields.type:type_name -> anytype.model.Block.Content.Dataview.View.Type
	253, // 207: anytype.Event.Block.Dataview.ViewUpdate.Fields.cardSize:type_name -> anytype.model.Block.Content.Dataview.View.Size
	173, // 208: anytype.Event.Block.Dataview.ViewUpdate.Filter.add:type_name -> anytype.Event.Block.Dataview.ViewUpdate.Filter.Add
	174, // 209: anytype.Event.Block.Dataview.ViewUpdate.Filter.remove:type_name -> anytype.Event.Block.Dataview.ViewUpdate.Filter.Remove
	175, // 210: anytype.Event.Block.Dataview.ViewUpdate.Filter.update:type_name -> anytype.Event.Block.Dataview.ViewUpdate.Filter.Update
	176, // 211: anytype.Event.Block.Dataview.ViewUpdate.Filter.move:type_name -> anytype.Event.Block.Dataview.ViewUpdate.Filter.Move
	177, // 212: anytype.Event.Block.Dataview.ViewUpdate.Relation.add:type_name -> anytype.Event.Block.Dataview.ViewUpdate.Relation.Add
	178, // 213: anytype.Event.Block.Dataview.ViewUpdate.Relation.remove:type_name -> anytype.Event.Block.Dataview.ViewUpdate.Relation.Remove
	179, // 214: anytype.Event.Block.Dataview.ViewUpdate.Relation.update:type_name -> anytype.Event.Block.Dataview.ViewUpdate.Relation.Update
	180, // 215: anytype.Event.Block.Dataview.ViewUpdate.Relation.move:type_name -> anytype.Event.Block.Dataview.ViewUpdate.Relation.Move
	181, // 216: anytype.Event.Block.Dataview.ViewUpdate.Sort.add:type_name -> anytype.Event.Block.Dataview.ViewUpdate.Sort.Add
	182, // 217: anytype.Event.Block.Dataview.ViewUpdate.Sort.remove:type_name -> anytype.Event.Block.Dataview.ViewUpdate.Sort.Remove
	183, // 218: anytype.Event.Block.Dataview.ViewUpdate.Sort.update:type_name -> anytype.Event.Block.Dataview.ViewUpdate.Sort.Update
	184, // 219: anytype.Event.Block.Dataview.ViewUpdate.Sort.move:type_name -> anytype.Event.Block.Dataview.ViewUpdate.Sort.Move
	254, // 220: anytype.Event.Block.Dataview.ViewUpdate.Filter.Add.items:type_name -> anytype.model.Block.Content.Dataview.Filter
	254, // 221: anytype.Event.Block.Dataview.ViewUpdate.Filter.Update.item:type_name -> anytype.model.Block.Content.Dataview.Filter
	255, // 222: anytype.Event.Block.Dataview.ViewUpdate.Relation.Add.items:type_name -> anytype.model.Block.Content.Dataview.Relation
	255, // 223: anytype.Event.Block.Dataview.ViewUpdate.Relation.Update.item:type_name -> anytype.model.Block.Content.Dataview.Relation
	256, // 224: anytype.Event.Block.Dataview.ViewUpdate.Sort.Add.items:type_name -> anytype.model.Block.Content.Dataview.Sort
	256, // 225: anytype.Event.Block.Dataview.ViewUpdate.Sort.Update.item:type_name -> anytype.model.Block.Content.Dataview.Sort
	12,  // 226: anytype.Event.User.Block.Join.account:type_name -> anytype.Event.Account
	12,  // 227: anytype.Event.User.Block.Left.account:type_name -> anytype.Event.Account
	12,  // 228: anytype.Event.User.Block.TextRange.account:type_name -> anytype.Event.Account
	257, // 229: anytype.Event.User.Block.TextRange.range:type_name -> anytype.model.Range
	12,  // 230: anytype.Event.User.Block.SelectRange.account:type_name -> anytype.Event.Account
	211, // 231: anytype.Event.Process.New.process:type_name -> anytype.Model.Process
	211, // 232: anytype.Event.Process.Update.process:type_name -> anytype.Model.Process
	211, // 233: anytype.Event.Process.Done.process:type_name -> anytype.Model.Process
	194, // 234: anytype.Event.Status.Thread.summary:type_name -> anytype.Event.Status.Thread.Summary
	195, // 235: anytype.Event.Status.Thread.cafe:type_name -> anytype.Event.Status.Thread.Cafe
	196, // 236: anytype.Event.Status.Thread.accounts:type_name -> anytype.Event.Status.Thread.Account
	1,   // 237: anytype.Event.Status.Thread.Summary.status:type_name -> anytype.Event.Status.Thread.SyncStatus
	1,   // 238: anytype.Event.Status.Thread.Cafe.status:type_name -> anytype.Event.Status.Thread.SyncStatus
	198, // 239: anytype.Event.Status.Thread.Cafe.files:type_name -> anytype.Event.Status.Thread.Cafe.PinStatus
	197, // 240: anytype.Event.Status.Thread.Account.devices:type_name -> anytype.Event.Status.Thread.Device
	258, // 241: anytype.Event.Membership.Update.data:type_name -> anytype.model.Membership
	259, // 242: anytype.Event.Notification.Send.notification:type_name -> anytype.model.Notification
	259, // 243: anytype.Event.Notification.Update.notification:type_name -> anytype.model.Notification
	2,   // 244: anytype.Event.Space.SyncStatus.Update.status:type_name -> anytype.Event.Space.Status
	3,   // 245: anytype.Event.Space.SyncStatus.Update.network:type_name -> anytype.Event.Space.Network
	4,   // 246: anytype.Event.Space.SyncStatus.Update.error:type_name -> anytype.Event.Space.SyncError
	5,   // 247: anytype.Event.P2PStatus.Update.status:type_name -> anytype.Event.P2PStatus.Status
	260, // 248: anytype.Event.Import.Finish.importType:type_name -> anytype.model.Import.Type
	6,   // 249: anytype.Model.Process.state:type_name -> anytype.Model.Process.State
	217, // 250: anytype.Model.Process.progress:type_name -> anytype.Model.Process.Progress
	212, // 251: anytype.Model.Process.dropFiles:type_name -> anytype.Model.Process.DropFiles
	213, // 252: anytype.Model.Process.import:type_name -> anytype.Model.Process.Import
	214, // 253: anytype.Model.Process.export:type_name -> anytype.Model.Process.Export
	215, // 254: anytype.Model.Process.saveFile:type_name -> anytype.Model.Process.SaveFile
	216, // 255: anytype.Model.Process.migration:type_name -> anytype.Model.Process.Migration
	256, // [256:256] is the sub-list for method output_type
	256, // [256:256] is the sub-list for method input_type
	256, // [256:256] is the sub-list for extension type_name
	256, // [256:256] is the sub-list for extension extendee
	0,   // [0:256] is the sub-list for field type_name
}

func init() { file_pb_protos_events_proto_init() }
func file_pb_protos_events_proto_init() {
	if File_pb_protos_events_proto != nil {
		return
	}
	file_pb_protos_events_proto_msgTypes[3].OneofWrappers = []any{
		(*EventMessageValueOfAccountShow)(nil),
		(*EventMessageValueOfAccountDetails)(nil),
		(*EventMessageValueOfAccountConfigUpdate)(nil),
		(*EventMessageValueOfAccountUpdate)(nil),
		(*EventMessageValueOfAccountLinkChallenge)(nil),
		(*EventMessageValueOfAccountLinkChallengeHide)(nil),
		(*EventMessageValueOfObjectDetailsSet)(nil),
		(*EventMessageValueOfObjectDetailsAmend)(nil),
		(*EventMessageValueOfObjectDetailsUnset)(nil),
		(*EventMessageValueOfObjectRelationsAmend)(nil),
		(*EventMessageValueOfObjectRelationsRemove)(nil),
		(*EventMessageValueOfObjectRemove)(nil),
		(*EventMessageValueOfObjectClose)(nil),
		(*EventMessageValueOfObjectRestrictionsSet)(nil),
		(*EventMessageValueOfSubscriptionAdd)(nil),
		(*EventMessageValueOfSubscriptionRemove)(nil),
		(*EventMessageValueOfSubscriptionPosition)(nil),
		(*EventMessageValueOfSubscriptionCounters)(nil),
		(*EventMessageValueOfSubscriptionGroups)(nil),
		(*EventMessageValueOfBlockAdd)(nil),
		(*EventMessageValueOfBlockDelete)(nil),
		(*EventMessageValueOfFilesUpload)(nil),
		(*EventMessageValueOfMarksInfo)(nil),
		(*EventMessageValueOfBlockSetFields)(nil),
		(*EventMessageValueOfBlockSetChildrenIds)(nil),
		(*EventMessageValueOfBlockSetRestrictions)(nil),
		(*EventMessageValueOfBlockSetBackgroundColor)(nil),
		(*EventMessageValueOfBlockSetText)(nil),
		(*EventMessageValueOfBlockSetFile)(nil),
		(*EventMessageValueOfBlockSetLink)(nil),
		(*EventMessageValueOfBlockSetBookmark)(nil),
		(*EventMessageValueOfBlockSetAlign)(nil),
		(*EventMessageValueOfBlockSetDiv)(nil),
		(*EventMessageValueOfBlockSetRelation)(nil),
		(*EventMessageValueOfBlockSetLatex)(nil),
		(*EventMessageValueOfBlockSetVerticalAlign)(nil),
		(*EventMessageValueOfBlockSetTableRow)(nil),
		(*EventMessageValueOfBlockSetWidget)(nil),
		(*EventMessageValueOfBlockDataviewViewSet)(nil),
		(*EventMessageValueOfBlockDataviewViewDelete)(nil),
		(*EventMessageValueOfBlockDataviewViewOrder)(nil),
		(*EventMessageValueOfBlockDataviewSourceSet)(nil),
		(*EventMessageValueOfBlockDataViewGroupOrderUpdate)(nil),
		(*EventMessageValueOfBlockDataViewObjectOrderUpdate)(nil),
		(*EventMessageValueOfBlockDataviewRelationDelete)(nil),
		(*EventMessageValueOfBlockDataviewRelationSet)(nil),
		(*EventMessageValueOfBlockDataviewViewUpdate)(nil),
		(*EventMessageValueOfBlockDataviewTargetObjectIdSet)(nil),
		(*EventMessageValueOfBlockDataviewIsCollectionSet)(nil),
		(*EventMessageValueOfBlockDataviewOldRelationDelete)(nil),
		(*EventMessageValueOfBlockDataviewOldRelationSet)(nil),
		(*EventMessageValueOfUserBlockJoin)(nil),
		(*EventMessageValueOfUserBlockLeft)(nil),
		(*EventMessageValueOfUserBlockSelectRange)(nil),
		(*EventMessageValueOfUserBlockTextRange)(nil),
		(*EventMessageValueOfPing)(nil),
		(*EventMessageValueOfProcessNew)(nil),
		(*EventMessageValueOfProcessUpdate)(nil),
		(*EventMessageValueOfProcessDone)(nil),
		(*EventMessageValueOfThreadStatus)(nil),
		(*EventMessageValueOfFileLimitReached)(nil),
		(*EventMessageValueOfFileSpaceUsage)(nil),
		(*EventMessageValueOfFileLocalUsage)(nil),
		(*EventMessageValueOfFileLimitUpdated)(nil),
		(*EventMessageValueOfNotificationSend)(nil),
		(*EventMessageValueOfNotificationUpdate)(nil),
		(*EventMessageValueOfPayloadBroadcast)(nil),
		(*EventMessageValueOfMembershipUpdate)(nil),
		(*EventMessageValueOfSpaceSyncStatusUpdate)(nil),
		(*EventMessageValueOfP2PStatusUpdate)(nil),
		(*EventMessageValueOfImportFinish)(nil),
		(*EventMessageValueOfChatAdd)(nil),
		(*EventMessageValueOfChatUpdate)(nil),
		(*EventMessageValueOfChatUpdateReactions)(nil),
		(*EventMessageValueOfChatUpdateReadStatus)(nil),
		(*EventMessageValueOfChatDelete)(nil),
		(*EventMessageValueOfChatStateUpdate)(nil),
	}
	file_pb_protos_events_proto_msgTypes[163].OneofWrappers = []any{
		(*EventBlockDataviewViewUpdateFilterOperationOfAdd)(nil),
		(*EventBlockDataviewViewUpdateFilterOperationOfRemove)(nil),
		(*EventBlockDataviewViewUpdateFilterOperationOfUpdate)(nil),
		(*EventBlockDataviewViewUpdateFilterOperationOfMove)(nil),
	}
	file_pb_protos_events_proto_msgTypes[164].OneofWrappers = []any{
		(*EventBlockDataviewViewUpdateRelationOperationOfAdd)(nil),
		(*EventBlockDataviewViewUpdateRelationOperationOfRemove)(nil),
		(*EventBlockDataviewViewUpdateRelationOperationOfUpdate)(nil),
		(*EventBlockDataviewViewUpdateRelationOperationOfMove)(nil),
	}
	file_pb_protos_events_proto_msgTypes[165].OneofWrappers = []any{
		(*EventBlockDataviewViewUpdateSortOperationOfAdd)(nil),
		(*EventBlockDataviewViewUpdateSortOperationOfRemove)(nil),
		(*EventBlockDataviewViewUpdateSortOperationOfUpdate)(nil),
		(*EventBlockDataviewViewUpdateSortOperationOfMove)(nil),
	}
	file_pb_protos_events_proto_msgTypes[204].OneofWrappers = []any{
		(*ModelProcessMessageOfDropFiles)(nil),
		(*ModelProcessMessageOfImport)(nil),
		(*ModelProcessMessageOfExport)(nil),
		(*ModelProcessMessageOfSaveFile)(nil),
		(*ModelProcessMessageOfMigration)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pb_protos_events_proto_rawDesc), len(file_pb_protos_events_proto_rawDesc)),
			NumEnums:      7,
			NumMessages:   211,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_protos_events_proto_goTypes,
		DependencyIndexes: file_pb_protos_events_proto_depIdxs,
		EnumInfos:         file_pb_protos_events_proto_enumTypes,
		MessageInfos:      file_pb_protos_events_proto_msgTypes,
	}.Build()
	File_pb_protos_events_proto = out.File
	file_pb_protos_events_proto_goTypes = nil
	file_pb_protos_events_proto_depIdxs = nil
}
