// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/protos/service/service.proto

package service

import (
	context "context"
	fmt "fmt"
	pb "github.com/anyproto/anytype-heart/pb"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("pb/protos/service/service.proto", fileDescriptor_93a29dc403579097) }

var fileDescriptor_93a29dc403579097 = []byte{
	// 3965 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x9c, 0xdd, 0x6f, 0x1d, 0x47,
	0x15, 0xc0, 0x7b, 0x5f, 0x28, 0x6c, 0x69, 0x69, 0xb7, 0x10, 0xda, 0xd0, 0x3a, 0x69, 0x9a, 0xd8,
	0x4e, 0x1c, 0x5f, 0xbb, 0x49, 0xfa, 0xc1, 0x87, 0x84, 0x1c, 0x3b, 0x4e, 0xad, 0xc6, 0x4e, 0xf0,
	0x75, 0x12, 0xa9, 0x12, 0x12, 0xeb, 0xbd, 0xe3, 0xeb, 0xc5, 0x7b, 0x77, 0xb6, 0xbb, 0x73, 0xed,
	0x18, 0x04, 0x02, 0x81, 0x40, 0x20, 0x10, 0x88, 0x8f, 0x27, 0xde, 0xf8, 0x07, 0xf8, 0x03, 0xf8,
	0x07, 0x78, 0xec, 0x23, 0x8f, 0xa8, 0xfd, 0x47, 0xd0, 0xee, 0x9c, 0x9d, 0x8f, 0xb3, 0x73, 0x66,
	0xf7, 0xf6, 0x29, 0xd1, 0x3d, 0xbf, 0x73, 0xce, 0x7c, 0x9c, 0x99, 0x39, 0xf3, 0xb1, 0x0e, 0x2e,
	0xe5, 0x87, 0x6b, 0x79, 0xc1, 0x05, 0x2f, 0xd7, 0x4a, 0x56, 0x9c, 0x26, 0x31, 0x6b, 0xfe, 0x1d,
	0xd6, 0x3f, 0x87, 0xcf, 0x47, 0xd9, 0xb9, 0x38, 0xcf, 0xd9, 0xc5, 0xd7, 0x34, 0x19, 0xf3, 0xe9,
	0x34, 0xca, 0xc6, 0xa5, 0x44, 0x2e, 0x5e, 0xd0, 0x12, 0x76, 0xca, 0x32, 0x01, 0xbf, 0xdf, 0xfa,
	0xf7, 0xbf, 0x06, 0xc1, 0x4b, 0x9b, 0x69, 0xc2, 0x32, 0xb1, 0x09, 0x1a, 0xe1, 0xc7, 0xc1, 0x8b,
	0x1b, 0x79, 0x7e, 0x9f, 0x89, 0x27, 0xac, 0x28, 0x13, 0x9e, 0x85, 0x6f, 0x0f, 0xc1, 0xc1, 0x70,
	0x3f, 0x8f, 0x87, 0x1b, 0x79, 0x3e, 0xd4, 0xc2, 0xe1, 0x3e, 0xfb, 0x64, 0xc6, 0x4a, 0x71, 0xf1,
	0xaa, 0x1f, 0x2a, 0x73, 0x9e, 0x95, 0x2c, 0x3c, 0x0a, 0x5e, 0xd9, 0xc8, 0xf3, 0x11, 0x13, 0x5b,
	0xac, 0xaa, 0xc0, 0x48, 0x44, 0x82, 0x85, 0x4b, 0x2d, 0x55, 0x1b, 0x50, 0x3e, 0x96, 0xbb, 0x41,
	0xf0, 0x73, 0x10, 0xbc, 0x50, 0xf9, 0x39, 0x9e, 0x89, 0x31, 0x3f, 0xcb, 0xc2, 0xb7, 0xda, 0x8a,
	0x20, 0x52, 0xb6, 0xaf, 0xf8, 0x10, 0xb0, 0xfa, 0x34, 0xf8, 0xea, 0xd3, 0x28, 0x4d, 0x99, 0xd8,
	0x2c, 0x58, 0x55, 0x70, 0x5b, 0x47, 0x8a, 0x86, 0x52, 0xa6, 0xec, 0xbe, 0xed, 0x65, 0xc0, 0xf0,
	0xc7, 0xc1, 0x8b, 0x52, 0xb2, 0xcf, 0x62, 0x7e, 0xca, 0x8a, 0xd0, 0xa9, 0x05, 0x42, 0xa2, 0xc9,
	0x5b, 0x10, 0xb6, 0xbd, 0xc9, 0xb3, 0x53, 0x56, 0x08, 0xb7, 0x6d, 0x10, 0xfa, 0x6d, 0x6b, 0x08,
	0x6c, 0xa7, 0xc1, 0xab, 0x66, 0x83, 0x8c, 0x58, 0x59, 0x07, 0xcc, 0x75, 0xba, 0xce, 0x80, 0x28,
	0x3f, 0x37, 0xfa, 0xa0, 0xe0, 0x2d, 0x09, 0x42, 0xf0, 0x96, 0xf2, 0x52, 0x39, 0x5b, 0x76, 0x5a,
	0x30, 0x08, 0xe5, 0xeb, 0x7a, 0x0f, 0x12, 0x5c, 0xfd, 0x28, 0xf8, 0xda, 0x53, 0x5e, 0x9c, 0x94,
	0x79, 0x14, 0x33, 0xe8, 0xec, 0x6b, 0xb6, 0x76, 0x23, 0xc5, 0xfd, 0xbd, 0xd8, 0x85, 0x19, 0xdd,
	0xd2, 0x08, 0x1f, 0xe6, 0x0c, 0x8f, 0x32, 0xad, 0x58, 0x09, 0xa9, 0x6e, 0xc1, 0x10, 0xd8, 0x3e,
	0x09, 0x42, 0x6d, 0xfb, 0xf0, 0xc7, 0x2c, 0x16, 0x1b, 0xe3, 0x31, 0xee, 0x15, 0xad, 0x5b, 0x13,
	0xc3, 0x8d, 0xf1, 0x98, 0xea, 0x15, 0x37, 0x0a, 0xce, 0xce, 0x82, 0x0b, 0xc8, 0xd9, 0x83, 0xa4,
	0xac, 0x1d, 0xae, 0xfa, 0xad, 0x00, 0xa6, 0x9c, 0x0e, 0xfb, 0xe2, 0xe0, 0xf8, 0x17, 0x83, 0xe0,
	0x75, 0x87, 0xe7, 0x7d, 0x36, 0xe5, 0xa7, 0x2c, 0x5c, 0xef, 0xb6, 0x26, 0x49, 0xe5, 0xff, 0x9d,
	0x39, 0x34, 0x1c, 0x61, 0x32, 0x62, 0x29, 0x8b, 0x05, 0x19, 0x26, 0x52, 0xdc, 0x19, 0x26, 0x0a,
	0x33, 0x46, 0x58, 0x23, 0xbc, 0xcf, 0xc4, 0xe6, 0xac, 0x28, 0x58, 0x26, 0xc8, 0xbe, 0xd4, 0x48,
	0x67, 0x5f, 0x5a, 0xa8, 0xa3, 0x3e, 0xf7, 0x99, 0xd8, 0x48, 0x53, 0xb2, 0x3e, 0x52, 0xdc, 0x59,
	0x1f, 0x85, 0x81, 0x87, 0x38, 0x78, 0xd9, 0x68, 0x31, 0xb1, 0x93, 0x1d, 0xf1, 0x90, 0x6e, 0x8b,
	0x5a, 0xae, 0x7c, 0x2c, 0x75, 0x72, 0x8e, 0x6a, 0xdc, 0x7b, 0x96, 0xf3, 0x82, 0xee, 0x16, 0x29,
	0xee, 0xac, 0x86, 0xc2, 0xc0, 0xc3, 0x0f, 0x83, 0x97, 0x36, 0xe2, 0x98, 0xcf, 0x32, 0x35, 0x63,
	0xa3, 0xf5, 0x4f, 0x0a, 0x5b, 0x53, 0xf6, 0xb5, 0x0e, 0x4a, 0x4f, 0x0e, 0x20, 0x83, 0xc9, 0xe7,
	0x6d, 0xa7, 0x1e, 0x9a, 0x7a, 0xae, 0xfa, 0xa1, 0x96, 0xed, 0x2d, 0x96, 0x32, 0xd2, 0xb6, 0x14,
	0x76, 0xd8, 0x56, 0x10, 0xd8, 0x2e, 0x82, 0x6f, 0xa8, 0x66, 0xa9, 0x56, 0x8a, 0x5a, 0x5e, 0x4d,
	0xd2, 0x2b, 0x44, 0xbd, 0x4d, 0x48, 0xf9, 0xba, 0xd9, 0x0f, 0x6e, 0xd5, 0x07, 0x46, 0xa0, 0xbb,
	0x3e, 0x68, 0xfc, 0x5d, 0xf5, 0x43, 0x60, 0xfb, 0xf7, 0x83, 0xe0, 0x4d, 0x90, 0xdd, 0xcb, 0xa2,
	0xc3, 0x94, 0x3d, 0xe0, 0x71, 0x94, 0xee, 0x31, 0x71, 0xc6, 0x8b, 0x93, 0xd1, 0x79, 0x16, 0x87,
	0xb7, 0x9d, 0x76, 0xdc, 0xb0, 0x72, 0x7e, 0x67, 0x3e, 0x25, 0x23, 0xa7, 0x81, 0x8a, 0x0a, 0x9e,
	0xe3, 0x9c, 0xa6, 0xa9, 0x81, 0xe0, 0x39, 0x95, 0xd3, 0xd8, 0x48, 0xcb, 0xea, 0x6e, 0x35, 0x6d,
	0xba, 0xad, 0xee, 0x9a, 0xf3, 0xe4, 0x15, 0x1f, 0xa2, 0xa7, 0xad, 0x26, 0x80, 0x79, 0x76, 0x94,
	0x4c, 0x1e, 0xe7, 0xe3, 0x2a, 0x8c, 0xaf, 0xbb, 0x23, 0xd4, 0x40, 0x88, 0x69, 0x8b, 0x40, 0xc1,
	0xdb, 0x1f, 0x07, 0xc1, 0x82, 0x3d, 0x1c, 0xb7, 0x0b, 0x3e, 0x7d, 0xc0, 0x26, 0x51, 0x7c, 0x0e,
	0xe3, 0xff, 0x8e, 0x6f, 0xe0, 0x61, 0x5a, 0x15, 0xe2, 0xdd, 0x39, 0xb5, 0x74, 0x9b, 0x8e, 0xaa,
	0x69, 0x03, 0x06, 0x98, 0xdd, 0xa6, 0xb5, 0x04, 0x0f, 0xaf, 0x2b, 0x3e, 0x04, 0xac, 0xfe, 0x20,
	0x08, 0xe4, 0x52, 0x54, 0xa7, 0x0b, 0x97, 0x2d, 0x0d, 0x58, 0xa3, 0xac, 0x5c, 0xe1, 0x2d, 0x0f,
	0xa1, 0x0b, 0x2a, 0x7f, 0xaf, 0xb3, 0xa0, 0xd0, 0xa9, 0x51, 0x8b, 0x88, 0x82, 0x22, 0x04, 0x17,
	0x74, 0x74, 0xcc, 0xcf, 0xdc, 0x05, 0xad, 0x24, 0xfe, 0x82, 0x02, 0xa1, 0x33, 0x6f, 0x28, 0xa8,
	0x2b, 0xf3, 0x6e, 0x8a, 0xe1, 0xcb, 0xbc, 0x31, 0x03, 0x86, 0x79, 0xf0, 0x75, 0xd3, 0xf0, 0x5d,
	0xce, 0x4f, 0xa6, 0x51, 0x71, 0x12, 0xde, 0xa0, 0x95, 0x1b, 0x46, 0x39, 0x5a, 0xe9, 0xc5, 0xea,
	0xb5, 0xc9, 0x74, 0x38, 0x62, 0x78, 0x6d, 0xb2, 0xf4, 0x47, 0x8c, 0x5a, 0x9b, 0x1c, 0x18, 0xee,
	0xd4, 0xfb, 0x45, 0x94, 0x1f, 0xbb, 0x3b, 0xb5, 0x16, 0xf9, 0x3b, 0xb5, 0x41, 0x70, 0x0f, 0x8c,
	0x58, 0x54, 0xc4, 0xc7, 0xee, 0x1e, 0x90, 0x32, 0x7f, 0x0f, 0x28, 0x46, 0xaf, 0x19, 0xa6, 0xe1,
	0xd1, 0xec, 0xb0, 0x8c, 0x8b, 0xe4, 0x90, 0x85, 0x2b, 0xb4, 0xb6, 0x82, 0x88, 0x35, 0x83, 0x84,
	0xf5, 0x4e, 0x02, 0x7c, 0x36, 0xb2, 0x9d, 0x71, 0x89, 0x76, 0x12, 0x8d, 0x0d, 0x83, 0x20, 0x76,
	0x12, 0x6e, 0x12, 0x57, 0xef, 0x7e, 0xc1, 0x67, 0x79, 0xd9, 0x51, 0x3d, 0x04, 0xf9, 0xab, 0xd7,
	0x86, 0xc1, 0xe7, 0xb3, 0xe0, 0x9b, 0x66, 0x93, 0x3e, 0xce, 0x4a, 0xe5, 0x75, 0x95, 0x6e, 0x27,
	0x03, 0x23, 0x72, 0x72, 0x0f, 0xae, 0xd3, 0xbb, 0xc6, 0xb3, 0xd8, 0x62, 0x22, 0x4a, 0xd2, 0x32,
	0x5c, 0x74, 0xdb, 0x68, 0xe4, 0x44, 0x7a, 0xe7, 0xe2, 0xf0, 0x10, 0xda, 0x9a, 0xe5, 0x69, 0x12,
	0xb7, 0x37, 0x67, 0xa0, 0xab, 0xc4, 0xfe, 0x21, 0x64, 0x62, 0x7a, 0xf9, 0x52, 0xd5, 0x90, 0xff,
	0x39, 0x38, 0xcf, 0xf1, 0xf2, 0xa5, 0x4b, 0xa8, 0x11, 0x62, 0xf9, 0x22, 0x50, 0x5c, 0x9f, 0x11,
	0x13, 0x0f, 0xa2, 0x73, 0x3e, 0x23, 0xa6, 0x04, 0x25, 0xf6, 0xd7, 0xc7, 0xc4, 0xc0, 0xc3, 0x2c,
	0xb8, 0xa0, 0x3c, 0xec, 0x64, 0x82, 0x15, 0x59, 0x94, 0x6e, 0xa7, 0xd1, 0xa4, 0x0c, 0x89, 0x71,
	0x63, 0x53, 0xca, 0xdf, 0x6a, 0x4f, 0xda, 0xd1, 0x8c, 0x3b, 0xe5, 0x76, 0x74, 0xca, 0x8b, 0x44,
	0xd0, 0xcd, 0xa8, 0x91, 0xce, 0x66, 0xb4, 0x50, 0xa7, 0xb7, 0x8d, 0x22, 0x3e, 0x4e, 0x4e, 0xd9,
	0xd8, 0xe3, 0xad, 0x41, 0x7a, 0x78, 0x33, 0x50, 0x47, 0xa7, 0x8d, 0xf8, 0xac, 0x88, 0x19, 0xd9,
	0x69, 0x52, 0xdc, 0xd9, 0x69, 0x0a, 0x03, 0x0f, 0xbf, 0x1e, 0x04, 0xdf, 0x92, 0x52, 0x73, 0xc7,
	0xb4, 0x15, 0x95, 0xc7, 0x87, 0x3c, 0x2a, 0xc6, 0xe1, 0x3b, 0x2e, 0x3b, 0x4e, 0x54, 0xb9, 0xbe,
	0x35, 0x8f, 0x0a, 0x6e, 0xd6, 0x6a, 0x03, 0xac, 0x47, 0x9c, 0xb3, 0x59, 0x2d, 0xc4, 0xdf, 0xac,
	0x18, 0xc5, 0x13, 0x48, 0x2d, 0x97, 0xf9, 0xd3, 0x22, 0xa9, 0x6f, 0x27, 0x51, 0x4b, 0x9d, 0x1c,
	0x9e, 0x1f, 0x2b, 0xa1, 0x1d, 0x2d, 0xab, 0x94, 0x0d, 0x77, 0xc4, 0x0c, 0xfb, 0xe2, 0xa4, 0x67,
	0x35, 0x2a, 0xfc, 0x9e, 0x5b, 0x23, 0x63, 0xd8, 0x17, 0x27, 0x3c, 0x1b, 0xd3, 0x9a, 0xcf, 0xb3,
	0x63, 0x6a, 0x1b, 0xf6, 0xc5, 0x71, 0x00, 0x6d, 0xe4, 0x79, 0x7a, 0x7e, 0xc0, 0xa6, 0x79, 0x4a,
	0x06, 0x90, 0x85, 0xf8, 0x03, 0x08, 0xa3, 0x38, 0xfb, 0x39, 0xe0, 0x55, 0x6e, 0xe5, 0xcc, 0x7e,
	0x6a, 0x91, 0x3f, 0xfb, 0x69, 0x10, 0x9c, 0x30, 0x1c, 0xf0, 0x4d, 0x9e, 0x56, 0x9b, 0xc4, 0xf6,
	0xd1, 0xa3, 0xd2, 0xd4, 0x84, 0x3f, 0x61, 0x40, 0xa4, 0x3e, 0x22, 0x6f, 0xb2, 0xe7, 0xa8, 0x60,
	0x77, 0xcf, 0x1f, 0x24, 0xd9, 0x49, 0xe8, 0x5e, 0x1b, 0x35, 0x40, 0x1c, 0x91, 0x3b, 0x41, 0x9c,
	0xa5, 0x3f, 0xce, 0xc6, 0xdc, 0x9d, 0xa5, 0x57, 0x12, 0x7f, 0x96, 0x0e, 0x04, 0x36, 0xb9, 0xcf,
	0x28, 0x93, 0x95, 0xc4, 0x6f, 0x12, 0x08, 0xd7, 0x7c, 0x00, 0x7b, 0x39, 0x72, 0x3e, 0x40, 0xbb,
	0xb7, 0xa5, 0x4e, 0x0e, 0x47, 0x68, 0x93, 0xae, 0x6f, 0x33, 0x11, 0x1f, 0xbb, 0x23, 0xd4, 0x42,
	0xfc, 0x11, 0x8a, 0x51, 0x5c, 0xa5, 0x03, 0xae, 0xb6, 0x1b, 0x8b, 0xee, 0xf8, 0x68, 0x6d, 0x35,
	0x96, 0x3a, 0x39, 0x9c, 0xae, 0xef, 0x4c, 0xeb, 0x36, 0x73, 0x06, 0xb9, 0x94, 0xf9, 0xd3, 0x75,
	0xc5, 0xe0, 0xd2, 0x4b, 0x41, 0xd5, 0x9c, 0xee, 0xd2, 0x6b, 0xb9, 0xbf, 0xf4, 0x16, 0x07, 0x4e,
	0xfe, 0x36, 0x08, 0x2e, 0x99, 0x5e, 0xf6, 0x78, 0x35, 0x46, 0x9e, 0x44, 0x69, 0x52, 0x6d, 0xfc,
	0x0f, 0xf8, 0x09, 0xcb, 0xc2, 0xf7, 0x3d, 0xa5, 0x95, 0xfc, 0xd0, 0x52, 0x50, 0xa5, 0xf8, 0x60,
	0x7e, 0x45, 0x1c, 0x27, 0x92, 0x7e, 0x5c, 0xb2, 0xcd, 0xa8, 0x24, 0x66, 0x32, 0x0b, 0xf1, 0xc7,
	0x09, 0x46, 0x71, 0xd2, 0x26, 0xe5, 0xf7, 0x9e, 0xe5, 0xac, 0x48, 0x58, 0x16, 0x33, 0x77, 0xd2,
	0x86, 0x29, 0x7f, 0xd2, 0xe6, 0xa0, 0x71, 0x25, 0xf5, 0xe4, 0xd4, 0xbe, 0x3d, 0xc0, 0x84, 0xe7,
	0xf6, 0x80, 0x40, 0x71, 0x25, 0x35, 0x00, 0x07, 0xf8, 0x37, 0xfd, 0x56, 0xd0, 0xe1, 0xfd, 0x6a,
	0x4f, 0xba, 0xb5, 0xed, 0x57, 0xcc, 0xa8, 0x1a, 0x26, 0x1d, 0x45, 0x1f, 0x99, 0xc3, 0x65, 0xa5,
	0x17, 0xeb, 0x3e, 0x67, 0xd8, 0x67, 0x69, 0x54, 0x2f, 0x21, 0x9e, 0x73, 0x86, 0x86, 0xe9, 0x73,
	0xce, 0x60, 0xb0, 0xe0, 0xf0, 0x97, 0x83, 0xe0, 0xa2, 0xcb, 0xe3, 0xc3, 0xbc, 0xf6, 0xbb, 0xde,
	0x6d, 0x4b, 0x92, 0xc4, 0xf5, 0x88, 0x5f, 0x03, 0xca, 0xf0, 0xd3, 0xe0, 0xb5, 0x46, 0xa4, 0x6f,
	0x4f, 0xa0, 0x00, 0x76, 0x16, 0xa1, 0xca, 0x8f, 0x39, 0xe5, 0x7e, 0xad, 0x37, 0xaf, 0x13, 0x74,
	0xbb, 0x5c, 0x25, 0x4a, 0xd0, 0x95, 0x0d, 0x10, 0x13, 0x09, 0xba, 0x03, 0xc3, 0x2b, 0x75, 0x83,
	0x54, 0xe3, 0xc4, 0x35, 0xc7, 0x29, 0x13, 0xe6, 0x28, 0x59, 0xee, 0x06, 0x71, 0xec, 0x34, 0x62,
	0xc8, 0x8b, 0x6f, 0xf8, 0x2c, 0xa0, 0xdc, 0x78, 0xa5, 0x17, 0x0b, 0x0e, 0x7f, 0x1e, 0xbc, 0xde,
	0xaa, 0xd8, 0x36, 0x8b, 0xc4, 0xac, 0x60, 0xe3, 0x70, 0xad, 0xa3, 0xdc, 0x0d, 0xa8, 0x5c, 0xaf,
	0xf7, 0x57, 0x00, 0xff, 0xbf, 0x1d, 0x04, 0x6f, 0xd8, 0x9c, 0xec, 0x62, 0x55, 0x86, 0x5b, 0x3e,
	0x93, 0x36, 0xab, 0x8a, 0x71, 0x7b, 0x2e, 0x9d, 0xd6, 0x1e, 0xcc, 0x0c, 0xe4, 0x8d, 0xd3, 0x28,
	0x49, 0xa3, 0xc3, 0x94, 0x39, 0xf7, 0x60, 0x56, 0x6c, 0x2a, 0xd4, 0xbb, 0x07, 0x23, 0x55, 0x5a,
	0xb3, 0x64, 0x3d, 0xde, 0x8c, 0xdc, 0xfd, 0x26, 0x3d, 0x2a, 0x1d, 0xa9, 0xfb, 0x6a, 0x4f, 0x1a,
	0xdc, 0x8a, 0xe6, 0xec, 0xaa, 0xfa, 0xd9, 0x0c, 0x72, 0x97, 0x57, 0x50, 0x75, 0x44, 0xfa, 0x6a,
	0x4f, 0x1a, 0xbc, 0xfe, 0x2c, 0x78, 0xad, 0xed, 0x15, 0x16, 0x85, 0xb5, 0x4e, 0x53, 0x68, 0x5d,
	0x58, 0xef, 0xaf, 0xa0, 0x53, 0xfd, 0x0f, 0x93, 0x52, 0xf0, 0xe2, 0x7c, 0x74, 0xcc, 0xcf, 0x9a,
	0x37, 0x30, 0xf6, 0x68, 0x05, 0x60, 0x68, 0x10, 0x44, 0xaa, 0xef, 0x26, 0x5b, 0xae, 0xf4, 0x5b,
	0x99, 0x92, 0x70, 0x65, 0x10, 0x1d, 0xae, 0x6c, 0x52, 0xcf, 0x55, 0x4d, 0xad, 0xf4, 0xc3, 0x9e,
	0x25, 0x77, 0x51, 0xdb, 0x8f, 0x7b, 0x96, 0xbb, 0x41, 0xbd, 0xfd, 0xda, 0x4e, 0x52, 0xf6, 0xf0,
	0xe8, 0x28, 0xe5, 0xd1, 0x18, 0x6d, 0xbf, 0x2a, 0xc9, 0x10, 0x44, 0xc4, 0xf6, 0x0b, 0x21, 0x7a,
	0x2e, 0xaf, 0x04, 0xd5, 0xe8, 0x68, 0x2c, 0x5f, 0x6b, 0xab, 0x19, 0x62, 0x62, 0x2e, 0x77, 0x60,
	0x7a, 0xeb, 0x52, 0x09, 0x1f, 0xe7, 0xb5, 0xf1, 0xcb, 0x6d, 0x2d, 0x29, 0x21, 0xb6, 0x2e, 0x36,
	0xa1, 0x53, 0xf0, 0xea, 0xf7, 0x2d, 0x7e, 0x96, 0xd5, 0x46, 0x1d, 0x15, 0x6d, 0x64, 0x44, 0x0a,
	0x8e, 0x19, 0x30, 0xfc, 0x51, 0xf0, 0xe5, 0xda, 0x70, 0xc1, 0xf3, 0x70, 0xc1, 0xa1, 0x50, 0x18,
	0x57, 0x80, 0x97, 0x48, 0xb9, 0xbe, 0xc9, 0xae, 0x7e, 0xad, 0xaf, 0x9c, 0x1e, 0x97, 0xd1, 0x84,
	0xa1, 0x9b, 0xec, 0x5a, 0x45, 0x4b, 0x89, 0x9b, 0xec, 0x36, 0xa5, 0x6f, 0x67, 0x2b, 0xd9, 0x1e,
	0x1f, 0x83, 0x75, 0x47, 0x0d, 0x95, 0x90, 0xb8, 0x9d, 0x6d, 0x41, 0xfa, 0x68, 0x7d, 0x2f, 0x3a,
	0x4d, 0x26, 0x6a, 0x5e, 0x96, 0xc3, 0xbb, 0x44, 0x47, 0xeb, 0x9a, 0x19, 0x1a, 0x10, 0x71, 0xb4,
	0x4e, 0xc2, 0xe0, 0xf3, 0xaf, 0x83, 0xe0, 0xb2, 0x66, 0xee, 0x37, 0x27, 0x1e, 0x3b, 0xd9, 0x11,
	0x7f, 0x9a, 0x88, 0xe3, 0x6a, 0x8b, 0x5d, 0x86, 0xef, 0x51, 0x26, 0xdd, 0xbc, 0x2a, 0xca, 0xfb,
	0x73, 0xeb, 0xe9, 0x44, 0xab, 0x39, 0x09, 0x91, 0xb3, 0xf9, 0x76, 0xc1, 0xa7, 0x52, 0x03, 0x25,
	0x5a, 0xea, 0xc0, 0x04, 0x73, 0x44, 0xa2, 0xe5, 0xe3, 0x75, 0x17, 0x2b, 0xe7, 0x29, 0xcf, 0x70,
	0x17, 0x6b, 0x0b, 0x95, 0x90, 0xe8, 0xe2, 0x16, 0xa4, 0xa7, 0xad, 0x46, 0x24, 0x37, 0xed, 0x1b,
	0x69, 0x8a, 0xa6, 0x2d, 0xa5, 0xaa, 0x00, 0x62, 0xda, 0x72, 0x82, 0xe0, 0x67, 0x3f, 0x78, 0xa1,
	0x6a, 0xd2, 0x47, 0x05, 0x3b, 0x4d, 0x18, 0xbe, 0xb3, 0x34, 0x24, 0xc4, 0xf8, 0xb7, 0x09, 0x3d,
	0xb2, 0x1e, 0x67, 0x65, 0x9e, 0x46, 0xe5, 0x31, 0xdc, 0x99, 0xd9, 0x75, 0x6e, 0x84, 0xf8, 0xd6,
	0xec, 0x5a, 0x07, 0xa5, 0x37, 0xe2, 0x8d, 0x4c, 0x4d, 0x31, 0x8b, 0x6e, 0xd5, 0xd6, 0x34, 0xb3,
	0xd4, 0xc9, 0x81, 0x93, 0x28, 0x78, 0xb9, 0xf9, 0x71, 0x37, 0xca, 0x92, 0x23, 0x56, 0xe2, 0xbb,
	0x09, 0x2c, 0x26, 0x66, 0x5e, 0x07, 0xa6, 0x57, 0x8c, 0xbb, 0x29, 0x8f, 0x4f, 0x60, 0xea, 0xb5,
	0x1b, 0xb6, 0x96, 0xe0, 0xb9, 0xf7, 0x8a, 0x0f, 0xd1, 0x93, 0x6f, 0x2d, 0xd8, 0x67, 0x79, 0x1a,
	0xc5, 0xf8, 0xc2, 0x58, 0xea, 0x80, 0x8c, 0x98, 0x7c, 0x31, 0x83, 0x8a, 0x0b, 0x17, 0xd1, 0xae,
	0xe2, 0xa2, 0x7b, 0xe8, 0x2b, 0x3e, 0x44, 0x2f, 0x3f, 0xb5, 0x60, 0x94, 0xa7, 0x89, 0x40, 0xe1,
	0x27, 0x35, 0x6a, 0x09, 0x11, 0x7e, 0x36, 0x81, 0x4c, 0xee, 0xb2, 0x62, 0xc2, 0x9c, 0x26, 0x6b,
	0x89, 0xd7, 0x64, 0x43, 0x80, 0xc9, 0xbd, 0xe0, 0x2b, 0xb2, 0xee, 0x3c, 0x3f, 0x0f, 0x2f, 0xb9,
	0xaa, 0xc5, 0xf3, 0x73, 0x65, 0xf0, 0x32, 0x0d, 0xa0, 0x22, 0x3e, 0x8a, 0x4a, 0xe1, 0x2e, 0x62,
	0x2d, 0xf1, 0x16, 0xb1, 0x21, 0xf4, 0xda, 0x28, 0x8b, 0x38, 0x13, 0x68, 0x6d, 0x84, 0x02, 0x18,
	0xb7, 0x67, 0x97, 0x48, 0xb9, 0x1e, 0xc1, 0xb2, 0x57, 0x98, 0xd8, 0x4e, 0x58, 0x3a, 0x2e, 0xd1,
	0x08, 0x86, 0x76, 0x6f, 0xa4, 0xc4, 0x08, 0x6e, 0x53, 0x28, 0x94, 0xe0, 0x58, 0xd3, 0x55, 0x3b,
	0x74, 0xa2, 0x79, 0xc5, 0x87, 0xe8, 0x79, 0xa1, 0x29, 0xf4, 0x66, 0x54, 0x14, 0x49, 0xb5, 0xe8,
	0x2e, 0xba, 0x0b, 0xd4, 0xc8, 0x89, 0x79, 0xc1, 0xc5, 0xe9, 0x84, 0xac, 0x96, 0x1a, 0xb7, 0x34,
	0xae, 0x4a, 0x3b, 0x2e, 0x69, 0x16, 0xbb, 0x30, 0xe3, 0xe9, 0x95, 0x72, 0xb1, 0xcb, 0x4f, 0xd9,
	0x01, 0xbf, 0xf7, 0x2c, 0x29, 0x45, 0x92, 0x4d, 0x60, 0x61, 0xbb, 0x4d, 0x58, 0x72, 0xc1, 0xc4,
	0xd3, 0xab, 0x4e, 0x25, 0xbd, 0xbe, 0xa2, 0xb2, 0xec, 0xb1, 0x33, 0xe7, 0xfa, 0x8a, 0x2d, 0x2a,
	0x8e, 0x58, 0x5f, 0x7d, 0xbc, 0xde, 0x8d, 0x2b, 0xe7, 0xf0, 0x02, 0xfb, 0x80, 0x37, 0xa9, 0x0e,
	0x65, 0x0d, 0x83, 0xc4, 0x86, 0xc8, 0xab, 0xa0, 0x77, 0x29, 0xca, 0xbf, 0x1e, 0x09, 0xcb, 0x84,
	0x9d, 0xf6, 0x68, 0xb8, 0xde, 0x83, 0x74, 0xb8, 0xd2, 0x57, 0x8d, 0x94, 0xab, 0xf6, 0x4d, 0xe3,
	0xf5, 0x1e, 0xa4, 0xb1, 0xb3, 0x37, 0xab, 0x75, 0x37, 0x8a, 0x4f, 0x26, 0x05, 0x9f, 0x65, 0xe3,
	0x4d, 0x9e, 0xf2, 0x02, 0xed, 0xec, 0xad, 0x52, 0x23, 0x94, 0xd8, 0xd9, 0x77, 0xa8, 0xe8, 0x04,
	0xc7, 0x2c, 0xc5, 0x46, 0x9a, 0x4c, 0xf0, 0xbe, 0xcc, 0x32, 0x54, 0x03, 0x44, 0x82, 0xe3, 0x04,
	0x1d, 0x41, 0x24, 0xf7, 0x6d, 0x22, 0x89, 0xa3, 0x54, 0xfa, 0x5b, 0xa3, 0xcd, 0x58, 0x60, 0x67,
	0x10, 0x39, 0x14, 0x1c, 0xf5, 0x3c, 0x98, 0x15, 0xd9, 0x4e, 0x26, 0x38, 0x59, 0xcf, 0x06, 0xe8,
	0xac, 0xa7, 0x01, 0xa2, 0xd9, 0xef, 0x80, 0x3d, 0xab, 0x4a, 0x53, 0xfd, 0xe3, 0x9a, 0xfd, 0xaa,
	0xdf, 0x87, 0x20, 0xf7, 0xcd, 0x7e, 0x88, 0x43, 0x95, 0x01, 0x27, 0x32, 0x60, 0x3c, 0xda, 0x76,
	0x98, 0x2c, 0x77, 0x83, 0x6e, 0x3f, 0x23, 0x71, 0x9e, 0x32, 0x9f, 0x9f, 0x1a, 0xe8, 0xe3, 0xa7,
	0x01, 0xf5, 0x91, 0xbf, 0x55, 0x9f, 0x63, 0x16, 0x9f, 0xb4, 0x5e, 0x4e, 0xd8, 0x05, 0x95, 0x08,
	0x71, 0xe4, 0x4f, 0xa0, 0xee, 0x2e, 0xda, 0x89, 0x79, 0xe6, 0xeb, 0xa2, 0x4a, 0xde, 0xa7, 0x8b,
	0x80, 0xd3, 0x7b, 0x43, 0x25, 0x85, 0xc8, 0x94, 0xdd, 0xb4, 0x42, 0x58, 0x30, 0x21, 0x62, 0x6f,
	0x48, 0xc2, 0xfa, 0x9c, 0x16, 0xfb, 0xdc, 0x6d, 0xbf, 0x25, 0x6c, 0x59, 0xd9, 0xa5, 0xdf, 0x12,
	0x52, 0x2c, 0x5d, 0x49, 0x19, 0x23, 0x1d, 0x56, 0xec, 0x38, 0xb9, 0xd9, 0x0f, 0xd6, 0xef, 0x08,
	0x2c, 0x9f, 0x9b, 0x29, 0x8b, 0x0a, 0xe9, 0x75, 0xd5, 0x63, 0x48, 0x63, 0xc4, 0x3b, 0x02, 0x0f,
	0x8e, 0xa6, 0x30, 0xcb, 0xf3, 0x26, 0xcf, 0x04, 0xcb, 0x84, 0x6b, 0x0a, 0xb3, 0x8d, 0x01, 0xe8,
	0x9b, 0xc2, 0x28, 0x05, 0x14, 0xb7, 0xf5, 0x71, 0x09, 0x13, 0x7b, 0xd1, 0xd4, 0x99, 0x58, 0xc9,
	0xa3, 0x10, 0x29, 0xf7, 0xc5, 0x2d, 0xe2, 0xd0, 0x90, 0xdf, 0x99, 0x46, 0x13, 0xe5, 0xc5, 0xa1,
	0x5d, 0xcb, 0x5b, 0x6e, 0x96, 0xbb, 0x41, 0xe4, 0xe7, 0x49, 0x32, 0x66, 0xdc, 0xe3, 0xa7, 0x96,
	0xf7, 0xf1, 0x83, 0x41, 0x94, 0x39, 0x55, 0xb5, 0x95, 0x9b, 0x9e, 0x8d, 0x6c, 0x0c, 0x5b, 0xbd,
	0x21, 0xd1, 0x28, 0x88, 0xf3, 0x65, 0x4e, 0x04, 0x8f, 0xc6, 0x47, 0x73, 0x76, 0xe8, 0x1b, 0x1f,
	0xea, 0x68, 0xb0, 0xcf, 0xf8, 0x70, 0xc1, 0xe0, 0xf3, 0x27, 0x30, 0x3e, 0xb6, 0x22, 0x11, 0x9d,
	0x26, 0xec, 0xec, 0x49, 0xc2, 0xce, 0x60, 0xaf, 0xe8, 0xa8, 0x6f, 0x43, 0x0d, 0x2b, 0x0c, 0x6f,
	0x1c, 0xd7, 0x7a, 0xf3, 0x1e, 0xdf, 0x90, 0x9d, 0x77, 0xfa, 0x46, 0x69, 0xfa, 0x5a, 0x6f, 0xde,
	0xe3, 0x1b, 0x5e, 0xfd, 0x77, 0xfa, 0x46, 0x4f, 0xff, 0xd7, 0x7a, 0xf3, 0xe0, 0xfb, 0x57, 0x83,
	0xe0, 0x62, 0xcb, 0x79, 0x95, 0x03, 0xc5, 0x22, 0x39, 0x65, 0xae, 0x54, 0xce, 0xb6, 0xa7, 0x50,
	0x5f, 0x2a, 0x47, 0xab, 0x40, 0x29, 0x7e, 0x37, 0x08, 0xde, 0x70, 0x95, 0xe2, 0x11, 0x2f, 0x93,
	0xfa, 0xca, 0xf3, 0x76, 0x0f, 0xa3, 0x0d, 0xec, 0xdb, 0xb0, 0xf8, 0x94, 0xf4, 0x85, 0x91, 0x85,
	0xea, 0x47, 0x8a, 0x37, 0x3d, 0xf6, 0xda, 0x6f, 0x15, 0x57, 0x7b, 0xd2, 0xfa, 0xea, 0xc6, 0x62,
	0xcc, 0x3b, 0x23, 0x5f, 0xaf, 0x3a, 0xaf, 0x8d, 0xd6, 0xfb, 0x2b, 0x80, 0xfb, 0xdf, 0x34, 0x39,
	0x3d, 0xf6, 0x0f, 0x83, 0xe0, 0x56, 0x1f, 0x8b, 0x68, 0x20, 0xdc, 0x9e, 0x4b, 0x07, 0x0a, 0xf2,
	0x8f, 0x41, 0x70, 0xc5, 0x59, 0x10, 0xfb, 0xf6, 0xf0, 0xdb, 0x7d, 0x6c, 0xbb, 0x6f, 0x11, 0xbf,
	0xf3, 0x45, 0x54, 0xa1, 0x74, 0x7f, 0x68, 0xb6, 0xd6, 0x8d, 0x46, 0xfd, 0x90, 0xfc, 0x61, 0x31,
	0x66, 0x05, 0x8c, 0x58, 0x5f, 0xd0, 0x69, 0x18, 0x8f, 0xdb, 0x77, 0xe7, 0xd4, 0x82, 0xe2, 0xfc,
	0x69, 0x10, 0x2c, 0x58, 0x30, 0x7c, 0xe5, 0x62, 0x94, 0xc7, 0x67, 0xd9, 0xa0, 0x71, 0x81, 0xde,
	0x9b, 0x57, 0x8d, 0x1a, 0xc9, 0x06, 0x5c, 0x7f, 0x25, 0x75, 0xbb, 0xa7, 0x61, 0xeb, 0xbb, 0xa9,
	0x3b, 0xf3, 0x29, 0x41, 0x59, 0xfe, 0x39, 0x08, 0xae, 0x59, 0xac, 0x3e, 0x88, 0x47, 0xe7, 0x21,
	0xdf, 0xf5, 0xd8, 0xa7, 0x94, 0x54, 0xe1, 0xbe, 0xf7, 0xc5, 0x94, 0xf5, 0x37, 0xc0, 0x96, 0xca,
	0x76, 0x92, 0x0a, 0x56, 0xb4, 0xbf, 0x01, 0xb6, 0xed, 0x4a, 0x6a, 0x48, 0x7f, 0x03, 0xec, 0xc1,
	0x8d, 0x6f, 0x80, 0x1d, 0x9e, 0x9d, 0xdf, 0x00, 0x3b, 0xad, 0x79, 0xbf, 0x01, 0xf6, 0x6b, 0x50,
	0x8b, 0x4f, 0x53, 0x04, 0x79, 0xf0, 0xdc, 0xcb, 0xa2, 0x7d, 0x0e, 0x7d, 0x6b, 0x1e, 0x15, 0x62,
	0xf9, 0x95, 0x5c, 0xfd, 0xa6, 0xa9, 0x47, 0x9b, 0x5a, 0xef, 0x9a, 0xd6, 0x7a, 0xf3, 0xe0, 0xfb,
	0x13, 0xd8, 0xf7, 0xa8, 0xc5, 0x86, 0x17, 0xf5, 0xf7, 0xdf, 0x2b, 0xbe, 0xc5, 0xa3, 0xb2, 0x60,
	0xf6, 0xfc, 0xcd, 0x7e, 0x30, 0x51, 0xdd, 0x8a, 0x80, 0x4e, 0x1f, 0x76, 0x19, 0x42, 0x5d, 0xbe,
	0xd6, 0x9b, 0x27, 0x16, 0x39, 0xe9, 0x5b, 0xf6, 0x76, 0x0f, 0x63, 0x76, 0x5f, 0xaf, 0xf7, 0x57,
	0xd0, 0x8f, 0x32, 0x5a, 0xee, 0xeb, 0x7e, 0xee, 0x6c, 0x41, 0xab, 0x97, 0x57, 0x7b, 0xd2, 0xbe,
	0xe4, 0xc6, 0x5c, 0xde, 0xbb, 0x92, 0x1b, 0xe7, 0x12, 0x7f, 0x67, 0x3e, 0x25, 0x28, 0xcb, 0x5f,
	0x06, 0xc1, 0x25, 0xb2, 0x2c, 0x10, 0x05, 0xef, 0xf5, 0xb5, 0x8c, 0xa2, 0xe1, 0xfd, 0xb9, 0xf5,
	0xa0, 0x50, 0x7f, 0x1f, 0x04, 0x97, 0x3d, 0x85, 0x92, 0xe1, 0x31, 0x87, 0x75, 0x3b, 0x4c, 0x3e,
	0x98, 0x5f, 0x91, 0x5a, 0xec, 0x4d, 0x7c, 0xd4, 0xfe, 0x34, 0xd6, 0x63, 0x7b, 0x44, 0x7f, 0x1a,
	0xdb, 0xad, 0x85, 0x0f, 0x7f, 0xaa, 0x94, 0x04, 0xf6, 0x45, 0xae, 0xc3, 0x9f, 0x3a, 0x63, 0x41,
	0xfb, 0xa1, 0xa5, 0x4e, 0xce, 0xe5, 0xe4, 0xde, 0xb3, 0x3c, 0xca, 0xc6, 0xb4, 0x13, 0x29, 0xef,
	0x76, 0xa2, 0x38, 0x7c, 0x68, 0x56, 0x49, 0xf7, 0x79, 0xb3, 0xc9, 0xbb, 0x4e, 0xe9, 0x2b, 0xc4,
	0x7b, 0x68, 0xd6, 0x42, 0x09, 0x6f, 0x90, 0xd1, 0xfa, 0xbc, 0xa1, 0x44, 0xf6, 0x46, 0x1f, 0x14,
	0x6d, 0x1f, 0x94, 0x37, 0x75, 0x16, 0x7f, 0xd3, 0x67, 0xa5, 0x75, 0x1e, 0xbf, 0xda, 0x93, 0x26,
	0xdc, 0x8e, 0x98, 0xf8, 0x90, 0x45, 0x63, 0x56, 0x78, 0xdd, 0x2a, 0xaa, 0x97, 0x5b, 0x93, 0x76,
	0xb9, 0xdd, 0xe4, 0xe9, 0x6c, 0x9a, 0x41, 0x67, 0x92, 0x6e, 0x4d, 0xaa, 0xdb, 0x2d, 0xa2, 0xf1,
	0x71, 0xa1, 0x76, 0x5b, 0x27, 0x97, 0x37, 0xfc, 0x66, 0xac, 0x9c, 0x72, 0xa5, 0x17, 0x4b, 0xd7,
	0x13, 0xc2, 0xa8, 0xa3, 0x9e, 0x28, 0x92, 0x56, 0x7b, 0xd2, 0xf8, 0xdc, 0xce, 0x70, 0xab, 0xe2,
	0x69, 0xad, 0xc3, 0x56, 0x2b, 0xa4, 0xd6, 0xfb, 0x2b, 0xe0, 0x53, 0x52, 0x88, 0xaa, 0x6a, 0x57,
	0xb4, 0x9d, 0xa4, 0x69, 0xb8, 0xe2, 0x09, 0x93, 0x06, 0xf2, 0x9e, 0x92, 0x3a, 0x60, 0x22, 0x92,
	0x9b, 0x53, 0xc5, 0x2c, 0xec, 0xb2, 0x53, 0x53, 0xbd, 0x22, 0xd9, 0xa4, 0xd1, 0x69, 0x9b, 0xd1,
	0xd4, 0xaa, 0xb6, 0x43, 0x7f, 0xc3, 0xb5, 0x2a, 0xbc, 0xd6, 0x9b, 0x47, 0xb7, 0xe5, 0x35, 0x55,
	0xaf, 0x2c, 0x57, 0x29, 0x13, 0xd6, 0x4a, 0x72, 0xad, 0x83, 0x42, 0x27, 0x96, 0x72, 0x18, 0x3d,
	0x4d, 0xc6, 0x13, 0x26, 0x9c, 0x37, 0x48, 0x26, 0xe0, 0xbd, 0x41, 0x42, 0x20, 0xea, 0x3a, 0xf9,
	0xfb, 0x88, 0x89, 0x83, 0xa8, 0x98, 0x30, 0xb1, 0x33, 0x76, 0x75, 0x1d, 0x28, 0x1b, 0x94, 0xaf,
	0xeb, 0x9c, 0x34, 0x9a, 0x0d, 0x94, 0x5b, 0xf8, 0x12, 0xf8, 0x86, 0xcf, 0x0c, 0xfa, 0x1c, 0x78,
	0xa5, 0x17, 0x8b, 0x56, 0x14, 0xed, 0x30, 0x99, 0x26, 0xc2, 0xb5, 0xa2, 0x18, 0x36, 0x2a, 0xc4,
	0xb7, 0xa2, 0xb4, 0x51, 0xaa, 0x7a, 0x55, 0x8e, 0xb0, 0x33, 0xf6, 0x57, 0x4f, 0x32, 0xfd, 0xaa,
	0xa7, 0xd8, 0xd6, 0x85, 0x67, 0xa6, 0x42, 0x46, 0x1c, 0xc3, 0x56, 0xd9, 0x11, 0xdb, 0xf5, 0xc7,
	0x71, 0x18, 0xf4, 0xcd, 0x3a, 0x94, 0x82, 0xf1, 0xfd, 0x85, 0xe2, 0x9a, 0x3b, 0xd9, 0x3c, 0x67,
	0x51, 0x11, 0x65, 0xb1, 0x73, 0x6b, 0x5a, 0x1b, 0x6c, 0x91, 0xbe, 0xad, 0x29, 0xa9, 0x81, 0xae,
	0xd3, 0xed, 0xcf, 0xda, 0x1c, 0x43, 0x41, 0x7d, 0x3f, 0x66, 0x7f, 0xd5, 0x76, 0xbd, 0x07, 0x89,
	0xaf, 0xd3, 0x1b, 0x40, 0x1d, 0xca, 0x4b, 0xa7, 0xef, 0x78, 0x4c, 0xd9, 0xa8, 0x6f, 0x1b, 0x4c,
	0xab, 0xa0, 0xa0, 0x56, 0x09, 0x2e, 0x13, 0x1f, 0xb1, 0x73, 0x57, 0x50, 0xeb, 0xfc, 0xb4, 0x46,
	0x7c, 0x41, 0xdd, 0x46, 0x51, 0x9e, 0x69, 0xee, 0x83, 0x16, 0x3d, 0xfa, 0xe6, 0xd6, 0x67, 0xa9,
	0x93, 0x43, 0x23, 0x67, 0x2b, 0x39, 0xb5, 0xee, 0x30, 0x1c, 0x05, 0xdd, 0x4a, 0x4e, 0xdd, 0x57,
	0x18, 0x2b, 0xbd, 0x58, 0x7c, 0x55, 0x1f, 0x09, 0xf6, 0xac, 0xb9, 0x43, 0x77, 0x14, 0xb7, 0x96,
	0xb7, 0x2e, 0xd1, 0x97, 0xbb, 0x41, 0xfd, 0x6e, 0xf4, 0x51, 0xc1, 0x63, 0x56, 0x96, 0x9b, 0x55,
	0xd8, 0xa6, 0xe8, 0xdd, 0x28, 0xc8, 0x86, 0x52, 0x48, 0xbc, 0x1b, 0x6d, 0x41, 0x60, 0xfb, 0xc3,
	0xe0, 0xf9, 0x07, 0x7c, 0x32, 0x62, 0xd9, 0x38, 0x7c, 0xd3, 0x7e, 0xa9, 0xc9, 0x27, 0xc3, 0xea,
	0x67, 0x65, 0x6f, 0x81, 0x12, 0xeb, 0x37, 0x6f, 0x5b, 0xec, 0x70, 0x36, 0x39, 0x28, 0x18, 0x43,
	0x6f, 0xde, 0xea, 0xdf, 0x87, 0x95, 0x80, 0x78, 0xf3, 0x66, 0x01, 0x7a, 0x95, 0x54, 0xf6, 0xaa,
	0x44, 0x14, 0xbf, 0x29, 0xd3, 0x3a, 0xb5, 0x94, 0x58, 0x25, 0xdb, 0x94, 0xee, 0xbc, 0x5a, 0x56,
	0xbf, 0xc5, 0x1e, 0xcd, 0xa6, 0xd3, 0xa8, 0x38, 0x47, 0x9d, 0x27, 0x75, 0x4d, 0x80, 0xe8, 0x3c,
	0x27, 0xa8, 0xa3, 0x52, 0xfa, 0x11, 0x51, 0x7c, 0x72, 0x9f, 0x17, 0x7c, 0x26, 0x92, 0x8c, 0x95,
	0x28, 0x2a, 0xc1, 0x82, 0xcd, 0x10, 0x51, 0x49, 0xb1, 0x3a, 0x8b, 0xab, 0x09, 0xf9, 0xdc, 0xad,
	0xfe, 0x2b, 0x59, 0xa5, 0xe0, 0x05, 0xbe, 0xcb, 0x93, 0x56, 0x30, 0x44, 0x64, 0x71, 0x24, 0x8c,
	0xfa, 0xfe, 0x51, 0x92, 0x4d, 0x9c, 0x7d, 0x5f, 0x09, 0xbc, 0x7d, 0x0f, 0x80, 0x9e, 0x8f, 0x65,
	0xa3, 0xc9, 0x3f, 0x9c, 0x02, 0x5f, 0xa5, 0x39, 0x1b, 0xdd, 0x24, 0x88, 0xf9, 0xd8, 0x4d, 0x22,
	0x57, 0x0f, 0x73, 0x96, 0xb1, 0x71, 0xf3, 0x5a, 0xcc, 0xe5, 0xca, 0x22, 0xbc, 0xae, 0x30, 0xa9,
	0x43, 0x61, 0x97, 0x89, 0x22, 0x89, 0xcb, 0x11, 0x13, 0x8f, 0xa2, 0x22, 0x9a, 0x32, 0xc1, 0x0a,
	0x1c, 0x0a, 0x80, 0x0c, 0x2d, 0x86, 0x08, 0x05, 0x8a, 0x05, 0x87, 0xdf, 0x0f, 0x5e, 0xad, 0x66,
	0x2e, 0x96, 0xc1, 0x9f, 0xed, 0xbc, 0x57, 0xff, 0x45, 0xdb, 0xf0, 0x82, 0xb2, 0x31, 0x12, 0x05,
	0x8b, 0xa6, 0x8d, 0xed, 0x97, 0xd4, 0xef, 0x35, 0xb8, 0x3e, 0x08, 0xa3, 0xe0, 0xe5, 0x3d, 0x2e,
	0x92, 0xa3, 0x6a, 0xa3, 0x00, 0x97, 0x32, 0xe8, 0xf9, 0x22, 0x16, 0x13, 0xcf, 0x17, 0x1d, 0x18,
	0x94, 0x71, 0x1c, 0xbc, 0x62, 0x0a, 0xf7, 0x59, 0x9e, 0x9e, 0x87, 0xb4, 0x72, 0x2d, 0x27, 0xd6,
	0x06, 0x17, 0x27, 0xbd, 0xdc, 0x7d, 0xeb, 0x3f, 0x9f, 0x2d, 0x0c, 0x3e, 0xfd, 0x6c, 0x61, 0xf0,
	0xbf, 0xcf, 0x16, 0x06, 0x7f, 0xfe, 0x7c, 0xe1, 0xb9, 0x4f, 0x3f, 0x5f, 0x78, 0xee, 0xbf, 0x9f,
	0x2f, 0x3c, 0xf7, 0xf1, 0xf3, 0xf0, 0x27, 0x82, 0x0f, 0xbf, 0x54, 0xff, 0xa1, 0xdf, 0xdb, 0xff,
	0x0f, 0x00, 0x00, 0xff, 0xff, 0xb5, 0xf8, 0xfe, 0x2b, 0x46, 0x58, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClientCommandsClient is the client API for ClientCommands service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientCommandsClient interface {
	AppGetVersion(ctx context.Context, in *pb.RpcAppGetVersionRequest, opts ...grpc.CallOption) (*pb.RpcAppGetVersionResponse, error)
	AppSetDeviceState(ctx context.Context, in *pb.RpcAppSetDeviceStateRequest, opts ...grpc.CallOption) (*pb.RpcAppSetDeviceStateResponse, error)
	AppShutdown(ctx context.Context, in *pb.RpcAppShutdownRequest, opts ...grpc.CallOption) (*pb.RpcAppShutdownResponse, error)
	// Wallet
	// ***
	WalletCreate(ctx context.Context, in *pb.RpcWalletCreateRequest, opts ...grpc.CallOption) (*pb.RpcWalletCreateResponse, error)
	WalletRecover(ctx context.Context, in *pb.RpcWalletRecoverRequest, opts ...grpc.CallOption) (*pb.RpcWalletRecoverResponse, error)
	WalletConvert(ctx context.Context, in *pb.RpcWalletConvertRequest, opts ...grpc.CallOption) (*pb.RpcWalletConvertResponse, error)
	WalletCreateSession(ctx context.Context, in *pb.RpcWalletCreateSessionRequest, opts ...grpc.CallOption) (*pb.RpcWalletCreateSessionResponse, error)
	WalletCloseSession(ctx context.Context, in *pb.RpcWalletCloseSessionRequest, opts ...grpc.CallOption) (*pb.RpcWalletCloseSessionResponse, error)
	// Workspace
	// ***
	WorkspaceCreate(ctx context.Context, in *pb.RpcWorkspaceCreateRequest, opts ...grpc.CallOption) (*pb.RpcWorkspaceCreateResponse, error)
	WorkspaceOpen(ctx context.Context, in *pb.RpcWorkspaceOpenRequest, opts ...grpc.CallOption) (*pb.RpcWorkspaceOpenResponse, error)
	WorkspaceObjectAdd(ctx context.Context, in *pb.RpcWorkspaceObjectAddRequest, opts ...grpc.CallOption) (*pb.RpcWorkspaceObjectAddResponse, error)
	WorkspaceObjectListAdd(ctx context.Context, in *pb.RpcWorkspaceObjectListAddRequest, opts ...grpc.CallOption) (*pb.RpcWorkspaceObjectListAddResponse, error)
	WorkspaceObjectListRemove(ctx context.Context, in *pb.RpcWorkspaceObjectListRemoveRequest, opts ...grpc.CallOption) (*pb.RpcWorkspaceObjectListRemoveResponse, error)
	WorkspaceSelect(ctx context.Context, in *pb.RpcWorkspaceSelectRequest, opts ...grpc.CallOption) (*pb.RpcWorkspaceSelectResponse, error)
	WorkspaceGetCurrent(ctx context.Context, in *pb.RpcWorkspaceGetCurrentRequest, opts ...grpc.CallOption) (*pb.RpcWorkspaceGetCurrentResponse, error)
	WorkspaceGetAll(ctx context.Context, in *pb.RpcWorkspaceGetAllRequest, opts ...grpc.CallOption) (*pb.RpcWorkspaceGetAllResponse, error)
	WorkspaceSetInfo(ctx context.Context, in *pb.RpcWorkspaceSetInfoRequest, opts ...grpc.CallOption) (*pb.RpcWorkspaceSetInfoResponse, error)
	WorkspaceExport(ctx context.Context, in *pb.RpcWorkspaceExportRequest, opts ...grpc.CallOption) (*pb.RpcWorkspaceExportResponse, error)
	// Account
	// ***
	AccountRecover(ctx context.Context, in *pb.RpcAccountRecoverRequest, opts ...grpc.CallOption) (*pb.RpcAccountRecoverResponse, error)
	AccountCreate(ctx context.Context, in *pb.RpcAccountCreateRequest, opts ...grpc.CallOption) (*pb.RpcAccountCreateResponse, error)
	AccountDelete(ctx context.Context, in *pb.RpcAccountDeleteRequest, opts ...grpc.CallOption) (*pb.RpcAccountDeleteResponse, error)
	AccountRevertDeletion(ctx context.Context, in *pb.RpcAccountRevertDeletionRequest, opts ...grpc.CallOption) (*pb.RpcAccountRevertDeletionResponse, error)
	AccountSelect(ctx context.Context, in *pb.RpcAccountSelectRequest, opts ...grpc.CallOption) (*pb.RpcAccountSelectResponse, error)
	AccountEnableLocalNetworkSync(ctx context.Context, in *pb.RpcAccountEnableLocalNetworkSyncRequest, opts ...grpc.CallOption) (*pb.RpcAccountEnableLocalNetworkSyncResponse, error)
	AccountStop(ctx context.Context, in *pb.RpcAccountStopRequest, opts ...grpc.CallOption) (*pb.RpcAccountStopResponse, error)
	AccountMove(ctx context.Context, in *pb.RpcAccountMoveRequest, opts ...grpc.CallOption) (*pb.RpcAccountMoveResponse, error)
	AccountConfigUpdate(ctx context.Context, in *pb.RpcAccountConfigUpdateRequest, opts ...grpc.CallOption) (*pb.RpcAccountConfigUpdateResponse, error)
	AccountRecoverFromLegacyExport(ctx context.Context, in *pb.RpcAccountRecoverFromLegacyExportRequest, opts ...grpc.CallOption) (*pb.RpcAccountRecoverFromLegacyExportResponse, error)
	// Space
	// ***
	SpaceDelete(ctx context.Context, in *pb.RpcSpaceDeleteRequest, opts ...grpc.CallOption) (*pb.RpcSpaceDeleteResponse, error)
	// Object
	// ***
	ObjectOpen(ctx context.Context, in *pb.RpcObjectOpenRequest, opts ...grpc.CallOption) (*pb.RpcObjectOpenResponse, error)
	ObjectClose(ctx context.Context, in *pb.RpcObjectCloseRequest, opts ...grpc.CallOption) (*pb.RpcObjectCloseResponse, error)
	ObjectShow(ctx context.Context, in *pb.RpcObjectShowRequest, opts ...grpc.CallOption) (*pb.RpcObjectShowResponse, error)
	// ObjectCreate just creates the new page, without adding the link to it from some other page
	ObjectCreate(ctx context.Context, in *pb.RpcObjectCreateRequest, opts ...grpc.CallOption) (*pb.RpcObjectCreateResponse, error)
	ObjectCreateBookmark(ctx context.Context, in *pb.RpcObjectCreateBookmarkRequest, opts ...grpc.CallOption) (*pb.RpcObjectCreateBookmarkResponse, error)
	// ObjectCreateSet just creates the new set, without adding the link to it from some other page
	ObjectCreateSet(ctx context.Context, in *pb.RpcObjectCreateSetRequest, opts ...grpc.CallOption) (*pb.RpcObjectCreateSetResponse, error)
	ObjectGraph(ctx context.Context, in *pb.RpcObjectGraphRequest, opts ...grpc.CallOption) (*pb.RpcObjectGraphResponse, error)
	ObjectSearch(ctx context.Context, in *pb.RpcObjectSearchRequest, opts ...grpc.CallOption) (*pb.RpcObjectSearchResponse, error)
	ObjectSearchSubscribe(ctx context.Context, in *pb.RpcObjectSearchSubscribeRequest, opts ...grpc.CallOption) (*pb.RpcObjectSearchSubscribeResponse, error)
	ObjectSubscribeIds(ctx context.Context, in *pb.RpcObjectSubscribeIdsRequest, opts ...grpc.CallOption) (*pb.RpcObjectSubscribeIdsResponse, error)
	ObjectGroupsSubscribe(ctx context.Context, in *pb.RpcObjectGroupsSubscribeRequest, opts ...grpc.CallOption) (*pb.RpcObjectGroupsSubscribeResponse, error)
	ObjectSearchUnsubscribe(ctx context.Context, in *pb.RpcObjectSearchUnsubscribeRequest, opts ...grpc.CallOption) (*pb.RpcObjectSearchUnsubscribeResponse, error)
	ObjectSetDetails(ctx context.Context, in *pb.RpcObjectSetDetailsRequest, opts ...grpc.CallOption) (*pb.RpcObjectSetDetailsResponse, error)
	ObjectDuplicate(ctx context.Context, in *pb.RpcObjectDuplicateRequest, opts ...grpc.CallOption) (*pb.RpcObjectDuplicateResponse, error)
	// ObjectSetObjectType sets an existing object type to the object so it will appear in sets and suggests relations from this type
	ObjectSetObjectType(ctx context.Context, in *pb.RpcObjectSetObjectTypeRequest, opts ...grpc.CallOption) (*pb.RpcObjectSetObjectTypeResponse, error)
	ObjectSetLayout(ctx context.Context, in *pb.RpcObjectSetLayoutRequest, opts ...grpc.CallOption) (*pb.RpcObjectSetLayoutResponse, error)
	ObjectSetInternalFlags(ctx context.Context, in *pb.RpcObjectSetInternalFlagsRequest, opts ...grpc.CallOption) (*pb.RpcObjectSetInternalFlagsResponse, error)
	ObjectSetIsFavorite(ctx context.Context, in *pb.RpcObjectSetIsFavoriteRequest, opts ...grpc.CallOption) (*pb.RpcObjectSetIsFavoriteResponse, error)
	ObjectSetIsArchived(ctx context.Context, in *pb.RpcObjectSetIsArchivedRequest, opts ...grpc.CallOption) (*pb.RpcObjectSetIsArchivedResponse, error)
	ObjectSetSource(ctx context.Context, in *pb.RpcObjectSetSourceRequest, opts ...grpc.CallOption) (*pb.RpcObjectSetSourceResponse, error)
	ObjectWorkspaceSetDashboard(ctx context.Context, in *pb.RpcObjectWorkspaceSetDashboardRequest, opts ...grpc.CallOption) (*pb.RpcObjectWorkspaceSetDashboardResponse, error)
	ObjectListDuplicate(ctx context.Context, in *pb.RpcObjectListDuplicateRequest, opts ...grpc.CallOption) (*pb.RpcObjectListDuplicateResponse, error)
	ObjectListDelete(ctx context.Context, in *pb.RpcObjectListDeleteRequest, opts ...grpc.CallOption) (*pb.RpcObjectListDeleteResponse, error)
	ObjectListSetIsArchived(ctx context.Context, in *pb.RpcObjectListSetIsArchivedRequest, opts ...grpc.CallOption) (*pb.RpcObjectListSetIsArchivedResponse, error)
	ObjectListSetIsFavorite(ctx context.Context, in *pb.RpcObjectListSetIsFavoriteRequest, opts ...grpc.CallOption) (*pb.RpcObjectListSetIsFavoriteResponse, error)
	ObjectListSetObjectType(ctx context.Context, in *pb.RpcObjectListSetObjectTypeRequest, opts ...grpc.CallOption) (*pb.RpcObjectListSetObjectTypeResponse, error)
	ObjectApplyTemplate(ctx context.Context, in *pb.RpcObjectApplyTemplateRequest, opts ...grpc.CallOption) (*pb.RpcObjectApplyTemplateResponse, error)
	// ObjectToSet creates new set from given object and removes object
	ObjectToSet(ctx context.Context, in *pb.RpcObjectToSetRequest, opts ...grpc.CallOption) (*pb.RpcObjectToSetResponse, error)
	ObjectToCollection(ctx context.Context, in *pb.RpcObjectToCollectionRequest, opts ...grpc.CallOption) (*pb.RpcObjectToCollectionResponse, error)
	ObjectShareByLink(ctx context.Context, in *pb.RpcObjectShareByLinkRequest, opts ...grpc.CallOption) (*pb.RpcObjectShareByLinkResponse, error)
	ObjectUndo(ctx context.Context, in *pb.RpcObjectUndoRequest, opts ...grpc.CallOption) (*pb.RpcObjectUndoResponse, error)
	ObjectRedo(ctx context.Context, in *pb.RpcObjectRedoRequest, opts ...grpc.CallOption) (*pb.RpcObjectRedoResponse, error)
	ObjectListExport(ctx context.Context, in *pb.RpcObjectListExportRequest, opts ...grpc.CallOption) (*pb.RpcObjectListExportResponse, error)
	ObjectBookmarkFetch(ctx context.Context, in *pb.RpcObjectBookmarkFetchRequest, opts ...grpc.CallOption) (*pb.RpcObjectBookmarkFetchResponse, error)
	ObjectToBookmark(ctx context.Context, in *pb.RpcObjectToBookmarkRequest, opts ...grpc.CallOption) (*pb.RpcObjectToBookmarkResponse, error)
	ObjectImport(ctx context.Context, in *pb.RpcObjectImportRequest, opts ...grpc.CallOption) (*pb.RpcObjectImportResponse, error)
	ObjectImportList(ctx context.Context, in *pb.RpcObjectImportListRequest, opts ...grpc.CallOption) (*pb.RpcObjectImportListResponse, error)
	ObjectImportNotionValidateToken(ctx context.Context, in *pb.RpcObjectImportNotionValidateTokenRequest, opts ...grpc.CallOption) (*pb.RpcObjectImportNotionValidateTokenResponse, error)
	ObjectImportUseCase(ctx context.Context, in *pb.RpcObjectImportUseCaseRequest, opts ...grpc.CallOption) (*pb.RpcObjectImportUseCaseResponse, error)
	ObjectImportExperience(ctx context.Context, in *pb.RpcObjectImportExperienceRequest, opts ...grpc.CallOption) (*pb.RpcObjectImportExperienceResponse, error)
	// Collections
	// ***
	ObjectCollectionAdd(ctx context.Context, in *pb.RpcObjectCollectionAddRequest, opts ...grpc.CallOption) (*pb.RpcObjectCollectionAddResponse, error)
	ObjectCollectionRemove(ctx context.Context, in *pb.RpcObjectCollectionRemoveRequest, opts ...grpc.CallOption) (*pb.RpcObjectCollectionRemoveResponse, error)
	ObjectCollectionSort(ctx context.Context, in *pb.RpcObjectCollectionSortRequest, opts ...grpc.CallOption) (*pb.RpcObjectCollectionSortResponse, error)
	// Relations
	// ***
	ObjectCreateRelation(ctx context.Context, in *pb.RpcObjectCreateRelationRequest, opts ...grpc.CallOption) (*pb.RpcObjectCreateRelationResponse, error)
	ObjectCreateRelationOption(ctx context.Context, in *pb.RpcObjectCreateRelationOptionRequest, opts ...grpc.CallOption) (*pb.RpcObjectCreateRelationOptionResponse, error)
	RelationListRemoveOption(ctx context.Context, in *pb.RpcRelationListRemoveOptionRequest, opts ...grpc.CallOption) (*pb.RpcRelationListRemoveOptionResponse, error)
	RelationOptions(ctx context.Context, in *pb.RpcRelationOptionsRequest, opts ...grpc.CallOption) (*pb.RpcRelationOptionsResponse, error)
	// Object Relations
	// ***
	ObjectRelationAdd(ctx context.Context, in *pb.RpcObjectRelationAddRequest, opts ...grpc.CallOption) (*pb.RpcObjectRelationAddResponse, error)
	ObjectRelationDelete(ctx context.Context, in *pb.RpcObjectRelationDeleteRequest, opts ...grpc.CallOption) (*pb.RpcObjectRelationDeleteResponse, error)
	ObjectRelationAddFeatured(ctx context.Context, in *pb.RpcObjectRelationAddFeaturedRequest, opts ...grpc.CallOption) (*pb.RpcObjectRelationAddFeaturedResponse, error)
	ObjectRelationRemoveFeatured(ctx context.Context, in *pb.RpcObjectRelationRemoveFeaturedRequest, opts ...grpc.CallOption) (*pb.RpcObjectRelationRemoveFeaturedResponse, error)
	ObjectRelationListAvailable(ctx context.Context, in *pb.RpcObjectRelationListAvailableRequest, opts ...grpc.CallOption) (*pb.RpcObjectRelationListAvailableResponse, error)
	// ObjectType commands
	// ***
	ObjectCreateObjectType(ctx context.Context, in *pb.RpcObjectCreateObjectTypeRequest, opts ...grpc.CallOption) (*pb.RpcObjectCreateObjectTypeResponse, error)
	ObjectTypeRelationAdd(ctx context.Context, in *pb.RpcObjectTypeRelationAddRequest, opts ...grpc.CallOption) (*pb.RpcObjectTypeRelationAddResponse, error)
	ObjectTypeRelationRemove(ctx context.Context, in *pb.RpcObjectTypeRelationRemoveRequest, opts ...grpc.CallOption) (*pb.RpcObjectTypeRelationRemoveResponse, error)
	HistoryShowVersion(ctx context.Context, in *pb.RpcHistoryShowVersionRequest, opts ...grpc.CallOption) (*pb.RpcHistoryShowVersionResponse, error)
	HistoryGetVersions(ctx context.Context, in *pb.RpcHistoryGetVersionsRequest, opts ...grpc.CallOption) (*pb.RpcHistoryGetVersionsResponse, error)
	HistorySetVersion(ctx context.Context, in *pb.RpcHistorySetVersionRequest, opts ...grpc.CallOption) (*pb.RpcHistorySetVersionResponse, error)
	// Files
	// ***
	FileOffload(ctx context.Context, in *pb.RpcFileOffloadRequest, opts ...grpc.CallOption) (*pb.RpcFileOffloadResponse, error)
	FileListOffload(ctx context.Context, in *pb.RpcFileListOffloadRequest, opts ...grpc.CallOption) (*pb.RpcFileListOffloadResponse, error)
	FileUpload(ctx context.Context, in *pb.RpcFileUploadRequest, opts ...grpc.CallOption) (*pb.RpcFileUploadResponse, error)
	FileDownload(ctx context.Context, in *pb.RpcFileDownloadRequest, opts ...grpc.CallOption) (*pb.RpcFileDownloadResponse, error)
	FileDrop(ctx context.Context, in *pb.RpcFileDropRequest, opts ...grpc.CallOption) (*pb.RpcFileDropResponse, error)
	FileSpaceUsage(ctx context.Context, in *pb.RpcFileSpaceUsageRequest, opts ...grpc.CallOption) (*pb.RpcFileSpaceUsageResponse, error)
	FileNodeUsage(ctx context.Context, in *pb.RpcFileNodeUsageRequest, opts ...grpc.CallOption) (*pb.RpcFileNodeUsageResponse, error)
	NavigationListObjects(ctx context.Context, in *pb.RpcNavigationListObjectsRequest, opts ...grpc.CallOption) (*pb.RpcNavigationListObjectsResponse, error)
	NavigationGetObjectInfoWithLinks(ctx context.Context, in *pb.RpcNavigationGetObjectInfoWithLinksRequest, opts ...grpc.CallOption) (*pb.RpcNavigationGetObjectInfoWithLinksResponse, error)
	TemplateCreateFromObject(ctx context.Context, in *pb.RpcTemplateCreateFromObjectRequest, opts ...grpc.CallOption) (*pb.RpcTemplateCreateFromObjectResponse, error)
	TemplateClone(ctx context.Context, in *pb.RpcTemplateCloneRequest, opts ...grpc.CallOption) (*pb.RpcTemplateCloneResponse, error)
	TemplateExportAll(ctx context.Context, in *pb.RpcTemplateExportAllRequest, opts ...grpc.CallOption) (*pb.RpcTemplateExportAllResponse, error)
	LinkPreview(ctx context.Context, in *pb.RpcLinkPreviewRequest, opts ...grpc.CallOption) (*pb.RpcLinkPreviewResponse, error)
	UnsplashSearch(ctx context.Context, in *pb.RpcUnsplashSearchRequest, opts ...grpc.CallOption) (*pb.RpcUnsplashSearchResponse, error)
	// UnsplashDownload downloads picture from unsplash by ID, put it to the IPFS and returns the hash.
	// The artist info is available in the object details
	UnsplashDownload(ctx context.Context, in *pb.RpcUnsplashDownloadRequest, opts ...grpc.CallOption) (*pb.RpcUnsplashDownloadResponse, error)
	DownloadManifest(ctx context.Context, in *pb.RpcDownloadManifestRequest, opts ...grpc.CallOption) (*pb.RpcDownloadManifestResponse, error)
	// General Block commands
	// ***
	BlockUpload(ctx context.Context, in *pb.RpcBlockUploadRequest, opts ...grpc.CallOption) (*pb.RpcBlockUploadResponse, error)
	BlockReplace(ctx context.Context, in *pb.RpcBlockReplaceRequest, opts ...grpc.CallOption) (*pb.RpcBlockReplaceResponse, error)
	BlockCreate(ctx context.Context, in *pb.RpcBlockCreateRequest, opts ...grpc.CallOption) (*pb.RpcBlockCreateResponse, error)
	BlockSplit(ctx context.Context, in *pb.RpcBlockSplitRequest, opts ...grpc.CallOption) (*pb.RpcBlockSplitResponse, error)
	BlockMerge(ctx context.Context, in *pb.RpcBlockMergeRequest, opts ...grpc.CallOption) (*pb.RpcBlockMergeResponse, error)
	BlockCopy(ctx context.Context, in *pb.RpcBlockCopyRequest, opts ...grpc.CallOption) (*pb.RpcBlockCopyResponse, error)
	BlockPaste(ctx context.Context, in *pb.RpcBlockPasteRequest, opts ...grpc.CallOption) (*pb.RpcBlockPasteResponse, error)
	BlockCut(ctx context.Context, in *pb.RpcBlockCutRequest, opts ...grpc.CallOption) (*pb.RpcBlockCutResponse, error)
	BlockSetFields(ctx context.Context, in *pb.RpcBlockSetFieldsRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetFieldsResponse, error)
	BlockExport(ctx context.Context, in *pb.RpcBlockExportRequest, opts ...grpc.CallOption) (*pb.RpcBlockExportResponse, error)
	BlockSetCarriage(ctx context.Context, in *pb.RpcBlockSetCarriageRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetCarriageResponse, error)
	BlockListDelete(ctx context.Context, in *pb.RpcBlockListDeleteRequest, opts ...grpc.CallOption) (*pb.RpcBlockListDeleteResponse, error)
	BlockListMoveToExistingObject(ctx context.Context, in *pb.RpcBlockListMoveToExistingObjectRequest, opts ...grpc.CallOption) (*pb.RpcBlockListMoveToExistingObjectResponse, error)
	BlockListMoveToNewObject(ctx context.Context, in *pb.RpcBlockListMoveToNewObjectRequest, opts ...grpc.CallOption) (*pb.RpcBlockListMoveToNewObjectResponse, error)
	BlockListConvertToObjects(ctx context.Context, in *pb.RpcBlockListConvertToObjectsRequest, opts ...grpc.CallOption) (*pb.RpcBlockListConvertToObjectsResponse, error)
	BlockListSetFields(ctx context.Context, in *pb.RpcBlockListSetFieldsRequest, opts ...grpc.CallOption) (*pb.RpcBlockListSetFieldsResponse, error)
	BlockListDuplicate(ctx context.Context, in *pb.RpcBlockListDuplicateRequest, opts ...grpc.CallOption) (*pb.RpcBlockListDuplicateResponse, error)
	BlockListSetBackgroundColor(ctx context.Context, in *pb.RpcBlockListSetBackgroundColorRequest, opts ...grpc.CallOption) (*pb.RpcBlockListSetBackgroundColorResponse, error)
	BlockListSetAlign(ctx context.Context, in *pb.RpcBlockListSetAlignRequest, opts ...grpc.CallOption) (*pb.RpcBlockListSetAlignResponse, error)
	BlockListSetVerticalAlign(ctx context.Context, in *pb.RpcBlockListSetVerticalAlignRequest, opts ...grpc.CallOption) (*pb.RpcBlockListSetVerticalAlignResponse, error)
	BlockListTurnInto(ctx context.Context, in *pb.RpcBlockListTurnIntoRequest, opts ...grpc.CallOption) (*pb.RpcBlockListTurnIntoResponse, error)
	// Text Block commands
	// ***
	BlockTextSetText(ctx context.Context, in *pb.RpcBlockTextSetTextRequest, opts ...grpc.CallOption) (*pb.RpcBlockTextSetTextResponse, error)
	BlockTextSetColor(ctx context.Context, in *pb.RpcBlockTextSetColorRequest, opts ...grpc.CallOption) (*pb.RpcBlockTextSetColorResponse, error)
	BlockTextSetStyle(ctx context.Context, in *pb.RpcBlockTextSetStyleRequest, opts ...grpc.CallOption) (*pb.RpcBlockTextSetStyleResponse, error)
	BlockTextSetChecked(ctx context.Context, in *pb.RpcBlockTextSetCheckedRequest, opts ...grpc.CallOption) (*pb.RpcBlockTextSetCheckedResponse, error)
	BlockTextSetIcon(ctx context.Context, in *pb.RpcBlockTextSetIconRequest, opts ...grpc.CallOption) (*pb.RpcBlockTextSetIconResponse, error)
	BlockTextListSetColor(ctx context.Context, in *pb.RpcBlockTextListSetColorRequest, opts ...grpc.CallOption) (*pb.RpcBlockTextListSetColorResponse, error)
	BlockTextListSetMark(ctx context.Context, in *pb.RpcBlockTextListSetMarkRequest, opts ...grpc.CallOption) (*pb.RpcBlockTextListSetMarkResponse, error)
	BlockTextListSetStyle(ctx context.Context, in *pb.RpcBlockTextListSetStyleRequest, opts ...grpc.CallOption) (*pb.RpcBlockTextListSetStyleResponse, error)
	BlockTextListClearStyle(ctx context.Context, in *pb.RpcBlockTextListClearStyleRequest, opts ...grpc.CallOption) (*pb.RpcBlockTextListClearStyleResponse, error)
	BlockTextListClearContent(ctx context.Context, in *pb.RpcBlockTextListClearContentRequest, opts ...grpc.CallOption) (*pb.RpcBlockTextListClearContentResponse, error)
	// File block commands
	// ***
	BlockFileSetName(ctx context.Context, in *pb.RpcBlockFileSetNameRequest, opts ...grpc.CallOption) (*pb.RpcBlockFileSetNameResponse, error)
	BlockImageSetName(ctx context.Context, in *pb.RpcBlockImageSetNameRequest, opts ...grpc.CallOption) (*pb.RpcBlockImageSetNameResponse, error)
	BlockVideoSetName(ctx context.Context, in *pb.RpcBlockVideoSetNameRequest, opts ...grpc.CallOption) (*pb.RpcBlockVideoSetNameResponse, error)
	BlockFileCreateAndUpload(ctx context.Context, in *pb.RpcBlockFileCreateAndUploadRequest, opts ...grpc.CallOption) (*pb.RpcBlockFileCreateAndUploadResponse, error)
	BlockFileListSetStyle(ctx context.Context, in *pb.RpcBlockFileListSetStyleRequest, opts ...grpc.CallOption) (*pb.RpcBlockFileListSetStyleResponse, error)
	// Dataview block commands
	// ***
	BlockDataviewViewCreate(ctx context.Context, in *pb.RpcBlockDataviewViewCreateRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewViewCreateResponse, error)
	BlockDataviewViewDelete(ctx context.Context, in *pb.RpcBlockDataviewViewDeleteRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewViewDeleteResponse, error)
	BlockDataviewViewUpdate(ctx context.Context, in *pb.RpcBlockDataviewViewUpdateRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewViewUpdateResponse, error)
	BlockDataviewViewSetActive(ctx context.Context, in *pb.RpcBlockDataviewViewSetActiveRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewViewSetActiveResponse, error)
	BlockDataviewViewSetPosition(ctx context.Context, in *pb.RpcBlockDataviewViewSetPositionRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewViewSetPositionResponse, error)
	BlockDataviewSetSource(ctx context.Context, in *pb.RpcBlockDataviewSetSourceRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewSetSourceResponse, error)
	BlockDataviewRelationAdd(ctx context.Context, in *pb.RpcBlockDataviewRelationAddRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewRelationAddResponse, error)
	BlockDataviewRelationDelete(ctx context.Context, in *pb.RpcBlockDataviewRelationDeleteRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewRelationDeleteResponse, error)
	BlockDataviewRelationListAvailable(ctx context.Context, in *pb.RpcBlockDataviewRelationListAvailableRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewRelationListAvailableResponse, error)
	BlockDataviewGroupOrderUpdate(ctx context.Context, in *pb.RpcBlockDataviewGroupOrderUpdateRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewGroupOrderUpdateResponse, error)
	BlockDataviewObjectOrderUpdate(ctx context.Context, in *pb.RpcBlockDataviewObjectOrderUpdateRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewObjectOrderUpdateResponse, error)
	BlockDataviewObjectOrderMove(ctx context.Context, in *pb.RpcBlockDataviewObjectOrderMoveRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewObjectOrderMoveResponse, error)
	BlockDataviewCreateFromExistingObject(ctx context.Context, in *pb.RpcBlockDataviewCreateFromExistingObjectRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewCreateFromExistingObjectResponse, error)
	BlockDataviewFilterAdd(ctx context.Context, in *pb.RpcBlockDataviewFilterAddRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewFilterAddResponse, error)
	BlockDataviewFilterRemove(ctx context.Context, in *pb.RpcBlockDataviewFilterRemoveRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewFilterRemoveResponse, error)
	BlockDataviewFilterReplace(ctx context.Context, in *pb.RpcBlockDataviewFilterReplaceRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewFilterReplaceResponse, error)
	BlockDataviewFilterSort(ctx context.Context, in *pb.RpcBlockDataviewFilterSortRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewFilterSortResponse, error)
	BlockDataviewSortAdd(ctx context.Context, in *pb.RpcBlockDataviewSortAddRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewSortAddResponse, error)
	BlockDataviewSortRemove(ctx context.Context, in *pb.RpcBlockDataviewSortRemoveRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewSortRemoveResponse, error)
	BlockDataviewSortReplace(ctx context.Context, in *pb.RpcBlockDataviewSortReplaceRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewSortReplaceResponse, error)
	BlockDataviewSortSort(ctx context.Context, in *pb.RpcBlockDataviewSortSortRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewSortSortResponse, error)
	BlockDataviewViewRelationAdd(ctx context.Context, in *pb.RpcBlockDataviewViewRelationAddRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewViewRelationAddResponse, error)
	BlockDataviewViewRelationRemove(ctx context.Context, in *pb.RpcBlockDataviewViewRelationRemoveRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewViewRelationRemoveResponse, error)
	BlockDataviewViewRelationReplace(ctx context.Context, in *pb.RpcBlockDataviewViewRelationReplaceRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewViewRelationReplaceResponse, error)
	BlockDataviewViewRelationSort(ctx context.Context, in *pb.RpcBlockDataviewViewRelationSortRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewViewRelationSortResponse, error)
	// Simple table block commands
	// ***
	BlockTableCreate(ctx context.Context, in *pb.RpcBlockTableCreateRequest, opts ...grpc.CallOption) (*pb.RpcBlockTableCreateResponse, error)
	BlockTableExpand(ctx context.Context, in *pb.RpcBlockTableExpandRequest, opts ...grpc.CallOption) (*pb.RpcBlockTableExpandResponse, error)
	BlockTableRowCreate(ctx context.Context, in *pb.RpcBlockTableRowCreateRequest, opts ...grpc.CallOption) (*pb.RpcBlockTableRowCreateResponse, error)
	BlockTableRowDelete(ctx context.Context, in *pb.RpcBlockTableRowDeleteRequest, opts ...grpc.CallOption) (*pb.RpcBlockTableRowDeleteResponse, error)
	BlockTableRowDuplicate(ctx context.Context, in *pb.RpcBlockTableRowDuplicateRequest, opts ...grpc.CallOption) (*pb.RpcBlockTableRowDuplicateResponse, error)
	BlockTableRowSetHeader(ctx context.Context, in *pb.RpcBlockTableRowSetHeaderRequest, opts ...grpc.CallOption) (*pb.RpcBlockTableRowSetHeaderResponse, error)
	BlockTableColumnCreate(ctx context.Context, in *pb.RpcBlockTableColumnCreateRequest, opts ...grpc.CallOption) (*pb.RpcBlockTableColumnCreateResponse, error)
	BlockTableColumnMove(ctx context.Context, in *pb.RpcBlockTableColumnMoveRequest, opts ...grpc.CallOption) (*pb.RpcBlockTableColumnMoveResponse, error)
	BlockTableColumnDelete(ctx context.Context, in *pb.RpcBlockTableColumnDeleteRequest, opts ...grpc.CallOption) (*pb.RpcBlockTableColumnDeleteResponse, error)
	BlockTableColumnDuplicate(ctx context.Context, in *pb.RpcBlockTableColumnDuplicateRequest, opts ...grpc.CallOption) (*pb.RpcBlockTableColumnDuplicateResponse, error)
	BlockTableRowListFill(ctx context.Context, in *pb.RpcBlockTableRowListFillRequest, opts ...grpc.CallOption) (*pb.RpcBlockTableRowListFillResponse, error)
	BlockTableRowListClean(ctx context.Context, in *pb.RpcBlockTableRowListCleanRequest, opts ...grpc.CallOption) (*pb.RpcBlockTableRowListCleanResponse, error)
	BlockTableColumnListFill(ctx context.Context, in *pb.RpcBlockTableColumnListFillRequest, opts ...grpc.CallOption) (*pb.RpcBlockTableColumnListFillResponse, error)
	BlockTableSort(ctx context.Context, in *pb.RpcBlockTableSortRequest, opts ...grpc.CallOption) (*pb.RpcBlockTableSortResponse, error)
	// Widget commands
	// ***
	BlockCreateWidget(ctx context.Context, in *pb.RpcBlockCreateWidgetRequest, opts ...grpc.CallOption) (*pb.RpcBlockCreateWidgetResponse, error)
	BlockWidgetSetTargetId(ctx context.Context, in *pb.RpcBlockWidgetSetTargetIdRequest, opts ...grpc.CallOption) (*pb.RpcBlockWidgetSetTargetIdResponse, error)
	BlockWidgetSetLayout(ctx context.Context, in *pb.RpcBlockWidgetSetLayoutRequest, opts ...grpc.CallOption) (*pb.RpcBlockWidgetSetLayoutResponse, error)
	BlockWidgetSetLimit(ctx context.Context, in *pb.RpcBlockWidgetSetLimitRequest, opts ...grpc.CallOption) (*pb.RpcBlockWidgetSetLimitResponse, error)
	BlockWidgetSetViewId(ctx context.Context, in *pb.RpcBlockWidgetSetViewIdRequest, opts ...grpc.CallOption) (*pb.RpcBlockWidgetSetViewIdResponse, error)
	// Other specific block commands
	// ***
	BlockLinkCreateWithObject(ctx context.Context, in *pb.RpcBlockLinkCreateWithObjectRequest, opts ...grpc.CallOption) (*pb.RpcBlockLinkCreateWithObjectResponse, error)
	BlockLinkListSetAppearance(ctx context.Context, in *pb.RpcBlockLinkListSetAppearanceRequest, opts ...grpc.CallOption) (*pb.RpcBlockLinkListSetAppearanceResponse, error)
	BlockBookmarkFetch(ctx context.Context, in *pb.RpcBlockBookmarkFetchRequest, opts ...grpc.CallOption) (*pb.RpcBlockBookmarkFetchResponse, error)
	BlockBookmarkCreateAndFetch(ctx context.Context, in *pb.RpcBlockBookmarkCreateAndFetchRequest, opts ...grpc.CallOption) (*pb.RpcBlockBookmarkCreateAndFetchResponse, error)
	BlockRelationSetKey(ctx context.Context, in *pb.RpcBlockRelationSetKeyRequest, opts ...grpc.CallOption) (*pb.RpcBlockRelationSetKeyResponse, error)
	BlockRelationAdd(ctx context.Context, in *pb.RpcBlockRelationAddRequest, opts ...grpc.CallOption) (*pb.RpcBlockRelationAddResponse, error)
	BlockDivListSetStyle(ctx context.Context, in *pb.RpcBlockDivListSetStyleRequest, opts ...grpc.CallOption) (*pb.RpcBlockDivListSetStyleResponse, error)
	BlockLatexSetText(ctx context.Context, in *pb.RpcBlockLatexSetTextRequest, opts ...grpc.CallOption) (*pb.RpcBlockLatexSetTextResponse, error)
	ProcessCancel(ctx context.Context, in *pb.RpcProcessCancelRequest, opts ...grpc.CallOption) (*pb.RpcProcessCancelResponse, error)
	LogSend(ctx context.Context, in *pb.RpcLogSendRequest, opts ...grpc.CallOption) (*pb.RpcLogSendResponse, error)
	DebugTree(ctx context.Context, in *pb.RpcDebugTreeRequest, opts ...grpc.CallOption) (*pb.RpcDebugTreeResponse, error)
	DebugTreeHeads(ctx context.Context, in *pb.RpcDebugTreeHeadsRequest, opts ...grpc.CallOption) (*pb.RpcDebugTreeHeadsResponse, error)
	DebugSpaceSummary(ctx context.Context, in *pb.RpcDebugSpaceSummaryRequest, opts ...grpc.CallOption) (*pb.RpcDebugSpaceSummaryResponse, error)
	DebugStackGoroutines(ctx context.Context, in *pb.RpcDebugStackGoroutinesRequest, opts ...grpc.CallOption) (*pb.RpcDebugStackGoroutinesResponse, error)
	DebugExportLocalstore(ctx context.Context, in *pb.RpcDebugExportLocalstoreRequest, opts ...grpc.CallOption) (*pb.RpcDebugExportLocalstoreResponse, error)
	DebugPing(ctx context.Context, in *pb.RpcDebugPingRequest, opts ...grpc.CallOption) (*pb.RpcDebugPingResponse, error)
	DebugSubscriptions(ctx context.Context, in *pb.RpcDebugSubscriptionsRequest, opts ...grpc.CallOption) (*pb.RpcDebugSubscriptionsResponse, error)
	DebugOpenedObjects(ctx context.Context, in *pb.RpcDebugOpenedObjectsRequest, opts ...grpc.CallOption) (*pb.RpcDebugOpenedObjectsResponse, error)
	MetricsSetParameters(ctx context.Context, in *pb.RpcMetricsSetParametersRequest, opts ...grpc.CallOption) (*pb.RpcMetricsSetParametersResponse, error)
	// used only for lib-server via grpc
	ListenSessionEvents(ctx context.Context, in *pb.StreamRequest, opts ...grpc.CallOption) (ClientCommands_ListenSessionEventsClient, error)
	NotificationList(ctx context.Context, in *pb.RpcNotificationListRequest, opts ...grpc.CallOption) (*pb.RpcNotificationListResponse, error)
	NotificationReply(ctx context.Context, in *pb.RpcNotificationReplyRequest, opts ...grpc.CallOption) (*pb.RpcNotificationReplyResponse, error)
}

type clientCommandsClient struct {
	cc *grpc.ClientConn
}

func NewClientCommandsClient(cc *grpc.ClientConn) ClientCommandsClient {
	return &clientCommandsClient{cc}
}

func (c *clientCommandsClient) AppGetVersion(ctx context.Context, in *pb.RpcAppGetVersionRequest, opts ...grpc.CallOption) (*pb.RpcAppGetVersionResponse, error) {
	out := new(pb.RpcAppGetVersionResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/AppGetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) AppSetDeviceState(ctx context.Context, in *pb.RpcAppSetDeviceStateRequest, opts ...grpc.CallOption) (*pb.RpcAppSetDeviceStateResponse, error) {
	out := new(pb.RpcAppSetDeviceStateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/AppSetDeviceState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) AppShutdown(ctx context.Context, in *pb.RpcAppShutdownRequest, opts ...grpc.CallOption) (*pb.RpcAppShutdownResponse, error) {
	out := new(pb.RpcAppShutdownResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/AppShutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) WalletCreate(ctx context.Context, in *pb.RpcWalletCreateRequest, opts ...grpc.CallOption) (*pb.RpcWalletCreateResponse, error) {
	out := new(pb.RpcWalletCreateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/WalletCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) WalletRecover(ctx context.Context, in *pb.RpcWalletRecoverRequest, opts ...grpc.CallOption) (*pb.RpcWalletRecoverResponse, error) {
	out := new(pb.RpcWalletRecoverResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/WalletRecover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) WalletConvert(ctx context.Context, in *pb.RpcWalletConvertRequest, opts ...grpc.CallOption) (*pb.RpcWalletConvertResponse, error) {
	out := new(pb.RpcWalletConvertResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/WalletConvert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) WalletCreateSession(ctx context.Context, in *pb.RpcWalletCreateSessionRequest, opts ...grpc.CallOption) (*pb.RpcWalletCreateSessionResponse, error) {
	out := new(pb.RpcWalletCreateSessionResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/WalletCreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) WalletCloseSession(ctx context.Context, in *pb.RpcWalletCloseSessionRequest, opts ...grpc.CallOption) (*pb.RpcWalletCloseSessionResponse, error) {
	out := new(pb.RpcWalletCloseSessionResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/WalletCloseSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) WorkspaceCreate(ctx context.Context, in *pb.RpcWorkspaceCreateRequest, opts ...grpc.CallOption) (*pb.RpcWorkspaceCreateResponse, error) {
	out := new(pb.RpcWorkspaceCreateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/WorkspaceCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) WorkspaceOpen(ctx context.Context, in *pb.RpcWorkspaceOpenRequest, opts ...grpc.CallOption) (*pb.RpcWorkspaceOpenResponse, error) {
	out := new(pb.RpcWorkspaceOpenResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/WorkspaceOpen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) WorkspaceObjectAdd(ctx context.Context, in *pb.RpcWorkspaceObjectAddRequest, opts ...grpc.CallOption) (*pb.RpcWorkspaceObjectAddResponse, error) {
	out := new(pb.RpcWorkspaceObjectAddResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/WorkspaceObjectAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) WorkspaceObjectListAdd(ctx context.Context, in *pb.RpcWorkspaceObjectListAddRequest, opts ...grpc.CallOption) (*pb.RpcWorkspaceObjectListAddResponse, error) {
	out := new(pb.RpcWorkspaceObjectListAddResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/WorkspaceObjectListAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) WorkspaceObjectListRemove(ctx context.Context, in *pb.RpcWorkspaceObjectListRemoveRequest, opts ...grpc.CallOption) (*pb.RpcWorkspaceObjectListRemoveResponse, error) {
	out := new(pb.RpcWorkspaceObjectListRemoveResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/WorkspaceObjectListRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) WorkspaceSelect(ctx context.Context, in *pb.RpcWorkspaceSelectRequest, opts ...grpc.CallOption) (*pb.RpcWorkspaceSelectResponse, error) {
	out := new(pb.RpcWorkspaceSelectResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/WorkspaceSelect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) WorkspaceGetCurrent(ctx context.Context, in *pb.RpcWorkspaceGetCurrentRequest, opts ...grpc.CallOption) (*pb.RpcWorkspaceGetCurrentResponse, error) {
	out := new(pb.RpcWorkspaceGetCurrentResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/WorkspaceGetCurrent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) WorkspaceGetAll(ctx context.Context, in *pb.RpcWorkspaceGetAllRequest, opts ...grpc.CallOption) (*pb.RpcWorkspaceGetAllResponse, error) {
	out := new(pb.RpcWorkspaceGetAllResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/WorkspaceGetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) WorkspaceSetInfo(ctx context.Context, in *pb.RpcWorkspaceSetInfoRequest, opts ...grpc.CallOption) (*pb.RpcWorkspaceSetInfoResponse, error) {
	out := new(pb.RpcWorkspaceSetInfoResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/WorkspaceSetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) WorkspaceExport(ctx context.Context, in *pb.RpcWorkspaceExportRequest, opts ...grpc.CallOption) (*pb.RpcWorkspaceExportResponse, error) {
	out := new(pb.RpcWorkspaceExportResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/WorkspaceExport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) AccountRecover(ctx context.Context, in *pb.RpcAccountRecoverRequest, opts ...grpc.CallOption) (*pb.RpcAccountRecoverResponse, error) {
	out := new(pb.RpcAccountRecoverResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/AccountRecover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) AccountCreate(ctx context.Context, in *pb.RpcAccountCreateRequest, opts ...grpc.CallOption) (*pb.RpcAccountCreateResponse, error) {
	out := new(pb.RpcAccountCreateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/AccountCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) AccountDelete(ctx context.Context, in *pb.RpcAccountDeleteRequest, opts ...grpc.CallOption) (*pb.RpcAccountDeleteResponse, error) {
	out := new(pb.RpcAccountDeleteResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/AccountDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) AccountRevertDeletion(ctx context.Context, in *pb.RpcAccountRevertDeletionRequest, opts ...grpc.CallOption) (*pb.RpcAccountRevertDeletionResponse, error) {
	out := new(pb.RpcAccountRevertDeletionResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/AccountRevertDeletion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) AccountSelect(ctx context.Context, in *pb.RpcAccountSelectRequest, opts ...grpc.CallOption) (*pb.RpcAccountSelectResponse, error) {
	out := new(pb.RpcAccountSelectResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/AccountSelect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) AccountEnableLocalNetworkSync(ctx context.Context, in *pb.RpcAccountEnableLocalNetworkSyncRequest, opts ...grpc.CallOption) (*pb.RpcAccountEnableLocalNetworkSyncResponse, error) {
	out := new(pb.RpcAccountEnableLocalNetworkSyncResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/AccountEnableLocalNetworkSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) AccountStop(ctx context.Context, in *pb.RpcAccountStopRequest, opts ...grpc.CallOption) (*pb.RpcAccountStopResponse, error) {
	out := new(pb.RpcAccountStopResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/AccountStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) AccountMove(ctx context.Context, in *pb.RpcAccountMoveRequest, opts ...grpc.CallOption) (*pb.RpcAccountMoveResponse, error) {
	out := new(pb.RpcAccountMoveResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/AccountMove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) AccountConfigUpdate(ctx context.Context, in *pb.RpcAccountConfigUpdateRequest, opts ...grpc.CallOption) (*pb.RpcAccountConfigUpdateResponse, error) {
	out := new(pb.RpcAccountConfigUpdateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/AccountConfigUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) AccountRecoverFromLegacyExport(ctx context.Context, in *pb.RpcAccountRecoverFromLegacyExportRequest, opts ...grpc.CallOption) (*pb.RpcAccountRecoverFromLegacyExportResponse, error) {
	out := new(pb.RpcAccountRecoverFromLegacyExportResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/AccountRecoverFromLegacyExport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) SpaceDelete(ctx context.Context, in *pb.RpcSpaceDeleteRequest, opts ...grpc.CallOption) (*pb.RpcSpaceDeleteResponse, error) {
	out := new(pb.RpcSpaceDeleteResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/SpaceDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectOpen(ctx context.Context, in *pb.RpcObjectOpenRequest, opts ...grpc.CallOption) (*pb.RpcObjectOpenResponse, error) {
	out := new(pb.RpcObjectOpenResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectOpen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectClose(ctx context.Context, in *pb.RpcObjectCloseRequest, opts ...grpc.CallOption) (*pb.RpcObjectCloseResponse, error) {
	out := new(pb.RpcObjectCloseResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectClose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectShow(ctx context.Context, in *pb.RpcObjectShowRequest, opts ...grpc.CallOption) (*pb.RpcObjectShowResponse, error) {
	out := new(pb.RpcObjectShowResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectShow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectCreate(ctx context.Context, in *pb.RpcObjectCreateRequest, opts ...grpc.CallOption) (*pb.RpcObjectCreateResponse, error) {
	out := new(pb.RpcObjectCreateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectCreateBookmark(ctx context.Context, in *pb.RpcObjectCreateBookmarkRequest, opts ...grpc.CallOption) (*pb.RpcObjectCreateBookmarkResponse, error) {
	out := new(pb.RpcObjectCreateBookmarkResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectCreateBookmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectCreateSet(ctx context.Context, in *pb.RpcObjectCreateSetRequest, opts ...grpc.CallOption) (*pb.RpcObjectCreateSetResponse, error) {
	out := new(pb.RpcObjectCreateSetResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectCreateSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectGraph(ctx context.Context, in *pb.RpcObjectGraphRequest, opts ...grpc.CallOption) (*pb.RpcObjectGraphResponse, error) {
	out := new(pb.RpcObjectGraphResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectSearch(ctx context.Context, in *pb.RpcObjectSearchRequest, opts ...grpc.CallOption) (*pb.RpcObjectSearchResponse, error) {
	out := new(pb.RpcObjectSearchResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectSearchSubscribe(ctx context.Context, in *pb.RpcObjectSearchSubscribeRequest, opts ...grpc.CallOption) (*pb.RpcObjectSearchSubscribeResponse, error) {
	out := new(pb.RpcObjectSearchSubscribeResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectSearchSubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectSubscribeIds(ctx context.Context, in *pb.RpcObjectSubscribeIdsRequest, opts ...grpc.CallOption) (*pb.RpcObjectSubscribeIdsResponse, error) {
	out := new(pb.RpcObjectSubscribeIdsResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectSubscribeIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectGroupsSubscribe(ctx context.Context, in *pb.RpcObjectGroupsSubscribeRequest, opts ...grpc.CallOption) (*pb.RpcObjectGroupsSubscribeResponse, error) {
	out := new(pb.RpcObjectGroupsSubscribeResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectGroupsSubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectSearchUnsubscribe(ctx context.Context, in *pb.RpcObjectSearchUnsubscribeRequest, opts ...grpc.CallOption) (*pb.RpcObjectSearchUnsubscribeResponse, error) {
	out := new(pb.RpcObjectSearchUnsubscribeResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectSearchUnsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectSetDetails(ctx context.Context, in *pb.RpcObjectSetDetailsRequest, opts ...grpc.CallOption) (*pb.RpcObjectSetDetailsResponse, error) {
	out := new(pb.RpcObjectSetDetailsResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectSetDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectDuplicate(ctx context.Context, in *pb.RpcObjectDuplicateRequest, opts ...grpc.CallOption) (*pb.RpcObjectDuplicateResponse, error) {
	out := new(pb.RpcObjectDuplicateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectDuplicate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectSetObjectType(ctx context.Context, in *pb.RpcObjectSetObjectTypeRequest, opts ...grpc.CallOption) (*pb.RpcObjectSetObjectTypeResponse, error) {
	out := new(pb.RpcObjectSetObjectTypeResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectSetObjectType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectSetLayout(ctx context.Context, in *pb.RpcObjectSetLayoutRequest, opts ...grpc.CallOption) (*pb.RpcObjectSetLayoutResponse, error) {
	out := new(pb.RpcObjectSetLayoutResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectSetLayout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectSetInternalFlags(ctx context.Context, in *pb.RpcObjectSetInternalFlagsRequest, opts ...grpc.CallOption) (*pb.RpcObjectSetInternalFlagsResponse, error) {
	out := new(pb.RpcObjectSetInternalFlagsResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectSetInternalFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectSetIsFavorite(ctx context.Context, in *pb.RpcObjectSetIsFavoriteRequest, opts ...grpc.CallOption) (*pb.RpcObjectSetIsFavoriteResponse, error) {
	out := new(pb.RpcObjectSetIsFavoriteResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectSetIsFavorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectSetIsArchived(ctx context.Context, in *pb.RpcObjectSetIsArchivedRequest, opts ...grpc.CallOption) (*pb.RpcObjectSetIsArchivedResponse, error) {
	out := new(pb.RpcObjectSetIsArchivedResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectSetIsArchived", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectSetSource(ctx context.Context, in *pb.RpcObjectSetSourceRequest, opts ...grpc.CallOption) (*pb.RpcObjectSetSourceResponse, error) {
	out := new(pb.RpcObjectSetSourceResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectSetSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectWorkspaceSetDashboard(ctx context.Context, in *pb.RpcObjectWorkspaceSetDashboardRequest, opts ...grpc.CallOption) (*pb.RpcObjectWorkspaceSetDashboardResponse, error) {
	out := new(pb.RpcObjectWorkspaceSetDashboardResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectWorkspaceSetDashboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectListDuplicate(ctx context.Context, in *pb.RpcObjectListDuplicateRequest, opts ...grpc.CallOption) (*pb.RpcObjectListDuplicateResponse, error) {
	out := new(pb.RpcObjectListDuplicateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectListDuplicate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectListDelete(ctx context.Context, in *pb.RpcObjectListDeleteRequest, opts ...grpc.CallOption) (*pb.RpcObjectListDeleteResponse, error) {
	out := new(pb.RpcObjectListDeleteResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectListDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectListSetIsArchived(ctx context.Context, in *pb.RpcObjectListSetIsArchivedRequest, opts ...grpc.CallOption) (*pb.RpcObjectListSetIsArchivedResponse, error) {
	out := new(pb.RpcObjectListSetIsArchivedResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectListSetIsArchived", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectListSetIsFavorite(ctx context.Context, in *pb.RpcObjectListSetIsFavoriteRequest, opts ...grpc.CallOption) (*pb.RpcObjectListSetIsFavoriteResponse, error) {
	out := new(pb.RpcObjectListSetIsFavoriteResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectListSetIsFavorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectListSetObjectType(ctx context.Context, in *pb.RpcObjectListSetObjectTypeRequest, opts ...grpc.CallOption) (*pb.RpcObjectListSetObjectTypeResponse, error) {
	out := new(pb.RpcObjectListSetObjectTypeResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectListSetObjectType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectApplyTemplate(ctx context.Context, in *pb.RpcObjectApplyTemplateRequest, opts ...grpc.CallOption) (*pb.RpcObjectApplyTemplateResponse, error) {
	out := new(pb.RpcObjectApplyTemplateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectApplyTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectToSet(ctx context.Context, in *pb.RpcObjectToSetRequest, opts ...grpc.CallOption) (*pb.RpcObjectToSetResponse, error) {
	out := new(pb.RpcObjectToSetResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectToSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectToCollection(ctx context.Context, in *pb.RpcObjectToCollectionRequest, opts ...grpc.CallOption) (*pb.RpcObjectToCollectionResponse, error) {
	out := new(pb.RpcObjectToCollectionResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectToCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectShareByLink(ctx context.Context, in *pb.RpcObjectShareByLinkRequest, opts ...grpc.CallOption) (*pb.RpcObjectShareByLinkResponse, error) {
	out := new(pb.RpcObjectShareByLinkResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectShareByLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectUndo(ctx context.Context, in *pb.RpcObjectUndoRequest, opts ...grpc.CallOption) (*pb.RpcObjectUndoResponse, error) {
	out := new(pb.RpcObjectUndoResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectUndo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectRedo(ctx context.Context, in *pb.RpcObjectRedoRequest, opts ...grpc.CallOption) (*pb.RpcObjectRedoResponse, error) {
	out := new(pb.RpcObjectRedoResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectRedo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectListExport(ctx context.Context, in *pb.RpcObjectListExportRequest, opts ...grpc.CallOption) (*pb.RpcObjectListExportResponse, error) {
	out := new(pb.RpcObjectListExportResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectListExport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectBookmarkFetch(ctx context.Context, in *pb.RpcObjectBookmarkFetchRequest, opts ...grpc.CallOption) (*pb.RpcObjectBookmarkFetchResponse, error) {
	out := new(pb.RpcObjectBookmarkFetchResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectBookmarkFetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectToBookmark(ctx context.Context, in *pb.RpcObjectToBookmarkRequest, opts ...grpc.CallOption) (*pb.RpcObjectToBookmarkResponse, error) {
	out := new(pb.RpcObjectToBookmarkResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectToBookmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectImport(ctx context.Context, in *pb.RpcObjectImportRequest, opts ...grpc.CallOption) (*pb.RpcObjectImportResponse, error) {
	out := new(pb.RpcObjectImportResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectImportList(ctx context.Context, in *pb.RpcObjectImportListRequest, opts ...grpc.CallOption) (*pb.RpcObjectImportListResponse, error) {
	out := new(pb.RpcObjectImportListResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectImportList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectImportNotionValidateToken(ctx context.Context, in *pb.RpcObjectImportNotionValidateTokenRequest, opts ...grpc.CallOption) (*pb.RpcObjectImportNotionValidateTokenResponse, error) {
	out := new(pb.RpcObjectImportNotionValidateTokenResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectImportNotionValidateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectImportUseCase(ctx context.Context, in *pb.RpcObjectImportUseCaseRequest, opts ...grpc.CallOption) (*pb.RpcObjectImportUseCaseResponse, error) {
	out := new(pb.RpcObjectImportUseCaseResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectImportUseCase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectImportExperience(ctx context.Context, in *pb.RpcObjectImportExperienceRequest, opts ...grpc.CallOption) (*pb.RpcObjectImportExperienceResponse, error) {
	out := new(pb.RpcObjectImportExperienceResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectImportExperience", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectCollectionAdd(ctx context.Context, in *pb.RpcObjectCollectionAddRequest, opts ...grpc.CallOption) (*pb.RpcObjectCollectionAddResponse, error) {
	out := new(pb.RpcObjectCollectionAddResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectCollectionAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectCollectionRemove(ctx context.Context, in *pb.RpcObjectCollectionRemoveRequest, opts ...grpc.CallOption) (*pb.RpcObjectCollectionRemoveResponse, error) {
	out := new(pb.RpcObjectCollectionRemoveResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectCollectionRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectCollectionSort(ctx context.Context, in *pb.RpcObjectCollectionSortRequest, opts ...grpc.CallOption) (*pb.RpcObjectCollectionSortResponse, error) {
	out := new(pb.RpcObjectCollectionSortResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectCollectionSort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectCreateRelation(ctx context.Context, in *pb.RpcObjectCreateRelationRequest, opts ...grpc.CallOption) (*pb.RpcObjectCreateRelationResponse, error) {
	out := new(pb.RpcObjectCreateRelationResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectCreateRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectCreateRelationOption(ctx context.Context, in *pb.RpcObjectCreateRelationOptionRequest, opts ...grpc.CallOption) (*pb.RpcObjectCreateRelationOptionResponse, error) {
	out := new(pb.RpcObjectCreateRelationOptionResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectCreateRelationOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) RelationListRemoveOption(ctx context.Context, in *pb.RpcRelationListRemoveOptionRequest, opts ...grpc.CallOption) (*pb.RpcRelationListRemoveOptionResponse, error) {
	out := new(pb.RpcRelationListRemoveOptionResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/RelationListRemoveOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) RelationOptions(ctx context.Context, in *pb.RpcRelationOptionsRequest, opts ...grpc.CallOption) (*pb.RpcRelationOptionsResponse, error) {
	out := new(pb.RpcRelationOptionsResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/RelationOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectRelationAdd(ctx context.Context, in *pb.RpcObjectRelationAddRequest, opts ...grpc.CallOption) (*pb.RpcObjectRelationAddResponse, error) {
	out := new(pb.RpcObjectRelationAddResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectRelationAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectRelationDelete(ctx context.Context, in *pb.RpcObjectRelationDeleteRequest, opts ...grpc.CallOption) (*pb.RpcObjectRelationDeleteResponse, error) {
	out := new(pb.RpcObjectRelationDeleteResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectRelationDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectRelationAddFeatured(ctx context.Context, in *pb.RpcObjectRelationAddFeaturedRequest, opts ...grpc.CallOption) (*pb.RpcObjectRelationAddFeaturedResponse, error) {
	out := new(pb.RpcObjectRelationAddFeaturedResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectRelationAddFeatured", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectRelationRemoveFeatured(ctx context.Context, in *pb.RpcObjectRelationRemoveFeaturedRequest, opts ...grpc.CallOption) (*pb.RpcObjectRelationRemoveFeaturedResponse, error) {
	out := new(pb.RpcObjectRelationRemoveFeaturedResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectRelationRemoveFeatured", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectRelationListAvailable(ctx context.Context, in *pb.RpcObjectRelationListAvailableRequest, opts ...grpc.CallOption) (*pb.RpcObjectRelationListAvailableResponse, error) {
	out := new(pb.RpcObjectRelationListAvailableResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectRelationListAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectCreateObjectType(ctx context.Context, in *pb.RpcObjectCreateObjectTypeRequest, opts ...grpc.CallOption) (*pb.RpcObjectCreateObjectTypeResponse, error) {
	out := new(pb.RpcObjectCreateObjectTypeResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectCreateObjectType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectTypeRelationAdd(ctx context.Context, in *pb.RpcObjectTypeRelationAddRequest, opts ...grpc.CallOption) (*pb.RpcObjectTypeRelationAddResponse, error) {
	out := new(pb.RpcObjectTypeRelationAddResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectTypeRelationAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ObjectTypeRelationRemove(ctx context.Context, in *pb.RpcObjectTypeRelationRemoveRequest, opts ...grpc.CallOption) (*pb.RpcObjectTypeRelationRemoveResponse, error) {
	out := new(pb.RpcObjectTypeRelationRemoveResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ObjectTypeRelationRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) HistoryShowVersion(ctx context.Context, in *pb.RpcHistoryShowVersionRequest, opts ...grpc.CallOption) (*pb.RpcHistoryShowVersionResponse, error) {
	out := new(pb.RpcHistoryShowVersionResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/HistoryShowVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) HistoryGetVersions(ctx context.Context, in *pb.RpcHistoryGetVersionsRequest, opts ...grpc.CallOption) (*pb.RpcHistoryGetVersionsResponse, error) {
	out := new(pb.RpcHistoryGetVersionsResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/HistoryGetVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) HistorySetVersion(ctx context.Context, in *pb.RpcHistorySetVersionRequest, opts ...grpc.CallOption) (*pb.RpcHistorySetVersionResponse, error) {
	out := new(pb.RpcHistorySetVersionResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/HistorySetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) FileOffload(ctx context.Context, in *pb.RpcFileOffloadRequest, opts ...grpc.CallOption) (*pb.RpcFileOffloadResponse, error) {
	out := new(pb.RpcFileOffloadResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/FileOffload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) FileListOffload(ctx context.Context, in *pb.RpcFileListOffloadRequest, opts ...grpc.CallOption) (*pb.RpcFileListOffloadResponse, error) {
	out := new(pb.RpcFileListOffloadResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/FileListOffload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) FileUpload(ctx context.Context, in *pb.RpcFileUploadRequest, opts ...grpc.CallOption) (*pb.RpcFileUploadResponse, error) {
	out := new(pb.RpcFileUploadResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/FileUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) FileDownload(ctx context.Context, in *pb.RpcFileDownloadRequest, opts ...grpc.CallOption) (*pb.RpcFileDownloadResponse, error) {
	out := new(pb.RpcFileDownloadResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/FileDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) FileDrop(ctx context.Context, in *pb.RpcFileDropRequest, opts ...grpc.CallOption) (*pb.RpcFileDropResponse, error) {
	out := new(pb.RpcFileDropResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/FileDrop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) FileSpaceUsage(ctx context.Context, in *pb.RpcFileSpaceUsageRequest, opts ...grpc.CallOption) (*pb.RpcFileSpaceUsageResponse, error) {
	out := new(pb.RpcFileSpaceUsageResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/FileSpaceUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) FileNodeUsage(ctx context.Context, in *pb.RpcFileNodeUsageRequest, opts ...grpc.CallOption) (*pb.RpcFileNodeUsageResponse, error) {
	out := new(pb.RpcFileNodeUsageResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/FileNodeUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) NavigationListObjects(ctx context.Context, in *pb.RpcNavigationListObjectsRequest, opts ...grpc.CallOption) (*pb.RpcNavigationListObjectsResponse, error) {
	out := new(pb.RpcNavigationListObjectsResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/NavigationListObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) NavigationGetObjectInfoWithLinks(ctx context.Context, in *pb.RpcNavigationGetObjectInfoWithLinksRequest, opts ...grpc.CallOption) (*pb.RpcNavigationGetObjectInfoWithLinksResponse, error) {
	out := new(pb.RpcNavigationGetObjectInfoWithLinksResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/NavigationGetObjectInfoWithLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) TemplateCreateFromObject(ctx context.Context, in *pb.RpcTemplateCreateFromObjectRequest, opts ...grpc.CallOption) (*pb.RpcTemplateCreateFromObjectResponse, error) {
	out := new(pb.RpcTemplateCreateFromObjectResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/TemplateCreateFromObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) TemplateClone(ctx context.Context, in *pb.RpcTemplateCloneRequest, opts ...grpc.CallOption) (*pb.RpcTemplateCloneResponse, error) {
	out := new(pb.RpcTemplateCloneResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/TemplateClone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) TemplateExportAll(ctx context.Context, in *pb.RpcTemplateExportAllRequest, opts ...grpc.CallOption) (*pb.RpcTemplateExportAllResponse, error) {
	out := new(pb.RpcTemplateExportAllResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/TemplateExportAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) LinkPreview(ctx context.Context, in *pb.RpcLinkPreviewRequest, opts ...grpc.CallOption) (*pb.RpcLinkPreviewResponse, error) {
	out := new(pb.RpcLinkPreviewResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/LinkPreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) UnsplashSearch(ctx context.Context, in *pb.RpcUnsplashSearchRequest, opts ...grpc.CallOption) (*pb.RpcUnsplashSearchResponse, error) {
	out := new(pb.RpcUnsplashSearchResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/UnsplashSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) UnsplashDownload(ctx context.Context, in *pb.RpcUnsplashDownloadRequest, opts ...grpc.CallOption) (*pb.RpcUnsplashDownloadResponse, error) {
	out := new(pb.RpcUnsplashDownloadResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/UnsplashDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) DownloadManifest(ctx context.Context, in *pb.RpcDownloadManifestRequest, opts ...grpc.CallOption) (*pb.RpcDownloadManifestResponse, error) {
	out := new(pb.RpcDownloadManifestResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/DownloadManifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockUpload(ctx context.Context, in *pb.RpcBlockUploadRequest, opts ...grpc.CallOption) (*pb.RpcBlockUploadResponse, error) {
	out := new(pb.RpcBlockUploadResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockReplace(ctx context.Context, in *pb.RpcBlockReplaceRequest, opts ...grpc.CallOption) (*pb.RpcBlockReplaceResponse, error) {
	out := new(pb.RpcBlockReplaceResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockReplace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockCreate(ctx context.Context, in *pb.RpcBlockCreateRequest, opts ...grpc.CallOption) (*pb.RpcBlockCreateResponse, error) {
	out := new(pb.RpcBlockCreateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSplit(ctx context.Context, in *pb.RpcBlockSplitRequest, opts ...grpc.CallOption) (*pb.RpcBlockSplitResponse, error) {
	out := new(pb.RpcBlockSplitResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSplit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockMerge(ctx context.Context, in *pb.RpcBlockMergeRequest, opts ...grpc.CallOption) (*pb.RpcBlockMergeResponse, error) {
	out := new(pb.RpcBlockMergeResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockMerge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockCopy(ctx context.Context, in *pb.RpcBlockCopyRequest, opts ...grpc.CallOption) (*pb.RpcBlockCopyResponse, error) {
	out := new(pb.RpcBlockCopyResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockCopy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockPaste(ctx context.Context, in *pb.RpcBlockPasteRequest, opts ...grpc.CallOption) (*pb.RpcBlockPasteResponse, error) {
	out := new(pb.RpcBlockPasteResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockPaste", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockCut(ctx context.Context, in *pb.RpcBlockCutRequest, opts ...grpc.CallOption) (*pb.RpcBlockCutResponse, error) {
	out := new(pb.RpcBlockCutResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockCut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetFields(ctx context.Context, in *pb.RpcBlockSetFieldsRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetFieldsResponse, error) {
	out := new(pb.RpcBlockSetFieldsResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockExport(ctx context.Context, in *pb.RpcBlockExportRequest, opts ...grpc.CallOption) (*pb.RpcBlockExportResponse, error) {
	out := new(pb.RpcBlockExportResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockExport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockSetCarriage(ctx context.Context, in *pb.RpcBlockSetCarriageRequest, opts ...grpc.CallOption) (*pb.RpcBlockSetCarriageResponse, error) {
	out := new(pb.RpcBlockSetCarriageResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockSetCarriage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockListDelete(ctx context.Context, in *pb.RpcBlockListDeleteRequest, opts ...grpc.CallOption) (*pb.RpcBlockListDeleteResponse, error) {
	out := new(pb.RpcBlockListDeleteResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockListDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockListMoveToExistingObject(ctx context.Context, in *pb.RpcBlockListMoveToExistingObjectRequest, opts ...grpc.CallOption) (*pb.RpcBlockListMoveToExistingObjectResponse, error) {
	out := new(pb.RpcBlockListMoveToExistingObjectResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockListMoveToExistingObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockListMoveToNewObject(ctx context.Context, in *pb.RpcBlockListMoveToNewObjectRequest, opts ...grpc.CallOption) (*pb.RpcBlockListMoveToNewObjectResponse, error) {
	out := new(pb.RpcBlockListMoveToNewObjectResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockListMoveToNewObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockListConvertToObjects(ctx context.Context, in *pb.RpcBlockListConvertToObjectsRequest, opts ...grpc.CallOption) (*pb.RpcBlockListConvertToObjectsResponse, error) {
	out := new(pb.RpcBlockListConvertToObjectsResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockListConvertToObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockListSetFields(ctx context.Context, in *pb.RpcBlockListSetFieldsRequest, opts ...grpc.CallOption) (*pb.RpcBlockListSetFieldsResponse, error) {
	out := new(pb.RpcBlockListSetFieldsResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockListSetFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockListDuplicate(ctx context.Context, in *pb.RpcBlockListDuplicateRequest, opts ...grpc.CallOption) (*pb.RpcBlockListDuplicateResponse, error) {
	out := new(pb.RpcBlockListDuplicateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockListDuplicate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockListSetBackgroundColor(ctx context.Context, in *pb.RpcBlockListSetBackgroundColorRequest, opts ...grpc.CallOption) (*pb.RpcBlockListSetBackgroundColorResponse, error) {
	out := new(pb.RpcBlockListSetBackgroundColorResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockListSetBackgroundColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockListSetAlign(ctx context.Context, in *pb.RpcBlockListSetAlignRequest, opts ...grpc.CallOption) (*pb.RpcBlockListSetAlignResponse, error) {
	out := new(pb.RpcBlockListSetAlignResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockListSetAlign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockListSetVerticalAlign(ctx context.Context, in *pb.RpcBlockListSetVerticalAlignRequest, opts ...grpc.CallOption) (*pb.RpcBlockListSetVerticalAlignResponse, error) {
	out := new(pb.RpcBlockListSetVerticalAlignResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockListSetVerticalAlign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockListTurnInto(ctx context.Context, in *pb.RpcBlockListTurnIntoRequest, opts ...grpc.CallOption) (*pb.RpcBlockListTurnIntoResponse, error) {
	out := new(pb.RpcBlockListTurnIntoResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockListTurnInto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockTextSetText(ctx context.Context, in *pb.RpcBlockTextSetTextRequest, opts ...grpc.CallOption) (*pb.RpcBlockTextSetTextResponse, error) {
	out := new(pb.RpcBlockTextSetTextResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockTextSetText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockTextSetColor(ctx context.Context, in *pb.RpcBlockTextSetColorRequest, opts ...grpc.CallOption) (*pb.RpcBlockTextSetColorResponse, error) {
	out := new(pb.RpcBlockTextSetColorResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockTextSetColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockTextSetStyle(ctx context.Context, in *pb.RpcBlockTextSetStyleRequest, opts ...grpc.CallOption) (*pb.RpcBlockTextSetStyleResponse, error) {
	out := new(pb.RpcBlockTextSetStyleResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockTextSetStyle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockTextSetChecked(ctx context.Context, in *pb.RpcBlockTextSetCheckedRequest, opts ...grpc.CallOption) (*pb.RpcBlockTextSetCheckedResponse, error) {
	out := new(pb.RpcBlockTextSetCheckedResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockTextSetChecked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockTextSetIcon(ctx context.Context, in *pb.RpcBlockTextSetIconRequest, opts ...grpc.CallOption) (*pb.RpcBlockTextSetIconResponse, error) {
	out := new(pb.RpcBlockTextSetIconResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockTextSetIcon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockTextListSetColor(ctx context.Context, in *pb.RpcBlockTextListSetColorRequest, opts ...grpc.CallOption) (*pb.RpcBlockTextListSetColorResponse, error) {
	out := new(pb.RpcBlockTextListSetColorResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockTextListSetColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockTextListSetMark(ctx context.Context, in *pb.RpcBlockTextListSetMarkRequest, opts ...grpc.CallOption) (*pb.RpcBlockTextListSetMarkResponse, error) {
	out := new(pb.RpcBlockTextListSetMarkResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockTextListSetMark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockTextListSetStyle(ctx context.Context, in *pb.RpcBlockTextListSetStyleRequest, opts ...grpc.CallOption) (*pb.RpcBlockTextListSetStyleResponse, error) {
	out := new(pb.RpcBlockTextListSetStyleResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockTextListSetStyle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockTextListClearStyle(ctx context.Context, in *pb.RpcBlockTextListClearStyleRequest, opts ...grpc.CallOption) (*pb.RpcBlockTextListClearStyleResponse, error) {
	out := new(pb.RpcBlockTextListClearStyleResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockTextListClearStyle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockTextListClearContent(ctx context.Context, in *pb.RpcBlockTextListClearContentRequest, opts ...grpc.CallOption) (*pb.RpcBlockTextListClearContentResponse, error) {
	out := new(pb.RpcBlockTextListClearContentResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockTextListClearContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockFileSetName(ctx context.Context, in *pb.RpcBlockFileSetNameRequest, opts ...grpc.CallOption) (*pb.RpcBlockFileSetNameResponse, error) {
	out := new(pb.RpcBlockFileSetNameResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockFileSetName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockImageSetName(ctx context.Context, in *pb.RpcBlockImageSetNameRequest, opts ...grpc.CallOption) (*pb.RpcBlockImageSetNameResponse, error) {
	out := new(pb.RpcBlockImageSetNameResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockImageSetName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockVideoSetName(ctx context.Context, in *pb.RpcBlockVideoSetNameRequest, opts ...grpc.CallOption) (*pb.RpcBlockVideoSetNameResponse, error) {
	out := new(pb.RpcBlockVideoSetNameResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockVideoSetName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockFileCreateAndUpload(ctx context.Context, in *pb.RpcBlockFileCreateAndUploadRequest, opts ...grpc.CallOption) (*pb.RpcBlockFileCreateAndUploadResponse, error) {
	out := new(pb.RpcBlockFileCreateAndUploadResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockFileCreateAndUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockFileListSetStyle(ctx context.Context, in *pb.RpcBlockFileListSetStyleRequest, opts ...grpc.CallOption) (*pb.RpcBlockFileListSetStyleResponse, error) {
	out := new(pb.RpcBlockFileListSetStyleResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockFileListSetStyle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewViewCreate(ctx context.Context, in *pb.RpcBlockDataviewViewCreateRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewViewCreateResponse, error) {
	out := new(pb.RpcBlockDataviewViewCreateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewViewCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewViewDelete(ctx context.Context, in *pb.RpcBlockDataviewViewDeleteRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewViewDeleteResponse, error) {
	out := new(pb.RpcBlockDataviewViewDeleteResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewViewDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewViewUpdate(ctx context.Context, in *pb.RpcBlockDataviewViewUpdateRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewViewUpdateResponse, error) {
	out := new(pb.RpcBlockDataviewViewUpdateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewViewUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewViewSetActive(ctx context.Context, in *pb.RpcBlockDataviewViewSetActiveRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewViewSetActiveResponse, error) {
	out := new(pb.RpcBlockDataviewViewSetActiveResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewViewSetActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewViewSetPosition(ctx context.Context, in *pb.RpcBlockDataviewViewSetPositionRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewViewSetPositionResponse, error) {
	out := new(pb.RpcBlockDataviewViewSetPositionResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewViewSetPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewSetSource(ctx context.Context, in *pb.RpcBlockDataviewSetSourceRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewSetSourceResponse, error) {
	out := new(pb.RpcBlockDataviewSetSourceResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewSetSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewRelationAdd(ctx context.Context, in *pb.RpcBlockDataviewRelationAddRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewRelationAddResponse, error) {
	out := new(pb.RpcBlockDataviewRelationAddResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewRelationAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewRelationDelete(ctx context.Context, in *pb.RpcBlockDataviewRelationDeleteRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewRelationDeleteResponse, error) {
	out := new(pb.RpcBlockDataviewRelationDeleteResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewRelationDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewRelationListAvailable(ctx context.Context, in *pb.RpcBlockDataviewRelationListAvailableRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewRelationListAvailableResponse, error) {
	out := new(pb.RpcBlockDataviewRelationListAvailableResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewRelationListAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewGroupOrderUpdate(ctx context.Context, in *pb.RpcBlockDataviewGroupOrderUpdateRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewGroupOrderUpdateResponse, error) {
	out := new(pb.RpcBlockDataviewGroupOrderUpdateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewGroupOrderUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewObjectOrderUpdate(ctx context.Context, in *pb.RpcBlockDataviewObjectOrderUpdateRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewObjectOrderUpdateResponse, error) {
	out := new(pb.RpcBlockDataviewObjectOrderUpdateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewObjectOrderUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewObjectOrderMove(ctx context.Context, in *pb.RpcBlockDataviewObjectOrderMoveRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewObjectOrderMoveResponse, error) {
	out := new(pb.RpcBlockDataviewObjectOrderMoveResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewObjectOrderMove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewCreateFromExistingObject(ctx context.Context, in *pb.RpcBlockDataviewCreateFromExistingObjectRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewCreateFromExistingObjectResponse, error) {
	out := new(pb.RpcBlockDataviewCreateFromExistingObjectResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewCreateFromExistingObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewFilterAdd(ctx context.Context, in *pb.RpcBlockDataviewFilterAddRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewFilterAddResponse, error) {
	out := new(pb.RpcBlockDataviewFilterAddResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewFilterAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewFilterRemove(ctx context.Context, in *pb.RpcBlockDataviewFilterRemoveRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewFilterRemoveResponse, error) {
	out := new(pb.RpcBlockDataviewFilterRemoveResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewFilterRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewFilterReplace(ctx context.Context, in *pb.RpcBlockDataviewFilterReplaceRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewFilterReplaceResponse, error) {
	out := new(pb.RpcBlockDataviewFilterReplaceResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewFilterReplace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewFilterSort(ctx context.Context, in *pb.RpcBlockDataviewFilterSortRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewFilterSortResponse, error) {
	out := new(pb.RpcBlockDataviewFilterSortResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewFilterSort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewSortAdd(ctx context.Context, in *pb.RpcBlockDataviewSortAddRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewSortAddResponse, error) {
	out := new(pb.RpcBlockDataviewSortAddResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewSortAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewSortRemove(ctx context.Context, in *pb.RpcBlockDataviewSortRemoveRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewSortRemoveResponse, error) {
	out := new(pb.RpcBlockDataviewSortRemoveResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewSortRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewSortReplace(ctx context.Context, in *pb.RpcBlockDataviewSortReplaceRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewSortReplaceResponse, error) {
	out := new(pb.RpcBlockDataviewSortReplaceResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewSortReplace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewSortSort(ctx context.Context, in *pb.RpcBlockDataviewSortSortRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewSortSortResponse, error) {
	out := new(pb.RpcBlockDataviewSortSortResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewSortSort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewViewRelationAdd(ctx context.Context, in *pb.RpcBlockDataviewViewRelationAddRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewViewRelationAddResponse, error) {
	out := new(pb.RpcBlockDataviewViewRelationAddResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewViewRelationAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewViewRelationRemove(ctx context.Context, in *pb.RpcBlockDataviewViewRelationRemoveRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewViewRelationRemoveResponse, error) {
	out := new(pb.RpcBlockDataviewViewRelationRemoveResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewViewRelationRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewViewRelationReplace(ctx context.Context, in *pb.RpcBlockDataviewViewRelationReplaceRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewViewRelationReplaceResponse, error) {
	out := new(pb.RpcBlockDataviewViewRelationReplaceResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewViewRelationReplace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDataviewViewRelationSort(ctx context.Context, in *pb.RpcBlockDataviewViewRelationSortRequest, opts ...grpc.CallOption) (*pb.RpcBlockDataviewViewRelationSortResponse, error) {
	out := new(pb.RpcBlockDataviewViewRelationSortResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDataviewViewRelationSort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockTableCreate(ctx context.Context, in *pb.RpcBlockTableCreateRequest, opts ...grpc.CallOption) (*pb.RpcBlockTableCreateResponse, error) {
	out := new(pb.RpcBlockTableCreateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockTableCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockTableExpand(ctx context.Context, in *pb.RpcBlockTableExpandRequest, opts ...grpc.CallOption) (*pb.RpcBlockTableExpandResponse, error) {
	out := new(pb.RpcBlockTableExpandResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockTableExpand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockTableRowCreate(ctx context.Context, in *pb.RpcBlockTableRowCreateRequest, opts ...grpc.CallOption) (*pb.RpcBlockTableRowCreateResponse, error) {
	out := new(pb.RpcBlockTableRowCreateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockTableRowCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockTableRowDelete(ctx context.Context, in *pb.RpcBlockTableRowDeleteRequest, opts ...grpc.CallOption) (*pb.RpcBlockTableRowDeleteResponse, error) {
	out := new(pb.RpcBlockTableRowDeleteResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockTableRowDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockTableRowDuplicate(ctx context.Context, in *pb.RpcBlockTableRowDuplicateRequest, opts ...grpc.CallOption) (*pb.RpcBlockTableRowDuplicateResponse, error) {
	out := new(pb.RpcBlockTableRowDuplicateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockTableRowDuplicate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockTableRowSetHeader(ctx context.Context, in *pb.RpcBlockTableRowSetHeaderRequest, opts ...grpc.CallOption) (*pb.RpcBlockTableRowSetHeaderResponse, error) {
	out := new(pb.RpcBlockTableRowSetHeaderResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockTableRowSetHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockTableColumnCreate(ctx context.Context, in *pb.RpcBlockTableColumnCreateRequest, opts ...grpc.CallOption) (*pb.RpcBlockTableColumnCreateResponse, error) {
	out := new(pb.RpcBlockTableColumnCreateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockTableColumnCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockTableColumnMove(ctx context.Context, in *pb.RpcBlockTableColumnMoveRequest, opts ...grpc.CallOption) (*pb.RpcBlockTableColumnMoveResponse, error) {
	out := new(pb.RpcBlockTableColumnMoveResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockTableColumnMove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockTableColumnDelete(ctx context.Context, in *pb.RpcBlockTableColumnDeleteRequest, opts ...grpc.CallOption) (*pb.RpcBlockTableColumnDeleteResponse, error) {
	out := new(pb.RpcBlockTableColumnDeleteResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockTableColumnDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockTableColumnDuplicate(ctx context.Context, in *pb.RpcBlockTableColumnDuplicateRequest, opts ...grpc.CallOption) (*pb.RpcBlockTableColumnDuplicateResponse, error) {
	out := new(pb.RpcBlockTableColumnDuplicateResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockTableColumnDuplicate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockTableRowListFill(ctx context.Context, in *pb.RpcBlockTableRowListFillRequest, opts ...grpc.CallOption) (*pb.RpcBlockTableRowListFillResponse, error) {
	out := new(pb.RpcBlockTableRowListFillResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockTableRowListFill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockTableRowListClean(ctx context.Context, in *pb.RpcBlockTableRowListCleanRequest, opts ...grpc.CallOption) (*pb.RpcBlockTableRowListCleanResponse, error) {
	out := new(pb.RpcBlockTableRowListCleanResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockTableRowListClean", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockTableColumnListFill(ctx context.Context, in *pb.RpcBlockTableColumnListFillRequest, opts ...grpc.CallOption) (*pb.RpcBlockTableColumnListFillResponse, error) {
	out := new(pb.RpcBlockTableColumnListFillResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockTableColumnListFill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockTableSort(ctx context.Context, in *pb.RpcBlockTableSortRequest, opts ...grpc.CallOption) (*pb.RpcBlockTableSortResponse, error) {
	out := new(pb.RpcBlockTableSortResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockTableSort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockCreateWidget(ctx context.Context, in *pb.RpcBlockCreateWidgetRequest, opts ...grpc.CallOption) (*pb.RpcBlockCreateWidgetResponse, error) {
	out := new(pb.RpcBlockCreateWidgetResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockCreateWidget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockWidgetSetTargetId(ctx context.Context, in *pb.RpcBlockWidgetSetTargetIdRequest, opts ...grpc.CallOption) (*pb.RpcBlockWidgetSetTargetIdResponse, error) {
	out := new(pb.RpcBlockWidgetSetTargetIdResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockWidgetSetTargetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockWidgetSetLayout(ctx context.Context, in *pb.RpcBlockWidgetSetLayoutRequest, opts ...grpc.CallOption) (*pb.RpcBlockWidgetSetLayoutResponse, error) {
	out := new(pb.RpcBlockWidgetSetLayoutResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockWidgetSetLayout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockWidgetSetLimit(ctx context.Context, in *pb.RpcBlockWidgetSetLimitRequest, opts ...grpc.CallOption) (*pb.RpcBlockWidgetSetLimitResponse, error) {
	out := new(pb.RpcBlockWidgetSetLimitResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockWidgetSetLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockWidgetSetViewId(ctx context.Context, in *pb.RpcBlockWidgetSetViewIdRequest, opts ...grpc.CallOption) (*pb.RpcBlockWidgetSetViewIdResponse, error) {
	out := new(pb.RpcBlockWidgetSetViewIdResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockWidgetSetViewId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockLinkCreateWithObject(ctx context.Context, in *pb.RpcBlockLinkCreateWithObjectRequest, opts ...grpc.CallOption) (*pb.RpcBlockLinkCreateWithObjectResponse, error) {
	out := new(pb.RpcBlockLinkCreateWithObjectResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockLinkCreateWithObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockLinkListSetAppearance(ctx context.Context, in *pb.RpcBlockLinkListSetAppearanceRequest, opts ...grpc.CallOption) (*pb.RpcBlockLinkListSetAppearanceResponse, error) {
	out := new(pb.RpcBlockLinkListSetAppearanceResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockLinkListSetAppearance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockBookmarkFetch(ctx context.Context, in *pb.RpcBlockBookmarkFetchRequest, opts ...grpc.CallOption) (*pb.RpcBlockBookmarkFetchResponse, error) {
	out := new(pb.RpcBlockBookmarkFetchResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockBookmarkFetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockBookmarkCreateAndFetch(ctx context.Context, in *pb.RpcBlockBookmarkCreateAndFetchRequest, opts ...grpc.CallOption) (*pb.RpcBlockBookmarkCreateAndFetchResponse, error) {
	out := new(pb.RpcBlockBookmarkCreateAndFetchResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockBookmarkCreateAndFetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockRelationSetKey(ctx context.Context, in *pb.RpcBlockRelationSetKeyRequest, opts ...grpc.CallOption) (*pb.RpcBlockRelationSetKeyResponse, error) {
	out := new(pb.RpcBlockRelationSetKeyResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockRelationSetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockRelationAdd(ctx context.Context, in *pb.RpcBlockRelationAddRequest, opts ...grpc.CallOption) (*pb.RpcBlockRelationAddResponse, error) {
	out := new(pb.RpcBlockRelationAddResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockRelationAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockDivListSetStyle(ctx context.Context, in *pb.RpcBlockDivListSetStyleRequest, opts ...grpc.CallOption) (*pb.RpcBlockDivListSetStyleResponse, error) {
	out := new(pb.RpcBlockDivListSetStyleResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockDivListSetStyle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) BlockLatexSetText(ctx context.Context, in *pb.RpcBlockLatexSetTextRequest, opts ...grpc.CallOption) (*pb.RpcBlockLatexSetTextResponse, error) {
	out := new(pb.RpcBlockLatexSetTextResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/BlockLatexSetText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ProcessCancel(ctx context.Context, in *pb.RpcProcessCancelRequest, opts ...grpc.CallOption) (*pb.RpcProcessCancelResponse, error) {
	out := new(pb.RpcProcessCancelResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/ProcessCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) LogSend(ctx context.Context, in *pb.RpcLogSendRequest, opts ...grpc.CallOption) (*pb.RpcLogSendResponse, error) {
	out := new(pb.RpcLogSendResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/LogSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) DebugTree(ctx context.Context, in *pb.RpcDebugTreeRequest, opts ...grpc.CallOption) (*pb.RpcDebugTreeResponse, error) {
	out := new(pb.RpcDebugTreeResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/DebugTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) DebugTreeHeads(ctx context.Context, in *pb.RpcDebugTreeHeadsRequest, opts ...grpc.CallOption) (*pb.RpcDebugTreeHeadsResponse, error) {
	out := new(pb.RpcDebugTreeHeadsResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/DebugTreeHeads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) DebugSpaceSummary(ctx context.Context, in *pb.RpcDebugSpaceSummaryRequest, opts ...grpc.CallOption) (*pb.RpcDebugSpaceSummaryResponse, error) {
	out := new(pb.RpcDebugSpaceSummaryResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/DebugSpaceSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) DebugStackGoroutines(ctx context.Context, in *pb.RpcDebugStackGoroutinesRequest, opts ...grpc.CallOption) (*pb.RpcDebugStackGoroutinesResponse, error) {
	out := new(pb.RpcDebugStackGoroutinesResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/DebugStackGoroutines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) DebugExportLocalstore(ctx context.Context, in *pb.RpcDebugExportLocalstoreRequest, opts ...grpc.CallOption) (*pb.RpcDebugExportLocalstoreResponse, error) {
	out := new(pb.RpcDebugExportLocalstoreResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/DebugExportLocalstore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) DebugPing(ctx context.Context, in *pb.RpcDebugPingRequest, opts ...grpc.CallOption) (*pb.RpcDebugPingResponse, error) {
	out := new(pb.RpcDebugPingResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/DebugPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) DebugSubscriptions(ctx context.Context, in *pb.RpcDebugSubscriptionsRequest, opts ...grpc.CallOption) (*pb.RpcDebugSubscriptionsResponse, error) {
	out := new(pb.RpcDebugSubscriptionsResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/DebugSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) DebugOpenedObjects(ctx context.Context, in *pb.RpcDebugOpenedObjectsRequest, opts ...grpc.CallOption) (*pb.RpcDebugOpenedObjectsResponse, error) {
	out := new(pb.RpcDebugOpenedObjectsResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/DebugOpenedObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) MetricsSetParameters(ctx context.Context, in *pb.RpcMetricsSetParametersRequest, opts ...grpc.CallOption) (*pb.RpcMetricsSetParametersResponse, error) {
	out := new(pb.RpcMetricsSetParametersResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/MetricsSetParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) ListenSessionEvents(ctx context.Context, in *pb.StreamRequest, opts ...grpc.CallOption) (ClientCommands_ListenSessionEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ClientCommands_serviceDesc.Streams[0], "/anytype.ClientCommands/ListenSessionEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientCommandsListenSessionEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClientCommands_ListenSessionEventsClient interface {
	Recv() (*pb.Event, error)
	grpc.ClientStream
}

type clientCommandsListenSessionEventsClient struct {
	grpc.ClientStream
}

func (x *clientCommandsListenSessionEventsClient) Recv() (*pb.Event, error) {
	m := new(pb.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clientCommandsClient) NotificationList(ctx context.Context, in *pb.RpcNotificationListRequest, opts ...grpc.CallOption) (*pb.RpcNotificationListResponse, error) {
	out := new(pb.RpcNotificationListResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/NotificationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientCommandsClient) NotificationReply(ctx context.Context, in *pb.RpcNotificationReplyRequest, opts ...grpc.CallOption) (*pb.RpcNotificationReplyResponse, error) {
	out := new(pb.RpcNotificationReplyResponse)
	err := c.cc.Invoke(ctx, "/anytype.ClientCommands/NotificationReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientCommandsServer is the server API for ClientCommands service.
type ClientCommandsServer interface {
	AppGetVersion(context.Context, *pb.RpcAppGetVersionRequest) *pb.RpcAppGetVersionResponse
	AppSetDeviceState(context.Context, *pb.RpcAppSetDeviceStateRequest) *pb.RpcAppSetDeviceStateResponse
	AppShutdown(context.Context, *pb.RpcAppShutdownRequest) *pb.RpcAppShutdownResponse
	// Wallet
	// ***
	WalletCreate(context.Context, *pb.RpcWalletCreateRequest) *pb.RpcWalletCreateResponse
	WalletRecover(context.Context, *pb.RpcWalletRecoverRequest) *pb.RpcWalletRecoverResponse
	WalletConvert(context.Context, *pb.RpcWalletConvertRequest) *pb.RpcWalletConvertResponse
	WalletCreateSession(context.Context, *pb.RpcWalletCreateSessionRequest) *pb.RpcWalletCreateSessionResponse
	WalletCloseSession(context.Context, *pb.RpcWalletCloseSessionRequest) *pb.RpcWalletCloseSessionResponse
	// Workspace
	// ***
	WorkspaceCreate(context.Context, *pb.RpcWorkspaceCreateRequest) *pb.RpcWorkspaceCreateResponse
	WorkspaceOpen(context.Context, *pb.RpcWorkspaceOpenRequest) *pb.RpcWorkspaceOpenResponse
	WorkspaceObjectAdd(context.Context, *pb.RpcWorkspaceObjectAddRequest) *pb.RpcWorkspaceObjectAddResponse
	WorkspaceObjectListAdd(context.Context, *pb.RpcWorkspaceObjectListAddRequest) *pb.RpcWorkspaceObjectListAddResponse
	WorkspaceObjectListRemove(context.Context, *pb.RpcWorkspaceObjectListRemoveRequest) *pb.RpcWorkspaceObjectListRemoveResponse
	WorkspaceSelect(context.Context, *pb.RpcWorkspaceSelectRequest) *pb.RpcWorkspaceSelectResponse
	WorkspaceGetCurrent(context.Context, *pb.RpcWorkspaceGetCurrentRequest) *pb.RpcWorkspaceGetCurrentResponse
	WorkspaceGetAll(context.Context, *pb.RpcWorkspaceGetAllRequest) *pb.RpcWorkspaceGetAllResponse
	WorkspaceSetInfo(context.Context, *pb.RpcWorkspaceSetInfoRequest) *pb.RpcWorkspaceSetInfoResponse
	WorkspaceExport(context.Context, *pb.RpcWorkspaceExportRequest) *pb.RpcWorkspaceExportResponse
	// Account
	// ***
	AccountRecover(context.Context, *pb.RpcAccountRecoverRequest) *pb.RpcAccountRecoverResponse
	AccountCreate(context.Context, *pb.RpcAccountCreateRequest) *pb.RpcAccountCreateResponse
	AccountDelete(context.Context, *pb.RpcAccountDeleteRequest) *pb.RpcAccountDeleteResponse
	AccountRevertDeletion(context.Context, *pb.RpcAccountRevertDeletionRequest) *pb.RpcAccountRevertDeletionResponse
	AccountSelect(context.Context, *pb.RpcAccountSelectRequest) *pb.RpcAccountSelectResponse
	AccountEnableLocalNetworkSync(context.Context, *pb.RpcAccountEnableLocalNetworkSyncRequest) *pb.RpcAccountEnableLocalNetworkSyncResponse
	AccountStop(context.Context, *pb.RpcAccountStopRequest) *pb.RpcAccountStopResponse
	AccountMove(context.Context, *pb.RpcAccountMoveRequest) *pb.RpcAccountMoveResponse
	AccountConfigUpdate(context.Context, *pb.RpcAccountConfigUpdateRequest) *pb.RpcAccountConfigUpdateResponse
	AccountRecoverFromLegacyExport(context.Context, *pb.RpcAccountRecoverFromLegacyExportRequest) *pb.RpcAccountRecoverFromLegacyExportResponse
	// Space
	// ***
	SpaceDelete(context.Context, *pb.RpcSpaceDeleteRequest) *pb.RpcSpaceDeleteResponse
	// Object
	// ***
	ObjectOpen(context.Context, *pb.RpcObjectOpenRequest) *pb.RpcObjectOpenResponse
	ObjectClose(context.Context, *pb.RpcObjectCloseRequest) *pb.RpcObjectCloseResponse
	ObjectShow(context.Context, *pb.RpcObjectShowRequest) *pb.RpcObjectShowResponse
	// ObjectCreate just creates the new page, without adding the link to it from some other page
	ObjectCreate(context.Context, *pb.RpcObjectCreateRequest) *pb.RpcObjectCreateResponse
	ObjectCreateBookmark(context.Context, *pb.RpcObjectCreateBookmarkRequest) *pb.RpcObjectCreateBookmarkResponse
	// ObjectCreateSet just creates the new set, without adding the link to it from some other page
	ObjectCreateSet(context.Context, *pb.RpcObjectCreateSetRequest) *pb.RpcObjectCreateSetResponse
	ObjectGraph(context.Context, *pb.RpcObjectGraphRequest) *pb.RpcObjectGraphResponse
	ObjectSearch(context.Context, *pb.RpcObjectSearchRequest) *pb.RpcObjectSearchResponse
	ObjectSearchSubscribe(context.Context, *pb.RpcObjectSearchSubscribeRequest) *pb.RpcObjectSearchSubscribeResponse
	ObjectSubscribeIds(context.Context, *pb.RpcObjectSubscribeIdsRequest) *pb.RpcObjectSubscribeIdsResponse
	ObjectGroupsSubscribe(context.Context, *pb.RpcObjectGroupsSubscribeRequest) *pb.RpcObjectGroupsSubscribeResponse
	ObjectSearchUnsubscribe(context.Context, *pb.RpcObjectSearchUnsubscribeRequest) *pb.RpcObjectSearchUnsubscribeResponse
	ObjectSetDetails(context.Context, *pb.RpcObjectSetDetailsRequest) *pb.RpcObjectSetDetailsResponse
	ObjectDuplicate(context.Context, *pb.RpcObjectDuplicateRequest) *pb.RpcObjectDuplicateResponse
	// ObjectSetObjectType sets an existing object type to the object so it will appear in sets and suggests relations from this type
	ObjectSetObjectType(context.Context, *pb.RpcObjectSetObjectTypeRequest) *pb.RpcObjectSetObjectTypeResponse
	ObjectSetLayout(context.Context, *pb.RpcObjectSetLayoutRequest) *pb.RpcObjectSetLayoutResponse
	ObjectSetInternalFlags(context.Context, *pb.RpcObjectSetInternalFlagsRequest) *pb.RpcObjectSetInternalFlagsResponse
	ObjectSetIsFavorite(context.Context, *pb.RpcObjectSetIsFavoriteRequest) *pb.RpcObjectSetIsFavoriteResponse
	ObjectSetIsArchived(context.Context, *pb.RpcObjectSetIsArchivedRequest) *pb.RpcObjectSetIsArchivedResponse
	ObjectSetSource(context.Context, *pb.RpcObjectSetSourceRequest) *pb.RpcObjectSetSourceResponse
	ObjectWorkspaceSetDashboard(context.Context, *pb.RpcObjectWorkspaceSetDashboardRequest) *pb.RpcObjectWorkspaceSetDashboardResponse
	ObjectListDuplicate(context.Context, *pb.RpcObjectListDuplicateRequest) *pb.RpcObjectListDuplicateResponse
	ObjectListDelete(context.Context, *pb.RpcObjectListDeleteRequest) *pb.RpcObjectListDeleteResponse
	ObjectListSetIsArchived(context.Context, *pb.RpcObjectListSetIsArchivedRequest) *pb.RpcObjectListSetIsArchivedResponse
	ObjectListSetIsFavorite(context.Context, *pb.RpcObjectListSetIsFavoriteRequest) *pb.RpcObjectListSetIsFavoriteResponse
	ObjectListSetObjectType(context.Context, *pb.RpcObjectListSetObjectTypeRequest) *pb.RpcObjectListSetObjectTypeResponse
	ObjectApplyTemplate(context.Context, *pb.RpcObjectApplyTemplateRequest) *pb.RpcObjectApplyTemplateResponse
	// ObjectToSet creates new set from given object and removes object
	ObjectToSet(context.Context, *pb.RpcObjectToSetRequest) *pb.RpcObjectToSetResponse
	ObjectToCollection(context.Context, *pb.RpcObjectToCollectionRequest) *pb.RpcObjectToCollectionResponse
	ObjectShareByLink(context.Context, *pb.RpcObjectShareByLinkRequest) *pb.RpcObjectShareByLinkResponse
	ObjectUndo(context.Context, *pb.RpcObjectUndoRequest) *pb.RpcObjectUndoResponse
	ObjectRedo(context.Context, *pb.RpcObjectRedoRequest) *pb.RpcObjectRedoResponse
	ObjectListExport(context.Context, *pb.RpcObjectListExportRequest) *pb.RpcObjectListExportResponse
	ObjectBookmarkFetch(context.Context, *pb.RpcObjectBookmarkFetchRequest) *pb.RpcObjectBookmarkFetchResponse
	ObjectToBookmark(context.Context, *pb.RpcObjectToBookmarkRequest) *pb.RpcObjectToBookmarkResponse
	ObjectImport(context.Context, *pb.RpcObjectImportRequest) *pb.RpcObjectImportResponse
	ObjectImportList(context.Context, *pb.RpcObjectImportListRequest) *pb.RpcObjectImportListResponse
	ObjectImportNotionValidateToken(context.Context, *pb.RpcObjectImportNotionValidateTokenRequest) *pb.RpcObjectImportNotionValidateTokenResponse
	ObjectImportUseCase(context.Context, *pb.RpcObjectImportUseCaseRequest) *pb.RpcObjectImportUseCaseResponse
	ObjectImportExperience(context.Context, *pb.RpcObjectImportExperienceRequest) *pb.RpcObjectImportExperienceResponse
	// Collections
	// ***
	ObjectCollectionAdd(context.Context, *pb.RpcObjectCollectionAddRequest) *pb.RpcObjectCollectionAddResponse
	ObjectCollectionRemove(context.Context, *pb.RpcObjectCollectionRemoveRequest) *pb.RpcObjectCollectionRemoveResponse
	ObjectCollectionSort(context.Context, *pb.RpcObjectCollectionSortRequest) *pb.RpcObjectCollectionSortResponse
	// Relations
	// ***
	ObjectCreateRelation(context.Context, *pb.RpcObjectCreateRelationRequest) *pb.RpcObjectCreateRelationResponse
	ObjectCreateRelationOption(context.Context, *pb.RpcObjectCreateRelationOptionRequest) *pb.RpcObjectCreateRelationOptionResponse
	RelationListRemoveOption(context.Context, *pb.RpcRelationListRemoveOptionRequest) *pb.RpcRelationListRemoveOptionResponse
	RelationOptions(context.Context, *pb.RpcRelationOptionsRequest) *pb.RpcRelationOptionsResponse
	// Object Relations
	// ***
	ObjectRelationAdd(context.Context, *pb.RpcObjectRelationAddRequest) *pb.RpcObjectRelationAddResponse
	ObjectRelationDelete(context.Context, *pb.RpcObjectRelationDeleteRequest) *pb.RpcObjectRelationDeleteResponse
	ObjectRelationAddFeatured(context.Context, *pb.RpcObjectRelationAddFeaturedRequest) *pb.RpcObjectRelationAddFeaturedResponse
	ObjectRelationRemoveFeatured(context.Context, *pb.RpcObjectRelationRemoveFeaturedRequest) *pb.RpcObjectRelationRemoveFeaturedResponse
	ObjectRelationListAvailable(context.Context, *pb.RpcObjectRelationListAvailableRequest) *pb.RpcObjectRelationListAvailableResponse
	// ObjectType commands
	// ***
	ObjectCreateObjectType(context.Context, *pb.RpcObjectCreateObjectTypeRequest) *pb.RpcObjectCreateObjectTypeResponse
	ObjectTypeRelationAdd(context.Context, *pb.RpcObjectTypeRelationAddRequest) *pb.RpcObjectTypeRelationAddResponse
	ObjectTypeRelationRemove(context.Context, *pb.RpcObjectTypeRelationRemoveRequest) *pb.RpcObjectTypeRelationRemoveResponse
	HistoryShowVersion(context.Context, *pb.RpcHistoryShowVersionRequest) *pb.RpcHistoryShowVersionResponse
	HistoryGetVersions(context.Context, *pb.RpcHistoryGetVersionsRequest) *pb.RpcHistoryGetVersionsResponse
	HistorySetVersion(context.Context, *pb.RpcHistorySetVersionRequest) *pb.RpcHistorySetVersionResponse
	// Files
	// ***
	FileOffload(context.Context, *pb.RpcFileOffloadRequest) *pb.RpcFileOffloadResponse
	FileListOffload(context.Context, *pb.RpcFileListOffloadRequest) *pb.RpcFileListOffloadResponse
	FileUpload(context.Context, *pb.RpcFileUploadRequest) *pb.RpcFileUploadResponse
	FileDownload(context.Context, *pb.RpcFileDownloadRequest) *pb.RpcFileDownloadResponse
	FileDrop(context.Context, *pb.RpcFileDropRequest) *pb.RpcFileDropResponse
	FileSpaceUsage(context.Context, *pb.RpcFileSpaceUsageRequest) *pb.RpcFileSpaceUsageResponse
	FileNodeUsage(context.Context, *pb.RpcFileNodeUsageRequest) *pb.RpcFileNodeUsageResponse
	NavigationListObjects(context.Context, *pb.RpcNavigationListObjectsRequest) *pb.RpcNavigationListObjectsResponse
	NavigationGetObjectInfoWithLinks(context.Context, *pb.RpcNavigationGetObjectInfoWithLinksRequest) *pb.RpcNavigationGetObjectInfoWithLinksResponse
	TemplateCreateFromObject(context.Context, *pb.RpcTemplateCreateFromObjectRequest) *pb.RpcTemplateCreateFromObjectResponse
	TemplateClone(context.Context, *pb.RpcTemplateCloneRequest) *pb.RpcTemplateCloneResponse
	TemplateExportAll(context.Context, *pb.RpcTemplateExportAllRequest) *pb.RpcTemplateExportAllResponse
	LinkPreview(context.Context, *pb.RpcLinkPreviewRequest) *pb.RpcLinkPreviewResponse
	UnsplashSearch(context.Context, *pb.RpcUnsplashSearchRequest) *pb.RpcUnsplashSearchResponse
	// UnsplashDownload downloads picture from unsplash by ID, put it to the IPFS and returns the hash.
	// The artist info is available in the object details
	UnsplashDownload(context.Context, *pb.RpcUnsplashDownloadRequest) *pb.RpcUnsplashDownloadResponse
	DownloadManifest(context.Context, *pb.RpcDownloadManifestRequest) *pb.RpcDownloadManifestResponse
	// General Block commands
	// ***
	BlockUpload(context.Context, *pb.RpcBlockUploadRequest) *pb.RpcBlockUploadResponse
	BlockReplace(context.Context, *pb.RpcBlockReplaceRequest) *pb.RpcBlockReplaceResponse
	BlockCreate(context.Context, *pb.RpcBlockCreateRequest) *pb.RpcBlockCreateResponse
	BlockSplit(context.Context, *pb.RpcBlockSplitRequest) *pb.RpcBlockSplitResponse
	BlockMerge(context.Context, *pb.RpcBlockMergeRequest) *pb.RpcBlockMergeResponse
	BlockCopy(context.Context, *pb.RpcBlockCopyRequest) *pb.RpcBlockCopyResponse
	BlockPaste(context.Context, *pb.RpcBlockPasteRequest) *pb.RpcBlockPasteResponse
	BlockCut(context.Context, *pb.RpcBlockCutRequest) *pb.RpcBlockCutResponse
	BlockSetFields(context.Context, *pb.RpcBlockSetFieldsRequest) *pb.RpcBlockSetFieldsResponse
	BlockExport(context.Context, *pb.RpcBlockExportRequest) *pb.RpcBlockExportResponse
	BlockSetCarriage(context.Context, *pb.RpcBlockSetCarriageRequest) *pb.RpcBlockSetCarriageResponse
	BlockListDelete(context.Context, *pb.RpcBlockListDeleteRequest) *pb.RpcBlockListDeleteResponse
	BlockListMoveToExistingObject(context.Context, *pb.RpcBlockListMoveToExistingObjectRequest) *pb.RpcBlockListMoveToExistingObjectResponse
	BlockListMoveToNewObject(context.Context, *pb.RpcBlockListMoveToNewObjectRequest) *pb.RpcBlockListMoveToNewObjectResponse
	BlockListConvertToObjects(context.Context, *pb.RpcBlockListConvertToObjectsRequest) *pb.RpcBlockListConvertToObjectsResponse
	BlockListSetFields(context.Context, *pb.RpcBlockListSetFieldsRequest) *pb.RpcBlockListSetFieldsResponse
	BlockListDuplicate(context.Context, *pb.RpcBlockListDuplicateRequest) *pb.RpcBlockListDuplicateResponse
	BlockListSetBackgroundColor(context.Context, *pb.RpcBlockListSetBackgroundColorRequest) *pb.RpcBlockListSetBackgroundColorResponse
	BlockListSetAlign(context.Context, *pb.RpcBlockListSetAlignRequest) *pb.RpcBlockListSetAlignResponse
	BlockListSetVerticalAlign(context.Context, *pb.RpcBlockListSetVerticalAlignRequest) *pb.RpcBlockListSetVerticalAlignResponse
	BlockListTurnInto(context.Context, *pb.RpcBlockListTurnIntoRequest) *pb.RpcBlockListTurnIntoResponse
	// Text Block commands
	// ***
	BlockTextSetText(context.Context, *pb.RpcBlockTextSetTextRequest) *pb.RpcBlockTextSetTextResponse
	BlockTextSetColor(context.Context, *pb.RpcBlockTextSetColorRequest) *pb.RpcBlockTextSetColorResponse
	BlockTextSetStyle(context.Context, *pb.RpcBlockTextSetStyleRequest) *pb.RpcBlockTextSetStyleResponse
	BlockTextSetChecked(context.Context, *pb.RpcBlockTextSetCheckedRequest) *pb.RpcBlockTextSetCheckedResponse
	BlockTextSetIcon(context.Context, *pb.RpcBlockTextSetIconRequest) *pb.RpcBlockTextSetIconResponse
	BlockTextListSetColor(context.Context, *pb.RpcBlockTextListSetColorRequest) *pb.RpcBlockTextListSetColorResponse
	BlockTextListSetMark(context.Context, *pb.RpcBlockTextListSetMarkRequest) *pb.RpcBlockTextListSetMarkResponse
	BlockTextListSetStyle(context.Context, *pb.RpcBlockTextListSetStyleRequest) *pb.RpcBlockTextListSetStyleResponse
	BlockTextListClearStyle(context.Context, *pb.RpcBlockTextListClearStyleRequest) *pb.RpcBlockTextListClearStyleResponse
	BlockTextListClearContent(context.Context, *pb.RpcBlockTextListClearContentRequest) *pb.RpcBlockTextListClearContentResponse
	// File block commands
	// ***
	BlockFileSetName(context.Context, *pb.RpcBlockFileSetNameRequest) *pb.RpcBlockFileSetNameResponse
	BlockImageSetName(context.Context, *pb.RpcBlockImageSetNameRequest) *pb.RpcBlockImageSetNameResponse
	BlockVideoSetName(context.Context, *pb.RpcBlockVideoSetNameRequest) *pb.RpcBlockVideoSetNameResponse
	BlockFileCreateAndUpload(context.Context, *pb.RpcBlockFileCreateAndUploadRequest) *pb.RpcBlockFileCreateAndUploadResponse
	BlockFileListSetStyle(context.Context, *pb.RpcBlockFileListSetStyleRequest) *pb.RpcBlockFileListSetStyleResponse
	// Dataview block commands
	// ***
	BlockDataviewViewCreate(context.Context, *pb.RpcBlockDataviewViewCreateRequest) *pb.RpcBlockDataviewViewCreateResponse
	BlockDataviewViewDelete(context.Context, *pb.RpcBlockDataviewViewDeleteRequest) *pb.RpcBlockDataviewViewDeleteResponse
	BlockDataviewViewUpdate(context.Context, *pb.RpcBlockDataviewViewUpdateRequest) *pb.RpcBlockDataviewViewUpdateResponse
	BlockDataviewViewSetActive(context.Context, *pb.RpcBlockDataviewViewSetActiveRequest) *pb.RpcBlockDataviewViewSetActiveResponse
	BlockDataviewViewSetPosition(context.Context, *pb.RpcBlockDataviewViewSetPositionRequest) *pb.RpcBlockDataviewViewSetPositionResponse
	BlockDataviewSetSource(context.Context, *pb.RpcBlockDataviewSetSourceRequest) *pb.RpcBlockDataviewSetSourceResponse
	BlockDataviewRelationAdd(context.Context, *pb.RpcBlockDataviewRelationAddRequest) *pb.RpcBlockDataviewRelationAddResponse
	BlockDataviewRelationDelete(context.Context, *pb.RpcBlockDataviewRelationDeleteRequest) *pb.RpcBlockDataviewRelationDeleteResponse
	BlockDataviewRelationListAvailable(context.Context, *pb.RpcBlockDataviewRelationListAvailableRequest) *pb.RpcBlockDataviewRelationListAvailableResponse
	BlockDataviewGroupOrderUpdate(context.Context, *pb.RpcBlockDataviewGroupOrderUpdateRequest) *pb.RpcBlockDataviewGroupOrderUpdateResponse
	BlockDataviewObjectOrderUpdate(context.Context, *pb.RpcBlockDataviewObjectOrderUpdateRequest) *pb.RpcBlockDataviewObjectOrderUpdateResponse
	BlockDataviewObjectOrderMove(context.Context, *pb.RpcBlockDataviewObjectOrderMoveRequest) *pb.RpcBlockDataviewObjectOrderMoveResponse
	BlockDataviewCreateFromExistingObject(context.Context, *pb.RpcBlockDataviewCreateFromExistingObjectRequest) *pb.RpcBlockDataviewCreateFromExistingObjectResponse
	BlockDataviewFilterAdd(context.Context, *pb.RpcBlockDataviewFilterAddRequest) *pb.RpcBlockDataviewFilterAddResponse
	BlockDataviewFilterRemove(context.Context, *pb.RpcBlockDataviewFilterRemoveRequest) *pb.RpcBlockDataviewFilterRemoveResponse
	BlockDataviewFilterReplace(context.Context, *pb.RpcBlockDataviewFilterReplaceRequest) *pb.RpcBlockDataviewFilterReplaceResponse
	BlockDataviewFilterSort(context.Context, *pb.RpcBlockDataviewFilterSortRequest) *pb.RpcBlockDataviewFilterSortResponse
	BlockDataviewSortAdd(context.Context, *pb.RpcBlockDataviewSortAddRequest) *pb.RpcBlockDataviewSortAddResponse
	BlockDataviewSortRemove(context.Context, *pb.RpcBlockDataviewSortRemoveRequest) *pb.RpcBlockDataviewSortRemoveResponse
	BlockDataviewSortReplace(context.Context, *pb.RpcBlockDataviewSortReplaceRequest) *pb.RpcBlockDataviewSortReplaceResponse
	BlockDataviewSortSort(context.Context, *pb.RpcBlockDataviewSortSortRequest) *pb.RpcBlockDataviewSortSortResponse
	BlockDataviewViewRelationAdd(context.Context, *pb.RpcBlockDataviewViewRelationAddRequest) *pb.RpcBlockDataviewViewRelationAddResponse
	BlockDataviewViewRelationRemove(context.Context, *pb.RpcBlockDataviewViewRelationRemoveRequest) *pb.RpcBlockDataviewViewRelationRemoveResponse
	BlockDataviewViewRelationReplace(context.Context, *pb.RpcBlockDataviewViewRelationReplaceRequest) *pb.RpcBlockDataviewViewRelationReplaceResponse
	BlockDataviewViewRelationSort(context.Context, *pb.RpcBlockDataviewViewRelationSortRequest) *pb.RpcBlockDataviewViewRelationSortResponse
	// Simple table block commands
	// ***
	BlockTableCreate(context.Context, *pb.RpcBlockTableCreateRequest) *pb.RpcBlockTableCreateResponse
	BlockTableExpand(context.Context, *pb.RpcBlockTableExpandRequest) *pb.RpcBlockTableExpandResponse
	BlockTableRowCreate(context.Context, *pb.RpcBlockTableRowCreateRequest) *pb.RpcBlockTableRowCreateResponse
	BlockTableRowDelete(context.Context, *pb.RpcBlockTableRowDeleteRequest) *pb.RpcBlockTableRowDeleteResponse
	BlockTableRowDuplicate(context.Context, *pb.RpcBlockTableRowDuplicateRequest) *pb.RpcBlockTableRowDuplicateResponse
	BlockTableRowSetHeader(context.Context, *pb.RpcBlockTableRowSetHeaderRequest) *pb.RpcBlockTableRowSetHeaderResponse
	BlockTableColumnCreate(context.Context, *pb.RpcBlockTableColumnCreateRequest) *pb.RpcBlockTableColumnCreateResponse
	BlockTableColumnMove(context.Context, *pb.RpcBlockTableColumnMoveRequest) *pb.RpcBlockTableColumnMoveResponse
	BlockTableColumnDelete(context.Context, *pb.RpcBlockTableColumnDeleteRequest) *pb.RpcBlockTableColumnDeleteResponse
	BlockTableColumnDuplicate(context.Context, *pb.RpcBlockTableColumnDuplicateRequest) *pb.RpcBlockTableColumnDuplicateResponse
	BlockTableRowListFill(context.Context, *pb.RpcBlockTableRowListFillRequest) *pb.RpcBlockTableRowListFillResponse
	BlockTableRowListClean(context.Context, *pb.RpcBlockTableRowListCleanRequest) *pb.RpcBlockTableRowListCleanResponse
	BlockTableColumnListFill(context.Context, *pb.RpcBlockTableColumnListFillRequest) *pb.RpcBlockTableColumnListFillResponse
	BlockTableSort(context.Context, *pb.RpcBlockTableSortRequest) *pb.RpcBlockTableSortResponse
	// Widget commands
	// ***
	BlockCreateWidget(context.Context, *pb.RpcBlockCreateWidgetRequest) *pb.RpcBlockCreateWidgetResponse
	BlockWidgetSetTargetId(context.Context, *pb.RpcBlockWidgetSetTargetIdRequest) *pb.RpcBlockWidgetSetTargetIdResponse
	BlockWidgetSetLayout(context.Context, *pb.RpcBlockWidgetSetLayoutRequest) *pb.RpcBlockWidgetSetLayoutResponse
	BlockWidgetSetLimit(context.Context, *pb.RpcBlockWidgetSetLimitRequest) *pb.RpcBlockWidgetSetLimitResponse
	BlockWidgetSetViewId(context.Context, *pb.RpcBlockWidgetSetViewIdRequest) *pb.RpcBlockWidgetSetViewIdResponse
	// Other specific block commands
	// ***
	BlockLinkCreateWithObject(context.Context, *pb.RpcBlockLinkCreateWithObjectRequest) *pb.RpcBlockLinkCreateWithObjectResponse
	BlockLinkListSetAppearance(context.Context, *pb.RpcBlockLinkListSetAppearanceRequest) *pb.RpcBlockLinkListSetAppearanceResponse
	BlockBookmarkFetch(context.Context, *pb.RpcBlockBookmarkFetchRequest) *pb.RpcBlockBookmarkFetchResponse
	BlockBookmarkCreateAndFetch(context.Context, *pb.RpcBlockBookmarkCreateAndFetchRequest) *pb.RpcBlockBookmarkCreateAndFetchResponse
	BlockRelationSetKey(context.Context, *pb.RpcBlockRelationSetKeyRequest) *pb.RpcBlockRelationSetKeyResponse
	BlockRelationAdd(context.Context, *pb.RpcBlockRelationAddRequest) *pb.RpcBlockRelationAddResponse
	BlockDivListSetStyle(context.Context, *pb.RpcBlockDivListSetStyleRequest) *pb.RpcBlockDivListSetStyleResponse
	BlockLatexSetText(context.Context, *pb.RpcBlockLatexSetTextRequest) *pb.RpcBlockLatexSetTextResponse
	ProcessCancel(context.Context, *pb.RpcProcessCancelRequest) *pb.RpcProcessCancelResponse
	LogSend(context.Context, *pb.RpcLogSendRequest) *pb.RpcLogSendResponse
	DebugTree(context.Context, *pb.RpcDebugTreeRequest) *pb.RpcDebugTreeResponse
	DebugTreeHeads(context.Context, *pb.RpcDebugTreeHeadsRequest) *pb.RpcDebugTreeHeadsResponse
	DebugSpaceSummary(context.Context, *pb.RpcDebugSpaceSummaryRequest) *pb.RpcDebugSpaceSummaryResponse
	DebugStackGoroutines(context.Context, *pb.RpcDebugStackGoroutinesRequest) *pb.RpcDebugStackGoroutinesResponse
	DebugExportLocalstore(context.Context, *pb.RpcDebugExportLocalstoreRequest) *pb.RpcDebugExportLocalstoreResponse
	DebugPing(context.Context, *pb.RpcDebugPingRequest) *pb.RpcDebugPingResponse
	DebugSubscriptions(context.Context, *pb.RpcDebugSubscriptionsRequest) *pb.RpcDebugSubscriptionsResponse
	DebugOpenedObjects(context.Context, *pb.RpcDebugOpenedObjectsRequest) *pb.RpcDebugOpenedObjectsResponse
	MetricsSetParameters(context.Context, *pb.RpcMetricsSetParametersRequest) *pb.RpcMetricsSetParametersResponse
	// used only for lib-server via grpc
	ListenSessionEvents(*pb.StreamRequest, ClientCommands_ListenSessionEventsServer)
	NotificationList(context.Context, *pb.RpcNotificationListRequest) *pb.RpcNotificationListResponse
	NotificationReply(context.Context, *pb.RpcNotificationReplyRequest) *pb.RpcNotificationReplyResponse
}

// UnimplementedClientCommandsServer can be embedded to have forward compatible implementations.
type UnimplementedClientCommandsServer struct {
}

func (*UnimplementedClientCommandsServer) AppGetVersion(ctx context.Context, req *pb.RpcAppGetVersionRequest) *pb.RpcAppGetVersionResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) AppSetDeviceState(ctx context.Context, req *pb.RpcAppSetDeviceStateRequest) *pb.RpcAppSetDeviceStateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) AppShutdown(ctx context.Context, req *pb.RpcAppShutdownRequest) *pb.RpcAppShutdownResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) WalletCreate(ctx context.Context, req *pb.RpcWalletCreateRequest) *pb.RpcWalletCreateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) WalletRecover(ctx context.Context, req *pb.RpcWalletRecoverRequest) *pb.RpcWalletRecoverResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) WalletConvert(ctx context.Context, req *pb.RpcWalletConvertRequest) *pb.RpcWalletConvertResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) WalletCreateSession(ctx context.Context, req *pb.RpcWalletCreateSessionRequest) *pb.RpcWalletCreateSessionResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) WalletCloseSession(ctx context.Context, req *pb.RpcWalletCloseSessionRequest) *pb.RpcWalletCloseSessionResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) WorkspaceCreate(ctx context.Context, req *pb.RpcWorkspaceCreateRequest) *pb.RpcWorkspaceCreateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) WorkspaceOpen(ctx context.Context, req *pb.RpcWorkspaceOpenRequest) *pb.RpcWorkspaceOpenResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) WorkspaceObjectAdd(ctx context.Context, req *pb.RpcWorkspaceObjectAddRequest) *pb.RpcWorkspaceObjectAddResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) WorkspaceObjectListAdd(ctx context.Context, req *pb.RpcWorkspaceObjectListAddRequest) *pb.RpcWorkspaceObjectListAddResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) WorkspaceObjectListRemove(ctx context.Context, req *pb.RpcWorkspaceObjectListRemoveRequest) *pb.RpcWorkspaceObjectListRemoveResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) WorkspaceSelect(ctx context.Context, req *pb.RpcWorkspaceSelectRequest) *pb.RpcWorkspaceSelectResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) WorkspaceGetCurrent(ctx context.Context, req *pb.RpcWorkspaceGetCurrentRequest) *pb.RpcWorkspaceGetCurrentResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) WorkspaceGetAll(ctx context.Context, req *pb.RpcWorkspaceGetAllRequest) *pb.RpcWorkspaceGetAllResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) WorkspaceSetInfo(ctx context.Context, req *pb.RpcWorkspaceSetInfoRequest) *pb.RpcWorkspaceSetInfoResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) WorkspaceExport(ctx context.Context, req *pb.RpcWorkspaceExportRequest) *pb.RpcWorkspaceExportResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) AccountRecover(ctx context.Context, req *pb.RpcAccountRecoverRequest) *pb.RpcAccountRecoverResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) AccountCreate(ctx context.Context, req *pb.RpcAccountCreateRequest) *pb.RpcAccountCreateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) AccountDelete(ctx context.Context, req *pb.RpcAccountDeleteRequest) *pb.RpcAccountDeleteResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) AccountRevertDeletion(ctx context.Context, req *pb.RpcAccountRevertDeletionRequest) *pb.RpcAccountRevertDeletionResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) AccountSelect(ctx context.Context, req *pb.RpcAccountSelectRequest) *pb.RpcAccountSelectResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) AccountEnableLocalNetworkSync(ctx context.Context, req *pb.RpcAccountEnableLocalNetworkSyncRequest) *pb.RpcAccountEnableLocalNetworkSyncResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) AccountStop(ctx context.Context, req *pb.RpcAccountStopRequest) *pb.RpcAccountStopResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) AccountMove(ctx context.Context, req *pb.RpcAccountMoveRequest) *pb.RpcAccountMoveResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) AccountConfigUpdate(ctx context.Context, req *pb.RpcAccountConfigUpdateRequest) *pb.RpcAccountConfigUpdateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) AccountRecoverFromLegacyExport(ctx context.Context, req *pb.RpcAccountRecoverFromLegacyExportRequest) *pb.RpcAccountRecoverFromLegacyExportResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) SpaceDelete(ctx context.Context, req *pb.RpcSpaceDeleteRequest) *pb.RpcSpaceDeleteResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectOpen(ctx context.Context, req *pb.RpcObjectOpenRequest) *pb.RpcObjectOpenResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectClose(ctx context.Context, req *pb.RpcObjectCloseRequest) *pb.RpcObjectCloseResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectShow(ctx context.Context, req *pb.RpcObjectShowRequest) *pb.RpcObjectShowResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectCreate(ctx context.Context, req *pb.RpcObjectCreateRequest) *pb.RpcObjectCreateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectCreateBookmark(ctx context.Context, req *pb.RpcObjectCreateBookmarkRequest) *pb.RpcObjectCreateBookmarkResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectCreateSet(ctx context.Context, req *pb.RpcObjectCreateSetRequest) *pb.RpcObjectCreateSetResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectGraph(ctx context.Context, req *pb.RpcObjectGraphRequest) *pb.RpcObjectGraphResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectSearch(ctx context.Context, req *pb.RpcObjectSearchRequest) *pb.RpcObjectSearchResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectSearchSubscribe(ctx context.Context, req *pb.RpcObjectSearchSubscribeRequest) *pb.RpcObjectSearchSubscribeResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectSubscribeIds(ctx context.Context, req *pb.RpcObjectSubscribeIdsRequest) *pb.RpcObjectSubscribeIdsResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectGroupsSubscribe(ctx context.Context, req *pb.RpcObjectGroupsSubscribeRequest) *pb.RpcObjectGroupsSubscribeResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectSearchUnsubscribe(ctx context.Context, req *pb.RpcObjectSearchUnsubscribeRequest) *pb.RpcObjectSearchUnsubscribeResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectSetDetails(ctx context.Context, req *pb.RpcObjectSetDetailsRequest) *pb.RpcObjectSetDetailsResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectDuplicate(ctx context.Context, req *pb.RpcObjectDuplicateRequest) *pb.RpcObjectDuplicateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectSetObjectType(ctx context.Context, req *pb.RpcObjectSetObjectTypeRequest) *pb.RpcObjectSetObjectTypeResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectSetLayout(ctx context.Context, req *pb.RpcObjectSetLayoutRequest) *pb.RpcObjectSetLayoutResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectSetInternalFlags(ctx context.Context, req *pb.RpcObjectSetInternalFlagsRequest) *pb.RpcObjectSetInternalFlagsResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectSetIsFavorite(ctx context.Context, req *pb.RpcObjectSetIsFavoriteRequest) *pb.RpcObjectSetIsFavoriteResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectSetIsArchived(ctx context.Context, req *pb.RpcObjectSetIsArchivedRequest) *pb.RpcObjectSetIsArchivedResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectSetSource(ctx context.Context, req *pb.RpcObjectSetSourceRequest) *pb.RpcObjectSetSourceResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectWorkspaceSetDashboard(ctx context.Context, req *pb.RpcObjectWorkspaceSetDashboardRequest) *pb.RpcObjectWorkspaceSetDashboardResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectListDuplicate(ctx context.Context, req *pb.RpcObjectListDuplicateRequest) *pb.RpcObjectListDuplicateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectListDelete(ctx context.Context, req *pb.RpcObjectListDeleteRequest) *pb.RpcObjectListDeleteResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectListSetIsArchived(ctx context.Context, req *pb.RpcObjectListSetIsArchivedRequest) *pb.RpcObjectListSetIsArchivedResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectListSetIsFavorite(ctx context.Context, req *pb.RpcObjectListSetIsFavoriteRequest) *pb.RpcObjectListSetIsFavoriteResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectListSetObjectType(ctx context.Context, req *pb.RpcObjectListSetObjectTypeRequest) *pb.RpcObjectListSetObjectTypeResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectApplyTemplate(ctx context.Context, req *pb.RpcObjectApplyTemplateRequest) *pb.RpcObjectApplyTemplateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectToSet(ctx context.Context, req *pb.RpcObjectToSetRequest) *pb.RpcObjectToSetResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectToCollection(ctx context.Context, req *pb.RpcObjectToCollectionRequest) *pb.RpcObjectToCollectionResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectShareByLink(ctx context.Context, req *pb.RpcObjectShareByLinkRequest) *pb.RpcObjectShareByLinkResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectUndo(ctx context.Context, req *pb.RpcObjectUndoRequest) *pb.RpcObjectUndoResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectRedo(ctx context.Context, req *pb.RpcObjectRedoRequest) *pb.RpcObjectRedoResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectListExport(ctx context.Context, req *pb.RpcObjectListExportRequest) *pb.RpcObjectListExportResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectBookmarkFetch(ctx context.Context, req *pb.RpcObjectBookmarkFetchRequest) *pb.RpcObjectBookmarkFetchResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectToBookmark(ctx context.Context, req *pb.RpcObjectToBookmarkRequest) *pb.RpcObjectToBookmarkResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectImport(ctx context.Context, req *pb.RpcObjectImportRequest) *pb.RpcObjectImportResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectImportList(ctx context.Context, req *pb.RpcObjectImportListRequest) *pb.RpcObjectImportListResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectImportNotionValidateToken(ctx context.Context, req *pb.RpcObjectImportNotionValidateTokenRequest) *pb.RpcObjectImportNotionValidateTokenResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectImportUseCase(ctx context.Context, req *pb.RpcObjectImportUseCaseRequest) *pb.RpcObjectImportUseCaseResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectImportExperience(ctx context.Context, req *pb.RpcObjectImportExperienceRequest) *pb.RpcObjectImportExperienceResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectCollectionAdd(ctx context.Context, req *pb.RpcObjectCollectionAddRequest) *pb.RpcObjectCollectionAddResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectCollectionRemove(ctx context.Context, req *pb.RpcObjectCollectionRemoveRequest) *pb.RpcObjectCollectionRemoveResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectCollectionSort(ctx context.Context, req *pb.RpcObjectCollectionSortRequest) *pb.RpcObjectCollectionSortResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectCreateRelation(ctx context.Context, req *pb.RpcObjectCreateRelationRequest) *pb.RpcObjectCreateRelationResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectCreateRelationOption(ctx context.Context, req *pb.RpcObjectCreateRelationOptionRequest) *pb.RpcObjectCreateRelationOptionResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) RelationListRemoveOption(ctx context.Context, req *pb.RpcRelationListRemoveOptionRequest) *pb.RpcRelationListRemoveOptionResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) RelationOptions(ctx context.Context, req *pb.RpcRelationOptionsRequest) *pb.RpcRelationOptionsResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectRelationAdd(ctx context.Context, req *pb.RpcObjectRelationAddRequest) *pb.RpcObjectRelationAddResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectRelationDelete(ctx context.Context, req *pb.RpcObjectRelationDeleteRequest) *pb.RpcObjectRelationDeleteResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectRelationAddFeatured(ctx context.Context, req *pb.RpcObjectRelationAddFeaturedRequest) *pb.RpcObjectRelationAddFeaturedResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectRelationRemoveFeatured(ctx context.Context, req *pb.RpcObjectRelationRemoveFeaturedRequest) *pb.RpcObjectRelationRemoveFeaturedResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectRelationListAvailable(ctx context.Context, req *pb.RpcObjectRelationListAvailableRequest) *pb.RpcObjectRelationListAvailableResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectCreateObjectType(ctx context.Context, req *pb.RpcObjectCreateObjectTypeRequest) *pb.RpcObjectCreateObjectTypeResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectTypeRelationAdd(ctx context.Context, req *pb.RpcObjectTypeRelationAddRequest) *pb.RpcObjectTypeRelationAddResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ObjectTypeRelationRemove(ctx context.Context, req *pb.RpcObjectTypeRelationRemoveRequest) *pb.RpcObjectTypeRelationRemoveResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) HistoryShowVersion(ctx context.Context, req *pb.RpcHistoryShowVersionRequest) *pb.RpcHistoryShowVersionResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) HistoryGetVersions(ctx context.Context, req *pb.RpcHistoryGetVersionsRequest) *pb.RpcHistoryGetVersionsResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) HistorySetVersion(ctx context.Context, req *pb.RpcHistorySetVersionRequest) *pb.RpcHistorySetVersionResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) FileOffload(ctx context.Context, req *pb.RpcFileOffloadRequest) *pb.RpcFileOffloadResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) FileListOffload(ctx context.Context, req *pb.RpcFileListOffloadRequest) *pb.RpcFileListOffloadResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) FileUpload(ctx context.Context, req *pb.RpcFileUploadRequest) *pb.RpcFileUploadResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) FileDownload(ctx context.Context, req *pb.RpcFileDownloadRequest) *pb.RpcFileDownloadResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) FileDrop(ctx context.Context, req *pb.RpcFileDropRequest) *pb.RpcFileDropResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) FileSpaceUsage(ctx context.Context, req *pb.RpcFileSpaceUsageRequest) *pb.RpcFileSpaceUsageResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) FileNodeUsage(ctx context.Context, req *pb.RpcFileNodeUsageRequest) *pb.RpcFileNodeUsageResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) NavigationListObjects(ctx context.Context, req *pb.RpcNavigationListObjectsRequest) *pb.RpcNavigationListObjectsResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) NavigationGetObjectInfoWithLinks(ctx context.Context, req *pb.RpcNavigationGetObjectInfoWithLinksRequest) *pb.RpcNavigationGetObjectInfoWithLinksResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) TemplateCreateFromObject(ctx context.Context, req *pb.RpcTemplateCreateFromObjectRequest) *pb.RpcTemplateCreateFromObjectResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) TemplateClone(ctx context.Context, req *pb.RpcTemplateCloneRequest) *pb.RpcTemplateCloneResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) TemplateExportAll(ctx context.Context, req *pb.RpcTemplateExportAllRequest) *pb.RpcTemplateExportAllResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) LinkPreview(ctx context.Context, req *pb.RpcLinkPreviewRequest) *pb.RpcLinkPreviewResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) UnsplashSearch(ctx context.Context, req *pb.RpcUnsplashSearchRequest) *pb.RpcUnsplashSearchResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) UnsplashDownload(ctx context.Context, req *pb.RpcUnsplashDownloadRequest) *pb.RpcUnsplashDownloadResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) DownloadManifest(ctx context.Context, req *pb.RpcDownloadManifestRequest) *pb.RpcDownloadManifestResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockUpload(ctx context.Context, req *pb.RpcBlockUploadRequest) *pb.RpcBlockUploadResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockReplace(ctx context.Context, req *pb.RpcBlockReplaceRequest) *pb.RpcBlockReplaceResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockCreate(ctx context.Context, req *pb.RpcBlockCreateRequest) *pb.RpcBlockCreateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSplit(ctx context.Context, req *pb.RpcBlockSplitRequest) *pb.RpcBlockSplitResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockMerge(ctx context.Context, req *pb.RpcBlockMergeRequest) *pb.RpcBlockMergeResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockCopy(ctx context.Context, req *pb.RpcBlockCopyRequest) *pb.RpcBlockCopyResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockPaste(ctx context.Context, req *pb.RpcBlockPasteRequest) *pb.RpcBlockPasteResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockCut(ctx context.Context, req *pb.RpcBlockCutRequest) *pb.RpcBlockCutResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetFields(ctx context.Context, req *pb.RpcBlockSetFieldsRequest) *pb.RpcBlockSetFieldsResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockExport(ctx context.Context, req *pb.RpcBlockExportRequest) *pb.RpcBlockExportResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockSetCarriage(ctx context.Context, req *pb.RpcBlockSetCarriageRequest) *pb.RpcBlockSetCarriageResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockListDelete(ctx context.Context, req *pb.RpcBlockListDeleteRequest) *pb.RpcBlockListDeleteResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockListMoveToExistingObject(ctx context.Context, req *pb.RpcBlockListMoveToExistingObjectRequest) *pb.RpcBlockListMoveToExistingObjectResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockListMoveToNewObject(ctx context.Context, req *pb.RpcBlockListMoveToNewObjectRequest) *pb.RpcBlockListMoveToNewObjectResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockListConvertToObjects(ctx context.Context, req *pb.RpcBlockListConvertToObjectsRequest) *pb.RpcBlockListConvertToObjectsResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockListSetFields(ctx context.Context, req *pb.RpcBlockListSetFieldsRequest) *pb.RpcBlockListSetFieldsResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockListDuplicate(ctx context.Context, req *pb.RpcBlockListDuplicateRequest) *pb.RpcBlockListDuplicateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockListSetBackgroundColor(ctx context.Context, req *pb.RpcBlockListSetBackgroundColorRequest) *pb.RpcBlockListSetBackgroundColorResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockListSetAlign(ctx context.Context, req *pb.RpcBlockListSetAlignRequest) *pb.RpcBlockListSetAlignResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockListSetVerticalAlign(ctx context.Context, req *pb.RpcBlockListSetVerticalAlignRequest) *pb.RpcBlockListSetVerticalAlignResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockListTurnInto(ctx context.Context, req *pb.RpcBlockListTurnIntoRequest) *pb.RpcBlockListTurnIntoResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockTextSetText(ctx context.Context, req *pb.RpcBlockTextSetTextRequest) *pb.RpcBlockTextSetTextResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockTextSetColor(ctx context.Context, req *pb.RpcBlockTextSetColorRequest) *pb.RpcBlockTextSetColorResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockTextSetStyle(ctx context.Context, req *pb.RpcBlockTextSetStyleRequest) *pb.RpcBlockTextSetStyleResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockTextSetChecked(ctx context.Context, req *pb.RpcBlockTextSetCheckedRequest) *pb.RpcBlockTextSetCheckedResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockTextSetIcon(ctx context.Context, req *pb.RpcBlockTextSetIconRequest) *pb.RpcBlockTextSetIconResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockTextListSetColor(ctx context.Context, req *pb.RpcBlockTextListSetColorRequest) *pb.RpcBlockTextListSetColorResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockTextListSetMark(ctx context.Context, req *pb.RpcBlockTextListSetMarkRequest) *pb.RpcBlockTextListSetMarkResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockTextListSetStyle(ctx context.Context, req *pb.RpcBlockTextListSetStyleRequest) *pb.RpcBlockTextListSetStyleResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockTextListClearStyle(ctx context.Context, req *pb.RpcBlockTextListClearStyleRequest) *pb.RpcBlockTextListClearStyleResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockTextListClearContent(ctx context.Context, req *pb.RpcBlockTextListClearContentRequest) *pb.RpcBlockTextListClearContentResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockFileSetName(ctx context.Context, req *pb.RpcBlockFileSetNameRequest) *pb.RpcBlockFileSetNameResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockImageSetName(ctx context.Context, req *pb.RpcBlockImageSetNameRequest) *pb.RpcBlockImageSetNameResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockVideoSetName(ctx context.Context, req *pb.RpcBlockVideoSetNameRequest) *pb.RpcBlockVideoSetNameResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockFileCreateAndUpload(ctx context.Context, req *pb.RpcBlockFileCreateAndUploadRequest) *pb.RpcBlockFileCreateAndUploadResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockFileListSetStyle(ctx context.Context, req *pb.RpcBlockFileListSetStyleRequest) *pb.RpcBlockFileListSetStyleResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewViewCreate(ctx context.Context, req *pb.RpcBlockDataviewViewCreateRequest) *pb.RpcBlockDataviewViewCreateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewViewDelete(ctx context.Context, req *pb.RpcBlockDataviewViewDeleteRequest) *pb.RpcBlockDataviewViewDeleteResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewViewUpdate(ctx context.Context, req *pb.RpcBlockDataviewViewUpdateRequest) *pb.RpcBlockDataviewViewUpdateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewViewSetActive(ctx context.Context, req *pb.RpcBlockDataviewViewSetActiveRequest) *pb.RpcBlockDataviewViewSetActiveResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewViewSetPosition(ctx context.Context, req *pb.RpcBlockDataviewViewSetPositionRequest) *pb.RpcBlockDataviewViewSetPositionResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewSetSource(ctx context.Context, req *pb.RpcBlockDataviewSetSourceRequest) *pb.RpcBlockDataviewSetSourceResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewRelationAdd(ctx context.Context, req *pb.RpcBlockDataviewRelationAddRequest) *pb.RpcBlockDataviewRelationAddResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewRelationDelete(ctx context.Context, req *pb.RpcBlockDataviewRelationDeleteRequest) *pb.RpcBlockDataviewRelationDeleteResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewRelationListAvailable(ctx context.Context, req *pb.RpcBlockDataviewRelationListAvailableRequest) *pb.RpcBlockDataviewRelationListAvailableResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewGroupOrderUpdate(ctx context.Context, req *pb.RpcBlockDataviewGroupOrderUpdateRequest) *pb.RpcBlockDataviewGroupOrderUpdateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewObjectOrderUpdate(ctx context.Context, req *pb.RpcBlockDataviewObjectOrderUpdateRequest) *pb.RpcBlockDataviewObjectOrderUpdateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewObjectOrderMove(ctx context.Context, req *pb.RpcBlockDataviewObjectOrderMoveRequest) *pb.RpcBlockDataviewObjectOrderMoveResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewCreateFromExistingObject(ctx context.Context, req *pb.RpcBlockDataviewCreateFromExistingObjectRequest) *pb.RpcBlockDataviewCreateFromExistingObjectResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewFilterAdd(ctx context.Context, req *pb.RpcBlockDataviewFilterAddRequest) *pb.RpcBlockDataviewFilterAddResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewFilterRemove(ctx context.Context, req *pb.RpcBlockDataviewFilterRemoveRequest) *pb.RpcBlockDataviewFilterRemoveResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewFilterReplace(ctx context.Context, req *pb.RpcBlockDataviewFilterReplaceRequest) *pb.RpcBlockDataviewFilterReplaceResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewFilterSort(ctx context.Context, req *pb.RpcBlockDataviewFilterSortRequest) *pb.RpcBlockDataviewFilterSortResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewSortAdd(ctx context.Context, req *pb.RpcBlockDataviewSortAddRequest) *pb.RpcBlockDataviewSortAddResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewSortRemove(ctx context.Context, req *pb.RpcBlockDataviewSortRemoveRequest) *pb.RpcBlockDataviewSortRemoveResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewSortReplace(ctx context.Context, req *pb.RpcBlockDataviewSortReplaceRequest) *pb.RpcBlockDataviewSortReplaceResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewSortSort(ctx context.Context, req *pb.RpcBlockDataviewSortSortRequest) *pb.RpcBlockDataviewSortSortResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewViewRelationAdd(ctx context.Context, req *pb.RpcBlockDataviewViewRelationAddRequest) *pb.RpcBlockDataviewViewRelationAddResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewViewRelationRemove(ctx context.Context, req *pb.RpcBlockDataviewViewRelationRemoveRequest) *pb.RpcBlockDataviewViewRelationRemoveResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewViewRelationReplace(ctx context.Context, req *pb.RpcBlockDataviewViewRelationReplaceRequest) *pb.RpcBlockDataviewViewRelationReplaceResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDataviewViewRelationSort(ctx context.Context, req *pb.RpcBlockDataviewViewRelationSortRequest) *pb.RpcBlockDataviewViewRelationSortResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockTableCreate(ctx context.Context, req *pb.RpcBlockTableCreateRequest) *pb.RpcBlockTableCreateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockTableExpand(ctx context.Context, req *pb.RpcBlockTableExpandRequest) *pb.RpcBlockTableExpandResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockTableRowCreate(ctx context.Context, req *pb.RpcBlockTableRowCreateRequest) *pb.RpcBlockTableRowCreateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockTableRowDelete(ctx context.Context, req *pb.RpcBlockTableRowDeleteRequest) *pb.RpcBlockTableRowDeleteResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockTableRowDuplicate(ctx context.Context, req *pb.RpcBlockTableRowDuplicateRequest) *pb.RpcBlockTableRowDuplicateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockTableRowSetHeader(ctx context.Context, req *pb.RpcBlockTableRowSetHeaderRequest) *pb.RpcBlockTableRowSetHeaderResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockTableColumnCreate(ctx context.Context, req *pb.RpcBlockTableColumnCreateRequest) *pb.RpcBlockTableColumnCreateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockTableColumnMove(ctx context.Context, req *pb.RpcBlockTableColumnMoveRequest) *pb.RpcBlockTableColumnMoveResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockTableColumnDelete(ctx context.Context, req *pb.RpcBlockTableColumnDeleteRequest) *pb.RpcBlockTableColumnDeleteResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockTableColumnDuplicate(ctx context.Context, req *pb.RpcBlockTableColumnDuplicateRequest) *pb.RpcBlockTableColumnDuplicateResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockTableRowListFill(ctx context.Context, req *pb.RpcBlockTableRowListFillRequest) *pb.RpcBlockTableRowListFillResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockTableRowListClean(ctx context.Context, req *pb.RpcBlockTableRowListCleanRequest) *pb.RpcBlockTableRowListCleanResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockTableColumnListFill(ctx context.Context, req *pb.RpcBlockTableColumnListFillRequest) *pb.RpcBlockTableColumnListFillResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockTableSort(ctx context.Context, req *pb.RpcBlockTableSortRequest) *pb.RpcBlockTableSortResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockCreateWidget(ctx context.Context, req *pb.RpcBlockCreateWidgetRequest) *pb.RpcBlockCreateWidgetResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockWidgetSetTargetId(ctx context.Context, req *pb.RpcBlockWidgetSetTargetIdRequest) *pb.RpcBlockWidgetSetTargetIdResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockWidgetSetLayout(ctx context.Context, req *pb.RpcBlockWidgetSetLayoutRequest) *pb.RpcBlockWidgetSetLayoutResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockWidgetSetLimit(ctx context.Context, req *pb.RpcBlockWidgetSetLimitRequest) *pb.RpcBlockWidgetSetLimitResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockWidgetSetViewId(ctx context.Context, req *pb.RpcBlockWidgetSetViewIdRequest) *pb.RpcBlockWidgetSetViewIdResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockLinkCreateWithObject(ctx context.Context, req *pb.RpcBlockLinkCreateWithObjectRequest) *pb.RpcBlockLinkCreateWithObjectResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockLinkListSetAppearance(ctx context.Context, req *pb.RpcBlockLinkListSetAppearanceRequest) *pb.RpcBlockLinkListSetAppearanceResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockBookmarkFetch(ctx context.Context, req *pb.RpcBlockBookmarkFetchRequest) *pb.RpcBlockBookmarkFetchResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockBookmarkCreateAndFetch(ctx context.Context, req *pb.RpcBlockBookmarkCreateAndFetchRequest) *pb.RpcBlockBookmarkCreateAndFetchResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockRelationSetKey(ctx context.Context, req *pb.RpcBlockRelationSetKeyRequest) *pb.RpcBlockRelationSetKeyResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockRelationAdd(ctx context.Context, req *pb.RpcBlockRelationAddRequest) *pb.RpcBlockRelationAddResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockDivListSetStyle(ctx context.Context, req *pb.RpcBlockDivListSetStyleRequest) *pb.RpcBlockDivListSetStyleResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) BlockLatexSetText(ctx context.Context, req *pb.RpcBlockLatexSetTextRequest) *pb.RpcBlockLatexSetTextResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ProcessCancel(ctx context.Context, req *pb.RpcProcessCancelRequest) *pb.RpcProcessCancelResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) LogSend(ctx context.Context, req *pb.RpcLogSendRequest) *pb.RpcLogSendResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) DebugTree(ctx context.Context, req *pb.RpcDebugTreeRequest) *pb.RpcDebugTreeResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) DebugTreeHeads(ctx context.Context, req *pb.RpcDebugTreeHeadsRequest) *pb.RpcDebugTreeHeadsResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) DebugSpaceSummary(ctx context.Context, req *pb.RpcDebugSpaceSummaryRequest) *pb.RpcDebugSpaceSummaryResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) DebugStackGoroutines(ctx context.Context, req *pb.RpcDebugStackGoroutinesRequest) *pb.RpcDebugStackGoroutinesResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) DebugExportLocalstore(ctx context.Context, req *pb.RpcDebugExportLocalstoreRequest) *pb.RpcDebugExportLocalstoreResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) DebugPing(ctx context.Context, req *pb.RpcDebugPingRequest) *pb.RpcDebugPingResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) DebugSubscriptions(ctx context.Context, req *pb.RpcDebugSubscriptionsRequest) *pb.RpcDebugSubscriptionsResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) DebugOpenedObjects(ctx context.Context, req *pb.RpcDebugOpenedObjectsRequest) *pb.RpcDebugOpenedObjectsResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) MetricsSetParameters(ctx context.Context, req *pb.RpcMetricsSetParametersRequest) *pb.RpcMetricsSetParametersResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) ListenSessionEvents(req *pb.StreamRequest, srv ClientCommands_ListenSessionEventsServer) {
	return
}
func (*UnimplementedClientCommandsServer) NotificationList(ctx context.Context, req *pb.RpcNotificationListRequest) *pb.RpcNotificationListResponse {
	return nil
}
func (*UnimplementedClientCommandsServer) NotificationReply(ctx context.Context, req *pb.RpcNotificationReplyRequest) *pb.RpcNotificationReplyResponse {
	return nil
}

func RegisterClientCommandsServer(s *grpc.Server, srv ClientCommandsServer) {
	s.RegisterService(&_ClientCommands_serviceDesc, srv)
}

func _ClientCommands_AppGetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcAppGetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).AppGetVersion(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/AppGetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).AppGetVersion(ctx, req.(*pb.RpcAppGetVersionRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_AppSetDeviceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcAppSetDeviceStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).AppSetDeviceState(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/AppSetDeviceState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).AppSetDeviceState(ctx, req.(*pb.RpcAppSetDeviceStateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_AppShutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcAppShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).AppShutdown(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/AppShutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).AppShutdown(ctx, req.(*pb.RpcAppShutdownRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_WalletCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcWalletCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).WalletCreate(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/WalletCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).WalletCreate(ctx, req.(*pb.RpcWalletCreateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_WalletRecover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcWalletRecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).WalletRecover(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/WalletRecover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).WalletRecover(ctx, req.(*pb.RpcWalletRecoverRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_WalletConvert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcWalletConvertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).WalletConvert(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/WalletConvert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).WalletConvert(ctx, req.(*pb.RpcWalletConvertRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_WalletCreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcWalletCreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).WalletCreateSession(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/WalletCreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).WalletCreateSession(ctx, req.(*pb.RpcWalletCreateSessionRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_WalletCloseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcWalletCloseSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).WalletCloseSession(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/WalletCloseSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).WalletCloseSession(ctx, req.(*pb.RpcWalletCloseSessionRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_WorkspaceCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcWorkspaceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).WorkspaceCreate(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/WorkspaceCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).WorkspaceCreate(ctx, req.(*pb.RpcWorkspaceCreateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_WorkspaceOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcWorkspaceOpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).WorkspaceOpen(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/WorkspaceOpen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).WorkspaceOpen(ctx, req.(*pb.RpcWorkspaceOpenRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_WorkspaceObjectAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcWorkspaceObjectAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).WorkspaceObjectAdd(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/WorkspaceObjectAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).WorkspaceObjectAdd(ctx, req.(*pb.RpcWorkspaceObjectAddRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_WorkspaceObjectListAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcWorkspaceObjectListAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).WorkspaceObjectListAdd(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/WorkspaceObjectListAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).WorkspaceObjectListAdd(ctx, req.(*pb.RpcWorkspaceObjectListAddRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_WorkspaceObjectListRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcWorkspaceObjectListRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).WorkspaceObjectListRemove(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/WorkspaceObjectListRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).WorkspaceObjectListRemove(ctx, req.(*pb.RpcWorkspaceObjectListRemoveRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_WorkspaceSelect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcWorkspaceSelectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).WorkspaceSelect(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/WorkspaceSelect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).WorkspaceSelect(ctx, req.(*pb.RpcWorkspaceSelectRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_WorkspaceGetCurrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcWorkspaceGetCurrentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).WorkspaceGetCurrent(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/WorkspaceGetCurrent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).WorkspaceGetCurrent(ctx, req.(*pb.RpcWorkspaceGetCurrentRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_WorkspaceGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcWorkspaceGetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).WorkspaceGetAll(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/WorkspaceGetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).WorkspaceGetAll(ctx, req.(*pb.RpcWorkspaceGetAllRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_WorkspaceSetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcWorkspaceSetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).WorkspaceSetInfo(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/WorkspaceSetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).WorkspaceSetInfo(ctx, req.(*pb.RpcWorkspaceSetInfoRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_WorkspaceExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcWorkspaceExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).WorkspaceExport(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/WorkspaceExport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).WorkspaceExport(ctx, req.(*pb.RpcWorkspaceExportRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_AccountRecover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcAccountRecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).AccountRecover(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/AccountRecover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).AccountRecover(ctx, req.(*pb.RpcAccountRecoverRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_AccountCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcAccountCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).AccountCreate(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/AccountCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).AccountCreate(ctx, req.(*pb.RpcAccountCreateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_AccountDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcAccountDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).AccountDelete(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/AccountDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).AccountDelete(ctx, req.(*pb.RpcAccountDeleteRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_AccountRevertDeletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcAccountRevertDeletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).AccountRevertDeletion(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/AccountRevertDeletion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).AccountRevertDeletion(ctx, req.(*pb.RpcAccountRevertDeletionRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_AccountSelect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcAccountSelectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).AccountSelect(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/AccountSelect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).AccountSelect(ctx, req.(*pb.RpcAccountSelectRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_AccountEnableLocalNetworkSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcAccountEnableLocalNetworkSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).AccountEnableLocalNetworkSync(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/AccountEnableLocalNetworkSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).AccountEnableLocalNetworkSync(ctx, req.(*pb.RpcAccountEnableLocalNetworkSyncRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_AccountStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcAccountStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).AccountStop(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/AccountStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).AccountStop(ctx, req.(*pb.RpcAccountStopRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_AccountMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcAccountMoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).AccountMove(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/AccountMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).AccountMove(ctx, req.(*pb.RpcAccountMoveRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_AccountConfigUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcAccountConfigUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).AccountConfigUpdate(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/AccountConfigUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).AccountConfigUpdate(ctx, req.(*pb.RpcAccountConfigUpdateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_AccountRecoverFromLegacyExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcAccountRecoverFromLegacyExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).AccountRecoverFromLegacyExport(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/AccountRecoverFromLegacyExport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).AccountRecoverFromLegacyExport(ctx, req.(*pb.RpcAccountRecoverFromLegacyExportRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_SpaceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcSpaceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).SpaceDelete(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/SpaceDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).SpaceDelete(ctx, req.(*pb.RpcSpaceDeleteRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectOpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectOpen(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectOpen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectOpen(ctx, req.(*pb.RpcObjectOpenRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectCloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectClose(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectClose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectClose(ctx, req.(*pb.RpcObjectCloseRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectShow(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectShow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectShow(ctx, req.(*pb.RpcObjectShowRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectCreate(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectCreate(ctx, req.(*pb.RpcObjectCreateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectCreateBookmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectCreateBookmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectCreateBookmark(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectCreateBookmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectCreateBookmark(ctx, req.(*pb.RpcObjectCreateBookmarkRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectCreateSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectCreateSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectCreateSet(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectCreateSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectCreateSet(ctx, req.(*pb.RpcObjectCreateSetRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectGraph(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectGraph(ctx, req.(*pb.RpcObjectGraphRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectSearch(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectSearch(ctx, req.(*pb.RpcObjectSearchRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectSearchSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectSearchSubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectSearchSubscribe(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectSearchSubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectSearchSubscribe(ctx, req.(*pb.RpcObjectSearchSubscribeRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectSubscribeIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectSubscribeIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectSubscribeIds(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectSubscribeIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectSubscribeIds(ctx, req.(*pb.RpcObjectSubscribeIdsRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectGroupsSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectGroupsSubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectGroupsSubscribe(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectGroupsSubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectGroupsSubscribe(ctx, req.(*pb.RpcObjectGroupsSubscribeRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectSearchUnsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectSearchUnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectSearchUnsubscribe(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectSearchUnsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectSearchUnsubscribe(ctx, req.(*pb.RpcObjectSearchUnsubscribeRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectSetDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectSetDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectSetDetails(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectSetDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectSetDetails(ctx, req.(*pb.RpcObjectSetDetailsRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectDuplicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectDuplicateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectDuplicate(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectDuplicate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectDuplicate(ctx, req.(*pb.RpcObjectDuplicateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectSetObjectType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectSetObjectTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectSetObjectType(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectSetObjectType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectSetObjectType(ctx, req.(*pb.RpcObjectSetObjectTypeRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectSetLayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectSetLayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectSetLayout(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectSetLayout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectSetLayout(ctx, req.(*pb.RpcObjectSetLayoutRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectSetInternalFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectSetInternalFlagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectSetInternalFlags(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectSetInternalFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectSetInternalFlags(ctx, req.(*pb.RpcObjectSetInternalFlagsRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectSetIsFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectSetIsFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectSetIsFavorite(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectSetIsFavorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectSetIsFavorite(ctx, req.(*pb.RpcObjectSetIsFavoriteRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectSetIsArchived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectSetIsArchivedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectSetIsArchived(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectSetIsArchived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectSetIsArchived(ctx, req.(*pb.RpcObjectSetIsArchivedRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectSetSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectSetSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectSetSource(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectSetSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectSetSource(ctx, req.(*pb.RpcObjectSetSourceRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectWorkspaceSetDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectWorkspaceSetDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectWorkspaceSetDashboard(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectWorkspaceSetDashboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectWorkspaceSetDashboard(ctx, req.(*pb.RpcObjectWorkspaceSetDashboardRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectListDuplicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectListDuplicateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectListDuplicate(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectListDuplicate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectListDuplicate(ctx, req.(*pb.RpcObjectListDuplicateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectListDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectListDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectListDelete(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectListDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectListDelete(ctx, req.(*pb.RpcObjectListDeleteRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectListSetIsArchived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectListSetIsArchivedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectListSetIsArchived(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectListSetIsArchived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectListSetIsArchived(ctx, req.(*pb.RpcObjectListSetIsArchivedRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectListSetIsFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectListSetIsFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectListSetIsFavorite(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectListSetIsFavorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectListSetIsFavorite(ctx, req.(*pb.RpcObjectListSetIsFavoriteRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectListSetObjectType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectListSetObjectTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectListSetObjectType(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectListSetObjectType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectListSetObjectType(ctx, req.(*pb.RpcObjectListSetObjectTypeRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectApplyTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectApplyTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectApplyTemplate(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectApplyTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectApplyTemplate(ctx, req.(*pb.RpcObjectApplyTemplateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectToSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectToSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectToSet(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectToSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectToSet(ctx, req.(*pb.RpcObjectToSetRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectToCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectToCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectToCollection(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectToCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectToCollection(ctx, req.(*pb.RpcObjectToCollectionRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectShareByLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectShareByLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectShareByLink(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectShareByLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectShareByLink(ctx, req.(*pb.RpcObjectShareByLinkRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectUndo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectUndoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectUndo(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectUndo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectUndo(ctx, req.(*pb.RpcObjectUndoRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectRedo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectRedoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectRedo(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectRedo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectRedo(ctx, req.(*pb.RpcObjectRedoRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectListExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectListExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectListExport(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectListExport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectListExport(ctx, req.(*pb.RpcObjectListExportRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectBookmarkFetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectBookmarkFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectBookmarkFetch(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectBookmarkFetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectBookmarkFetch(ctx, req.(*pb.RpcObjectBookmarkFetchRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectToBookmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectToBookmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectToBookmark(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectToBookmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectToBookmark(ctx, req.(*pb.RpcObjectToBookmarkRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectImport(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectImport(ctx, req.(*pb.RpcObjectImportRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectImportList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectImportListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectImportList(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectImportList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectImportList(ctx, req.(*pb.RpcObjectImportListRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectImportNotionValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectImportNotionValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectImportNotionValidateToken(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectImportNotionValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectImportNotionValidateToken(ctx, req.(*pb.RpcObjectImportNotionValidateTokenRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectImportUseCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectImportUseCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectImportUseCase(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectImportUseCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectImportUseCase(ctx, req.(*pb.RpcObjectImportUseCaseRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectImportExperience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectImportExperienceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectImportExperience(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectImportExperience",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectImportExperience(ctx, req.(*pb.RpcObjectImportExperienceRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectCollectionAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectCollectionAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectCollectionAdd(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectCollectionAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectCollectionAdd(ctx, req.(*pb.RpcObjectCollectionAddRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectCollectionRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectCollectionRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectCollectionRemove(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectCollectionRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectCollectionRemove(ctx, req.(*pb.RpcObjectCollectionRemoveRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectCollectionSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectCollectionSortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectCollectionSort(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectCollectionSort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectCollectionSort(ctx, req.(*pb.RpcObjectCollectionSortRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectCreateRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectCreateRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectCreateRelation(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectCreateRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectCreateRelation(ctx, req.(*pb.RpcObjectCreateRelationRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectCreateRelationOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectCreateRelationOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectCreateRelationOption(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectCreateRelationOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectCreateRelationOption(ctx, req.(*pb.RpcObjectCreateRelationOptionRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_RelationListRemoveOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcRelationListRemoveOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).RelationListRemoveOption(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/RelationListRemoveOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).RelationListRemoveOption(ctx, req.(*pb.RpcRelationListRemoveOptionRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_RelationOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcRelationOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).RelationOptions(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/RelationOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).RelationOptions(ctx, req.(*pb.RpcRelationOptionsRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectRelationAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectRelationAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectRelationAdd(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectRelationAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectRelationAdd(ctx, req.(*pb.RpcObjectRelationAddRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectRelationDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectRelationDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectRelationDelete(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectRelationDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectRelationDelete(ctx, req.(*pb.RpcObjectRelationDeleteRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectRelationAddFeatured_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectRelationAddFeaturedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectRelationAddFeatured(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectRelationAddFeatured",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectRelationAddFeatured(ctx, req.(*pb.RpcObjectRelationAddFeaturedRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectRelationRemoveFeatured_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectRelationRemoveFeaturedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectRelationRemoveFeatured(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectRelationRemoveFeatured",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectRelationRemoveFeatured(ctx, req.(*pb.RpcObjectRelationRemoveFeaturedRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectRelationListAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectRelationListAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectRelationListAvailable(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectRelationListAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectRelationListAvailable(ctx, req.(*pb.RpcObjectRelationListAvailableRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectCreateObjectType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectCreateObjectTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectCreateObjectType(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectCreateObjectType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectCreateObjectType(ctx, req.(*pb.RpcObjectCreateObjectTypeRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectTypeRelationAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectTypeRelationAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectTypeRelationAdd(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectTypeRelationAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectTypeRelationAdd(ctx, req.(*pb.RpcObjectTypeRelationAddRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ObjectTypeRelationRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcObjectTypeRelationRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ObjectTypeRelationRemove(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ObjectTypeRelationRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ObjectTypeRelationRemove(ctx, req.(*pb.RpcObjectTypeRelationRemoveRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_HistoryShowVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcHistoryShowVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).HistoryShowVersion(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/HistoryShowVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).HistoryShowVersion(ctx, req.(*pb.RpcHistoryShowVersionRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_HistoryGetVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcHistoryGetVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).HistoryGetVersions(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/HistoryGetVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).HistoryGetVersions(ctx, req.(*pb.RpcHistoryGetVersionsRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_HistorySetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcHistorySetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).HistorySetVersion(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/HistorySetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).HistorySetVersion(ctx, req.(*pb.RpcHistorySetVersionRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_FileOffload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcFileOffloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).FileOffload(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/FileOffload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).FileOffload(ctx, req.(*pb.RpcFileOffloadRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_FileListOffload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcFileListOffloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).FileListOffload(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/FileListOffload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).FileListOffload(ctx, req.(*pb.RpcFileListOffloadRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_FileUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcFileUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).FileUpload(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/FileUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).FileUpload(ctx, req.(*pb.RpcFileUploadRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_FileDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcFileDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).FileDownload(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/FileDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).FileDownload(ctx, req.(*pb.RpcFileDownloadRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_FileDrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcFileDropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).FileDrop(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/FileDrop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).FileDrop(ctx, req.(*pb.RpcFileDropRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_FileSpaceUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcFileSpaceUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).FileSpaceUsage(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/FileSpaceUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).FileSpaceUsage(ctx, req.(*pb.RpcFileSpaceUsageRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_FileNodeUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcFileNodeUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).FileNodeUsage(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/FileNodeUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).FileNodeUsage(ctx, req.(*pb.RpcFileNodeUsageRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_NavigationListObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcNavigationListObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).NavigationListObjects(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/NavigationListObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).NavigationListObjects(ctx, req.(*pb.RpcNavigationListObjectsRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_NavigationGetObjectInfoWithLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcNavigationGetObjectInfoWithLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).NavigationGetObjectInfoWithLinks(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/NavigationGetObjectInfoWithLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).NavigationGetObjectInfoWithLinks(ctx, req.(*pb.RpcNavigationGetObjectInfoWithLinksRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_TemplateCreateFromObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcTemplateCreateFromObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).TemplateCreateFromObject(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/TemplateCreateFromObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).TemplateCreateFromObject(ctx, req.(*pb.RpcTemplateCreateFromObjectRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_TemplateClone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcTemplateCloneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).TemplateClone(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/TemplateClone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).TemplateClone(ctx, req.(*pb.RpcTemplateCloneRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_TemplateExportAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcTemplateExportAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).TemplateExportAll(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/TemplateExportAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).TemplateExportAll(ctx, req.(*pb.RpcTemplateExportAllRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_LinkPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcLinkPreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).LinkPreview(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/LinkPreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).LinkPreview(ctx, req.(*pb.RpcLinkPreviewRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_UnsplashSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcUnsplashSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).UnsplashSearch(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/UnsplashSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).UnsplashSearch(ctx, req.(*pb.RpcUnsplashSearchRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_UnsplashDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcUnsplashDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).UnsplashDownload(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/UnsplashDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).UnsplashDownload(ctx, req.(*pb.RpcUnsplashDownloadRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_DownloadManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcDownloadManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).DownloadManifest(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/DownloadManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).DownloadManifest(ctx, req.(*pb.RpcDownloadManifestRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockUpload(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockUpload(ctx, req.(*pb.RpcBlockUploadRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockReplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockReplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockReplace(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockReplace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockReplace(ctx, req.(*pb.RpcBlockReplaceRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockCreate(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockCreate(ctx, req.(*pb.RpcBlockCreateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSplit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSplitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSplit(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSplit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSplit(ctx, req.(*pb.RpcBlockSplitRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockMerge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockMergeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockMerge(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockMerge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockMerge(ctx, req.(*pb.RpcBlockMergeRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockCopy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockCopyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockCopy(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockCopy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockCopy(ctx, req.(*pb.RpcBlockCopyRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockPaste_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockPasteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockPaste(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockPaste",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockPaste(ctx, req.(*pb.RpcBlockPasteRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockCut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockCutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockCut(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockCut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockCut(ctx, req.(*pb.RpcBlockCutRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetFields(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetFields(ctx, req.(*pb.RpcBlockSetFieldsRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockExport(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockExport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockExport(ctx, req.(*pb.RpcBlockExportRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockSetCarriage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockSetCarriageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockSetCarriage(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockSetCarriage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockSetCarriage(ctx, req.(*pb.RpcBlockSetCarriageRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockListDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockListDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockListDelete(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockListDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockListDelete(ctx, req.(*pb.RpcBlockListDeleteRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockListMoveToExistingObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockListMoveToExistingObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockListMoveToExistingObject(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockListMoveToExistingObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockListMoveToExistingObject(ctx, req.(*pb.RpcBlockListMoveToExistingObjectRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockListMoveToNewObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockListMoveToNewObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockListMoveToNewObject(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockListMoveToNewObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockListMoveToNewObject(ctx, req.(*pb.RpcBlockListMoveToNewObjectRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockListConvertToObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockListConvertToObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockListConvertToObjects(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockListConvertToObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockListConvertToObjects(ctx, req.(*pb.RpcBlockListConvertToObjectsRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockListSetFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockListSetFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockListSetFields(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockListSetFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockListSetFields(ctx, req.(*pb.RpcBlockListSetFieldsRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockListDuplicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockListDuplicateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockListDuplicate(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockListDuplicate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockListDuplicate(ctx, req.(*pb.RpcBlockListDuplicateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockListSetBackgroundColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockListSetBackgroundColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockListSetBackgroundColor(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockListSetBackgroundColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockListSetBackgroundColor(ctx, req.(*pb.RpcBlockListSetBackgroundColorRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockListSetAlign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockListSetAlignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockListSetAlign(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockListSetAlign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockListSetAlign(ctx, req.(*pb.RpcBlockListSetAlignRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockListSetVerticalAlign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockListSetVerticalAlignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockListSetVerticalAlign(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockListSetVerticalAlign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockListSetVerticalAlign(ctx, req.(*pb.RpcBlockListSetVerticalAlignRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockListTurnInto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockListTurnIntoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockListTurnInto(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockListTurnInto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockListTurnInto(ctx, req.(*pb.RpcBlockListTurnIntoRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockTextSetText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockTextSetTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockTextSetText(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockTextSetText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockTextSetText(ctx, req.(*pb.RpcBlockTextSetTextRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockTextSetColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockTextSetColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockTextSetColor(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockTextSetColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockTextSetColor(ctx, req.(*pb.RpcBlockTextSetColorRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockTextSetStyle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockTextSetStyleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockTextSetStyle(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockTextSetStyle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockTextSetStyle(ctx, req.(*pb.RpcBlockTextSetStyleRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockTextSetChecked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockTextSetCheckedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockTextSetChecked(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockTextSetChecked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockTextSetChecked(ctx, req.(*pb.RpcBlockTextSetCheckedRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockTextSetIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockTextSetIconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockTextSetIcon(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockTextSetIcon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockTextSetIcon(ctx, req.(*pb.RpcBlockTextSetIconRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockTextListSetColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockTextListSetColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockTextListSetColor(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockTextListSetColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockTextListSetColor(ctx, req.(*pb.RpcBlockTextListSetColorRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockTextListSetMark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockTextListSetMarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockTextListSetMark(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockTextListSetMark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockTextListSetMark(ctx, req.(*pb.RpcBlockTextListSetMarkRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockTextListSetStyle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockTextListSetStyleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockTextListSetStyle(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockTextListSetStyle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockTextListSetStyle(ctx, req.(*pb.RpcBlockTextListSetStyleRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockTextListClearStyle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockTextListClearStyleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockTextListClearStyle(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockTextListClearStyle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockTextListClearStyle(ctx, req.(*pb.RpcBlockTextListClearStyleRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockTextListClearContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockTextListClearContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockTextListClearContent(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockTextListClearContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockTextListClearContent(ctx, req.(*pb.RpcBlockTextListClearContentRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockFileSetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockFileSetNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockFileSetName(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockFileSetName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockFileSetName(ctx, req.(*pb.RpcBlockFileSetNameRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockImageSetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockImageSetNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockImageSetName(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockImageSetName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockImageSetName(ctx, req.(*pb.RpcBlockImageSetNameRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockVideoSetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockVideoSetNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockVideoSetName(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockVideoSetName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockVideoSetName(ctx, req.(*pb.RpcBlockVideoSetNameRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockFileCreateAndUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockFileCreateAndUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockFileCreateAndUpload(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockFileCreateAndUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockFileCreateAndUpload(ctx, req.(*pb.RpcBlockFileCreateAndUploadRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockFileListSetStyle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockFileListSetStyleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockFileListSetStyle(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockFileListSetStyle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockFileListSetStyle(ctx, req.(*pb.RpcBlockFileListSetStyleRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewViewCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewViewCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewViewCreate(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewViewCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewViewCreate(ctx, req.(*pb.RpcBlockDataviewViewCreateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewViewDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewViewDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewViewDelete(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewViewDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewViewDelete(ctx, req.(*pb.RpcBlockDataviewViewDeleteRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewViewUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewViewUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewViewUpdate(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewViewUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewViewUpdate(ctx, req.(*pb.RpcBlockDataviewViewUpdateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewViewSetActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewViewSetActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewViewSetActive(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewViewSetActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewViewSetActive(ctx, req.(*pb.RpcBlockDataviewViewSetActiveRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewViewSetPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewViewSetPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewViewSetPosition(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewViewSetPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewViewSetPosition(ctx, req.(*pb.RpcBlockDataviewViewSetPositionRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewSetSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewSetSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewSetSource(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewSetSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewSetSource(ctx, req.(*pb.RpcBlockDataviewSetSourceRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewRelationAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewRelationAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewRelationAdd(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewRelationAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewRelationAdd(ctx, req.(*pb.RpcBlockDataviewRelationAddRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewRelationDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewRelationDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewRelationDelete(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewRelationDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewRelationDelete(ctx, req.(*pb.RpcBlockDataviewRelationDeleteRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewRelationListAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewRelationListAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewRelationListAvailable(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewRelationListAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewRelationListAvailable(ctx, req.(*pb.RpcBlockDataviewRelationListAvailableRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewGroupOrderUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewGroupOrderUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewGroupOrderUpdate(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewGroupOrderUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewGroupOrderUpdate(ctx, req.(*pb.RpcBlockDataviewGroupOrderUpdateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewObjectOrderUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewObjectOrderUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewObjectOrderUpdate(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewObjectOrderUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewObjectOrderUpdate(ctx, req.(*pb.RpcBlockDataviewObjectOrderUpdateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewObjectOrderMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewObjectOrderMoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewObjectOrderMove(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewObjectOrderMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewObjectOrderMove(ctx, req.(*pb.RpcBlockDataviewObjectOrderMoveRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewCreateFromExistingObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewCreateFromExistingObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewCreateFromExistingObject(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewCreateFromExistingObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewCreateFromExistingObject(ctx, req.(*pb.RpcBlockDataviewCreateFromExistingObjectRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewFilterAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewFilterAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewFilterAdd(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewFilterAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewFilterAdd(ctx, req.(*pb.RpcBlockDataviewFilterAddRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewFilterRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewFilterRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewFilterRemove(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewFilterRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewFilterRemove(ctx, req.(*pb.RpcBlockDataviewFilterRemoveRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewFilterReplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewFilterReplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewFilterReplace(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewFilterReplace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewFilterReplace(ctx, req.(*pb.RpcBlockDataviewFilterReplaceRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewFilterSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewFilterSortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewFilterSort(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewFilterSort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewFilterSort(ctx, req.(*pb.RpcBlockDataviewFilterSortRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewSortAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewSortAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewSortAdd(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewSortAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewSortAdd(ctx, req.(*pb.RpcBlockDataviewSortAddRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewSortRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewSortRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewSortRemove(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewSortRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewSortRemove(ctx, req.(*pb.RpcBlockDataviewSortRemoveRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewSortReplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewSortReplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewSortReplace(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewSortReplace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewSortReplace(ctx, req.(*pb.RpcBlockDataviewSortReplaceRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewSortSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewSortSortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewSortSort(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewSortSort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewSortSort(ctx, req.(*pb.RpcBlockDataviewSortSortRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewViewRelationAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewViewRelationAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewViewRelationAdd(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewViewRelationAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewViewRelationAdd(ctx, req.(*pb.RpcBlockDataviewViewRelationAddRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewViewRelationRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewViewRelationRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewViewRelationRemove(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewViewRelationRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewViewRelationRemove(ctx, req.(*pb.RpcBlockDataviewViewRelationRemoveRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewViewRelationReplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewViewRelationReplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewViewRelationReplace(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewViewRelationReplace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewViewRelationReplace(ctx, req.(*pb.RpcBlockDataviewViewRelationReplaceRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDataviewViewRelationSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDataviewViewRelationSortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDataviewViewRelationSort(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDataviewViewRelationSort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDataviewViewRelationSort(ctx, req.(*pb.RpcBlockDataviewViewRelationSortRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockTableCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockTableCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockTableCreate(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockTableCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockTableCreate(ctx, req.(*pb.RpcBlockTableCreateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockTableExpand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockTableExpandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockTableExpand(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockTableExpand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockTableExpand(ctx, req.(*pb.RpcBlockTableExpandRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockTableRowCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockTableRowCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockTableRowCreate(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockTableRowCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockTableRowCreate(ctx, req.(*pb.RpcBlockTableRowCreateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockTableRowDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockTableRowDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockTableRowDelete(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockTableRowDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockTableRowDelete(ctx, req.(*pb.RpcBlockTableRowDeleteRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockTableRowDuplicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockTableRowDuplicateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockTableRowDuplicate(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockTableRowDuplicate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockTableRowDuplicate(ctx, req.(*pb.RpcBlockTableRowDuplicateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockTableRowSetHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockTableRowSetHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockTableRowSetHeader(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockTableRowSetHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockTableRowSetHeader(ctx, req.(*pb.RpcBlockTableRowSetHeaderRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockTableColumnCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockTableColumnCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockTableColumnCreate(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockTableColumnCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockTableColumnCreate(ctx, req.(*pb.RpcBlockTableColumnCreateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockTableColumnMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockTableColumnMoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockTableColumnMove(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockTableColumnMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockTableColumnMove(ctx, req.(*pb.RpcBlockTableColumnMoveRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockTableColumnDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockTableColumnDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockTableColumnDelete(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockTableColumnDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockTableColumnDelete(ctx, req.(*pb.RpcBlockTableColumnDeleteRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockTableColumnDuplicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockTableColumnDuplicateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockTableColumnDuplicate(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockTableColumnDuplicate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockTableColumnDuplicate(ctx, req.(*pb.RpcBlockTableColumnDuplicateRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockTableRowListFill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockTableRowListFillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockTableRowListFill(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockTableRowListFill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockTableRowListFill(ctx, req.(*pb.RpcBlockTableRowListFillRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockTableRowListClean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockTableRowListCleanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockTableRowListClean(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockTableRowListClean",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockTableRowListClean(ctx, req.(*pb.RpcBlockTableRowListCleanRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockTableColumnListFill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockTableColumnListFillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockTableColumnListFill(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockTableColumnListFill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockTableColumnListFill(ctx, req.(*pb.RpcBlockTableColumnListFillRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockTableSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockTableSortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockTableSort(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockTableSort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockTableSort(ctx, req.(*pb.RpcBlockTableSortRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockCreateWidget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockCreateWidgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockCreateWidget(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockCreateWidget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockCreateWidget(ctx, req.(*pb.RpcBlockCreateWidgetRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockWidgetSetTargetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockWidgetSetTargetIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockWidgetSetTargetId(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockWidgetSetTargetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockWidgetSetTargetId(ctx, req.(*pb.RpcBlockWidgetSetTargetIdRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockWidgetSetLayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockWidgetSetLayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockWidgetSetLayout(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockWidgetSetLayout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockWidgetSetLayout(ctx, req.(*pb.RpcBlockWidgetSetLayoutRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockWidgetSetLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockWidgetSetLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockWidgetSetLimit(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockWidgetSetLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockWidgetSetLimit(ctx, req.(*pb.RpcBlockWidgetSetLimitRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockWidgetSetViewId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockWidgetSetViewIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockWidgetSetViewId(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockWidgetSetViewId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockWidgetSetViewId(ctx, req.(*pb.RpcBlockWidgetSetViewIdRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockLinkCreateWithObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockLinkCreateWithObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockLinkCreateWithObject(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockLinkCreateWithObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockLinkCreateWithObject(ctx, req.(*pb.RpcBlockLinkCreateWithObjectRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockLinkListSetAppearance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockLinkListSetAppearanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockLinkListSetAppearance(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockLinkListSetAppearance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockLinkListSetAppearance(ctx, req.(*pb.RpcBlockLinkListSetAppearanceRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockBookmarkFetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockBookmarkFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockBookmarkFetch(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockBookmarkFetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockBookmarkFetch(ctx, req.(*pb.RpcBlockBookmarkFetchRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockBookmarkCreateAndFetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockBookmarkCreateAndFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockBookmarkCreateAndFetch(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockBookmarkCreateAndFetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockBookmarkCreateAndFetch(ctx, req.(*pb.RpcBlockBookmarkCreateAndFetchRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockRelationSetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockRelationSetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockRelationSetKey(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockRelationSetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockRelationSetKey(ctx, req.(*pb.RpcBlockRelationSetKeyRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockRelationAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockRelationAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockRelationAdd(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockRelationAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockRelationAdd(ctx, req.(*pb.RpcBlockRelationAddRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockDivListSetStyle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockDivListSetStyleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockDivListSetStyle(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockDivListSetStyle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockDivListSetStyle(ctx, req.(*pb.RpcBlockDivListSetStyleRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_BlockLatexSetText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcBlockLatexSetTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).BlockLatexSetText(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/BlockLatexSetText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).BlockLatexSetText(ctx, req.(*pb.RpcBlockLatexSetTextRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ProcessCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcProcessCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).ProcessCancel(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/ProcessCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).ProcessCancel(ctx, req.(*pb.RpcProcessCancelRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_LogSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcLogSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).LogSend(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/LogSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).LogSend(ctx, req.(*pb.RpcLogSendRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_DebugTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcDebugTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).DebugTree(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/DebugTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).DebugTree(ctx, req.(*pb.RpcDebugTreeRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_DebugTreeHeads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcDebugTreeHeadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).DebugTreeHeads(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/DebugTreeHeads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).DebugTreeHeads(ctx, req.(*pb.RpcDebugTreeHeadsRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_DebugSpaceSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcDebugSpaceSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).DebugSpaceSummary(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/DebugSpaceSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).DebugSpaceSummary(ctx, req.(*pb.RpcDebugSpaceSummaryRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_DebugStackGoroutines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcDebugStackGoroutinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).DebugStackGoroutines(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/DebugStackGoroutines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).DebugStackGoroutines(ctx, req.(*pb.RpcDebugStackGoroutinesRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_DebugExportLocalstore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcDebugExportLocalstoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).DebugExportLocalstore(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/DebugExportLocalstore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).DebugExportLocalstore(ctx, req.(*pb.RpcDebugExportLocalstoreRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_DebugPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcDebugPingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).DebugPing(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/DebugPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).DebugPing(ctx, req.(*pb.RpcDebugPingRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_DebugSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcDebugSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).DebugSubscriptions(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/DebugSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).DebugSubscriptions(ctx, req.(*pb.RpcDebugSubscriptionsRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_DebugOpenedObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcDebugOpenedObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).DebugOpenedObjects(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/DebugOpenedObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).DebugOpenedObjects(ctx, req.(*pb.RpcDebugOpenedObjectsRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_MetricsSetParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcMetricsSetParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).MetricsSetParameters(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/MetricsSetParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).MetricsSetParameters(ctx, req.(*pb.RpcMetricsSetParametersRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_ListenSessionEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(pb.StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	srv.(ClientCommandsServer).ListenSessionEvents(m, &clientCommandsListenSessionEventsServer{stream})
	return nil
}

type ClientCommands_ListenSessionEventsServer interface {
	Send(*pb.Event) error
	grpc.ServerStream
}

type clientCommandsListenSessionEventsServer struct {
	grpc.ServerStream
}

func (x *clientCommandsListenSessionEventsServer) Send(m *pb.Event) error {
	return x.ServerStream.SendMsg(m)
}

func _ClientCommands_NotificationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcNotificationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).NotificationList(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/NotificationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).NotificationList(ctx, req.(*pb.RpcNotificationListRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientCommands_NotificationReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.RpcNotificationReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientCommandsServer).NotificationReply(ctx, in), nil
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anytype.ClientCommands/NotificationReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientCommandsServer).NotificationReply(ctx, req.(*pb.RpcNotificationReplyRequest)), nil
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientCommands_serviceDesc = grpc.ServiceDesc{
	ServiceName: "anytype.ClientCommands",
	HandlerType: (*ClientCommandsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppGetVersion",
			Handler:    _ClientCommands_AppGetVersion_Handler,
		},
		{
			MethodName: "AppSetDeviceState",
			Handler:    _ClientCommands_AppSetDeviceState_Handler,
		},
		{
			MethodName: "AppShutdown",
			Handler:    _ClientCommands_AppShutdown_Handler,
		},
		{
			MethodName: "WalletCreate",
			Handler:    _ClientCommands_WalletCreate_Handler,
		},
		{
			MethodName: "WalletRecover",
			Handler:    _ClientCommands_WalletRecover_Handler,
		},
		{
			MethodName: "WalletConvert",
			Handler:    _ClientCommands_WalletConvert_Handler,
		},
		{
			MethodName: "WalletCreateSession",
			Handler:    _ClientCommands_WalletCreateSession_Handler,
		},
		{
			MethodName: "WalletCloseSession",
			Handler:    _ClientCommands_WalletCloseSession_Handler,
		},
		{
			MethodName: "WorkspaceCreate",
			Handler:    _ClientCommands_WorkspaceCreate_Handler,
		},
		{
			MethodName: "WorkspaceOpen",
			Handler:    _ClientCommands_WorkspaceOpen_Handler,
		},
		{
			MethodName: "WorkspaceObjectAdd",
			Handler:    _ClientCommands_WorkspaceObjectAdd_Handler,
		},
		{
			MethodName: "WorkspaceObjectListAdd",
			Handler:    _ClientCommands_WorkspaceObjectListAdd_Handler,
		},
		{
			MethodName: "WorkspaceObjectListRemove",
			Handler:    _ClientCommands_WorkspaceObjectListRemove_Handler,
		},
		{
			MethodName: "WorkspaceSelect",
			Handler:    _ClientCommands_WorkspaceSelect_Handler,
		},
		{
			MethodName: "WorkspaceGetCurrent",
			Handler:    _ClientCommands_WorkspaceGetCurrent_Handler,
		},
		{
			MethodName: "WorkspaceGetAll",
			Handler:    _ClientCommands_WorkspaceGetAll_Handler,
		},
		{
			MethodName: "WorkspaceSetInfo",
			Handler:    _ClientCommands_WorkspaceSetInfo_Handler,
		},
		{
			MethodName: "WorkspaceExport",
			Handler:    _ClientCommands_WorkspaceExport_Handler,
		},
		{
			MethodName: "AccountRecover",
			Handler:    _ClientCommands_AccountRecover_Handler,
		},
		{
			MethodName: "AccountCreate",
			Handler:    _ClientCommands_AccountCreate_Handler,
		},
		{
			MethodName: "AccountDelete",
			Handler:    _ClientCommands_AccountDelete_Handler,
		},
		{
			MethodName: "AccountRevertDeletion",
			Handler:    _ClientCommands_AccountRevertDeletion_Handler,
		},
		{
			MethodName: "AccountSelect",
			Handler:    _ClientCommands_AccountSelect_Handler,
		},
		{
			MethodName: "AccountEnableLocalNetworkSync",
			Handler:    _ClientCommands_AccountEnableLocalNetworkSync_Handler,
		},
		{
			MethodName: "AccountStop",
			Handler:    _ClientCommands_AccountStop_Handler,
		},
		{
			MethodName: "AccountMove",
			Handler:    _ClientCommands_AccountMove_Handler,
		},
		{
			MethodName: "AccountConfigUpdate",
			Handler:    _ClientCommands_AccountConfigUpdate_Handler,
		},
		{
			MethodName: "AccountRecoverFromLegacyExport",
			Handler:    _ClientCommands_AccountRecoverFromLegacyExport_Handler,
		},
		{
			MethodName: "SpaceDelete",
			Handler:    _ClientCommands_SpaceDelete_Handler,
		},
		{
			MethodName: "ObjectOpen",
			Handler:    _ClientCommands_ObjectOpen_Handler,
		},
		{
			MethodName: "ObjectClose",
			Handler:    _ClientCommands_ObjectClose_Handler,
		},
		{
			MethodName: "ObjectShow",
			Handler:    _ClientCommands_ObjectShow_Handler,
		},
		{
			MethodName: "ObjectCreate",
			Handler:    _ClientCommands_ObjectCreate_Handler,
		},
		{
			MethodName: "ObjectCreateBookmark",
			Handler:    _ClientCommands_ObjectCreateBookmark_Handler,
		},
		{
			MethodName: "ObjectCreateSet",
			Handler:    _ClientCommands_ObjectCreateSet_Handler,
		},
		{
			MethodName: "ObjectGraph",
			Handler:    _ClientCommands_ObjectGraph_Handler,
		},
		{
			MethodName: "ObjectSearch",
			Handler:    _ClientCommands_ObjectSearch_Handler,
		},
		{
			MethodName: "ObjectSearchSubscribe",
			Handler:    _ClientCommands_ObjectSearchSubscribe_Handler,
		},
		{
			MethodName: "ObjectSubscribeIds",
			Handler:    _ClientCommands_ObjectSubscribeIds_Handler,
		},
		{
			MethodName: "ObjectGroupsSubscribe",
			Handler:    _ClientCommands_ObjectGroupsSubscribe_Handler,
		},
		{
			MethodName: "ObjectSearchUnsubscribe",
			Handler:    _ClientCommands_ObjectSearchUnsubscribe_Handler,
		},
		{
			MethodName: "ObjectSetDetails",
			Handler:    _ClientCommands_ObjectSetDetails_Handler,
		},
		{
			MethodName: "ObjectDuplicate",
			Handler:    _ClientCommands_ObjectDuplicate_Handler,
		},
		{
			MethodName: "ObjectSetObjectType",
			Handler:    _ClientCommands_ObjectSetObjectType_Handler,
		},
		{
			MethodName: "ObjectSetLayout",
			Handler:    _ClientCommands_ObjectSetLayout_Handler,
		},
		{
			MethodName: "ObjectSetInternalFlags",
			Handler:    _ClientCommands_ObjectSetInternalFlags_Handler,
		},
		{
			MethodName: "ObjectSetIsFavorite",
			Handler:    _ClientCommands_ObjectSetIsFavorite_Handler,
		},
		{
			MethodName: "ObjectSetIsArchived",
			Handler:    _ClientCommands_ObjectSetIsArchived_Handler,
		},
		{
			MethodName: "ObjectSetSource",
			Handler:    _ClientCommands_ObjectSetSource_Handler,
		},
		{
			MethodName: "ObjectWorkspaceSetDashboard",
			Handler:    _ClientCommands_ObjectWorkspaceSetDashboard_Handler,
		},
		{
			MethodName: "ObjectListDuplicate",
			Handler:    _ClientCommands_ObjectListDuplicate_Handler,
		},
		{
			MethodName: "ObjectListDelete",
			Handler:    _ClientCommands_ObjectListDelete_Handler,
		},
		{
			MethodName: "ObjectListSetIsArchived",
			Handler:    _ClientCommands_ObjectListSetIsArchived_Handler,
		},
		{
			MethodName: "ObjectListSetIsFavorite",
			Handler:    _ClientCommands_ObjectListSetIsFavorite_Handler,
		},
		{
			MethodName: "ObjectListSetObjectType",
			Handler:    _ClientCommands_ObjectListSetObjectType_Handler,
		},
		{
			MethodName: "ObjectApplyTemplate",
			Handler:    _ClientCommands_ObjectApplyTemplate_Handler,
		},
		{
			MethodName: "ObjectToSet",
			Handler:    _ClientCommands_ObjectToSet_Handler,
		},
		{
			MethodName: "ObjectToCollection",
			Handler:    _ClientCommands_ObjectToCollection_Handler,
		},
		{
			MethodName: "ObjectShareByLink",
			Handler:    _ClientCommands_ObjectShareByLink_Handler,
		},
		{
			MethodName: "ObjectUndo",
			Handler:    _ClientCommands_ObjectUndo_Handler,
		},
		{
			MethodName: "ObjectRedo",
			Handler:    _ClientCommands_ObjectRedo_Handler,
		},
		{
			MethodName: "ObjectListExport",
			Handler:    _ClientCommands_ObjectListExport_Handler,
		},
		{
			MethodName: "ObjectBookmarkFetch",
			Handler:    _ClientCommands_ObjectBookmarkFetch_Handler,
		},
		{
			MethodName: "ObjectToBookmark",
			Handler:    _ClientCommands_ObjectToBookmark_Handler,
		},
		{
			MethodName: "ObjectImport",
			Handler:    _ClientCommands_ObjectImport_Handler,
		},
		{
			MethodName: "ObjectImportList",
			Handler:    _ClientCommands_ObjectImportList_Handler,
		},
		{
			MethodName: "ObjectImportNotionValidateToken",
			Handler:    _ClientCommands_ObjectImportNotionValidateToken_Handler,
		},
		{
			MethodName: "ObjectImportUseCase",
			Handler:    _ClientCommands_ObjectImportUseCase_Handler,
		},
		{
			MethodName: "ObjectImportExperience",
			Handler:    _ClientCommands_ObjectImportExperience_Handler,
		},
		{
			MethodName: "ObjectCollectionAdd",
			Handler:    _ClientCommands_ObjectCollectionAdd_Handler,
		},
		{
			MethodName: "ObjectCollectionRemove",
			Handler:    _ClientCommands_ObjectCollectionRemove_Handler,
		},
		{
			MethodName: "ObjectCollectionSort",
			Handler:    _ClientCommands_ObjectCollectionSort_Handler,
		},
		{
			MethodName: "ObjectCreateRelation",
			Handler:    _ClientCommands_ObjectCreateRelation_Handler,
		},
		{
			MethodName: "ObjectCreateRelationOption",
			Handler:    _ClientCommands_ObjectCreateRelationOption_Handler,
		},
		{
			MethodName: "RelationListRemoveOption",
			Handler:    _ClientCommands_RelationListRemoveOption_Handler,
		},
		{
			MethodName: "RelationOptions",
			Handler:    _ClientCommands_RelationOptions_Handler,
		},
		{
			MethodName: "ObjectRelationAdd",
			Handler:    _ClientCommands_ObjectRelationAdd_Handler,
		},
		{
			MethodName: "ObjectRelationDelete",
			Handler:    _ClientCommands_ObjectRelationDelete_Handler,
		},
		{
			MethodName: "ObjectRelationAddFeatured",
			Handler:    _ClientCommands_ObjectRelationAddFeatured_Handler,
		},
		{
			MethodName: "ObjectRelationRemoveFeatured",
			Handler:    _ClientCommands_ObjectRelationRemoveFeatured_Handler,
		},
		{
			MethodName: "ObjectRelationListAvailable",
			Handler:    _ClientCommands_ObjectRelationListAvailable_Handler,
		},
		{
			MethodName: "ObjectCreateObjectType",
			Handler:    _ClientCommands_ObjectCreateObjectType_Handler,
		},
		{
			MethodName: "ObjectTypeRelationAdd",
			Handler:    _ClientCommands_ObjectTypeRelationAdd_Handler,
		},
		{
			MethodName: "ObjectTypeRelationRemove",
			Handler:    _ClientCommands_ObjectTypeRelationRemove_Handler,
		},
		{
			MethodName: "HistoryShowVersion",
			Handler:    _ClientCommands_HistoryShowVersion_Handler,
		},
		{
			MethodName: "HistoryGetVersions",
			Handler:    _ClientCommands_HistoryGetVersions_Handler,
		},
		{
			MethodName: "HistorySetVersion",
			Handler:    _ClientCommands_HistorySetVersion_Handler,
		},
		{
			MethodName: "FileOffload",
			Handler:    _ClientCommands_FileOffload_Handler,
		},
		{
			MethodName: "FileListOffload",
			Handler:    _ClientCommands_FileListOffload_Handler,
		},
		{
			MethodName: "FileUpload",
			Handler:    _ClientCommands_FileUpload_Handler,
		},
		{
			MethodName: "FileDownload",
			Handler:    _ClientCommands_FileDownload_Handler,
		},
		{
			MethodName: "FileDrop",
			Handler:    _ClientCommands_FileDrop_Handler,
		},
		{
			MethodName: "FileSpaceUsage",
			Handler:    _ClientCommands_FileSpaceUsage_Handler,
		},
		{
			MethodName: "FileNodeUsage",
			Handler:    _ClientCommands_FileNodeUsage_Handler,
		},
		{
			MethodName: "NavigationListObjects",
			Handler:    _ClientCommands_NavigationListObjects_Handler,
		},
		{
			MethodName: "NavigationGetObjectInfoWithLinks",
			Handler:    _ClientCommands_NavigationGetObjectInfoWithLinks_Handler,
		},
		{
			MethodName: "TemplateCreateFromObject",
			Handler:    _ClientCommands_TemplateCreateFromObject_Handler,
		},
		{
			MethodName: "TemplateClone",
			Handler:    _ClientCommands_TemplateClone_Handler,
		},
		{
			MethodName: "TemplateExportAll",
			Handler:    _ClientCommands_TemplateExportAll_Handler,
		},
		{
			MethodName: "LinkPreview",
			Handler:    _ClientCommands_LinkPreview_Handler,
		},
		{
			MethodName: "UnsplashSearch",
			Handler:    _ClientCommands_UnsplashSearch_Handler,
		},
		{
			MethodName: "UnsplashDownload",
			Handler:    _ClientCommands_UnsplashDownload_Handler,
		},
		{
			MethodName: "DownloadManifest",
			Handler:    _ClientCommands_DownloadManifest_Handler,
		},
		{
			MethodName: "BlockUpload",
			Handler:    _ClientCommands_BlockUpload_Handler,
		},
		{
			MethodName: "BlockReplace",
			Handler:    _ClientCommands_BlockReplace_Handler,
		},
		{
			MethodName: "BlockCreate",
			Handler:    _ClientCommands_BlockCreate_Handler,
		},
		{
			MethodName: "BlockSplit",
			Handler:    _ClientCommands_BlockSplit_Handler,
		},
		{
			MethodName: "BlockMerge",
			Handler:    _ClientCommands_BlockMerge_Handler,
		},
		{
			MethodName: "BlockCopy",
			Handler:    _ClientCommands_BlockCopy_Handler,
		},
		{
			MethodName: "BlockPaste",
			Handler:    _ClientCommands_BlockPaste_Handler,
		},
		{
			MethodName: "BlockCut",
			Handler:    _ClientCommands_BlockCut_Handler,
		},
		{
			MethodName: "BlockSetFields",
			Handler:    _ClientCommands_BlockSetFields_Handler,
		},
		{
			MethodName: "BlockExport",
			Handler:    _ClientCommands_BlockExport_Handler,
		},
		{
			MethodName: "BlockSetCarriage",
			Handler:    _ClientCommands_BlockSetCarriage_Handler,
		},
		{
			MethodName: "BlockListDelete",
			Handler:    _ClientCommands_BlockListDelete_Handler,
		},
		{
			MethodName: "BlockListMoveToExistingObject",
			Handler:    _ClientCommands_BlockListMoveToExistingObject_Handler,
		},
		{
			MethodName: "BlockListMoveToNewObject",
			Handler:    _ClientCommands_BlockListMoveToNewObject_Handler,
		},
		{
			MethodName: "BlockListConvertToObjects",
			Handler:    _ClientCommands_BlockListConvertToObjects_Handler,
		},
		{
			MethodName: "BlockListSetFields",
			Handler:    _ClientCommands_BlockListSetFields_Handler,
		},
		{
			MethodName: "BlockListDuplicate",
			Handler:    _ClientCommands_BlockListDuplicate_Handler,
		},
		{
			MethodName: "BlockListSetBackgroundColor",
			Handler:    _ClientCommands_BlockListSetBackgroundColor_Handler,
		},
		{
			MethodName: "BlockListSetAlign",
			Handler:    _ClientCommands_BlockListSetAlign_Handler,
		},
		{
			MethodName: "BlockListSetVerticalAlign",
			Handler:    _ClientCommands_BlockListSetVerticalAlign_Handler,
		},
		{
			MethodName: "BlockListTurnInto",
			Handler:    _ClientCommands_BlockListTurnInto_Handler,
		},
		{
			MethodName: "BlockTextSetText",
			Handler:    _ClientCommands_BlockTextSetText_Handler,
		},
		{
			MethodName: "BlockTextSetColor",
			Handler:    _ClientCommands_BlockTextSetColor_Handler,
		},
		{
			MethodName: "BlockTextSetStyle",
			Handler:    _ClientCommands_BlockTextSetStyle_Handler,
		},
		{
			MethodName: "BlockTextSetChecked",
			Handler:    _ClientCommands_BlockTextSetChecked_Handler,
		},
		{
			MethodName: "BlockTextSetIcon",
			Handler:    _ClientCommands_BlockTextSetIcon_Handler,
		},
		{
			MethodName: "BlockTextListSetColor",
			Handler:    _ClientCommands_BlockTextListSetColor_Handler,
		},
		{
			MethodName: "BlockTextListSetMark",
			Handler:    _ClientCommands_BlockTextListSetMark_Handler,
		},
		{
			MethodName: "BlockTextListSetStyle",
			Handler:    _ClientCommands_BlockTextListSetStyle_Handler,
		},
		{
			MethodName: "BlockTextListClearStyle",
			Handler:    _ClientCommands_BlockTextListClearStyle_Handler,
		},
		{
			MethodName: "BlockTextListClearContent",
			Handler:    _ClientCommands_BlockTextListClearContent_Handler,
		},
		{
			MethodName: "BlockFileSetName",
			Handler:    _ClientCommands_BlockFileSetName_Handler,
		},
		{
			MethodName: "BlockImageSetName",
			Handler:    _ClientCommands_BlockImageSetName_Handler,
		},
		{
			MethodName: "BlockVideoSetName",
			Handler:    _ClientCommands_BlockVideoSetName_Handler,
		},
		{
			MethodName: "BlockFileCreateAndUpload",
			Handler:    _ClientCommands_BlockFileCreateAndUpload_Handler,
		},
		{
			MethodName: "BlockFileListSetStyle",
			Handler:    _ClientCommands_BlockFileListSetStyle_Handler,
		},
		{
			MethodName: "BlockDataviewViewCreate",
			Handler:    _ClientCommands_BlockDataviewViewCreate_Handler,
		},
		{
			MethodName: "BlockDataviewViewDelete",
			Handler:    _ClientCommands_BlockDataviewViewDelete_Handler,
		},
		{
			MethodName: "BlockDataviewViewUpdate",
			Handler:    _ClientCommands_BlockDataviewViewUpdate_Handler,
		},
		{
			MethodName: "BlockDataviewViewSetActive",
			Handler:    _ClientCommands_BlockDataviewViewSetActive_Handler,
		},
		{
			MethodName: "BlockDataviewViewSetPosition",
			Handler:    _ClientCommands_BlockDataviewViewSetPosition_Handler,
		},
		{
			MethodName: "BlockDataviewSetSource",
			Handler:    _ClientCommands_BlockDataviewSetSource_Handler,
		},
		{
			MethodName: "BlockDataviewRelationAdd",
			Handler:    _ClientCommands_BlockDataviewRelationAdd_Handler,
		},
		{
			MethodName: "BlockDataviewRelationDelete",
			Handler:    _ClientCommands_BlockDataviewRelationDelete_Handler,
		},
		{
			MethodName: "BlockDataviewRelationListAvailable",
			Handler:    _ClientCommands_BlockDataviewRelationListAvailable_Handler,
		},
		{
			MethodName: "BlockDataviewGroupOrderUpdate",
			Handler:    _ClientCommands_BlockDataviewGroupOrderUpdate_Handler,
		},
		{
			MethodName: "BlockDataviewObjectOrderUpdate",
			Handler:    _ClientCommands_BlockDataviewObjectOrderUpdate_Handler,
		},
		{
			MethodName: "BlockDataviewObjectOrderMove",
			Handler:    _ClientCommands_BlockDataviewObjectOrderMove_Handler,
		},
		{
			MethodName: "BlockDataviewCreateFromExistingObject",
			Handler:    _ClientCommands_BlockDataviewCreateFromExistingObject_Handler,
		},
		{
			MethodName: "BlockDataviewFilterAdd",
			Handler:    _ClientCommands_BlockDataviewFilterAdd_Handler,
		},
		{
			MethodName: "BlockDataviewFilterRemove",
			Handler:    _ClientCommands_BlockDataviewFilterRemove_Handler,
		},
		{
			MethodName: "BlockDataviewFilterReplace",
			Handler:    _ClientCommands_BlockDataviewFilterReplace_Handler,
		},
		{
			MethodName: "BlockDataviewFilterSort",
			Handler:    _ClientCommands_BlockDataviewFilterSort_Handler,
		},
		{
			MethodName: "BlockDataviewSortAdd",
			Handler:    _ClientCommands_BlockDataviewSortAdd_Handler,
		},
		{
			MethodName: "BlockDataviewSortRemove",
			Handler:    _ClientCommands_BlockDataviewSortRemove_Handler,
		},
		{
			MethodName: "BlockDataviewSortReplace",
			Handler:    _ClientCommands_BlockDataviewSortReplace_Handler,
		},
		{
			MethodName: "BlockDataviewSortSort",
			Handler:    _ClientCommands_BlockDataviewSortSort_Handler,
		},
		{
			MethodName: "BlockDataviewViewRelationAdd",
			Handler:    _ClientCommands_BlockDataviewViewRelationAdd_Handler,
		},
		{
			MethodName: "BlockDataviewViewRelationRemove",
			Handler:    _ClientCommands_BlockDataviewViewRelationRemove_Handler,
		},
		{
			MethodName: "BlockDataviewViewRelationReplace",
			Handler:    _ClientCommands_BlockDataviewViewRelationReplace_Handler,
		},
		{
			MethodName: "BlockDataviewViewRelationSort",
			Handler:    _ClientCommands_BlockDataviewViewRelationSort_Handler,
		},
		{
			MethodName: "BlockTableCreate",
			Handler:    _ClientCommands_BlockTableCreate_Handler,
		},
		{
			MethodName: "BlockTableExpand",
			Handler:    _ClientCommands_BlockTableExpand_Handler,
		},
		{
			MethodName: "BlockTableRowCreate",
			Handler:    _ClientCommands_BlockTableRowCreate_Handler,
		},
		{
			MethodName: "BlockTableRowDelete",
			Handler:    _ClientCommands_BlockTableRowDelete_Handler,
		},
		{
			MethodName: "BlockTableRowDuplicate",
			Handler:    _ClientCommands_BlockTableRowDuplicate_Handler,
		},
		{
			MethodName: "BlockTableRowSetHeader",
			Handler:    _ClientCommands_BlockTableRowSetHeader_Handler,
		},
		{
			MethodName: "BlockTableColumnCreate",
			Handler:    _ClientCommands_BlockTableColumnCreate_Handler,
		},
		{
			MethodName: "BlockTableColumnMove",
			Handler:    _ClientCommands_BlockTableColumnMove_Handler,
		},
		{
			MethodName: "BlockTableColumnDelete",
			Handler:    _ClientCommands_BlockTableColumnDelete_Handler,
		},
		{
			MethodName: "BlockTableColumnDuplicate",
			Handler:    _ClientCommands_BlockTableColumnDuplicate_Handler,
		},
		{
			MethodName: "BlockTableRowListFill",
			Handler:    _ClientCommands_BlockTableRowListFill_Handler,
		},
		{
			MethodName: "BlockTableRowListClean",
			Handler:    _ClientCommands_BlockTableRowListClean_Handler,
		},
		{
			MethodName: "BlockTableColumnListFill",
			Handler:    _ClientCommands_BlockTableColumnListFill_Handler,
		},
		{
			MethodName: "BlockTableSort",
			Handler:    _ClientCommands_BlockTableSort_Handler,
		},
		{
			MethodName: "BlockCreateWidget",
			Handler:    _ClientCommands_BlockCreateWidget_Handler,
		},
		{
			MethodName: "BlockWidgetSetTargetId",
			Handler:    _ClientCommands_BlockWidgetSetTargetId_Handler,
		},
		{
			MethodName: "BlockWidgetSetLayout",
			Handler:    _ClientCommands_BlockWidgetSetLayout_Handler,
		},
		{
			MethodName: "BlockWidgetSetLimit",
			Handler:    _ClientCommands_BlockWidgetSetLimit_Handler,
		},
		{
			MethodName: "BlockWidgetSetViewId",
			Handler:    _ClientCommands_BlockWidgetSetViewId_Handler,
		},
		{
			MethodName: "BlockLinkCreateWithObject",
			Handler:    _ClientCommands_BlockLinkCreateWithObject_Handler,
		},
		{
			MethodName: "BlockLinkListSetAppearance",
			Handler:    _ClientCommands_BlockLinkListSetAppearance_Handler,
		},
		{
			MethodName: "BlockBookmarkFetch",
			Handler:    _ClientCommands_BlockBookmarkFetch_Handler,
		},
		{
			MethodName: "BlockBookmarkCreateAndFetch",
			Handler:    _ClientCommands_BlockBookmarkCreateAndFetch_Handler,
		},
		{
			MethodName: "BlockRelationSetKey",
			Handler:    _ClientCommands_BlockRelationSetKey_Handler,
		},
		{
			MethodName: "BlockRelationAdd",
			Handler:    _ClientCommands_BlockRelationAdd_Handler,
		},
		{
			MethodName: "BlockDivListSetStyle",
			Handler:    _ClientCommands_BlockDivListSetStyle_Handler,
		},
		{
			MethodName: "BlockLatexSetText",
			Handler:    _ClientCommands_BlockLatexSetText_Handler,
		},
		{
			MethodName: "ProcessCancel",
			Handler:    _ClientCommands_ProcessCancel_Handler,
		},
		{
			MethodName: "LogSend",
			Handler:    _ClientCommands_LogSend_Handler,
		},
		{
			MethodName: "DebugTree",
			Handler:    _ClientCommands_DebugTree_Handler,
		},
		{
			MethodName: "DebugTreeHeads",
			Handler:    _ClientCommands_DebugTreeHeads_Handler,
		},
		{
			MethodName: "DebugSpaceSummary",
			Handler:    _ClientCommands_DebugSpaceSummary_Handler,
		},
		{
			MethodName: "DebugStackGoroutines",
			Handler:    _ClientCommands_DebugStackGoroutines_Handler,
		},
		{
			MethodName: "DebugExportLocalstore",
			Handler:    _ClientCommands_DebugExportLocalstore_Handler,
		},
		{
			MethodName: "DebugPing",
			Handler:    _ClientCommands_DebugPing_Handler,
		},
		{
			MethodName: "DebugSubscriptions",
			Handler:    _ClientCommands_DebugSubscriptions_Handler,
		},
		{
			MethodName: "DebugOpenedObjects",
			Handler:    _ClientCommands_DebugOpenedObjects_Handler,
		},
		{
			MethodName: "MetricsSetParameters",
			Handler:    _ClientCommands_MetricsSetParameters_Handler,
		},
		{
			MethodName: "NotificationList",
			Handler:    _ClientCommands_NotificationList_Handler,
		},
		{
			MethodName: "NotificationReply",
			Handler:    _ClientCommands_NotificationReply_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenSessionEvents",
			Handler:       _ClientCommands_ListenSessionEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/protos/service/service.proto",
}
