// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/anytype-heart/core/block/object/objectcreator (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -package mockCreator -destination creator_mock.go github.com/anyproto/anytype-heart/core/block/object/objectcreator Service
//
// Package mockCreator is a generated GoMock package.
package mockCreator

import (
	context "context"
	reflect "reflect"

	app "github.com/anyproto/any-sync/app"
	state "github.com/anyproto/anytype-heart/core/block/editor/state"
	pb "github.com/anyproto/anytype-heart/pb"
	smartblock "github.com/anyproto/anytype-heart/pkg/lib/core/smartblock"
	types "github.com/gogo/protobuf/types"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateSet mocks base method.
func (m *MockService) CreateSet(arg0 *pb.RpcObjectCreateSetRequest) (string, *types.Struct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSet", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*types.Struct)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSet indicates an expected call of CreateSet.
func (mr *MockServiceMockRecorder) CreateSet(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSet", reflect.TypeOf((*MockService)(nil).CreateSet), arg0)
}

// CreateSmartBlockFromState mocks base method.
func (m *MockService) CreateSmartBlockFromState(arg0 context.Context, arg1 smartblock.SmartBlockType, arg2 *types.Struct, arg3 *state.State) (string, *types.Struct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSmartBlockFromState", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*types.Struct)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSmartBlockFromState indicates an expected call of CreateSmartBlockFromState.
func (mr *MockServiceMockRecorder) CreateSmartBlockFromState(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSmartBlockFromState", reflect.TypeOf((*MockService)(nil).CreateSmartBlockFromState), arg0, arg1, arg2, arg3)
}

// CreateSmartBlockFromTemplate mocks base method.
func (m *MockService) CreateSmartBlockFromTemplate(arg0 context.Context, arg1 smartblock.SmartBlockType, arg2 *types.Struct, arg3 string) (string, *types.Struct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSmartBlockFromTemplate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*types.Struct)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSmartBlockFromTemplate indicates an expected call of CreateSmartBlockFromTemplate.
func (mr *MockServiceMockRecorder) CreateSmartBlockFromTemplate(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSmartBlockFromTemplate", reflect.TypeOf((*MockService)(nil).CreateSmartBlockFromTemplate), arg0, arg1, arg2, arg3)
}

// CreateSubObjectInWorkspace mocks base method.
func (m *MockService) CreateSubObjectInWorkspace(arg0 *types.Struct, arg1 string) (string, *types.Struct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubObjectInWorkspace", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*types.Struct)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSubObjectInWorkspace indicates an expected call of CreateSubObjectInWorkspace.
func (mr *MockServiceMockRecorder) CreateSubObjectInWorkspace(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubObjectInWorkspace", reflect.TypeOf((*MockService)(nil).CreateSubObjectInWorkspace), arg0, arg1)
}

// CreateSubObjectsInWorkspace mocks base method.
func (m *MockService) CreateSubObjectsInWorkspace(arg0 []*types.Struct) ([]string, []*types.Struct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubObjectsInWorkspace", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].([]*types.Struct)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSubObjectsInWorkspace indicates an expected call of CreateSubObjectsInWorkspace.
func (mr *MockServiceMockRecorder) CreateSubObjectsInWorkspace(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubObjectsInWorkspace", reflect.TypeOf((*MockService)(nil).CreateSubObjectsInWorkspace), arg0)
}

// Init mocks base method.
func (m *MockService) Init(arg0 *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockServiceMockRecorder) Init(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockService)(nil).Init), arg0)
}

// Name mocks base method.
func (m *MockService) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockServiceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockService)(nil).Name))
}
