// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/anytype-heart/core/relation (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -package mockRelation -destination relation_mock.go github.com/anyproto/anytype-heart/core/relation Service
//
// Package mockRelation is a generated GoMock package.
package mockRelation

import (
	reflect "reflect"

	app "github.com/anyproto/any-sync/app"
	types "github.com/gogo/protobuf/types"
	gomock "go.uber.org/mock/gomock"

	relation "github.com/anyproto/anytype-heart/core/relation"
	relationutils "github.com/anyproto/anytype-heart/core/relation/relationutils"
	pbtypes "github.com/anyproto/anytype-heart/util/pbtypes"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// FetchKey mocks base method.
func (m *MockService) FetchKey(arg0 string, arg1 ...relation.FetchOption) (*relationutils.Relation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchKey", varargs...)
	ret0, _ := ret[0].(*relationutils.Relation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchKey indicates an expected call of FetchKey.
func (mr *MockServiceMockRecorder) FetchKey(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchKey", reflect.TypeOf((*MockService)(nil).FetchKey), varargs...)
}

// FetchKeys mocks base method.
func (m *MockService) FetchKeys(arg0 ...string) (relationutils.Relations, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchKeys", varargs...)
	ret0, _ := ret[0].(relationutils.Relations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchKeys indicates an expected call of FetchKeys.
func (mr *MockServiceMockRecorder) FetchKeys(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchKeys", reflect.TypeOf((*MockService)(nil).FetchKeys), arg0...)
}

// FetchLinks mocks base method.
func (m *MockService) FetchLinks(arg0 pbtypes.RelationLinks) (relationutils.Relations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchLinks", arg0)
	ret0, _ := ret[0].(relationutils.Relations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchLinks indicates an expected call of FetchLinks.
func (mr *MockServiceMockRecorder) FetchLinks(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLinks", reflect.TypeOf((*MockService)(nil).FetchLinks), arg0)
}

// Init mocks base method.
func (m *MockService) Init(arg0 *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockServiceMockRecorder) Init(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockService)(nil).Init), arg0)
}

// ListAll mocks base method.
func (m *MockService) ListAll(arg0 ...relation.FetchOption) (relationutils.Relations, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAll", varargs...)
	ret0, _ := ret[0].(relationutils.Relations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockServiceMockRecorder) ListAll(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockService)(nil).ListAll), arg0...)
}

// Name mocks base method.
func (m *MockService) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockServiceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockService)(nil).Name))
}

// ValidateFormat mocks base method.
func (m *MockService) ValidateFormat(arg0 string, arg1 *types.Value) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateFormat", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateFormat indicates an expected call of ValidateFormat.
func (mr *MockServiceMockRecorder) ValidateFormat(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateFormat", reflect.TypeOf((*MockService)(nil).ValidateFormat), arg0, arg1)
}
