// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/anytype-heart/core/block/undo (interfaces: History)
//
// Generated by this command:
//
//	mockgen -package testMock -destination history_mock.go github.com/anyproto/anytype-heart/core/block/undo History
//
// Package testMock is a generated GoMock package.
package testMock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	undo "github.com/anyproto/anytype-heart/core/block/undo"
)

// MockHistory is a mock of History interface.
type MockHistory struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryMockRecorder
}

// MockHistoryMockRecorder is the mock recorder for MockHistory.
type MockHistoryMockRecorder struct {
	mock *MockHistory
}

// NewMockHistory creates a new mock instance.
func NewMockHistory(ctrl *gomock.Controller) *MockHistory {
	mock := &MockHistory{ctrl: ctrl}
	mock.recorder = &MockHistoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistory) EXPECT() *MockHistoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockHistory) Add(arg0 undo.Action) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", arg0)
}

// Add indicates an expected call of Add.
func (mr *MockHistoryMockRecorder) Add(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockHistory)(nil).Add), arg0)
}

// Counters mocks base method.
func (m *MockHistory) Counters() (int32, int32) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Counters")
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(int32)
	return ret0, ret1
}

// Counters indicates an expected call of Counters.
func (mr *MockHistoryMockRecorder) Counters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Counters", reflect.TypeOf((*MockHistory)(nil).Counters))
}

// Len mocks base method.
func (m *MockHistory) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockHistoryMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockHistory)(nil).Len))
}

// Next mocks base method.
func (m *MockHistory) Next() (undo.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(undo.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockHistoryMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockHistory)(nil).Next))
}

// Previous mocks base method.
func (m *MockHistory) Previous() (undo.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Previous")
	ret0, _ := ret[0].(undo.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Previous indicates an expected call of Previous.
func (mr *MockHistoryMockRecorder) Previous() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Previous", reflect.TypeOf((*MockHistory)(nil).Previous))
}

// Reset mocks base method.
func (m *MockHistory) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockHistoryMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockHistory)(nil).Reset))
}

// SetCarriageBeforeState mocks base method.
func (m *MockHistory) SetCarriageBeforeState(arg0 undo.CarriageState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCarriageBeforeState", arg0)
}

// SetCarriageBeforeState indicates an expected call of SetCarriageBeforeState.
func (mr *MockHistoryMockRecorder) SetCarriageBeforeState(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCarriageBeforeState", reflect.TypeOf((*MockHistory)(nil).SetCarriageBeforeState), arg0)
}

// SetCarriageState mocks base method.
func (m *MockHistory) SetCarriageState(arg0 undo.CarriageState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCarriageState", arg0)
}

// SetCarriageState indicates an expected call of SetCarriageState.
func (mr *MockHistoryMockRecorder) SetCarriageState(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCarriageState", reflect.TypeOf((*MockHistory)(nil).SetCarriageState), arg0)
}
