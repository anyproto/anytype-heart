// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/anytype-heart/core/files (interfaces: Service,Image,File)
//
// Generated by this command:
//
//	mockgen -package testMock -destination file_service_mock.go -mock_names Service=MockFileService github.com/anyproto/anytype-heart/core/files Service,Image,File
//
// Package testMock is a generated GoMock package.
package testMock

import (
	context "context"
	io "io"
	reflect "reflect"

	app "github.com/anyproto/any-sync/app"
	domain "github.com/anyproto/anytype-heart/core/domain"
	files "github.com/anyproto/anytype-heart/core/files"
	pb "github.com/anyproto/anytype-heart/pb"
	mill "github.com/anyproto/anytype-heart/pkg/lib/mill"
	storage "github.com/anyproto/anytype-heart/pkg/lib/pb/storage"
	types "github.com/gogo/protobuf/types"
	gomock "go.uber.org/mock/gomock"
)

// MockFileService is a mock of Service interface.
type MockFileService struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceMockRecorder
}

// MockFileServiceMockRecorder is the mock recorder for MockFileService.
type MockFileServiceMockRecorder struct {
	mock *MockFileService
}

// NewMockFileService creates a new mock instance.
func NewMockFileService(ctrl *gomock.Controller) *MockFileService {
	mock := &MockFileService{ctrl: ctrl}
	mock.recorder = &MockFileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileService) EXPECT() *MockFileServiceMockRecorder {
	return m.recorder
}

// FileAdd mocks base method.
func (m *MockFileService) FileAdd(arg0 context.Context, arg1 string, arg2 ...files.AddOption) (files.File, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FileAdd", varargs...)
	ret0, _ := ret[0].(files.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileAdd indicates an expected call of FileAdd.
func (mr *MockFileServiceMockRecorder) FileAdd(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileAdd", reflect.TypeOf((*MockFileService)(nil).FileAdd), varargs...)
}

// FileByHash mocks base method.
func (m *MockFileService) FileByHash(arg0 context.Context, arg1 domain.FullID) (files.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileByHash", arg0, arg1)
	ret0, _ := ret[0].(files.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileByHash indicates an expected call of FileByHash.
func (mr *MockFileServiceMockRecorder) FileByHash(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileByHash", reflect.TypeOf((*MockFileService)(nil).FileByHash), arg0, arg1)
}

// FileGetKeys mocks base method.
func (m *MockFileService) FileGetKeys(arg0 domain.FullID) (*files.FileKeys, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileGetKeys", arg0)
	ret0, _ := ret[0].(*files.FileKeys)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileGetKeys indicates an expected call of FileGetKeys.
func (mr *MockFileServiceMockRecorder) FileGetKeys(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileGetKeys", reflect.TypeOf((*MockFileService)(nil).FileGetKeys), arg0)
}

// FileListOffload mocks base method.
func (m *MockFileService) FileListOffload(arg0 context.Context, arg1 []string, arg2 bool) (uint64, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileListOffload", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FileListOffload indicates an expected call of FileListOffload.
func (mr *MockFileServiceMockRecorder) FileListOffload(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileListOffload", reflect.TypeOf((*MockFileService)(nil).FileListOffload), arg0, arg1, arg2)
}

// FileOffload mocks base method.
func (m *MockFileService) FileOffload(arg0 context.Context, arg1 string, arg2 bool) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileOffload", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileOffload indicates an expected call of FileOffload.
func (mr *MockFileServiceMockRecorder) FileOffload(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileOffload", reflect.TypeOf((*MockFileService)(nil).FileOffload), arg0, arg1, arg2)
}

// GetSpaceUsage mocks base method.
func (m *MockFileService) GetSpaceUsage(arg0 context.Context, arg1 string) (*pb.RpcFileSpaceUsageResponseUsage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpaceUsage", arg0, arg1)
	ret0, _ := ret[0].(*pb.RpcFileSpaceUsageResponseUsage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpaceUsage indicates an expected call of GetSpaceUsage.
func (mr *MockFileServiceMockRecorder) GetSpaceUsage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpaceUsage", reflect.TypeOf((*MockFileService)(nil).GetSpaceUsage), arg0, arg1)
}

// ImageAdd mocks base method.
func (m *MockFileService) ImageAdd(arg0 context.Context, arg1 string, arg2 ...files.AddOption) (files.Image, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImageAdd", varargs...)
	ret0, _ := ret[0].(files.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageAdd indicates an expected call of ImageAdd.
func (mr *MockFileServiceMockRecorder) ImageAdd(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageAdd", reflect.TypeOf((*MockFileService)(nil).ImageAdd), varargs...)
}

// ImageByHash mocks base method.
func (m *MockFileService) ImageByHash(arg0 context.Context, arg1 domain.FullID) (files.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageByHash", arg0, arg1)
	ret0, _ := ret[0].(files.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageByHash indicates an expected call of ImageByHash.
func (mr *MockFileServiceMockRecorder) ImageByHash(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageByHash", reflect.TypeOf((*MockFileService)(nil).ImageByHash), arg0, arg1)
}

// Init mocks base method.
func (m *MockFileService) Init(arg0 *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockFileServiceMockRecorder) Init(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockFileService)(nil).Init), arg0)
}

// Name mocks base method.
func (m *MockFileService) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockFileServiceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockFileService)(nil).Name))
}

// StoreFileKeys mocks base method.
func (m *MockFileService) StoreFileKeys(arg0 ...files.FileKeys) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StoreFileKeys", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreFileKeys indicates an expected call of StoreFileKeys.
func (mr *MockFileServiceMockRecorder) StoreFileKeys(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreFileKeys", reflect.TypeOf((*MockFileService)(nil).StoreFileKeys), arg0...)
}

// MockImage is a mock of Image interface.
type MockImage struct {
	ctrl     *gomock.Controller
	recorder *MockImageMockRecorder
}

// MockImageMockRecorder is the mock recorder for MockImage.
type MockImageMockRecorder struct {
	mock *MockImage
}

// NewMockImage creates a new mock instance.
func NewMockImage(ctrl *gomock.Controller) *MockImage {
	mock := &MockImage{ctrl: ctrl}
	mock.recorder = &MockImageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImage) EXPECT() *MockImageMockRecorder {
	return m.recorder
}

// Details mocks base method.
func (m *MockImage) Details(arg0 context.Context) (*types.Struct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Details", arg0)
	ret0, _ := ret[0].(*types.Struct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Details indicates an expected call of Details.
func (mr *MockImageMockRecorder) Details(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Details", reflect.TypeOf((*MockImage)(nil).Details), arg0)
}

// Exif mocks base method.
func (m *MockImage) Exif(arg0 context.Context) (*mill.ImageExifSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exif", arg0)
	ret0, _ := ret[0].(*mill.ImageExifSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exif indicates an expected call of Exif.
func (mr *MockImageMockRecorder) Exif(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exif", reflect.TypeOf((*MockImage)(nil).Exif), arg0)
}

// GetFileForLargestWidth mocks base method.
func (m *MockImage) GetFileForLargestWidth(arg0 context.Context) (files.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileForLargestWidth", arg0)
	ret0, _ := ret[0].(files.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileForLargestWidth indicates an expected call of GetFileForLargestWidth.
func (mr *MockImageMockRecorder) GetFileForLargestWidth(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileForLargestWidth", reflect.TypeOf((*MockImage)(nil).GetFileForLargestWidth), arg0)
}

// GetFileForWidth mocks base method.
func (m *MockImage) GetFileForWidth(arg0 context.Context, arg1 int) (files.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileForWidth", arg0, arg1)
	ret0, _ := ret[0].(files.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileForWidth indicates an expected call of GetFileForWidth.
func (mr *MockImageMockRecorder) GetFileForWidth(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileForWidth", reflect.TypeOf((*MockImage)(nil).GetFileForWidth), arg0, arg1)
}

// GetOriginalFile mocks base method.
func (m *MockImage) GetOriginalFile(arg0 context.Context) (files.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginalFile", arg0)
	ret0, _ := ret[0].(files.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginalFile indicates an expected call of GetOriginalFile.
func (mr *MockImageMockRecorder) GetOriginalFile(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginalFile", reflect.TypeOf((*MockImage)(nil).GetOriginalFile), arg0)
}

// Hash mocks base method.
func (m *MockImage) Hash() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash")
	ret0, _ := ret[0].(string)
	return ret0
}

// Hash indicates an expected call of Hash.
func (mr *MockImageMockRecorder) Hash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockImage)(nil).Hash))
}

// MockFile is a mock of File interface.
type MockFile struct {
	ctrl     *gomock.Controller
	recorder *MockFileMockRecorder
}

// MockFileMockRecorder is the mock recorder for MockFile.
type MockFileMockRecorder struct {
	mock *MockFile
}

// NewMockFile creates a new mock instance.
func NewMockFile(ctrl *gomock.Controller) *MockFile {
	mock := &MockFile{ctrl: ctrl}
	mock.recorder = &MockFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFile) EXPECT() *MockFileMockRecorder {
	return m.recorder
}

// Details mocks base method.
func (m *MockFile) Details(arg0 context.Context) (*types.Struct, domain.TypeKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Details", arg0)
	ret0, _ := ret[0].(*types.Struct)
	ret1, _ := ret[1].(domain.TypeKey)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Details indicates an expected call of Details.
func (mr *MockFileMockRecorder) Details(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Details", reflect.TypeOf((*MockFile)(nil).Details), arg0)
}

// Hash mocks base method.
func (m *MockFile) Hash() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash")
	ret0, _ := ret[0].(string)
	return ret0
}

// Hash indicates an expected call of Hash.
func (mr *MockFileMockRecorder) Hash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockFile)(nil).Hash))
}

// Info mocks base method.
func (m *MockFile) Info() *storage.FileInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(*storage.FileInfo)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockFileMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockFile)(nil).Info))
}

// Meta mocks base method.
func (m *MockFile) Meta() *files.FileMeta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Meta")
	ret0, _ := ret[0].(*files.FileMeta)
	return ret0
}

// Meta indicates an expected call of Meta.
func (mr *MockFileMockRecorder) Meta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Meta", reflect.TypeOf((*MockFile)(nil).Meta))
}

// Reader mocks base method.
func (m *MockFile) Reader(arg0 context.Context) (io.ReadSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reader", arg0)
	ret0, _ := ret[0].(io.ReadSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reader indicates an expected call of Reader.
func (mr *MockFileMockRecorder) Reader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reader", reflect.TypeOf((*MockFile)(nil).Reader), arg0)
}
