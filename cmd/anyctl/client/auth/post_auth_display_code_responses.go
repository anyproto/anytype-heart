// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/anyproto/anytype-heart/cmd/anyctl/models"
)

// PostAuthDisplayCodeReader is a Reader for the PostAuthDisplayCode structure.
type PostAuthDisplayCodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostAuthDisplayCodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostAuthDisplayCodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostAuthDisplayCodeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostAuthDisplayCodeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /auth/display_code] PostAuthDisplayCode", response, response.Code())
	}
}

// NewPostAuthDisplayCodeOK creates a PostAuthDisplayCodeOK with default headers values
func NewPostAuthDisplayCodeOK() *PostAuthDisplayCodeOK {
	return &PostAuthDisplayCodeOK{}
}

/*
PostAuthDisplayCodeOK describes a response with status code 200, with default header values.

Challenge ID
*/
type PostAuthDisplayCodeOK struct {
	Payload *models.AuthDisplayCodeResponse
}

// IsSuccess returns true when this post auth display code o k response has a 2xx status code
func (o *PostAuthDisplayCodeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post auth display code o k response has a 3xx status code
func (o *PostAuthDisplayCodeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post auth display code o k response has a 4xx status code
func (o *PostAuthDisplayCodeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post auth display code o k response has a 5xx status code
func (o *PostAuthDisplayCodeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post auth display code o k response a status code equal to that given
func (o *PostAuthDisplayCodeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post auth display code o k response
func (o *PostAuthDisplayCodeOK) Code() int {
	return 200
}

func (o *PostAuthDisplayCodeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/display_code][%d] postAuthDisplayCodeOK %s", 200, payload)
}

func (o *PostAuthDisplayCodeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/display_code][%d] postAuthDisplayCodeOK %s", 200, payload)
}

func (o *PostAuthDisplayCodeOK) GetPayload() *models.AuthDisplayCodeResponse {
	return o.Payload
}

func (o *PostAuthDisplayCodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AuthDisplayCodeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthDisplayCodeBadRequest creates a PostAuthDisplayCodeBadRequest with default headers values
func NewPostAuthDisplayCodeBadRequest() *PostAuthDisplayCodeBadRequest {
	return &PostAuthDisplayCodeBadRequest{}
}

/*
PostAuthDisplayCodeBadRequest describes a response with status code 400, with default header values.

Invalid input
*/
type PostAuthDisplayCodeBadRequest struct {
	Payload *models.UtilValidationError
}

// IsSuccess returns true when this post auth display code bad request response has a 2xx status code
func (o *PostAuthDisplayCodeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post auth display code bad request response has a 3xx status code
func (o *PostAuthDisplayCodeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post auth display code bad request response has a 4xx status code
func (o *PostAuthDisplayCodeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post auth display code bad request response has a 5xx status code
func (o *PostAuthDisplayCodeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post auth display code bad request response a status code equal to that given
func (o *PostAuthDisplayCodeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post auth display code bad request response
func (o *PostAuthDisplayCodeBadRequest) Code() int {
	return 400
}

func (o *PostAuthDisplayCodeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/display_code][%d] postAuthDisplayCodeBadRequest %s", 400, payload)
}

func (o *PostAuthDisplayCodeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/display_code][%d] postAuthDisplayCodeBadRequest %s", 400, payload)
}

func (o *PostAuthDisplayCodeBadRequest) GetPayload() *models.UtilValidationError {
	return o.Payload
}

func (o *PostAuthDisplayCodeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UtilValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthDisplayCodeInternalServerError creates a PostAuthDisplayCodeInternalServerError with default headers values
func NewPostAuthDisplayCodeInternalServerError() *PostAuthDisplayCodeInternalServerError {
	return &PostAuthDisplayCodeInternalServerError{}
}

/*
PostAuthDisplayCodeInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type PostAuthDisplayCodeInternalServerError struct {
	Payload *models.UtilServerError
}

// IsSuccess returns true when this post auth display code internal server error response has a 2xx status code
func (o *PostAuthDisplayCodeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post auth display code internal server error response has a 3xx status code
func (o *PostAuthDisplayCodeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post auth display code internal server error response has a 4xx status code
func (o *PostAuthDisplayCodeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post auth display code internal server error response has a 5xx status code
func (o *PostAuthDisplayCodeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post auth display code internal server error response a status code equal to that given
func (o *PostAuthDisplayCodeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post auth display code internal server error response
func (o *PostAuthDisplayCodeInternalServerError) Code() int {
	return 500
}

func (o *PostAuthDisplayCodeInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/display_code][%d] postAuthDisplayCodeInternalServerError %s", 500, payload)
}

func (o *PostAuthDisplayCodeInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /auth/display_code][%d] postAuthDisplayCodeInternalServerError %s", 500, payload)
}

func (o *PostAuthDisplayCodeInternalServerError) GetPayload() *models.UtilServerError {
	return o.Payload
}

func (o *PostAuthDisplayCodeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UtilServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
