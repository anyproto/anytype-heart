// Code generated by go-swagger; DO NOT EDIT.

package objects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new objects API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new objects API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new objects API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for objects API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteSpacesSpaceIDObjectsObjectID(params *DeleteSpacesSpaceIDObjectsObjectIDParams, opts ...ClientOption) (*DeleteSpacesSpaceIDObjectsObjectIDOK, error)

	GetSpacesSpaceIDObjects(params *GetSpacesSpaceIDObjectsParams, opts ...ClientOption) (*GetSpacesSpaceIDObjectsOK, error)

	GetSpacesSpaceIDObjectsObjectID(params *GetSpacesSpaceIDObjectsObjectIDParams, opts ...ClientOption) (*GetSpacesSpaceIDObjectsObjectIDOK, error)

	PostSpacesSpaceIDObjects(params *PostSpacesSpaceIDObjectsParams, opts ...ClientOption) (*PostSpacesSpaceIDObjectsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteSpacesSpaceIDObjectsObjectID deletes object
*/
func (a *Client) DeleteSpacesSpaceIDObjectsObjectID(params *DeleteSpacesSpaceIDObjectsObjectIDParams, opts ...ClientOption) (*DeleteSpacesSpaceIDObjectsObjectIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSpacesSpaceIDObjectsObjectIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteSpacesSpaceIDObjectsObjectID",
		Method:             "DELETE",
		PathPattern:        "/spaces/{space_id}/objects/{object_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSpacesSpaceIDObjectsObjectIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSpacesSpaceIDObjectsObjectIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteSpacesSpaceIDObjectsObjectID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSpacesSpaceIDObjects lists objects
*/
func (a *Client) GetSpacesSpaceIDObjects(params *GetSpacesSpaceIDObjectsParams, opts ...ClientOption) (*GetSpacesSpaceIDObjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSpacesSpaceIDObjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSpacesSpaceIDObjects",
		Method:             "GET",
		PathPattern:        "/spaces/{space_id}/objects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSpacesSpaceIDObjectsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSpacesSpaceIDObjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSpacesSpaceIDObjects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSpacesSpaceIDObjectsObjectID gets object
*/
func (a *Client) GetSpacesSpaceIDObjectsObjectID(params *GetSpacesSpaceIDObjectsObjectIDParams, opts ...ClientOption) (*GetSpacesSpaceIDObjectsObjectIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSpacesSpaceIDObjectsObjectIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSpacesSpaceIDObjectsObjectID",
		Method:             "GET",
		PathPattern:        "/spaces/{space_id}/objects/{object_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSpacesSpaceIDObjectsObjectIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSpacesSpaceIDObjectsObjectIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSpacesSpaceIDObjectsObjectID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostSpacesSpaceIDObjects creates object
*/
func (a *Client) PostSpacesSpaceIDObjects(params *PostSpacesSpaceIDObjectsParams, opts ...ClientOption) (*PostSpacesSpaceIDObjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSpacesSpaceIDObjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostSpacesSpaceIDObjects",
		Method:             "POST",
		PathPattern:        "/spaces/{space_id}/objects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSpacesSpaceIDObjectsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSpacesSpaceIDObjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSpacesSpaceIDObjects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
