// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchSortOptions search sort options
//
// swagger:model search.SortOptions
type SearchSortOptions struct {

	// direction
	// Enum: ["asc","desc"]
	Direction *string `json:"direction,omitempty"`

	// timestamp
	// Enum: ["created_date","last_modified_date","last_opened_date"]
	Timestamp *string `json:"timestamp,omitempty"`
}

// Validate validates this search sort options
func (m *SearchSortOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var searchSortOptionsTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["asc","desc"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchSortOptionsTypeDirectionPropEnum = append(searchSortOptionsTypeDirectionPropEnum, v)
	}
}

const (

	// SearchSortOptionsDirectionAsc captures enum value "asc"
	SearchSortOptionsDirectionAsc string = "asc"

	// SearchSortOptionsDirectionDesc captures enum value "desc"
	SearchSortOptionsDirectionDesc string = "desc"
)

// prop value enum
func (m *SearchSortOptions) validateDirectionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, searchSortOptionsTypeDirectionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SearchSortOptions) validateDirection(formats strfmt.Registry) error {
	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	// value enum
	if err := m.validateDirectionEnum("direction", "body", *m.Direction); err != nil {
		return err
	}

	return nil
}

var searchSortOptionsTypeTimestampPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["created_date","last_modified_date","last_opened_date"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchSortOptionsTypeTimestampPropEnum = append(searchSortOptionsTypeTimestampPropEnum, v)
	}
}

const (

	// SearchSortOptionsTimestampCreatedDate captures enum value "created_date"
	SearchSortOptionsTimestampCreatedDate string = "created_date"

	// SearchSortOptionsTimestampLastModifiedDate captures enum value "last_modified_date"
	SearchSortOptionsTimestampLastModifiedDate string = "last_modified_date"

	// SearchSortOptionsTimestampLastOpenedDate captures enum value "last_opened_date"
	SearchSortOptionsTimestampLastOpenedDate string = "last_opened_date"
)

// prop value enum
func (m *SearchSortOptions) validateTimestampEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, searchSortOptionsTypeTimestampPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SearchSortOptions) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	// value enum
	if err := m.validateTimestampEnum("timestamp", "body", *m.Timestamp); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this search sort options based on context it is used
func (m *SearchSortOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SearchSortOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchSortOptions) UnmarshalBinary(b []byte) error {
	var res SearchSortOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
