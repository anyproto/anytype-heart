// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ObjectBlock object block
//
// swagger:model object.Block
type ObjectBlock struct {

	// align
	// Example: AlignLeft
	// Enum: ["AlignLeft","AlignCenter","AlignRight","AlignJustify"]
	Align string `json:"align,omitempty"`

	// background color
	// Example: red
	BackgroundColor string `json:"background_color,omitempty"`

	// children ids
	// Example: ["['6797ce8ecda913cde14b02dc']"]
	ChildrenIds []string `json:"children_ids"`

	// file
	File *ObjectFile `json:"file,omitempty"`

	// id
	// Example: 64394517de52ad5acb89c66c
	ID string `json:"id,omitempty"`

	// text
	Text *ObjectText `json:"text,omitempty"`

	// vertical align
	// Example: VerticalAlignTop
	// Enum: ["VerticalAlignTop","VerticalAlignMiddle","VerticalAlignBottom"]
	VerticalAlign string `json:"vertical_align,omitempty"`
}

// Validate validates this object block
func (m *ObjectBlock) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlign(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateText(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerticalAlign(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var objectBlockTypeAlignPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AlignLeft","AlignCenter","AlignRight","AlignJustify"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		objectBlockTypeAlignPropEnum = append(objectBlockTypeAlignPropEnum, v)
	}
}

const (

	// ObjectBlockAlignAlignLeft captures enum value "AlignLeft"
	ObjectBlockAlignAlignLeft string = "AlignLeft"

	// ObjectBlockAlignAlignCenter captures enum value "AlignCenter"
	ObjectBlockAlignAlignCenter string = "AlignCenter"

	// ObjectBlockAlignAlignRight captures enum value "AlignRight"
	ObjectBlockAlignAlignRight string = "AlignRight"

	// ObjectBlockAlignAlignJustify captures enum value "AlignJustify"
	ObjectBlockAlignAlignJustify string = "AlignJustify"
)

// prop value enum
func (m *ObjectBlock) validateAlignEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, objectBlockTypeAlignPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ObjectBlock) validateAlign(formats strfmt.Registry) error {
	if swag.IsZero(m.Align) { // not required
		return nil
	}

	// value enum
	if err := m.validateAlignEnum("align", "body", m.Align); err != nil {
		return err
	}

	return nil
}

func (m *ObjectBlock) validateFile(formats strfmt.Registry) error {
	if swag.IsZero(m.File) { // not required
		return nil
	}

	if m.File != nil {
		if err := m.File.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("file")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("file")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectBlock) validateText(formats strfmt.Registry) error {
	if swag.IsZero(m.Text) { // not required
		return nil
	}

	if m.Text != nil {
		if err := m.Text.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("text")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("text")
			}
			return err
		}
	}

	return nil
}

var objectBlockTypeVerticalAlignPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VerticalAlignTop","VerticalAlignMiddle","VerticalAlignBottom"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		objectBlockTypeVerticalAlignPropEnum = append(objectBlockTypeVerticalAlignPropEnum, v)
	}
}

const (

	// ObjectBlockVerticalAlignVerticalAlignTop captures enum value "VerticalAlignTop"
	ObjectBlockVerticalAlignVerticalAlignTop string = "VerticalAlignTop"

	// ObjectBlockVerticalAlignVerticalAlignMiddle captures enum value "VerticalAlignMiddle"
	ObjectBlockVerticalAlignVerticalAlignMiddle string = "VerticalAlignMiddle"

	// ObjectBlockVerticalAlignVerticalAlignBottom captures enum value "VerticalAlignBottom"
	ObjectBlockVerticalAlignVerticalAlignBottom string = "VerticalAlignBottom"
)

// prop value enum
func (m *ObjectBlock) validateVerticalAlignEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, objectBlockTypeVerticalAlignPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ObjectBlock) validateVerticalAlign(formats strfmt.Registry) error {
	if swag.IsZero(m.VerticalAlign) { // not required
		return nil
	}

	// value enum
	if err := m.validateVerticalAlignEnum("vertical_align", "body", m.VerticalAlign); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this object block based on the context it is used
func (m *ObjectBlock) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateText(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectBlock) contextValidateFile(ctx context.Context, formats strfmt.Registry) error {

	if m.File != nil {

		if swag.IsZero(m.File) { // not required
			return nil
		}

		if err := m.File.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("file")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("file")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectBlock) contextValidateText(ctx context.Context, formats strfmt.Registry) error {

	if m.Text != nil {

		if swag.IsZero(m.Text) { // not required
			return nil
		}

		if err := m.Text.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("text")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("text")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ObjectBlock) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObjectBlock) UnmarshalBinary(b []byte) error {
	var res ObjectBlock
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
