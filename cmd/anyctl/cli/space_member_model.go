// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/anyproto/anytype-heart/cmd/anyctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for SpaceMember

// register flags to command
func registerModelSpaceMemberFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSpaceMemberPropGlobalName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpaceMemberPropIcon(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpaceMemberPropID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpaceMemberPropIdentity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpaceMemberPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpaceMemberPropRole(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSpaceMemberPropType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSpaceMemberPropGlobalName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagGlobalNameDescription := ``

	var flagGlobalNameName string
	if cmdPrefix == "" {
		flagGlobalNameName = "global_name"
	} else {
		flagGlobalNameName = fmt.Sprintf("%v.global_name", cmdPrefix)
	}

	var flagGlobalNameDefault string

	_ = cmd.PersistentFlags().String(flagGlobalNameName, flagGlobalNameDefault, flagGlobalNameDescription)

	return nil
}

func registerSpaceMemberPropIcon(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIconDescription := ``

	var flagIconName string
	if cmdPrefix == "" {
		flagIconName = "icon"
	} else {
		flagIconName = fmt.Sprintf("%v.icon", cmdPrefix)
	}

	var flagIconDefault string

	_ = cmd.PersistentFlags().String(flagIconName, flagIconDefault, flagIconDescription)

	return nil
}

func registerSpaceMemberPropID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIDDescription := ``

	var flagIDName string
	if cmdPrefix == "" {
		flagIDName = "id"
	} else {
		flagIDName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var flagIDDefault string

	_ = cmd.PersistentFlags().String(flagIDName, flagIDDefault, flagIDDescription)

	return nil
}

func registerSpaceMemberPropIdentity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIdentityDescription := ``

	var flagIdentityName string
	if cmdPrefix == "" {
		flagIdentityName = "identity"
	} else {
		flagIdentityName = fmt.Sprintf("%v.identity", cmdPrefix)
	}

	var flagIdentityDefault string

	_ = cmd.PersistentFlags().String(flagIdentityName, flagIdentityDefault, flagIdentityDescription)

	return nil
}

func registerSpaceMemberPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := ``

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

func registerSpaceMemberPropRole(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagRoleDescription := `Enum: ["Reader","Writer","Owner","NoPermission"]. `

	var flagRoleName string
	if cmdPrefix == "" {
		flagRoleName = "role"
	} else {
		flagRoleName = fmt.Sprintf("%v.role", cmdPrefix)
	}

	var flagRoleDefault string

	_ = cmd.PersistentFlags().String(flagRoleName, flagRoleDefault, flagRoleDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagRoleName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["Reader","Writer","Owner","NoPermission"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerSpaceMemberPropType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTypeDescription := ``

	var flagTypeName string
	if cmdPrefix == "" {
		flagTypeName = "type"
	} else {
		flagTypeName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var flagTypeDefault string

	_ = cmd.PersistentFlags().String(flagTypeName, flagTypeDefault, flagTypeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSpaceMemberFlags(depth int, m *models.SpaceMember, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, GlobalNameAdded := retrieveSpaceMemberPropGlobalNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GlobalNameAdded

	err, IconAdded := retrieveSpaceMemberPropIconFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IconAdded

	err, IDAdded := retrieveSpaceMemberPropIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IDAdded

	err, IdentityAdded := retrieveSpaceMemberPropIdentityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IdentityAdded

	err, NameAdded := retrieveSpaceMemberPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, RoleAdded := retrieveSpaceMemberPropRoleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RoleAdded

	err, TypeAdded := retrieveSpaceMemberPropTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TypeAdded

	return nil, retAdded
}

func retrieveSpaceMemberPropGlobalNameFlags(depth int, m *models.SpaceMember, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagGlobalNameName := fmt.Sprintf("%v.global_name", cmdPrefix)
	if cmd.Flags().Changed(flagGlobalNameName) {

		var flagGlobalNameName string
		if cmdPrefix == "" {
			flagGlobalNameName = "global_name"
		} else {
			flagGlobalNameName = fmt.Sprintf("%v.global_name", cmdPrefix)
		}

		flagGlobalNameValue, err := cmd.Flags().GetString(flagGlobalNameName)
		if err != nil {
			return err, false
		}
		m.GlobalName = flagGlobalNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpaceMemberPropIconFlags(depth int, m *models.SpaceMember, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIconName := fmt.Sprintf("%v.icon", cmdPrefix)
	if cmd.Flags().Changed(flagIconName) {

		var flagIconName string
		if cmdPrefix == "" {
			flagIconName = "icon"
		} else {
			flagIconName = fmt.Sprintf("%v.icon", cmdPrefix)
		}

		flagIconValue, err := cmd.Flags().GetString(flagIconName)
		if err != nil {
			return err, false
		}
		m.Icon = flagIconValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpaceMemberPropIDFlags(depth int, m *models.SpaceMember, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIDName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(flagIDName) {

		var flagIDName string
		if cmdPrefix == "" {
			flagIDName = "id"
		} else {
			flagIDName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		flagIDValue, err := cmd.Flags().GetString(flagIDName)
		if err != nil {
			return err, false
		}
		m.ID = flagIDValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpaceMemberPropIdentityFlags(depth int, m *models.SpaceMember, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIdentityName := fmt.Sprintf("%v.identity", cmdPrefix)
	if cmd.Flags().Changed(flagIdentityName) {

		var flagIdentityName string
		if cmdPrefix == "" {
			flagIdentityName = "identity"
		} else {
			flagIdentityName = fmt.Sprintf("%v.identity", cmdPrefix)
		}

		flagIdentityValue, err := cmd.Flags().GetString(flagIdentityName)
		if err != nil {
			return err, false
		}
		m.Identity = flagIdentityValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpaceMemberPropNameFlags(depth int, m *models.SpaceMember, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpaceMemberPropRoleFlags(depth int, m *models.SpaceMember, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagRoleName := fmt.Sprintf("%v.role", cmdPrefix)
	if cmd.Flags().Changed(flagRoleName) {

		var flagRoleName string
		if cmdPrefix == "" {
			flagRoleName = "role"
		} else {
			flagRoleName = fmt.Sprintf("%v.role", cmdPrefix)
		}

		flagRoleValue, err := cmd.Flags().GetString(flagRoleName)
		if err != nil {
			return err, false
		}
		m.Role = flagRoleValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSpaceMemberPropTypeFlags(depth int, m *models.SpaceMember, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTypeName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(flagTypeName) {

		var flagTypeName string
		if cmdPrefix == "" {
			flagTypeName = "type"
		} else {
			flagTypeName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		flagTypeValue, err := cmd.Flags().GetString(flagTypeName)
		if err != nil {
			return err, false
		}
		m.Type = flagTypeValue

		retAdded = true
	}

	return nil, retAdded
}
