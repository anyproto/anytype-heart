// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/anyproto/anytype-heart/cmd/anyctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for PaginationPaginationMeta

// register flags to command
func registerModelPaginationPaginationMetaFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPaginationPaginationMetaPropHasMore(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPaginationPaginationMetaPropLimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPaginationPaginationMetaPropOffset(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPaginationPaginationMetaPropTotal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPaginationPaginationMetaPropHasMore(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagHasMoreDescription := `whether there are more items available`

	var flagHasMoreName string
	if cmdPrefix == "" {
		flagHasMoreName = "has_more"
	} else {
		flagHasMoreName = fmt.Sprintf("%v.has_more", cmdPrefix)
	}

	var flagHasMoreDefault bool

	_ = cmd.PersistentFlags().Bool(flagHasMoreName, flagHasMoreDefault, flagHasMoreDescription)

	return nil
}

func registerPaginationPaginationMetaPropLimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLimitDescription := `the current limit`

	var flagLimitName string
	if cmdPrefix == "" {
		flagLimitName = "limit"
	} else {
		flagLimitName = fmt.Sprintf("%v.limit", cmdPrefix)
	}

	var flagLimitDefault int64

	_ = cmd.PersistentFlags().Int64(flagLimitName, flagLimitDefault, flagLimitDescription)

	return nil
}

func registerPaginationPaginationMetaPropOffset(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagOffsetDescription := `the current offset`

	var flagOffsetName string
	if cmdPrefix == "" {
		flagOffsetName = "offset"
	} else {
		flagOffsetName = fmt.Sprintf("%v.offset", cmdPrefix)
	}

	var flagOffsetDefault int64

	_ = cmd.PersistentFlags().Int64(flagOffsetName, flagOffsetDefault, flagOffsetDescription)

	return nil
}

func registerPaginationPaginationMetaPropTotal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalDescription := `the total number of items available on that endpoint`

	var flagTotalName string
	if cmdPrefix == "" {
		flagTotalName = "total"
	} else {
		flagTotalName = fmt.Sprintf("%v.total", cmdPrefix)
	}

	var flagTotalDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalName, flagTotalDefault, flagTotalDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPaginationPaginationMetaFlags(depth int, m *models.PaginationPaginationMeta, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, HasMoreAdded := retrievePaginationPaginationMetaPropHasMoreFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HasMoreAdded

	err, LimitAdded := retrievePaginationPaginationMetaPropLimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LimitAdded

	err, OffsetAdded := retrievePaginationPaginationMetaPropOffsetFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OffsetAdded

	err, TotalAdded := retrievePaginationPaginationMetaPropTotalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalAdded

	return nil, retAdded
}

func retrievePaginationPaginationMetaPropHasMoreFlags(depth int, m *models.PaginationPaginationMeta, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagHasMoreName := fmt.Sprintf("%v.has_more", cmdPrefix)
	if cmd.Flags().Changed(flagHasMoreName) {

		var flagHasMoreName string
		if cmdPrefix == "" {
			flagHasMoreName = "has_more"
		} else {
			flagHasMoreName = fmt.Sprintf("%v.has_more", cmdPrefix)
		}

		flagHasMoreValue, err := cmd.Flags().GetBool(flagHasMoreName)
		if err != nil {
			return err, false
		}
		m.HasMore = flagHasMoreValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePaginationPaginationMetaPropLimitFlags(depth int, m *models.PaginationPaginationMeta, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLimitName := fmt.Sprintf("%v.limit", cmdPrefix)
	if cmd.Flags().Changed(flagLimitName) {

		var flagLimitName string
		if cmdPrefix == "" {
			flagLimitName = "limit"
		} else {
			flagLimitName = fmt.Sprintf("%v.limit", cmdPrefix)
		}

		flagLimitValue, err := cmd.Flags().GetInt64(flagLimitName)
		if err != nil {
			return err, false
		}
		m.Limit = flagLimitValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePaginationPaginationMetaPropOffsetFlags(depth int, m *models.PaginationPaginationMeta, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagOffsetName := fmt.Sprintf("%v.offset", cmdPrefix)
	if cmd.Flags().Changed(flagOffsetName) {

		var flagOffsetName string
		if cmdPrefix == "" {
			flagOffsetName = "offset"
		} else {
			flagOffsetName = fmt.Sprintf("%v.offset", cmdPrefix)
		}

		flagOffsetValue, err := cmd.Flags().GetInt64(flagOffsetName)
		if err != nil {
			return err, false
		}
		m.Offset = flagOffsetValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePaginationPaginationMetaPropTotalFlags(depth int, m *models.PaginationPaginationMeta, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalName := fmt.Sprintf("%v.total", cmdPrefix)
	if cmd.Flags().Changed(flagTotalName) {

		var flagTotalName string
		if cmdPrefix == "" {
			flagTotalName = "total"
		} else {
			flagTotalName = fmt.Sprintf("%v.total", cmdPrefix)
		}

		flagTotalValue, err := cmd.Flags().GetInt64(flagTotalName)
		if err != nil {
			return err, false
		}
		m.Total = flagTotalValue

		retAdded = true
	}

	return nil, retAdded
}
