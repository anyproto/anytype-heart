// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/anyproto/anytype-heart/cmd/anyctl/models"
	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for ObjectBlock

// register flags to command
func registerModelObjectBlockFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerObjectBlockPropAlign(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectBlockPropBackgroundColor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectBlockPropChildrenIds(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectBlockPropFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectBlockPropID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectBlockPropText(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectBlockPropVerticalAlign(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerObjectBlockPropAlign(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagAlignDescription := `Enum: ["AlignLeft","AlignCenter","AlignRight","AlignJustify"]. `

	var flagAlignName string
	if cmdPrefix == "" {
		flagAlignName = "align"
	} else {
		flagAlignName = fmt.Sprintf("%v.align", cmdPrefix)
	}

	var flagAlignDefault string

	_ = cmd.PersistentFlags().String(flagAlignName, flagAlignDefault, flagAlignDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagAlignName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["AlignLeft","AlignCenter","AlignRight","AlignJustify"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerObjectBlockPropBackgroundColor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagBackgroundColorDescription := ``

	var flagBackgroundColorName string
	if cmdPrefix == "" {
		flagBackgroundColorName = "background_color"
	} else {
		flagBackgroundColorName = fmt.Sprintf("%v.background_color", cmdPrefix)
	}

	var flagBackgroundColorDefault string

	_ = cmd.PersistentFlags().String(flagBackgroundColorName, flagBackgroundColorDefault, flagBackgroundColorDescription)

	return nil
}

func registerObjectBlockPropChildrenIds(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: children_ids []string array type is not supported by go-swagger cli yet

	return nil
}

func registerObjectBlockPropFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagFileName string
	if cmdPrefix == "" {
		flagFileName = "file"
	} else {
		flagFileName = fmt.Sprintf("%v.file", cmdPrefix)
	}

	if err := registerModelObjectFileFlags(depth+1, flagFileName, cmd); err != nil {
		return err
	}

	return nil
}

func registerObjectBlockPropID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIDDescription := ``

	var flagIDName string
	if cmdPrefix == "" {
		flagIDName = "id"
	} else {
		flagIDName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var flagIDDefault string

	_ = cmd.PersistentFlags().String(flagIDName, flagIDDefault, flagIDDescription)

	return nil
}

func registerObjectBlockPropText(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagTextName string
	if cmdPrefix == "" {
		flagTextName = "text"
	} else {
		flagTextName = fmt.Sprintf("%v.text", cmdPrefix)
	}

	if err := registerModelObjectTextFlags(depth+1, flagTextName, cmd); err != nil {
		return err
	}

	return nil
}

func registerObjectBlockPropVerticalAlign(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagVerticalAlignDescription := `Enum: ["VerticalAlignTop","VerticalAlignMiddle","VerticalAlignBottom"]. `

	var flagVerticalAlignName string
	if cmdPrefix == "" {
		flagVerticalAlignName = "vertical_align"
	} else {
		flagVerticalAlignName = fmt.Sprintf("%v.vertical_align", cmdPrefix)
	}

	var flagVerticalAlignDefault string

	_ = cmd.PersistentFlags().String(flagVerticalAlignName, flagVerticalAlignDefault, flagVerticalAlignDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagVerticalAlignName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["VerticalAlignTop","VerticalAlignMiddle","VerticalAlignBottom"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelObjectBlockFlags(depth int, m *models.ObjectBlock, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AlignAdded := retrieveObjectBlockPropAlignFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AlignAdded

	err, BackgroundColorAdded := retrieveObjectBlockPropBackgroundColorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BackgroundColorAdded

	err, ChildrenIdsAdded := retrieveObjectBlockPropChildrenIdsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ChildrenIdsAdded

	err, FileAdded := retrieveObjectBlockPropFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileAdded

	err, IDAdded := retrieveObjectBlockPropIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IDAdded

	err, TextAdded := retrieveObjectBlockPropTextFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TextAdded

	err, VerticalAlignAdded := retrieveObjectBlockPropVerticalAlignFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VerticalAlignAdded

	return nil, retAdded
}

func retrieveObjectBlockPropAlignFlags(depth int, m *models.ObjectBlock, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAlignName := fmt.Sprintf("%v.align", cmdPrefix)
	if cmd.Flags().Changed(flagAlignName) {

		var flagAlignName string
		if cmdPrefix == "" {
			flagAlignName = "align"
		} else {
			flagAlignName = fmt.Sprintf("%v.align", cmdPrefix)
		}

		flagAlignValue, err := cmd.Flags().GetString(flagAlignName)
		if err != nil {
			return err, false
		}
		m.Align = flagAlignValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveObjectBlockPropBackgroundColorFlags(depth int, m *models.ObjectBlock, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagBackgroundColorName := fmt.Sprintf("%v.background_color", cmdPrefix)
	if cmd.Flags().Changed(flagBackgroundColorName) {

		var flagBackgroundColorName string
		if cmdPrefix == "" {
			flagBackgroundColorName = "background_color"
		} else {
			flagBackgroundColorName = fmt.Sprintf("%v.background_color", cmdPrefix)
		}

		flagBackgroundColorValue, err := cmd.Flags().GetString(flagBackgroundColorName)
		if err != nil {
			return err, false
		}
		m.BackgroundColor = flagBackgroundColorValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveObjectBlockPropChildrenIdsFlags(depth int, m *models.ObjectBlock, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagChildrenIdsName := fmt.Sprintf("%v.children_ids", cmdPrefix)
	if cmd.Flags().Changed(flagChildrenIdsName) {
		// warning: children_ids array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveObjectBlockPropFileFlags(depth int, m *models.ObjectBlock, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFileName := fmt.Sprintf("%v.file", cmdPrefix)
	if cmd.Flags().Changed(flagFileName) {
		// info: complex object file ObjectFile is retrieved outside this Changed() block
	}
	flagFileValue := m.File
	if swag.IsZero(flagFileValue) {
		flagFileValue = &models.ObjectFile{}
	}

	err, FileAdded := retrieveModelObjectFileFlags(depth+1, flagFileValue, flagFileName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileAdded
	if FileAdded {
		m.File = flagFileValue
	}

	return nil, retAdded
}

func retrieveObjectBlockPropIDFlags(depth int, m *models.ObjectBlock, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIDName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(flagIDName) {

		var flagIDName string
		if cmdPrefix == "" {
			flagIDName = "id"
		} else {
			flagIDName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		flagIDValue, err := cmd.Flags().GetString(flagIDName)
		if err != nil {
			return err, false
		}
		m.ID = flagIDValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveObjectBlockPropTextFlags(depth int, m *models.ObjectBlock, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTextName := fmt.Sprintf("%v.text", cmdPrefix)
	if cmd.Flags().Changed(flagTextName) {
		// info: complex object text ObjectText is retrieved outside this Changed() block
	}
	flagTextValue := m.Text
	if swag.IsZero(flagTextValue) {
		flagTextValue = &models.ObjectText{}
	}

	err, TextAdded := retrieveModelObjectTextFlags(depth+1, flagTextValue, flagTextName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TextAdded
	if TextAdded {
		m.Text = flagTextValue
	}

	return nil, retAdded
}

func retrieveObjectBlockPropVerticalAlignFlags(depth int, m *models.ObjectBlock, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVerticalAlignName := fmt.Sprintf("%v.vertical_align", cmdPrefix)
	if cmd.Flags().Changed(flagVerticalAlignName) {

		var flagVerticalAlignName string
		if cmdPrefix == "" {
			flagVerticalAlignName = "vertical_align"
		} else {
			flagVerticalAlignName = fmt.Sprintf("%v.vertical_align", cmdPrefix)
		}

		flagVerticalAlignValue, err := cmd.Flags().GetString(flagVerticalAlignName)
		if err != nil {
			return err, false
		}
		m.VerticalAlign = flagVerticalAlignValue

		retAdded = true
	}

	return nil, retAdded
}
