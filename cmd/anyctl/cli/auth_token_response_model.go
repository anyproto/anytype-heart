// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/anyproto/anytype-heart/cmd/anyctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for AuthTokenResponse

// register flags to command
func registerModelAuthTokenResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAuthTokenResponsePropAppKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAuthTokenResponsePropSessionToken(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAuthTokenResponsePropAppKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagAppKeyDescription := ``

	var flagAppKeyName string
	if cmdPrefix == "" {
		flagAppKeyName = "app_key"
	} else {
		flagAppKeyName = fmt.Sprintf("%v.app_key", cmdPrefix)
	}

	var flagAppKeyDefault string

	_ = cmd.PersistentFlags().String(flagAppKeyName, flagAppKeyDefault, flagAppKeyDescription)

	return nil
}

func registerAuthTokenResponsePropSessionToken(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSessionTokenDescription := ``

	var flagSessionTokenName string
	if cmdPrefix == "" {
		flagSessionTokenName = "session_token"
	} else {
		flagSessionTokenName = fmt.Sprintf("%v.session_token", cmdPrefix)
	}

	var flagSessionTokenDefault string

	_ = cmd.PersistentFlags().String(flagSessionTokenName, flagSessionTokenDefault, flagSessionTokenDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAuthTokenResponseFlags(depth int, m *models.AuthTokenResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AppKeyAdded := retrieveAuthTokenResponsePropAppKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AppKeyAdded

	err, SessionTokenAdded := retrieveAuthTokenResponsePropSessionTokenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SessionTokenAdded

	return nil, retAdded
}

func retrieveAuthTokenResponsePropAppKeyFlags(depth int, m *models.AuthTokenResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAppKeyName := fmt.Sprintf("%v.app_key", cmdPrefix)
	if cmd.Flags().Changed(flagAppKeyName) {

		var flagAppKeyName string
		if cmdPrefix == "" {
			flagAppKeyName = "app_key"
		} else {
			flagAppKeyName = fmt.Sprintf("%v.app_key", cmdPrefix)
		}

		flagAppKeyValue, err := cmd.Flags().GetString(flagAppKeyName)
		if err != nil {
			return err, false
		}
		m.AppKey = flagAppKeyValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAuthTokenResponsePropSessionTokenFlags(depth int, m *models.AuthTokenResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSessionTokenName := fmt.Sprintf("%v.session_token", cmdPrefix)
	if cmd.Flags().Changed(flagSessionTokenName) {

		var flagSessionTokenName string
		if cmdPrefix == "" {
			flagSessionTokenName = "session_token"
		} else {
			flagSessionTokenName = fmt.Sprintf("%v.session_token", cmdPrefix)
		}

		flagSessionTokenValue, err := cmd.Flags().GetString(flagSessionTokenName)
		if err != nil {
			return err, false
		}
		m.SessionToken = flagSessionTokenValue

		retAdded = true
	}

	return nil, retAdded
}
