// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/anyproto/anytype-heart/cmd/anyctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for ObjectText

// register flags to command
func registerModelObjectTextFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerObjectTextPropChecked(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectTextPropColor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectTextPropIcon(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectTextPropStyle(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectTextPropText(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerObjectTextPropChecked(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCheckedDescription := ``

	var flagCheckedName string
	if cmdPrefix == "" {
		flagCheckedName = "checked"
	} else {
		flagCheckedName = fmt.Sprintf("%v.checked", cmdPrefix)
	}

	var flagCheckedDefault bool

	_ = cmd.PersistentFlags().Bool(flagCheckedName, flagCheckedDefault, flagCheckedDescription)

	return nil
}

func registerObjectTextPropColor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagColorDescription := ``

	var flagColorName string
	if cmdPrefix == "" {
		flagColorName = "color"
	} else {
		flagColorName = fmt.Sprintf("%v.color", cmdPrefix)
	}

	var flagColorDefault string

	_ = cmd.PersistentFlags().String(flagColorName, flagColorDefault, flagColorDescription)

	return nil
}

func registerObjectTextPropIcon(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIconDescription := ``

	var flagIconName string
	if cmdPrefix == "" {
		flagIconName = "icon"
	} else {
		flagIconName = fmt.Sprintf("%v.icon", cmdPrefix)
	}

	var flagIconDefault string

	_ = cmd.PersistentFlags().String(flagIconName, flagIconDefault, flagIconDescription)

	return nil
}

func registerObjectTextPropStyle(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagStyleDescription := `Enum: ["Paragraph","Header1","Header2","Header3","Header4","Quote","Code","Title","Checkbox","Marked","Numbered","Toggle","Description","Callout"]. `

	var flagStyleName string
	if cmdPrefix == "" {
		flagStyleName = "style"
	} else {
		flagStyleName = fmt.Sprintf("%v.style", cmdPrefix)
	}

	var flagStyleDefault string

	_ = cmd.PersistentFlags().String(flagStyleName, flagStyleDefault, flagStyleDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagStyleName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["Paragraph","Header1","Header2","Header3","Header4","Quote","Code","Title","Checkbox","Marked","Numbered","Toggle","Description","Callout"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerObjectTextPropText(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTextDescription := ``

	var flagTextName string
	if cmdPrefix == "" {
		flagTextName = "text"
	} else {
		flagTextName = fmt.Sprintf("%v.text", cmdPrefix)
	}

	var flagTextDefault string

	_ = cmd.PersistentFlags().String(flagTextName, flagTextDefault, flagTextDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelObjectTextFlags(depth int, m *models.ObjectText, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CheckedAdded := retrieveObjectTextPropCheckedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CheckedAdded

	err, ColorAdded := retrieveObjectTextPropColorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ColorAdded

	err, IconAdded := retrieveObjectTextPropIconFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IconAdded

	err, StyleAdded := retrieveObjectTextPropStyleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StyleAdded

	err, TextAdded := retrieveObjectTextPropTextFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TextAdded

	return nil, retAdded
}

func retrieveObjectTextPropCheckedFlags(depth int, m *models.ObjectText, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCheckedName := fmt.Sprintf("%v.checked", cmdPrefix)
	if cmd.Flags().Changed(flagCheckedName) {

		var flagCheckedName string
		if cmdPrefix == "" {
			flagCheckedName = "checked"
		} else {
			flagCheckedName = fmt.Sprintf("%v.checked", cmdPrefix)
		}

		flagCheckedValue, err := cmd.Flags().GetBool(flagCheckedName)
		if err != nil {
			return err, false
		}
		m.Checked = flagCheckedValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveObjectTextPropColorFlags(depth int, m *models.ObjectText, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagColorName := fmt.Sprintf("%v.color", cmdPrefix)
	if cmd.Flags().Changed(flagColorName) {

		var flagColorName string
		if cmdPrefix == "" {
			flagColorName = "color"
		} else {
			flagColorName = fmt.Sprintf("%v.color", cmdPrefix)
		}

		flagColorValue, err := cmd.Flags().GetString(flagColorName)
		if err != nil {
			return err, false
		}
		m.Color = flagColorValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveObjectTextPropIconFlags(depth int, m *models.ObjectText, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIconName := fmt.Sprintf("%v.icon", cmdPrefix)
	if cmd.Flags().Changed(flagIconName) {

		var flagIconName string
		if cmdPrefix == "" {
			flagIconName = "icon"
		} else {
			flagIconName = fmt.Sprintf("%v.icon", cmdPrefix)
		}

		flagIconValue, err := cmd.Flags().GetString(flagIconName)
		if err != nil {
			return err, false
		}
		m.Icon = flagIconValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveObjectTextPropStyleFlags(depth int, m *models.ObjectText, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStyleName := fmt.Sprintf("%v.style", cmdPrefix)
	if cmd.Flags().Changed(flagStyleName) {

		var flagStyleName string
		if cmdPrefix == "" {
			flagStyleName = "style"
		} else {
			flagStyleName = fmt.Sprintf("%v.style", cmdPrefix)
		}

		flagStyleValue, err := cmd.Flags().GetString(flagStyleName)
		if err != nil {
			return err, false
		}
		m.Style = flagStyleValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveObjectTextPropTextFlags(depth int, m *models.ObjectText, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTextName := fmt.Sprintf("%v.text", cmdPrefix)
	if cmd.Flags().Changed(flagTextName) {

		var flagTextName string
		if cmdPrefix == "" {
			flagTextName = "text"
		} else {
			flagTextName = fmt.Sprintf("%v.text", cmdPrefix)
		}

		flagTextValue, err := cmd.Flags().GetString(flagTextName)
		if err != nil {
			return err, false
		}
		m.Text = flagTextValue

		retAdded = true
	}

	return nil, retAdded
}
