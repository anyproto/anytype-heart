// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/anyproto/anytype-heart/cmd/anyctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for ObjectType

// register flags to command
func registerModelObjectTypeFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerObjectTypePropIcon(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectTypePropID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectTypePropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectTypePropRecommendedLayout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectTypePropType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectTypePropUniqueKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerObjectTypePropIcon(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIconDescription := ``

	var flagIconName string
	if cmdPrefix == "" {
		flagIconName = "icon"
	} else {
		flagIconName = fmt.Sprintf("%v.icon", cmdPrefix)
	}

	var flagIconDefault string

	_ = cmd.PersistentFlags().String(flagIconName, flagIconDefault, flagIconDescription)

	return nil
}

func registerObjectTypePropID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIDDescription := ``

	var flagIDName string
	if cmdPrefix == "" {
		flagIDName = "id"
	} else {
		flagIDName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var flagIDDefault string

	_ = cmd.PersistentFlags().String(flagIDName, flagIDDefault, flagIDDescription)

	return nil
}

func registerObjectTypePropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := ``

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

func registerObjectTypePropRecommendedLayout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagRecommendedLayoutDescription := ``

	var flagRecommendedLayoutName string
	if cmdPrefix == "" {
		flagRecommendedLayoutName = "recommended_layout"
	} else {
		flagRecommendedLayoutName = fmt.Sprintf("%v.recommended_layout", cmdPrefix)
	}

	var flagRecommendedLayoutDefault string

	_ = cmd.PersistentFlags().String(flagRecommendedLayoutName, flagRecommendedLayoutDefault, flagRecommendedLayoutDescription)

	return nil
}

func registerObjectTypePropType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTypeDescription := ``

	var flagTypeName string
	if cmdPrefix == "" {
		flagTypeName = "type"
	} else {
		flagTypeName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var flagTypeDefault string

	_ = cmd.PersistentFlags().String(flagTypeName, flagTypeDefault, flagTypeDescription)

	return nil
}

func registerObjectTypePropUniqueKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUniqueKeyDescription := ``

	var flagUniqueKeyName string
	if cmdPrefix == "" {
		flagUniqueKeyName = "unique_key"
	} else {
		flagUniqueKeyName = fmt.Sprintf("%v.unique_key", cmdPrefix)
	}

	var flagUniqueKeyDefault string

	_ = cmd.PersistentFlags().String(flagUniqueKeyName, flagUniqueKeyDefault, flagUniqueKeyDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelObjectTypeFlags(depth int, m *models.ObjectType, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, IconAdded := retrieveObjectTypePropIconFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IconAdded

	err, IDAdded := retrieveObjectTypePropIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IDAdded

	err, NameAdded := retrieveObjectTypePropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, RecommendedLayoutAdded := retrieveObjectTypePropRecommendedLayoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RecommendedLayoutAdded

	err, TypeAdded := retrieveObjectTypePropTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TypeAdded

	err, UniqueKeyAdded := retrieveObjectTypePropUniqueKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UniqueKeyAdded

	return nil, retAdded
}

func retrieveObjectTypePropIconFlags(depth int, m *models.ObjectType, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIconName := fmt.Sprintf("%v.icon", cmdPrefix)
	if cmd.Flags().Changed(flagIconName) {

		var flagIconName string
		if cmdPrefix == "" {
			flagIconName = "icon"
		} else {
			flagIconName = fmt.Sprintf("%v.icon", cmdPrefix)
		}

		flagIconValue, err := cmd.Flags().GetString(flagIconName)
		if err != nil {
			return err, false
		}
		m.Icon = flagIconValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveObjectTypePropIDFlags(depth int, m *models.ObjectType, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIDName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(flagIDName) {

		var flagIDName string
		if cmdPrefix == "" {
			flagIDName = "id"
		} else {
			flagIDName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		flagIDValue, err := cmd.Flags().GetString(flagIDName)
		if err != nil {
			return err, false
		}
		m.ID = flagIDValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveObjectTypePropNameFlags(depth int, m *models.ObjectType, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveObjectTypePropRecommendedLayoutFlags(depth int, m *models.ObjectType, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagRecommendedLayoutName := fmt.Sprintf("%v.recommended_layout", cmdPrefix)
	if cmd.Flags().Changed(flagRecommendedLayoutName) {

		var flagRecommendedLayoutName string
		if cmdPrefix == "" {
			flagRecommendedLayoutName = "recommended_layout"
		} else {
			flagRecommendedLayoutName = fmt.Sprintf("%v.recommended_layout", cmdPrefix)
		}

		flagRecommendedLayoutValue, err := cmd.Flags().GetString(flagRecommendedLayoutName)
		if err != nil {
			return err, false
		}
		m.RecommendedLayout = flagRecommendedLayoutValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveObjectTypePropTypeFlags(depth int, m *models.ObjectType, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTypeName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(flagTypeName) {

		var flagTypeName string
		if cmdPrefix == "" {
			flagTypeName = "type"
		} else {
			flagTypeName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		flagTypeValue, err := cmd.Flags().GetString(flagTypeName)
		if err != nil {
			return err, false
		}
		m.Type = flagTypeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveObjectTypePropUniqueKeyFlags(depth int, m *models.ObjectType, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUniqueKeyName := fmt.Sprintf("%v.unique_key", cmdPrefix)
	if cmd.Flags().Changed(flagUniqueKeyName) {

		var flagUniqueKeyName string
		if cmdPrefix == "" {
			flagUniqueKeyName = "unique_key"
		} else {
			flagUniqueKeyName = fmt.Sprintf("%v.unique_key", cmdPrefix)
		}

		flagUniqueKeyValue, err := cmd.Flags().GetString(flagUniqueKeyName)
		if err != nil {
			return err, false
		}
		m.UniqueKey = flagUniqueKeyValue

		retAdded = true
	}

	return nil, retAdded
}
