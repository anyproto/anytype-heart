// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/anyproto/anytype-heart/cmd/anyctl/models"
	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for SpaceCreateSpaceResponse

// register flags to command
func registerModelSpaceCreateSpaceResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSpaceCreateSpaceResponsePropSpace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSpaceCreateSpaceResponsePropSpace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSpaceName string
	if cmdPrefix == "" {
		flagSpaceName = "space"
	} else {
		flagSpaceName = fmt.Sprintf("%v.space", cmdPrefix)
	}

	if err := registerModelSpaceSpaceFlags(depth+1, flagSpaceName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSpaceCreateSpaceResponseFlags(depth int, m *models.SpaceCreateSpaceResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, SpaceAdded := retrieveSpaceCreateSpaceResponsePropSpaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SpaceAdded

	return nil, retAdded
}

func retrieveSpaceCreateSpaceResponsePropSpaceFlags(depth int, m *models.SpaceCreateSpaceResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSpaceName := fmt.Sprintf("%v.space", cmdPrefix)
	if cmd.Flags().Changed(flagSpaceName) {
		// info: complex object space SpaceSpace is retrieved outside this Changed() block
	}
	flagSpaceValue := m.Space
	if swag.IsZero(flagSpaceValue) {
		flagSpaceValue = &models.SpaceSpace{}
	}

	err, SpaceAdded := retrieveModelSpaceSpaceFlags(depth+1, flagSpaceValue, flagSpaceName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SpaceAdded
	if SpaceAdded {
		m.Space = flagSpaceValue
	}

	return nil, retAdded
}
