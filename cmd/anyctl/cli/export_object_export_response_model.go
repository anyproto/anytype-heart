// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/anyproto/anytype-heart/cmd/anyctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for ExportObjectExportResponse

// register flags to command
func registerModelExportObjectExportResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerExportObjectExportResponsePropPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerExportObjectExportResponsePropPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagPathDescription := ``

	var flagPathName string
	if cmdPrefix == "" {
		flagPathName = "path"
	} else {
		flagPathName = fmt.Sprintf("%v.path", cmdPrefix)
	}

	var flagPathDefault string

	_ = cmd.PersistentFlags().String(flagPathName, flagPathDefault, flagPathDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelExportObjectExportResponseFlags(depth int, m *models.ExportObjectExportResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, PathAdded := retrieveExportObjectExportResponsePropPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PathAdded

	return nil, retAdded
}

func retrieveExportObjectExportResponsePropPathFlags(depth int, m *models.ExportObjectExportResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPathName := fmt.Sprintf("%v.path", cmdPrefix)
	if cmd.Flags().Changed(flagPathName) {

		var flagPathName string
		if cmdPrefix == "" {
			flagPathName = "path"
		} else {
			flagPathName = fmt.Sprintf("%v.path", cmdPrefix)
		}

		flagPathValue, err := cmd.Flags().GetString(flagPathName)
		if err != nil {
			return err, false
		}
		m.Path = flagPathValue

		retAdded = true
	}

	return nil, retAdded
}
