// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/anyproto/anytype-heart/cmd/anyctl/client/types"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationTypesGetSpacesSpaceIDTypesTypeIDTemplatesTemplateIDCmd returns a command to handle operation getSpacesSpaceIdTypesTypeIdTemplatesTemplateId
func makeOperationTypesGetSpacesSpaceIDTypesTypeIDTemplatesTemplateIDCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "GetSpacesSpaceIDTypesTypeIDTemplatesTemplateID",
		Short: ``,
		RunE:  runOperationTypesGetSpacesSpaceIDTypesTypeIDTemplatesTemplateID,
	}

	if err := registerOperationTypesGetSpacesSpaceIDTypesTypeIDTemplatesTemplateIDParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationTypesGetSpacesSpaceIDTypesTypeIDTemplatesTemplateID uses cmd flags to call endpoint api
func runOperationTypesGetSpacesSpaceIDTypesTypeIDTemplatesTemplateID(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := types.NewGetSpacesSpaceIDTypesTypeIDTemplatesTemplateIDParams()
	if err, _ = retrieveOperationTypesGetSpacesSpaceIDTypesTypeIDTemplatesTemplateIDSpaceIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationTypesGetSpacesSpaceIDTypesTypeIDTemplatesTemplateIDTemplateIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationTypesGetSpacesSpaceIDTypesTypeIDTemplatesTemplateIDTypeIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationTypesGetSpacesSpaceIDTypesTypeIDTemplatesTemplateIDResult(appCli.Types.GetSpacesSpaceIDTypesTypeIDTemplatesTemplateID(params))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationTypesGetSpacesSpaceIDTypesTypeIDTemplatesTemplateIDParamFlags registers all flags needed to fill params
func registerOperationTypesGetSpacesSpaceIDTypesTypeIDTemplatesTemplateIDParamFlags(cmd *cobra.Command) error {
	if err := registerOperationTypesGetSpacesSpaceIDTypesTypeIDTemplatesTemplateIDSpaceIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTypesGetSpacesSpaceIDTypesTypeIDTemplatesTemplateIDTemplateIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTypesGetSpacesSpaceIDTypesTypeIDTemplatesTemplateIDTypeIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationTypesGetSpacesSpaceIDTypesTypeIDTemplatesTemplateIDSpaceIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceIDDescription := `Required. Space ID`

	var flagSpaceIDName string
	if cmdPrefix == "" {
		flagSpaceIDName = "space_id"
	} else {
		flagSpaceIDName = fmt.Sprintf("%v.space_id", cmdPrefix)
	}

	var flagSpaceIDDefault string

	_ = cmd.PersistentFlags().String(flagSpaceIDName, flagSpaceIDDefault, flagSpaceIDDescription)

	return nil
}

func registerOperationTypesGetSpacesSpaceIDTypesTypeIDTemplatesTemplateIDTemplateIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagTemplateIDDescription := `Required. Template ID`

	var flagTemplateIDName string
	if cmdPrefix == "" {
		flagTemplateIDName = "template_id"
	} else {
		flagTemplateIDName = fmt.Sprintf("%v.template_id", cmdPrefix)
	}

	var flagTemplateIDDefault string

	_ = cmd.PersistentFlags().String(flagTemplateIDName, flagTemplateIDDefault, flagTemplateIDDescription)

	return nil
}

func registerOperationTypesGetSpacesSpaceIDTypesTypeIDTemplatesTemplateIDTypeIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagTypeIDDescription := `Required. Type ID`

	var flagTypeIDName string
	if cmdPrefix == "" {
		flagTypeIDName = "type_id"
	} else {
		flagTypeIDName = fmt.Sprintf("%v.type_id", cmdPrefix)
	}

	var flagTypeIDDefault string

	_ = cmd.PersistentFlags().String(flagTypeIDName, flagTypeIDDefault, flagTypeIDDescription)

	return nil
}

func retrieveOperationTypesGetSpacesSpaceIDTypesTypeIDTemplatesTemplateIDSpaceIDFlag(m *types.GetSpacesSpaceIDTypesTypeIDTemplatesTemplateIDParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space_id") {

		var flagSpaceIDName string
		if cmdPrefix == "" {
			flagSpaceIDName = "space_id"
		} else {
			flagSpaceIDName = fmt.Sprintf("%v.space_id", cmdPrefix)
		}

		flagSpaceIDValue, err := cmd.Flags().GetString(flagSpaceIDName)
		if err != nil {
			return err, false
		}
		m.SpaceID = flagSpaceIDValue

	}

	return nil, retAdded
}

func retrieveOperationTypesGetSpacesSpaceIDTypesTypeIDTemplatesTemplateIDTemplateIDFlag(m *types.GetSpacesSpaceIDTypesTypeIDTemplatesTemplateIDParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("template_id") {

		var flagTemplateIDName string
		if cmdPrefix == "" {
			flagTemplateIDName = "template_id"
		} else {
			flagTemplateIDName = fmt.Sprintf("%v.template_id", cmdPrefix)
		}

		flagTemplateIDValue, err := cmd.Flags().GetString(flagTemplateIDName)
		if err != nil {
			return err, false
		}
		m.TemplateID = flagTemplateIDValue

	}

	return nil, retAdded
}

func retrieveOperationTypesGetSpacesSpaceIDTypesTypeIDTemplatesTemplateIDTypeIDFlag(m *types.GetSpacesSpaceIDTypesTypeIDTemplatesTemplateIDParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("type_id") {

		var flagTypeIDName string
		if cmdPrefix == "" {
			flagTypeIDName = "type_id"
		} else {
			flagTypeIDName = fmt.Sprintf("%v.type_id", cmdPrefix)
		}

		flagTypeIDValue, err := cmd.Flags().GetString(flagTypeIDName)
		if err != nil {
			return err, false
		}
		m.TypeID = flagTypeIDValue

	}

	return nil, retAdded
}

// parseOperationTypesGetSpacesSpaceIDTypesTypeIDTemplatesTemplateIDResult parses request result and return the string content
func parseOperationTypesGetSpacesSpaceIDTypesTypeIDTemplatesTemplateIDResult(resp0 *types.GetSpacesSpaceIDTypesTypeIDTemplatesTemplateIDOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*types.GetSpacesSpaceIDTypesTypeIDTemplatesTemplateIDOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*types.GetSpacesSpaceIDTypesTypeIDTemplatesTemplateIDUnauthorized)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*types.GetSpacesSpaceIDTypesTypeIDTemplatesTemplateIDNotFound)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*types.GetSpacesSpaceIDTypesTypeIDTemplatesTemplateIDInternalServerError)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
