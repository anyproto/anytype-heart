// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/anyproto/anytype-heart/cmd/anyctl/client/spaces"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationSpacesGetSpacesCmd returns a command to handle operation getSpaces
func makeOperationSpacesGetSpacesCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "GetSpaces",
		Short: ``,
		RunE:  runOperationSpacesGetSpaces,
	}

	if err := registerOperationSpacesGetSpacesParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSpacesGetSpaces uses cmd flags to call endpoint api
func runOperationSpacesGetSpaces(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := spaces.NewGetSpacesParams()
	if err, _ = retrieveOperationSpacesGetSpacesLimitFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationSpacesGetSpacesOffsetFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationSpacesGetSpacesResult(appCli.Spaces.GetSpaces(params))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationSpacesGetSpacesParamFlags registers all flags needed to fill params
func registerOperationSpacesGetSpacesParamFlags(cmd *cobra.Command) error {
	if err := registerOperationSpacesGetSpacesLimitParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSpacesGetSpacesOffsetParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationSpacesGetSpacesLimitParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagLimitDescription := `The number of items to return`

	var flagLimitName string
	if cmdPrefix == "" {
		flagLimitName = "limit"
	} else {
		flagLimitName = fmt.Sprintf("%v.limit", cmdPrefix)
	}

	var flagLimitDefault int64 = 100

	_ = cmd.PersistentFlags().Int64(flagLimitName, flagLimitDefault, flagLimitDescription)

	return nil
}

func registerOperationSpacesGetSpacesOffsetParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagOffsetDescription := `The number of items to skip before starting to collect the result set`

	var flagOffsetName string
	if cmdPrefix == "" {
		flagOffsetName = "offset"
	} else {
		flagOffsetName = fmt.Sprintf("%v.offset", cmdPrefix)
	}

	var flagOffsetDefault int64

	_ = cmd.PersistentFlags().Int64(flagOffsetName, flagOffsetDefault, flagOffsetDescription)

	return nil
}

func retrieveOperationSpacesGetSpacesLimitFlag(m *spaces.GetSpacesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("limit") {

		var flagLimitName string
		if cmdPrefix == "" {
			flagLimitName = "limit"
		} else {
			flagLimitName = fmt.Sprintf("%v.limit", cmdPrefix)
		}

		flagLimitValue, err := cmd.Flags().GetInt64(flagLimitName)
		if err != nil {
			return err, false
		}
		m.Limit = &flagLimitValue

	}

	return nil, retAdded
}

func retrieveOperationSpacesGetSpacesOffsetFlag(m *spaces.GetSpacesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("offset") {

		var flagOffsetName string
		if cmdPrefix == "" {
			flagOffsetName = "offset"
		} else {
			flagOffsetName = fmt.Sprintf("%v.offset", cmdPrefix)
		}

		flagOffsetValue, err := cmd.Flags().GetInt64(flagOffsetName)
		if err != nil {
			return err, false
		}
		m.Offset = &flagOffsetValue

	}

	return nil, retAdded
}

// parseOperationSpacesGetSpacesResult parses request result and return the string content
func parseOperationSpacesGetSpacesResult(resp0 *spaces.GetSpacesOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*spaces.GetSpacesOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*spaces.GetSpacesUnauthorized)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*spaces.GetSpacesInternalServerError)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
