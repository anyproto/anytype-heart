// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/anyproto/anytype-heart/cmd/anyctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for ObjectFile

// register flags to command
func registerModelObjectFileFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerObjectFilePropAddedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectFilePropHash(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectFilePropMime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectFilePropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectFilePropSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectFilePropState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectFilePropStyle(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectFilePropTargetObjectID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectFilePropType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerObjectFilePropAddedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagAddedAtDescription := ``

	var flagAddedAtName string
	if cmdPrefix == "" {
		flagAddedAtName = "added_at"
	} else {
		flagAddedAtName = fmt.Sprintf("%v.added_at", cmdPrefix)
	}

	var flagAddedAtDefault int64

	_ = cmd.PersistentFlags().Int64(flagAddedAtName, flagAddedAtDefault, flagAddedAtDescription)

	return nil
}

func registerObjectFilePropHash(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagHashDescription := ``

	var flagHashName string
	if cmdPrefix == "" {
		flagHashName = "hash"
	} else {
		flagHashName = fmt.Sprintf("%v.hash", cmdPrefix)
	}

	var flagHashDefault string

	_ = cmd.PersistentFlags().String(flagHashName, flagHashDefault, flagHashDescription)

	return nil
}

func registerObjectFilePropMime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMimeDescription := ``

	var flagMimeName string
	if cmdPrefix == "" {
		flagMimeName = "mime"
	} else {
		flagMimeName = fmt.Sprintf("%v.mime", cmdPrefix)
	}

	var flagMimeDefault string

	_ = cmd.PersistentFlags().String(flagMimeName, flagMimeDefault, flagMimeDescription)

	return nil
}

func registerObjectFilePropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := ``

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

func registerObjectFilePropSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSizeDescription := ``

	var flagSizeName string
	if cmdPrefix == "" {
		flagSizeName = "size"
	} else {
		flagSizeName = fmt.Sprintf("%v.size", cmdPrefix)
	}

	var flagSizeDefault int64

	_ = cmd.PersistentFlags().Int64(flagSizeName, flagSizeDefault, flagSizeDescription)

	return nil
}

func registerObjectFilePropState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagStateDescription := ``

	var flagStateName string
	if cmdPrefix == "" {
		flagStateName = "state"
	} else {
		flagStateName = fmt.Sprintf("%v.state", cmdPrefix)
	}

	var flagStateDefault string

	_ = cmd.PersistentFlags().String(flagStateName, flagStateDefault, flagStateDescription)

	return nil
}

func registerObjectFilePropStyle(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagStyleDescription := ``

	var flagStyleName string
	if cmdPrefix == "" {
		flagStyleName = "style"
	} else {
		flagStyleName = fmt.Sprintf("%v.style", cmdPrefix)
	}

	var flagStyleDefault string

	_ = cmd.PersistentFlags().String(flagStyleName, flagStyleDefault, flagStyleDescription)

	return nil
}

func registerObjectFilePropTargetObjectID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTargetObjectIDDescription := ``

	var flagTargetObjectIDName string
	if cmdPrefix == "" {
		flagTargetObjectIDName = "target_object_id"
	} else {
		flagTargetObjectIDName = fmt.Sprintf("%v.target_object_id", cmdPrefix)
	}

	var flagTargetObjectIDDefault string

	_ = cmd.PersistentFlags().String(flagTargetObjectIDName, flagTargetObjectIDDefault, flagTargetObjectIDDescription)

	return nil
}

func registerObjectFilePropType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTypeDescription := ``

	var flagTypeName string
	if cmdPrefix == "" {
		flagTypeName = "type"
	} else {
		flagTypeName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var flagTypeDefault string

	_ = cmd.PersistentFlags().String(flagTypeName, flagTypeDefault, flagTypeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelObjectFileFlags(depth int, m *models.ObjectFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AddedAtAdded := retrieveObjectFilePropAddedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AddedAtAdded

	err, HashAdded := retrieveObjectFilePropHashFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HashAdded

	err, MimeAdded := retrieveObjectFilePropMimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MimeAdded

	err, NameAdded := retrieveObjectFilePropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, SizeAdded := retrieveObjectFilePropSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SizeAdded

	err, StateAdded := retrieveObjectFilePropStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StateAdded

	err, StyleAdded := retrieveObjectFilePropStyleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StyleAdded

	err, TargetObjectIDAdded := retrieveObjectFilePropTargetObjectIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TargetObjectIDAdded

	err, TypeAdded := retrieveObjectFilePropTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TypeAdded

	return nil, retAdded
}

func retrieveObjectFilePropAddedAtFlags(depth int, m *models.ObjectFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAddedAtName := fmt.Sprintf("%v.added_at", cmdPrefix)
	if cmd.Flags().Changed(flagAddedAtName) {

		var flagAddedAtName string
		if cmdPrefix == "" {
			flagAddedAtName = "added_at"
		} else {
			flagAddedAtName = fmt.Sprintf("%v.added_at", cmdPrefix)
		}

		flagAddedAtValue, err := cmd.Flags().GetInt64(flagAddedAtName)
		if err != nil {
			return err, false
		}
		m.AddedAt = flagAddedAtValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveObjectFilePropHashFlags(depth int, m *models.ObjectFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagHashName := fmt.Sprintf("%v.hash", cmdPrefix)
	if cmd.Flags().Changed(flagHashName) {

		var flagHashName string
		if cmdPrefix == "" {
			flagHashName = "hash"
		} else {
			flagHashName = fmt.Sprintf("%v.hash", cmdPrefix)
		}

		flagHashValue, err := cmd.Flags().GetString(flagHashName)
		if err != nil {
			return err, false
		}
		m.Hash = flagHashValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveObjectFilePropMimeFlags(depth int, m *models.ObjectFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMimeName := fmt.Sprintf("%v.mime", cmdPrefix)
	if cmd.Flags().Changed(flagMimeName) {

		var flagMimeName string
		if cmdPrefix == "" {
			flagMimeName = "mime"
		} else {
			flagMimeName = fmt.Sprintf("%v.mime", cmdPrefix)
		}

		flagMimeValue, err := cmd.Flags().GetString(flagMimeName)
		if err != nil {
			return err, false
		}
		m.Mime = flagMimeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveObjectFilePropNameFlags(depth int, m *models.ObjectFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveObjectFilePropSizeFlags(depth int, m *models.ObjectFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSizeName := fmt.Sprintf("%v.size", cmdPrefix)
	if cmd.Flags().Changed(flagSizeName) {

		var flagSizeName string
		if cmdPrefix == "" {
			flagSizeName = "size"
		} else {
			flagSizeName = fmt.Sprintf("%v.size", cmdPrefix)
		}

		flagSizeValue, err := cmd.Flags().GetInt64(flagSizeName)
		if err != nil {
			return err, false
		}
		m.Size = flagSizeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveObjectFilePropStateFlags(depth int, m *models.ObjectFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStateName := fmt.Sprintf("%v.state", cmdPrefix)
	if cmd.Flags().Changed(flagStateName) {

		var flagStateName string
		if cmdPrefix == "" {
			flagStateName = "state"
		} else {
			flagStateName = fmt.Sprintf("%v.state", cmdPrefix)
		}

		flagStateValue, err := cmd.Flags().GetString(flagStateName)
		if err != nil {
			return err, false
		}
		m.State = flagStateValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveObjectFilePropStyleFlags(depth int, m *models.ObjectFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStyleName := fmt.Sprintf("%v.style", cmdPrefix)
	if cmd.Flags().Changed(flagStyleName) {

		var flagStyleName string
		if cmdPrefix == "" {
			flagStyleName = "style"
		} else {
			flagStyleName = fmt.Sprintf("%v.style", cmdPrefix)
		}

		flagStyleValue, err := cmd.Flags().GetString(flagStyleName)
		if err != nil {
			return err, false
		}
		m.Style = flagStyleValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveObjectFilePropTargetObjectIDFlags(depth int, m *models.ObjectFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTargetObjectIDName := fmt.Sprintf("%v.target_object_id", cmdPrefix)
	if cmd.Flags().Changed(flagTargetObjectIDName) {

		var flagTargetObjectIDName string
		if cmdPrefix == "" {
			flagTargetObjectIDName = "target_object_id"
		} else {
			flagTargetObjectIDName = fmt.Sprintf("%v.target_object_id", cmdPrefix)
		}

		flagTargetObjectIDValue, err := cmd.Flags().GetString(flagTargetObjectIDName)
		if err != nil {
			return err, false
		}
		m.TargetObjectID = flagTargetObjectIDValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveObjectFilePropTypeFlags(depth int, m *models.ObjectFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTypeName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(flagTypeName) {

		var flagTypeName string
		if cmdPrefix == "" {
			flagTypeName = "type"
		} else {
			flagTypeName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		flagTypeValue, err := cmd.Flags().GetString(flagTypeName)
		if err != nil {
			return err, false
		}
		m.Type = flagTypeValue

		retAdded = true
	}

	return nil, retAdded
}
