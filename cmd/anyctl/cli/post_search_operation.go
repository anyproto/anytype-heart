// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/anyproto/anytype-heart/cmd/anyctl/client/search"
	"github.com/anyproto/anytype-heart/cmd/anyctl/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationSearchPostSearchCmd returns a command to handle operation postSearch
func makeOperationSearchPostSearchCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "PostSearch",
		Short: ``,
		RunE:  runOperationSearchPostSearch,
	}

	if err := registerOperationSearchPostSearchParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSearchPostSearch uses cmd flags to call endpoint api
func runOperationSearchPostSearch(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := search.NewPostSearchParams()
	if err, _ = retrieveOperationSearchPostSearchLimitFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationSearchPostSearchOffsetFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationSearchPostSearchRequestFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationSearchPostSearchResult(appCli.Search.PostSearch(params))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationSearchPostSearchParamFlags registers all flags needed to fill params
func registerOperationSearchPostSearchParamFlags(cmd *cobra.Command) error {
	if err := registerOperationSearchPostSearchLimitParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSearchPostSearchOffsetParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSearchPostSearchRequestParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationSearchPostSearchLimitParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagLimitDescription := `The number of items to return`

	var flagLimitName string
	if cmdPrefix == "" {
		flagLimitName = "limit"
	} else {
		flagLimitName = fmt.Sprintf("%v.limit", cmdPrefix)
	}

	var flagLimitDefault int64 = 100

	_ = cmd.PersistentFlags().Int64(flagLimitName, flagLimitDefault, flagLimitDescription)

	return nil
}

func registerOperationSearchPostSearchOffsetParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagOffsetDescription := `The number of items to skip before starting to collect the result set`

	var flagOffsetName string
	if cmdPrefix == "" {
		flagOffsetName = "offset"
	} else {
		flagOffsetName = fmt.Sprintf("%v.offset", cmdPrefix)
	}

	var flagOffsetDefault int64

	_ = cmd.PersistentFlags().Int64(flagOffsetName, flagOffsetDefault, flagOffsetDescription)

	return nil
}

func registerOperationSearchPostSearchRequestParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var flagRequestName string
	if cmdPrefix == "" {
		flagRequestName = "request"
	} else {
		flagRequestName = fmt.Sprintf("%v.request", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(flagRequestName, "", `Optional json string for [request]. Search parameters`)

	// add flags for body
	if err := registerModelSearchSearchRequestFlags(0, "searchSearchRequest", cmd); err != nil {
		return err
	}

	return nil
}

func retrieveOperationSearchPostSearchLimitFlag(m *search.PostSearchParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("limit") {

		var flagLimitName string
		if cmdPrefix == "" {
			flagLimitName = "limit"
		} else {
			flagLimitName = fmt.Sprintf("%v.limit", cmdPrefix)
		}

		flagLimitValue, err := cmd.Flags().GetInt64(flagLimitName)
		if err != nil {
			return err, false
		}
		m.Limit = &flagLimitValue

	}

	return nil, retAdded
}

func retrieveOperationSearchPostSearchOffsetFlag(m *search.PostSearchParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("offset") {

		var flagOffsetName string
		if cmdPrefix == "" {
			flagOffsetName = "offset"
		} else {
			flagOffsetName = fmt.Sprintf("%v.offset", cmdPrefix)
		}

		flagOffsetValue, err := cmd.Flags().GetInt64(flagOffsetName)
		if err != nil {
			return err, false
		}
		m.Offset = &flagOffsetValue

	}

	return nil, retAdded
}

func retrieveOperationSearchPostSearchRequestFlag(m *search.PostSearchParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("request") {
		// Read request string from cmd and unmarshal
		flagRequestValueStr, err := cmd.Flags().GetString("request")
		if err != nil {
			return err, false
		}

		flagRequestValue := models.SearchSearchRequest{}
		if err := json.Unmarshal([]byte(flagRequestValueStr), &flagRequestValue); err != nil {
			return fmt.Errorf("cannot unmarshal request string in models.SearchSearchRequest: %v", err), false
		}
		m.Request = &flagRequestValue
	}
	flagRequestModel := m.Request
	if swag.IsZero(flagRequestModel) {
		flagRequestModel = &models.SearchSearchRequest{}
	}
	err, added := retrieveModelSearchSearchRequestFlags(0, flagRequestModel, "searchSearchRequest", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Request = flagRequestModel
	}

	if dryRun && debug {
		flagRequestValueDebugBytes, err := json.Marshal(m.Request)
		if err != nil {
			return err, false
		}
		logDebugf("Request dry-run payload: %v", string(flagRequestValueDebugBytes))
	}

	retAdded = retAdded || added

	return nil, retAdded
}

// parseOperationSearchPostSearchResult parses request result and return the string content
func parseOperationSearchPostSearchResult(resp0 *search.PostSearchOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*search.PostSearchOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*search.PostSearchUnauthorized)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*search.PostSearchInternalServerError)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
