// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/anyproto/anytype-heart/cmd/anyctl/client/spaces"
	"github.com/anyproto/anytype-heart/cmd/anyctl/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationSpacesPostSpacesCmd returns a command to handle operation postSpaces
func makeOperationSpacesPostSpacesCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "PostSpaces",
		Short: ``,
		RunE:  runOperationSpacesPostSpaces,
	}

	if err := registerOperationSpacesPostSpacesParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSpacesPostSpaces uses cmd flags to call endpoint api
func runOperationSpacesPostSpaces(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := spaces.NewPostSpacesParams()
	if err, _ = retrieveOperationSpacesPostSpacesNameFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationSpacesPostSpacesResult(appCli.Spaces.PostSpaces(params))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationSpacesPostSpacesParamFlags registers all flags needed to fill params
func registerOperationSpacesPostSpacesParamFlags(cmd *cobra.Command) error {
	if err := registerOperationSpacesPostSpacesNameParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationSpacesPostSpacesNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(flagNameName, "", `Optional json string for [name]. Space to create`)

	// add flags for body
	if err := registerModelSpaceCreateSpaceRequestFlags(0, "spaceCreateSpaceRequest", cmd); err != nil {
		return err
	}

	return nil
}

func retrieveOperationSpacesPostSpacesNameFlag(m *spaces.PostSpacesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("name") {
		// Read name string from cmd and unmarshal
		flagNameValueStr, err := cmd.Flags().GetString("name")
		if err != nil {
			return err, false
		}

		flagNameValue := models.SpaceCreateSpaceRequest{}
		if err := json.Unmarshal([]byte(flagNameValueStr), &flagNameValue); err != nil {
			return fmt.Errorf("cannot unmarshal name string in models.SpaceCreateSpaceRequest: %v", err), false
		}
		m.Name = &flagNameValue
	}
	flagNameModel := m.Name
	if swag.IsZero(flagNameModel) {
		flagNameModel = &models.SpaceCreateSpaceRequest{}
	}
	err, added := retrieveModelSpaceCreateSpaceRequestFlags(0, flagNameModel, "spaceCreateSpaceRequest", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Name = flagNameModel
	}

	if dryRun && debug {
		flagNameValueDebugBytes, err := json.Marshal(m.Name)
		if err != nil {
			return err, false
		}
		logDebugf("Name dry-run payload: %v", string(flagNameValueDebugBytes))
	}

	retAdded = retAdded || added

	return nil, retAdded
}

// parseOperationSpacesPostSpacesResult parses request result and return the string content
func parseOperationSpacesPostSpacesResult(resp0 *spaces.PostSpacesOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*spaces.PostSpacesOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*spaces.PostSpacesBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*spaces.PostSpacesUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*spaces.PostSpacesInternalServerError)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
