// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/anyproto/anytype-heart/cmd/anyctl/models"
	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for ObjectTypeResponse

// register flags to command
func registerModelObjectTypeResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerObjectTypeResponsePropType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerObjectTypeResponsePropType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagTypeName string
	if cmdPrefix == "" {
		flagTypeName = "type"
	} else {
		flagTypeName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	if err := registerModelObjectTypeFlags(depth+1, flagTypeName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelObjectTypeResponseFlags(depth int, m *models.ObjectTypeResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, TypeAdded := retrieveObjectTypeResponsePropTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TypeAdded

	return nil, retAdded
}

func retrieveObjectTypeResponsePropTypeFlags(depth int, m *models.ObjectTypeResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTypeName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(flagTypeName) {
		// info: complex object type ObjectType is retrieved outside this Changed() block
	}
	flagTypeValue := m.Type
	if swag.IsZero(flagTypeValue) {
		flagTypeValue = &models.ObjectType{}
	}

	err, TypeAdded := retrieveModelObjectTypeFlags(depth+1, flagTypeValue, flagTypeName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TypeAdded
	if TypeAdded {
		m.Type = flagTypeValue
	}

	return nil, retAdded
}
