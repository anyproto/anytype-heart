// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/anyproto/anytype-heart/cmd/anyctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for ObjectObject

// register flags to command
func registerModelObjectObjectFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerObjectObjectPropBlocks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectObjectPropDetails(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectObjectPropIcon(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectObjectPropID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectObjectPropLayout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectObjectPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectObjectPropRootID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectObjectPropSnippet(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectObjectPropSpaceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerObjectObjectPropType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerObjectObjectPropBlocks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: blocks []*ObjectBlock array type is not supported by go-swagger cli yet

	return nil
}

func registerObjectObjectPropDetails(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: details []*ObjectDetail array type is not supported by go-swagger cli yet

	return nil
}

func registerObjectObjectPropIcon(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIconDescription := ``

	var flagIconName string
	if cmdPrefix == "" {
		flagIconName = "icon"
	} else {
		flagIconName = fmt.Sprintf("%v.icon", cmdPrefix)
	}

	var flagIconDefault string

	_ = cmd.PersistentFlags().String(flagIconName, flagIconDefault, flagIconDescription)

	return nil
}

func registerObjectObjectPropID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIDDescription := ``

	var flagIDName string
	if cmdPrefix == "" {
		flagIDName = "id"
	} else {
		flagIDName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var flagIDDefault string

	_ = cmd.PersistentFlags().String(flagIDName, flagIDDefault, flagIDDescription)

	return nil
}

func registerObjectObjectPropLayout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLayoutDescription := ``

	var flagLayoutName string
	if cmdPrefix == "" {
		flagLayoutName = "layout"
	} else {
		flagLayoutName = fmt.Sprintf("%v.layout", cmdPrefix)
	}

	var flagLayoutDefault string

	_ = cmd.PersistentFlags().String(flagLayoutName, flagLayoutDefault, flagLayoutDescription)

	return nil
}

func registerObjectObjectPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := ``

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

func registerObjectObjectPropRootID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagRootIDDescription := ``

	var flagRootIDName string
	if cmdPrefix == "" {
		flagRootIDName = "root_id"
	} else {
		flagRootIDName = fmt.Sprintf("%v.root_id", cmdPrefix)
	}

	var flagRootIDDefault string

	_ = cmd.PersistentFlags().String(flagRootIDName, flagRootIDDefault, flagRootIDDescription)

	return nil
}

func registerObjectObjectPropSnippet(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSnippetDescription := ``

	var flagSnippetName string
	if cmdPrefix == "" {
		flagSnippetName = "snippet"
	} else {
		flagSnippetName = fmt.Sprintf("%v.snippet", cmdPrefix)
	}

	var flagSnippetDefault string

	_ = cmd.PersistentFlags().String(flagSnippetName, flagSnippetDefault, flagSnippetDescription)

	return nil
}

func registerObjectObjectPropSpaceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSpaceIDDescription := ``

	var flagSpaceIDName string
	if cmdPrefix == "" {
		flagSpaceIDName = "space_id"
	} else {
		flagSpaceIDName = fmt.Sprintf("%v.space_id", cmdPrefix)
	}

	var flagSpaceIDDefault string

	_ = cmd.PersistentFlags().String(flagSpaceIDName, flagSpaceIDDefault, flagSpaceIDDescription)

	return nil
}

func registerObjectObjectPropType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTypeDescription := ``

	var flagTypeName string
	if cmdPrefix == "" {
		flagTypeName = "type"
	} else {
		flagTypeName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var flagTypeDefault string

	_ = cmd.PersistentFlags().String(flagTypeName, flagTypeDefault, flagTypeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelObjectObjectFlags(depth int, m *models.ObjectObject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, BlocksAdded := retrieveObjectObjectPropBlocksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BlocksAdded

	err, DetailsAdded := retrieveObjectObjectPropDetailsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DetailsAdded

	err, IconAdded := retrieveObjectObjectPropIconFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IconAdded

	err, IDAdded := retrieveObjectObjectPropIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IDAdded

	err, LayoutAdded := retrieveObjectObjectPropLayoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LayoutAdded

	err, NameAdded := retrieveObjectObjectPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, RootIDAdded := retrieveObjectObjectPropRootIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RootIDAdded

	err, SnippetAdded := retrieveObjectObjectPropSnippetFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SnippetAdded

	err, SpaceIDAdded := retrieveObjectObjectPropSpaceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SpaceIDAdded

	err, TypeAdded := retrieveObjectObjectPropTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TypeAdded

	return nil, retAdded
}

func retrieveObjectObjectPropBlocksFlags(depth int, m *models.ObjectObject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagBlocksName := fmt.Sprintf("%v.blocks", cmdPrefix)
	if cmd.Flags().Changed(flagBlocksName) {
		// warning: blocks array type []*ObjectBlock is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveObjectObjectPropDetailsFlags(depth int, m *models.ObjectObject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDetailsName := fmt.Sprintf("%v.details", cmdPrefix)
	if cmd.Flags().Changed(flagDetailsName) {
		// warning: details array type []*ObjectDetail is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveObjectObjectPropIconFlags(depth int, m *models.ObjectObject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIconName := fmt.Sprintf("%v.icon", cmdPrefix)
	if cmd.Flags().Changed(flagIconName) {

		var flagIconName string
		if cmdPrefix == "" {
			flagIconName = "icon"
		} else {
			flagIconName = fmt.Sprintf("%v.icon", cmdPrefix)
		}

		flagIconValue, err := cmd.Flags().GetString(flagIconName)
		if err != nil {
			return err, false
		}
		m.Icon = flagIconValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveObjectObjectPropIDFlags(depth int, m *models.ObjectObject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIDName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(flagIDName) {

		var flagIDName string
		if cmdPrefix == "" {
			flagIDName = "id"
		} else {
			flagIDName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		flagIDValue, err := cmd.Flags().GetString(flagIDName)
		if err != nil {
			return err, false
		}
		m.ID = flagIDValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveObjectObjectPropLayoutFlags(depth int, m *models.ObjectObject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLayoutName := fmt.Sprintf("%v.layout", cmdPrefix)
	if cmd.Flags().Changed(flagLayoutName) {

		var flagLayoutName string
		if cmdPrefix == "" {
			flagLayoutName = "layout"
		} else {
			flagLayoutName = fmt.Sprintf("%v.layout", cmdPrefix)
		}

		flagLayoutValue, err := cmd.Flags().GetString(flagLayoutName)
		if err != nil {
			return err, false
		}
		m.Layout = flagLayoutValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveObjectObjectPropNameFlags(depth int, m *models.ObjectObject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveObjectObjectPropRootIDFlags(depth int, m *models.ObjectObject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagRootIDName := fmt.Sprintf("%v.root_id", cmdPrefix)
	if cmd.Flags().Changed(flagRootIDName) {

		var flagRootIDName string
		if cmdPrefix == "" {
			flagRootIDName = "root_id"
		} else {
			flagRootIDName = fmt.Sprintf("%v.root_id", cmdPrefix)
		}

		flagRootIDValue, err := cmd.Flags().GetString(flagRootIDName)
		if err != nil {
			return err, false
		}
		m.RootID = flagRootIDValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveObjectObjectPropSnippetFlags(depth int, m *models.ObjectObject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSnippetName := fmt.Sprintf("%v.snippet", cmdPrefix)
	if cmd.Flags().Changed(flagSnippetName) {

		var flagSnippetName string
		if cmdPrefix == "" {
			flagSnippetName = "snippet"
		} else {
			flagSnippetName = fmt.Sprintf("%v.snippet", cmdPrefix)
		}

		flagSnippetValue, err := cmd.Flags().GetString(flagSnippetName)
		if err != nil {
			return err, false
		}
		m.Snippet = flagSnippetValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveObjectObjectPropSpaceIDFlags(depth int, m *models.ObjectObject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSpaceIDName := fmt.Sprintf("%v.space_id", cmdPrefix)
	if cmd.Flags().Changed(flagSpaceIDName) {

		var flagSpaceIDName string
		if cmdPrefix == "" {
			flagSpaceIDName = "space_id"
		} else {
			flagSpaceIDName = fmt.Sprintf("%v.space_id", cmdPrefix)
		}

		flagSpaceIDValue, err := cmd.Flags().GetString(flagSpaceIDName)
		if err != nil {
			return err, false
		}
		m.SpaceID = flagSpaceIDValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveObjectObjectPropTypeFlags(depth int, m *models.ObjectObject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTypeName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(flagTypeName) {

		var flagTypeName string
		if cmdPrefix == "" {
			flagTypeName = "type"
		} else {
			flagTypeName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		flagTypeValue, err := cmd.Flags().GetString(flagTypeName)
		if err != nil {
			return err, false
		}
		m.Type = flagTypeValue

		retAdded = true
	}

	return nil, retAdded
}
