// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/anyproto/anytype-heart/cmd/anyctl/models"
	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for UtilNotFoundError

// register flags to command
func registerModelUtilNotFoundErrorFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerUtilNotFoundErrorPropError(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerUtilNotFoundErrorPropError(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagErrorName string
	if cmdPrefix == "" {
		flagErrorName = "error"
	} else {
		flagErrorName = fmt.Sprintf("%v.error", cmdPrefix)
	}

	if err := registerModelUtilNotFoundErrorErrorFlags(depth+1, flagErrorName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelUtilNotFoundErrorFlags(depth int, m *models.UtilNotFoundError, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ErrorAdded := retrieveUtilNotFoundErrorPropErrorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ErrorAdded

	return nil, retAdded
}

func retrieveUtilNotFoundErrorPropErrorFlags(depth int, m *models.UtilNotFoundError, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagErrorName := fmt.Sprintf("%v.error", cmdPrefix)
	if cmd.Flags().Changed(flagErrorName) {
		// info: complex object error UtilNotFoundErrorError is retrieved outside this Changed() block
	}
	flagErrorValue := m.Error
	if swag.IsZero(flagErrorValue) {
		flagErrorValue = &models.UtilNotFoundErrorError{}
	}

	err, ErrorAdded := retrieveModelUtilNotFoundErrorErrorFlags(depth+1, flagErrorValue, flagErrorName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ErrorAdded
	if ErrorAdded {
		m.Error = flagErrorValue
	}

	return nil, retAdded
}

// Extra schema cli for UtilNotFoundErrorError

// register flags to command
func registerModelUtilNotFoundErrorErrorFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerUtilNotFoundErrorErrorPropMessage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerUtilNotFoundErrorErrorPropMessage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMessageDescription := ``

	var flagMessageName string
	if cmdPrefix == "" {
		flagMessageName = "message"
	} else {
		flagMessageName = fmt.Sprintf("%v.message", cmdPrefix)
	}

	var flagMessageDefault string

	_ = cmd.PersistentFlags().String(flagMessageName, flagMessageDefault, flagMessageDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelUtilNotFoundErrorErrorFlags(depth int, m *models.UtilNotFoundErrorError, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, MessageAdded := retrieveUtilNotFoundErrorErrorPropMessageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MessageAdded

	return nil, retAdded
}

func retrieveUtilNotFoundErrorErrorPropMessageFlags(depth int, m *models.UtilNotFoundErrorError, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMessageName := fmt.Sprintf("%v.message", cmdPrefix)
	if cmd.Flags().Changed(flagMessageName) {

		var flagMessageName string
		if cmdPrefix == "" {
			flagMessageName = "message"
		} else {
			flagMessageName = fmt.Sprintf("%v.message", cmdPrefix)
		}

		flagMessageValue, err := cmd.Flags().GetString(flagMessageName)
		if err != nil {
			return err, false
		}
		m.Message = flagMessageValue

		retAdded = true
	}

	return nil, retAdded
}
