// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/anyproto/anytype-heart/cmd/anyctl/client/auth"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationAuthPostAuthTokenCmd returns a command to handle operation postAuthToken
func makeOperationAuthPostAuthTokenCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "PostAuthToken",
		Short: ``,
		RunE:  runOperationAuthPostAuthToken,
	}

	if err := registerOperationAuthPostAuthTokenParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationAuthPostAuthToken uses cmd flags to call endpoint api
func runOperationAuthPostAuthToken(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := auth.NewPostAuthTokenParams()
	if err, _ = retrieveOperationAuthPostAuthTokenChallengeIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationAuthPostAuthTokenCodeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationAuthPostAuthTokenResult(appCli.Auth.PostAuthToken(params))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationAuthPostAuthTokenParamFlags registers all flags needed to fill params
func registerOperationAuthPostAuthTokenParamFlags(cmd *cobra.Command) error {
	if err := registerOperationAuthPostAuthTokenChallengeIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationAuthPostAuthTokenCodeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationAuthPostAuthTokenChallengeIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagChallengeIDDescription := `Required. Challenge ID`

	var flagChallengeIDName string
	if cmdPrefix == "" {
		flagChallengeIDName = "challenge_id"
	} else {
		flagChallengeIDName = fmt.Sprintf("%v.challenge_id", cmdPrefix)
	}

	var flagChallengeIDDefault string

	_ = cmd.PersistentFlags().String(flagChallengeIDName, flagChallengeIDDefault, flagChallengeIDDescription)

	return nil
}

func registerOperationAuthPostAuthTokenCodeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagCodeDescription := `Required. 4-digit code retrieved from Anytype Desktop app`

	var flagCodeName string
	if cmdPrefix == "" {
		flagCodeName = "code"
	} else {
		flagCodeName = fmt.Sprintf("%v.code", cmdPrefix)
	}

	var flagCodeDefault string

	_ = cmd.PersistentFlags().String(flagCodeName, flagCodeDefault, flagCodeDescription)

	return nil
}

func retrieveOperationAuthPostAuthTokenChallengeIDFlag(m *auth.PostAuthTokenParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("challenge_id") {

		var flagChallengeIDName string
		if cmdPrefix == "" {
			flagChallengeIDName = "challenge_id"
		} else {
			flagChallengeIDName = fmt.Sprintf("%v.challenge_id", cmdPrefix)
		}

		flagChallengeIDValue, err := cmd.Flags().GetString(flagChallengeIDName)
		if err != nil {
			return err, false
		}
		m.ChallengeID = flagChallengeIDValue

	}

	return nil, retAdded
}

func retrieveOperationAuthPostAuthTokenCodeFlag(m *auth.PostAuthTokenParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("code") {

		var flagCodeName string
		if cmdPrefix == "" {
			flagCodeName = "code"
		} else {
			flagCodeName = fmt.Sprintf("%v.code", cmdPrefix)
		}

		flagCodeValue, err := cmd.Flags().GetString(flagCodeName)
		if err != nil {
			return err, false
		}
		m.Code = flagCodeValue

	}

	return nil, retAdded
}

// parseOperationAuthPostAuthTokenResult parses request result and return the string content
func parseOperationAuthPostAuthTokenResult(resp0 *auth.PostAuthTokenOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*auth.PostAuthTokenOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*auth.PostAuthTokenBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*auth.PostAuthTokenInternalServerError)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
