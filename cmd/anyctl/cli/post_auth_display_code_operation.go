// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/anyproto/anytype-heart/cmd/anyctl/client/auth"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationAuthPostAuthDisplayCodeCmd returns a command to handle operation postAuthDisplayCode
func makeOperationAuthPostAuthDisplayCodeCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "PostAuthDisplayCode",
		Short: ``,
		RunE:  runOperationAuthPostAuthDisplayCode,
	}

	if err := registerOperationAuthPostAuthDisplayCodeParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationAuthPostAuthDisplayCode uses cmd flags to call endpoint api
func runOperationAuthPostAuthDisplayCode(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := auth.NewPostAuthDisplayCodeParams()
	if err, _ = retrieveOperationAuthPostAuthDisplayCodeAppNameFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationAuthPostAuthDisplayCodeResult(appCli.Auth.PostAuthDisplayCode(params))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationAuthPostAuthDisplayCodeParamFlags registers all flags needed to fill params
func registerOperationAuthPostAuthDisplayCodeParamFlags(cmd *cobra.Command) error {
	if err := registerOperationAuthPostAuthDisplayCodeAppNameParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationAuthPostAuthDisplayCodeAppNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagAppNameDescription := `Required. App name requesting the challenge`

	var flagAppNameName string
	if cmdPrefix == "" {
		flagAppNameName = "app_name"
	} else {
		flagAppNameName = fmt.Sprintf("%v.app_name", cmdPrefix)
	}

	var flagAppNameDefault string

	_ = cmd.PersistentFlags().String(flagAppNameName, flagAppNameDefault, flagAppNameDescription)

	return nil
}

func retrieveOperationAuthPostAuthDisplayCodeAppNameFlag(m *auth.PostAuthDisplayCodeParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("app_name") {

		var flagAppNameName string
		if cmdPrefix == "" {
			flagAppNameName = "app_name"
		} else {
			flagAppNameName = fmt.Sprintf("%v.app_name", cmdPrefix)
		}

		flagAppNameValue, err := cmd.Flags().GetString(flagAppNameName)
		if err != nil {
			return err, false
		}
		m.AppName = flagAppNameValue

	}

	return nil, retAdded
}

// parseOperationAuthPostAuthDisplayCodeResult parses request result and return the string content
func parseOperationAuthPostAuthDisplayCodeResult(resp0 *auth.PostAuthDisplayCodeOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*auth.PostAuthDisplayCodeOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*auth.PostAuthDisplayCodeBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*auth.PostAuthDisplayCodeInternalServerError)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
