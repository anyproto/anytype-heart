// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/anyproto/anytype-heart/cmd/anyctl/models"
	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for ObjectTemplateResponse

// register flags to command
func registerModelObjectTemplateResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerObjectTemplateResponsePropTemplate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerObjectTemplateResponsePropTemplate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagTemplateName string
	if cmdPrefix == "" {
		flagTemplateName = "template"
	} else {
		flagTemplateName = fmt.Sprintf("%v.template", cmdPrefix)
	}

	if err := registerModelObjectTemplateFlags(depth+1, flagTemplateName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelObjectTemplateResponseFlags(depth int, m *models.ObjectTemplateResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, TemplateAdded := retrieveObjectTemplateResponsePropTemplateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TemplateAdded

	return nil, retAdded
}

func retrieveObjectTemplateResponsePropTemplateFlags(depth int, m *models.ObjectTemplateResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTemplateName := fmt.Sprintf("%v.template", cmdPrefix)
	if cmd.Flags().Changed(flagTemplateName) {
		// info: complex object template ObjectTemplate is retrieved outside this Changed() block
	}
	flagTemplateValue := m.Template
	if swag.IsZero(flagTemplateValue) {
		flagTemplateValue = &models.ObjectTemplate{}
	}

	err, TemplateAdded := retrieveModelObjectTemplateFlags(depth+1, flagTemplateValue, flagTemplateName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TemplateAdded
	if TemplateAdded {
		m.Template = flagTemplateValue
	}

	return nil, retAdded
}
