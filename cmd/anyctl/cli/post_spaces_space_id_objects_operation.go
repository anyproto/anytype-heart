// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/anyproto/anytype-heart/cmd/anyctl/client/objects"
	"github.com/anyproto/anytype-heart/cmd/anyctl/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationObjectsPostSpacesSpaceIDObjectsCmd returns a command to handle operation postSpacesSpaceIdObjects
func makeOperationObjectsPostSpacesSpaceIDObjectsCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "PostSpacesSpaceIDObjects",
		Short: ``,
		RunE:  runOperationObjectsPostSpacesSpaceIDObjects,
	}

	if err := registerOperationObjectsPostSpacesSpaceIDObjectsParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationObjectsPostSpacesSpaceIDObjects uses cmd flags to call endpoint api
func runOperationObjectsPostSpacesSpaceIDObjects(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := objects.NewPostSpacesSpaceIDObjectsParams()
	if err, _ = retrieveOperationObjectsPostSpacesSpaceIDObjectsObjectFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationObjectsPostSpacesSpaceIDObjectsSpaceIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationObjectsPostSpacesSpaceIDObjectsResult(appCli.Objects.PostSpacesSpaceIDObjects(params))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationObjectsPostSpacesSpaceIDObjectsParamFlags registers all flags needed to fill params
func registerOperationObjectsPostSpacesSpaceIDObjectsParamFlags(cmd *cobra.Command) error {
	if err := registerOperationObjectsPostSpacesSpaceIDObjectsObjectParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationObjectsPostSpacesSpaceIDObjectsSpaceIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationObjectsPostSpacesSpaceIDObjectsObjectParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var flagObjectName string
	if cmdPrefix == "" {
		flagObjectName = "object"
	} else {
		flagObjectName = fmt.Sprintf("%v.object", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(flagObjectName, "", `Optional json string for [object]. Object to create`)

	// add flags for body
	if err := registerModelObjectCreateObjectRequestFlags(0, "objectCreateObjectRequest", cmd); err != nil {
		return err
	}

	return nil
}

func registerOperationObjectsPostSpacesSpaceIDObjectsSpaceIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagSpaceIDDescription := `Required. Space ID`

	var flagSpaceIDName string
	if cmdPrefix == "" {
		flagSpaceIDName = "space_id"
	} else {
		flagSpaceIDName = fmt.Sprintf("%v.space_id", cmdPrefix)
	}

	var flagSpaceIDDefault string

	_ = cmd.PersistentFlags().String(flagSpaceIDName, flagSpaceIDDefault, flagSpaceIDDescription)

	return nil
}

func retrieveOperationObjectsPostSpacesSpaceIDObjectsObjectFlag(m *objects.PostSpacesSpaceIDObjectsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("object") {
		// Read object string from cmd and unmarshal
		flagObjectValueStr, err := cmd.Flags().GetString("object")
		if err != nil {
			return err, false
		}

		flagObjectValue := models.ObjectCreateObjectRequest{}
		if err := json.Unmarshal([]byte(flagObjectValueStr), &flagObjectValue); err != nil {
			return fmt.Errorf("cannot unmarshal object string in models.ObjectCreateObjectRequest: %v", err), false
		}
		m.Object = &flagObjectValue
	}
	flagObjectModel := m.Object
	if swag.IsZero(flagObjectModel) {
		flagObjectModel = &models.ObjectCreateObjectRequest{}
	}
	err, added := retrieveModelObjectCreateObjectRequestFlags(0, flagObjectModel, "objectCreateObjectRequest", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Object = flagObjectModel
	}

	if dryRun && debug {
		flagObjectValueDebugBytes, err := json.Marshal(m.Object)
		if err != nil {
			return err, false
		}
		logDebugf("Object dry-run payload: %v", string(flagObjectValueDebugBytes))
	}

	retAdded = retAdded || added

	return nil, retAdded
}

func retrieveOperationObjectsPostSpacesSpaceIDObjectsSpaceIDFlag(m *objects.PostSpacesSpaceIDObjectsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("space_id") {

		var flagSpaceIDName string
		if cmdPrefix == "" {
			flagSpaceIDName = "space_id"
		} else {
			flagSpaceIDName = fmt.Sprintf("%v.space_id", cmdPrefix)
		}

		flagSpaceIDValue, err := cmd.Flags().GetString(flagSpaceIDName)
		if err != nil {
			return err, false
		}
		m.SpaceID = flagSpaceIDValue

	}

	return nil, retAdded
}

// parseOperationObjectsPostSpacesSpaceIDObjectsResult parses request result and return the string content
func parseOperationObjectsPostSpacesSpaceIDObjectsResult(resp0 *objects.PostSpacesSpaceIDObjectsOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*objects.PostSpacesSpaceIDObjectsOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*objects.PostSpacesSpaceIDObjectsBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*objects.PostSpacesSpaceIDObjectsUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*objects.PostSpacesSpaceIDObjectsInternalServerError)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
