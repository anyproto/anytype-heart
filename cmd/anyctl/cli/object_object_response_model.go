// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/anyproto/anytype-heart/cmd/anyctl/models"
	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for ObjectObjectResponse

// register flags to command
func registerModelObjectObjectResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerObjectObjectResponsePropObject(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerObjectObjectResponsePropObject(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagObjectName string
	if cmdPrefix == "" {
		flagObjectName = "object"
	} else {
		flagObjectName = fmt.Sprintf("%v.object", cmdPrefix)
	}

	if err := registerModelObjectObjectFlags(depth+1, flagObjectName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelObjectObjectResponseFlags(depth int, m *models.ObjectObjectResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ObjectAdded := retrieveObjectObjectResponsePropObjectFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ObjectAdded

	return nil, retAdded
}

func retrieveObjectObjectResponsePropObjectFlags(depth int, m *models.ObjectObjectResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagObjectName := fmt.Sprintf("%v.object", cmdPrefix)
	if cmd.Flags().Changed(flagObjectName) {
		// info: complex object object ObjectObject is retrieved outside this Changed() block
	}
	flagObjectValue := m.Object
	if swag.IsZero(flagObjectValue) {
		flagObjectValue = &models.ObjectObject{}
	}

	err, ObjectAdded := retrieveModelObjectObjectFlags(depth+1, flagObjectValue, flagObjectName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ObjectAdded
	if ObjectAdded {
		m.Object = flagObjectValue
	}

	return nil, retAdded
}
