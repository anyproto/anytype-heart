// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/anyproto/anytype-heart/cmd/anyctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for AuthDisplayCodeResponse

// register flags to command
func registerModelAuthDisplayCodeResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAuthDisplayCodeResponsePropChallengeID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAuthDisplayCodeResponsePropChallengeID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagChallengeIDDescription := ``

	var flagChallengeIDName string
	if cmdPrefix == "" {
		flagChallengeIDName = "challenge_id"
	} else {
		flagChallengeIDName = fmt.Sprintf("%v.challenge_id", cmdPrefix)
	}

	var flagChallengeIDDefault string

	_ = cmd.PersistentFlags().String(flagChallengeIDName, flagChallengeIDDefault, flagChallengeIDDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAuthDisplayCodeResponseFlags(depth int, m *models.AuthDisplayCodeResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ChallengeIDAdded := retrieveAuthDisplayCodeResponsePropChallengeIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ChallengeIDAdded

	return nil, retAdded
}

func retrieveAuthDisplayCodeResponsePropChallengeIDFlags(depth int, m *models.AuthDisplayCodeResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagChallengeIDName := fmt.Sprintf("%v.challenge_id", cmdPrefix)
	if cmd.Flags().Changed(flagChallengeIDName) {

		var flagChallengeIDName string
		if cmdPrefix == "" {
			flagChallengeIDName = "challenge_id"
		} else {
			flagChallengeIDName = fmt.Sprintf("%v.challenge_id", cmdPrefix)
		}

		flagChallengeIDValue, err := cmd.Flags().GetString(flagChallengeIDName)
		if err != nil {
			return err, false
		}
		m.ChallengeID = flagChallengeIDValue

		retAdded = true
	}

	return nil, retAdded
}
