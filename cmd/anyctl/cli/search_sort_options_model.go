// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/anyproto/anytype-heart/cmd/anyctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for SearchSortOptions

// register flags to command
func registerModelSearchSortOptionsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSearchSortOptionsPropDirection(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSearchSortOptionsPropTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSearchSortOptionsPropDirection(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagDirectionDescription := `Enum: ["asc","desc"]. `

	var flagDirectionName string
	if cmdPrefix == "" {
		flagDirectionName = "direction"
	} else {
		flagDirectionName = fmt.Sprintf("%v.direction", cmdPrefix)
	}

	var flagDirectionDefault string = "desc"

	_ = cmd.PersistentFlags().String(flagDirectionName, flagDirectionDefault, flagDirectionDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagDirectionName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["asc","desc"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerSearchSortOptionsPropTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTimestampDescription := `Enum: ["created_date","last_modified_date","last_opened_date"]. `

	var flagTimestampName string
	if cmdPrefix == "" {
		flagTimestampName = "timestamp"
	} else {
		flagTimestampName = fmt.Sprintf("%v.timestamp", cmdPrefix)
	}

	var flagTimestampDefault string = "last_modified_date"

	_ = cmd.PersistentFlags().String(flagTimestampName, flagTimestampDefault, flagTimestampDescription)

	if err := cmd.RegisterFlagCompletionFunc(flagTimestampName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["created_date","last_modified_date","last_opened_date"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSearchSortOptionsFlags(depth int, m *models.SearchSortOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DirectionAdded := retrieveSearchSortOptionsPropDirectionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DirectionAdded

	err, TimestampAdded := retrieveSearchSortOptionsPropTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TimestampAdded

	return nil, retAdded
}

func retrieveSearchSortOptionsPropDirectionFlags(depth int, m *models.SearchSortOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDirectionName := fmt.Sprintf("%v.direction", cmdPrefix)
	if cmd.Flags().Changed(flagDirectionName) {

		var flagDirectionName string
		if cmdPrefix == "" {
			flagDirectionName = "direction"
		} else {
			flagDirectionName = fmt.Sprintf("%v.direction", cmdPrefix)
		}

		flagDirectionValue, err := cmd.Flags().GetString(flagDirectionName)
		if err != nil {
			return err, false
		}
		m.Direction = &flagDirectionValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSearchSortOptionsPropTimestampFlags(depth int, m *models.SearchSortOptions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTimestampName := fmt.Sprintf("%v.timestamp", cmdPrefix)
	if cmd.Flags().Changed(flagTimestampName) {

		var flagTimestampName string
		if cmdPrefix == "" {
			flagTimestampName = "timestamp"
		} else {
			flagTimestampName = fmt.Sprintf("%v.timestamp", cmdPrefix)
		}

		flagTimestampValue, err := cmd.Flags().GetString(flagTimestampName)
		if err != nil {
			return err, false
		}
		m.Timestamp = &flagTimestampValue

		retAdded = true
	}

	return nil, retAdded
}
