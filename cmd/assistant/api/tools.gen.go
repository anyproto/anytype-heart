// Code generated by generator; DO NOT EDIT.
package api

import (
	"encoding/json"
	"github.com/sashabaranov/go-openai"
)

// ApiTool wraps an OpenAI tool with API endpoint information
type ApiTool struct {
	openai.Tool
	Method string
	Path   string
}

// AnytypeTools is a generated list of tools based on the OpenAPI spec
var AnytypeTools = []ApiTool{
	{
		Tool: openai.Tool{
			Type: openai.ToolTypeFunction,
			Function: &openai.FunctionDefinition{
				Name: "remove_object_from_list",
				Description: "Removes a given object from the specified list (collection only) in a space. The endpoint takes the space, list, and object identifiers as path parameters. It's subject to rate limiting and returns a success message on completion. It is used for dynamically managing collections without affecting the underlying object data.",
				Parameters: json.RawMessage(`{"properties":{"list_id":{"description":"List ID","type":"string"},"object_id":{"description":"Object ID","type":"string"}},"required":["list_id","object_id"],"type":"object"}`),
			},
		},
		Method: "DELETE",
		Path: "/spaces/{space_id}/lists/{list_id}/objects/{object_id}",
	},
	{
		Tool: openai.Tool{
			Type: openai.ToolTypeFunction,
			Function: &openai.FunctionDefinition{
				Name: "search_objects_within_a_space",
				Description: "This endpoint performs a focused search within a single space. It accepts pagination parameters and a JSON payload containing the search query, object types, and sorting preferences. The search is limited to the provided space and returns a list of objects that match the query. This allows clients to implement space‑specific filtering without having to process extraneous results.",
				Parameters: json.RawMessage(`{"properties":{"body":{"type":"object"},"limit":{"description":"The number of items to return","type":"integer"},"offset":{"description":"The number of items to skip before starting to collect the result set","type":"integer"}},"required":["body"],"type":"object"}`),
			},
		},
		Method: "POST",
		Path: "/spaces/{space_id}/search",
	},
	{
		Tool: openai.Tool{
			Type: openai.ToolTypeFunction,
			Function: &openai.FunctionDefinition{
				Name: "get_property",
				Description: "Fetches detailed information about one specific property by its ID. This includes the property’s unique identifier, name and format. This detailed view assists clients in showing property options to users and in guiding the user interface (such as displaying appropriate input fields or selection options).",
				Parameters: json.RawMessage(`{"properties":{"property_id":{"description":"Property ID","type":"string"}},"required":["property_id"],"type":"object"}`),
			},
		},
		Method: "GET",
		Path: "/spaces/{space_id}/properties/{property_id}",
	},
	{
		Tool: openai.Tool{
			Type: openai.ToolTypeFunction,
			Function: &openai.FunctionDefinition{
				Name: "list_properties",
				Description: "This endpoint retrieves a paginated list of properties available within a specific space. Each property record includes its unique identifier, name and format. This information is essential for clients to understand the available properties for filtering or creating objects.",
				Parameters: json.RawMessage(`{"properties":{"limit":{"description":"The number of items to return","type":"integer"},"offset":{"description":"The number of items to skip before starting to collect the result set","type":"integer"}},"required":[],"type":"object"}`),
			},
		},
		Method: "GET",
		Path: "/spaces/{space_id}/properties",
	},
	{
		Tool: openai.Tool{
			Type: openai.ToolTypeFunction,
			Function: &openai.FunctionDefinition{
				Name: "list_property_options",
				Description: "Lists all tag options for a given property id.",
				Parameters: json.RawMessage(`{"properties":{"property_id":{"description":"Property ID","type":"string"}},"required":["property_id"],"type":"object"}`),
			},
		},
		Method: "GET",
		Path: "/spaces/{space_id}/properties/{property_id}/options",
	},
	{
		Tool: openai.Tool{
			Type: openai.ToolTypeFunction,
			Function: &openai.FunctionDefinition{
				Name: "get_objects_in_list",
				Description: "Returns a paginated list of objects associated with a specific list (query or collection) within a space. When a view ID is provided, the objects are filtered and sorted according to the view's configuration. If no view ID is specified, all list objects are returned without filtering and sorting. This endpoint helps clients to manage grouped objects (for example, tasks within a list) by returning information for each item of the list.",
				Parameters: json.RawMessage(`{"properties":{"limit":{"description":"The number of items to return","type":"integer"},"list_id":{"description":"List ID","type":"string"},"offset":{"description":"The number of items to skip before starting to collect the result set","type":"integer"},"view_id":{"description":"View ID","type":"string"}},"required":["list_id","view_id"],"type":"object"}`),
			},
		},
		Method: "GET",
		Path: "/spaces/{space_id}/lists/{list_id}/{view_id}/objects",
	},
	{
		Tool: openai.Tool{
			Type: openai.ToolTypeFunction,
			Function: &openai.FunctionDefinition{
				Name: "delete_object",
				Description: "This endpoint “deletes” an object by marking it as archived. The deletion process is performed safely and is subject to rate limiting. It returns the object’s details after it has been archived. Proper error handling is in place for situations such as when the object isn’t found or the deletion cannot be performed because of permission issues.",
				Parameters: json.RawMessage(`{"properties":{"object_id":{"description":"Object ID","type":"string"}},"required":["object_id"],"type":"object"}`),
			},
		},
		Method: "DELETE",
		Path: "/spaces/{space_id}/objects/{object_id}",
	},
	{
		Tool: openai.Tool{
			Type: openai.ToolTypeFunction,
			Function: &openai.FunctionDefinition{
				Name: "get_object",
				Description: "Fetches the full details of a single object identified by the object ID within the specified space. The response includes not only basic metadata (ID, name, icon, type) but also the complete set of blocks (which may include text, files, properties and dataviews) and extra details (such as timestamps and linked member information). This endpoint is essential when a client needs to render or edit the full object view.",
				Parameters: json.RawMessage(`{"properties":{"object_id":{"description":"Object ID","type":"string"}},"required":["object_id"],"type":"object"}`),
			},
		},
		Method: "GET",
		Path: "/spaces/{space_id}/objects/{object_id}",
	},
	{
		Tool: openai.Tool{
			Type: openai.ToolTypeFunction,
			Function: &openai.FunctionDefinition{
				Name: "add_objects_to_list",
				Description: "Enables clients to add one or more objects to a specific list (collection only) by submitting a JSON array of object IDs. Upon success, the endpoint returns a confirmation message. This endpoint is vital for building user interfaces that allow drag‑and‑drop or multi‑select additions to collections.",
				Parameters: json.RawMessage(`{"properties":{"body":{"type":"object"},"list_id":{"description":"List ID","type":"string"}},"required":["list_id","body"],"type":"object"}`),
			},
		},
		Method: "POST",
		Path: "/spaces/{space_id}/lists/{list_id}/objects",
	},
	{
		Tool: openai.Tool{
			Type: openai.ToolTypeFunction,
			Function: &openai.FunctionDefinition{
				Name: "export_object",
				Description: "This endpoint exports a single object from the specified space into a desired format. The export format is provided as a path parameter (currently supporting “markdown” only). The endpoint calls the export service which converts the object’s content into the requested format. It is useful for sharing, or displaying the markdown representation of the objecte externally.",
				Parameters: json.RawMessage(`{"properties":{"format":{"description":"Export format","type":"string"},"object_id":{"description":"Object ID","type":"string"}},"required":["object_id","format"],"type":"object"}`),
			},
		},
		Method: "GET",
		Path: "/spaces/{space_id}/objects/{object_id}/{format}",
	},

	{
		Tool: openai.Tool{
			Type: openai.ToolTypeFunction,
			Function: &openai.FunctionDefinition{
				Name: "list_members",
				Description: "Returns a paginated list of members belonging to the specified space. Each member record includes the member’s profile ID, name, icon (which may be derived from an emoji or image), network identity, global name, status (e.g. joining, active) and role (e.g. Viewer, Editor, Owner). This endpoint supports collaborative features by allowing clients to show who is in a space and manage access rights.",
				Parameters: json.RawMessage(`{"properties":{"limit":{"description":"The number of items to return","type":"integer"},"offset":{"description":"The number of items to skip before starting to collect the result set","type":"integer"}},"required":[],"type":"object"}`),
			},
		},
		Method: "GET",
		Path: "/spaces/{space_id}/members",
	},
	{
		Tool: openai.Tool{
			Type: openai.ToolTypeFunction,
			Function: &openai.FunctionDefinition{
				Name: "list_types",
				Description: "This endpoint retrieves a paginated list of object types (e.g. 'Page', 'Note', 'Task') available within the specified space. Each type’s record includes its unique identifier, type key, display name, icon, and a recommended layout. While a type's id is truly unique, a type's key can be the same across spaces for known types, e.g. 'ot-page' for 'Page'. Clients use this information when offering choices for object creation or for filtering objects by type through search.",
				Parameters: json.RawMessage(`{"properties":{"limit":{"description":"The number of items to return","type":"integer"},"offset":{"description":"The number of items to skip before starting to collect the result set","type":"integer"}},"required":[],"type":"object"}`),
			},
		},
		Method: "GET",
		Path: "/spaces/{space_id}/types",
	},
	{
		Tool: openai.Tool{
			Type: openai.ToolTypeFunction,
			Function: &openai.FunctionDefinition{
				Name: "get_list_views",
				Description: "Returns a paginated list of views defined for a specific list (query or collection) within a space. Each view includes configuration details such as layout, applied filters, and sorting options, enabling clients to render the list according to user preferences and context. This endpoint supports pagination parameters to control the number of views returned and the starting point of the result set.",
				Parameters: json.RawMessage(`{"properties":{"limit":{"description":"The number of items to return","type":"integer"},"list_id":{"description":"List ID","type":"string"},"offset":{"description":"The number of items to skip before starting to collect the result set","type":"integer"}},"required":["list_id"],"type":"object"}`),
			},
		},
		Method: "GET",
		Path: "/spaces/{space_id}/lists/{list_id}/views",
	},
	{
		Tool: openai.Tool{
			Type: openai.ToolTypeFunction,
			Function: &openai.FunctionDefinition{
				Name: "get_member",
				Description: "Fetches detailed information about a single member within a space. The endpoint returns the member’s identifier, name, icon, identity, global name, status and role. The member_id path parameter can be provided as either the member's ID (starting  with `_participant`) or the member's identity. This is useful for user profile pages, permission management, and displaying member-specific information in collaborative environments.",
				Parameters: json.RawMessage(`{"properties":{"member_id":{"description":"Member ID or Identity","type":"string"}},"required":["member_id"],"type":"object"}`),
			},
		},
		Method: "GET",
		Path: "/spaces/{space_id}/members/{member_id}",
	},
	{
		Tool: openai.Tool{
			Type: openai.ToolTypeFunction,
			Function: &openai.FunctionDefinition{
				Name: "list_objects",
				Description: "Retrieves a paginated list of objects in the given space. The endpoint takes query parameters for pagination (offset and limit) and returns detailed data about each object including its ID, name, icon, type information, a snippet of the content (if applicable), layout, space ID, blocks and details. It is intended for building views where users can see all objects in a space at a glance.",
				Parameters: json.RawMessage(`{"properties":{"limit":{"description":"The number of items to return","type":"integer"},"offset":{"description":"The number of items to skip before starting to collect the result set","type":"integer"}},"required":[],"type":"object"}`),
			},
		},
		Method: "GET",
		Path: "/spaces/{space_id}/objects",
	},
	{
		Tool: openai.Tool{
			Type: openai.ToolTypeFunction,
			Function: &openai.FunctionDefinition{
				Name: "create_object",
				Description: "Creates a new object using a JSON payload. The payload must include key details such as the object name, icon, description, body content (which may support Markdown), source URL (required for bookmark objects), and the type_key (which is the non-unique identifier of the type of object to create). When choosing a type_key, first check the list of available types. If suitable type is not found, you may need to create a new type",
				Parameters: json.RawMessage(`{"properties":{"body":{"type":"object"}},"required":["body"],"type":"object"}`),
			},
		},
		Method: "POST",
		Path: "/spaces/{space_id}/objects",
	},
}

// GetOpenAITools returns just the OpenAI tool definitions without the API info
func GetOpenAITools() []openai.Tool {
	tools := make([]openai.Tool, len(AnytypeTools))
	for i, t := range AnytypeTools {
		tools[i] = t.Tool
	}
	return tools
}

// GetToolByName returns an ApiTool by its name
func GetToolByName(name string) *ApiTool {
	for i := range AnytypeTools {
		if AnytypeTools[i].Function.Name == name {
			return &AnytypeTools[i]
		}
	}
	return nil
}
