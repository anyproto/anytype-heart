// Code generated by mockery. DO NOT EDIT.

package mock_payments

import (
	context "context"

	app "github.com/anyproto/any-sync/app"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/anyproto/anytype-heart/pb"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// CacheGet provides a mock function with given fields:
func (_m *MockService) CacheGet() (*pb.RpcPaymentsSubscriptionGetStatusResponse, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CacheGet")
	}

	var r0 *pb.RpcPaymentsSubscriptionGetStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (*pb.RpcPaymentsSubscriptionGetStatusResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *pb.RpcPaymentsSubscriptionGetStatusResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.RpcPaymentsSubscriptionGetStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_CacheGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CacheGet'
type MockService_CacheGet_Call struct {
	*mock.Call
}

// CacheGet is a helper method to define mock.On call
func (_e *MockService_Expecter) CacheGet() *MockService_CacheGet_Call {
	return &MockService_CacheGet_Call{Call: _e.mock.On("CacheGet")}
}

func (_c *MockService_CacheGet_Call) Run(run func()) *MockService_CacheGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_CacheGet_Call) Return(out *pb.RpcPaymentsSubscriptionGetStatusResponse, err error) *MockService_CacheGet_Call {
	_c.Call.Return(out, err)
	return _c
}

func (_c *MockService_CacheGet_Call) RunAndReturn(run func() (*pb.RpcPaymentsSubscriptionGetStatusResponse, error)) *MockService_CacheGet_Call {
	_c.Call.Return(run)
	return _c
}

// CacheSet provides a mock function with given fields: in, lifetimeMinutes
func (_m *MockService) CacheSet(in *pb.RpcPaymentsSubscriptionGetStatusResponse, lifetimeMinutes uint16) error {
	ret := _m.Called(in, lifetimeMinutes)

	if len(ret) == 0 {
		panic("no return value specified for CacheSet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*pb.RpcPaymentsSubscriptionGetStatusResponse, uint16) error); ok {
		r0 = rf(in, lifetimeMinutes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_CacheSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CacheSet'
type MockService_CacheSet_Call struct {
	*mock.Call
}

// CacheSet is a helper method to define mock.On call
//   - in *pb.RpcPaymentsSubscriptionGetStatusResponse
//   - lifetimeMinutes uint16
func (_e *MockService_Expecter) CacheSet(in interface{}, lifetimeMinutes interface{}) *MockService_CacheSet_Call {
	return &MockService_CacheSet_Call{Call: _e.mock.On("CacheSet", in, lifetimeMinutes)}
}

func (_c *MockService_CacheSet_Call) Run(run func(in *pb.RpcPaymentsSubscriptionGetStatusResponse, lifetimeMinutes uint16)) *MockService_CacheSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*pb.RpcPaymentsSubscriptionGetStatusResponse), args[1].(uint16))
	})
	return _c
}

func (_c *MockService_CacheSet_Call) Return(err error) *MockService_CacheSet_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_CacheSet_Call) RunAndReturn(run func(*pb.RpcPaymentsSubscriptionGetStatusResponse, uint16) error) *MockService_CacheSet_Call {
	_c.Call.Return(run)
	return _c
}

// ClearCache provides a mock function with given fields:
func (_m *MockService) ClearCache() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ClearCache")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_ClearCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearCache'
type MockService_ClearCache_Call struct {
	*mock.Call
}

// ClearCache is a helper method to define mock.On call
func (_e *MockService_Expecter) ClearCache() *MockService_ClearCache_Call {
	return &MockService_ClearCache_Call{Call: _e.mock.On("ClearCache")}
}

func (_c *MockService_ClearCache_Call) Run(run func()) *MockService_ClearCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_ClearCache_Call) Return(err error) *MockService_ClearCache_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_ClearCache_Call) RunAndReturn(run func() error) *MockService_ClearCache_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields: ctx
func (_m *MockService) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockService_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) Close(ctx interface{}) *MockService_Close_Call {
	return &MockService_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *MockService_Close_Call) Run(run func(ctx context.Context)) *MockService_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockService_Close_Call) Return(err error) *MockService_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_Close_Call) RunAndReturn(run func(context.Context) error) *MockService_Close_Call {
	_c.Call.Return(run)
	return _c
}

// DisableCacheForNextMinutes provides a mock function with given fields: minutes
func (_m *MockService) DisableCacheForNextMinutes(minutes int) error {
	ret := _m.Called(minutes)

	if len(ret) == 0 {
		panic("no return value specified for DisableCacheForNextMinutes")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(minutes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_DisableCacheForNextMinutes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableCacheForNextMinutes'
type MockService_DisableCacheForNextMinutes_Call struct {
	*mock.Call
}

// DisableCacheForNextMinutes is a helper method to define mock.On call
//   - minutes int
func (_e *MockService_Expecter) DisableCacheForNextMinutes(minutes interface{}) *MockService_DisableCacheForNextMinutes_Call {
	return &MockService_DisableCacheForNextMinutes_Call{Call: _e.mock.On("DisableCacheForNextMinutes", minutes)}
}

func (_c *MockService_DisableCacheForNextMinutes_Call) Run(run func(minutes int)) *MockService_DisableCacheForNextMinutes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockService_DisableCacheForNextMinutes_Call) Return(err error) *MockService_DisableCacheForNextMinutes_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_DisableCacheForNextMinutes_Call) RunAndReturn(run func(int) error) *MockService_DisableCacheForNextMinutes_Call {
	_c.Call.Return(run)
	return _c
}

// EnableCache provides a mock function with given fields:
func (_m *MockService) EnableCache() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnableCache")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_EnableCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableCache'
type MockService_EnableCache_Call struct {
	*mock.Call
}

// EnableCache is a helper method to define mock.On call
func (_e *MockService_Expecter) EnableCache() *MockService_EnableCache_Call {
	return &MockService_EnableCache_Call{Call: _e.mock.On("EnableCache")}
}

func (_c *MockService_EnableCache_Call) Run(run func()) *MockService_EnableCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_EnableCache_Call) Return(err error) *MockService_EnableCache_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_EnableCache_Call) RunAndReturn(run func() error) *MockService_EnableCache_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: a
func (_m *MockService) Init(a *app.App) error {
	ret := _m.Called(a)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockService_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - a *app.App
func (_e *MockService_Expecter) Init(a interface{}) *MockService_Init_Call {
	return &MockService_Init_Call{Call: _e.mock.On("Init", a)}
}

func (_c *MockService_Init_Call) Run(run func(a *app.App)) *MockService_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app.App))
	})
	return _c
}

func (_c *MockService_Init_Call) Return(err error) *MockService_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_Init_Call) RunAndReturn(run func(*app.App) error) *MockService_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockService) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockService_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockService_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockService_Expecter) Name() *MockService_Name_Call {
	return &MockService_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockService_Name_Call) Run(run func()) *MockService_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Name_Call) Return(name string) *MockService_Name_Call {
	_c.Call.Return(name)
	return _c
}

func (_c *MockService_Name_Call) RunAndReturn(run func() string) *MockService_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: ctx
func (_m *MockService) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockService_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) Run(ctx interface{}) *MockService_Run_Call {
	return &MockService_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *MockService_Run_Call) Run(run func(ctx context.Context)) *MockService_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockService_Run_Call) Return(err error) *MockService_Run_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_Run_Call) RunAndReturn(run func(context.Context) error) *MockService_Run_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
