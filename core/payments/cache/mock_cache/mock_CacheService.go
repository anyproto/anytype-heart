// Code generated by mockery. DO NOT EDIT.

package mock_cache

import (
	app "github.com/anyproto/any-sync/app"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/anyproto/anytype-heart/pb"
)

// MockCacheService is an autogenerated mock type for the CacheService type
type MockCacheService struct {
	mock.Mock
}

type MockCacheService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCacheService) EXPECT() *MockCacheService_Expecter {
	return &MockCacheService_Expecter{mock: &_m.Mock}
}

// CacheClear provides a mock function with given fields:
func (_m *MockCacheService) CacheClear() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CacheClear")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCacheService_CacheClear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CacheClear'
type MockCacheService_CacheClear_Call struct {
	*mock.Call
}

// CacheClear is a helper method to define mock.On call
func (_e *MockCacheService_Expecter) CacheClear() *MockCacheService_CacheClear_Call {
	return &MockCacheService_CacheClear_Call{Call: _e.mock.On("CacheClear")}
}

func (_c *MockCacheService_CacheClear_Call) Run(run func()) *MockCacheService_CacheClear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheService_CacheClear_Call) Return(err error) *MockCacheService_CacheClear_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCacheService_CacheClear_Call) RunAndReturn(run func() error) *MockCacheService_CacheClear_Call {
	_c.Call.Return(run)
	return _c
}

// CacheDisableForNextMinutes provides a mock function with given fields: minutes
func (_m *MockCacheService) CacheDisableForNextMinutes(minutes int) error {
	ret := _m.Called(minutes)

	if len(ret) == 0 {
		panic("no return value specified for CacheDisableForNextMinutes")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(minutes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCacheService_CacheDisableForNextMinutes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CacheDisableForNextMinutes'
type MockCacheService_CacheDisableForNextMinutes_Call struct {
	*mock.Call
}

// CacheDisableForNextMinutes is a helper method to define mock.On call
//   - minutes int
func (_e *MockCacheService_Expecter) CacheDisableForNextMinutes(minutes interface{}) *MockCacheService_CacheDisableForNextMinutes_Call {
	return &MockCacheService_CacheDisableForNextMinutes_Call{Call: _e.mock.On("CacheDisableForNextMinutes", minutes)}
}

func (_c *MockCacheService_CacheDisableForNextMinutes_Call) Run(run func(minutes int)) *MockCacheService_CacheDisableForNextMinutes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockCacheService_CacheDisableForNextMinutes_Call) Return(err error) *MockCacheService_CacheDisableForNextMinutes_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCacheService_CacheDisableForNextMinutes_Call) RunAndReturn(run func(int) error) *MockCacheService_CacheDisableForNextMinutes_Call {
	_c.Call.Return(run)
	return _c
}

// CacheEnable provides a mock function with given fields:
func (_m *MockCacheService) CacheEnable() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CacheEnable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCacheService_CacheEnable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CacheEnable'
type MockCacheService_CacheEnable_Call struct {
	*mock.Call
}

// CacheEnable is a helper method to define mock.On call
func (_e *MockCacheService_Expecter) CacheEnable() *MockCacheService_CacheEnable_Call {
	return &MockCacheService_CacheEnable_Call{Call: _e.mock.On("CacheEnable")}
}

func (_c *MockCacheService_CacheEnable_Call) Run(run func()) *MockCacheService_CacheEnable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheService_CacheEnable_Call) Return(err error) *MockCacheService_CacheEnable_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCacheService_CacheEnable_Call) RunAndReturn(run func() error) *MockCacheService_CacheEnable_Call {
	_c.Call.Return(run)
	return _c
}

// CacheGet provides a mock function with given fields:
func (_m *MockCacheService) CacheGet() (*pb.RpcMembershipGetStatusResponse, *pb.RpcMembershipGetTiersResponse, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CacheGet")
	}

	var r0 *pb.RpcMembershipGetStatusResponse
	var r1 *pb.RpcMembershipGetTiersResponse
	var r2 error
	if rf, ok := ret.Get(0).(func() (*pb.RpcMembershipGetStatusResponse, *pb.RpcMembershipGetTiersResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *pb.RpcMembershipGetStatusResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.RpcMembershipGetStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() *pb.RpcMembershipGetTiersResponse); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*pb.RpcMembershipGetTiersResponse)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockCacheService_CacheGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CacheGet'
type MockCacheService_CacheGet_Call struct {
	*mock.Call
}

// CacheGet is a helper method to define mock.On call
func (_e *MockCacheService_Expecter) CacheGet() *MockCacheService_CacheGet_Call {
	return &MockCacheService_CacheGet_Call{Call: _e.mock.On("CacheGet")}
}

func (_c *MockCacheService_CacheGet_Call) Run(run func()) *MockCacheService_CacheGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheService_CacheGet_Call) Return(status *pb.RpcMembershipGetStatusResponse, tiers *pb.RpcMembershipGetTiersResponse, err error) *MockCacheService_CacheGet_Call {
	_c.Call.Return(status, tiers, err)
	return _c
}

func (_c *MockCacheService_CacheGet_Call) RunAndReturn(run func() (*pb.RpcMembershipGetStatusResponse, *pb.RpcMembershipGetTiersResponse, error)) *MockCacheService_CacheGet_Call {
	_c.Call.Return(run)
	return _c
}

// CacheSet provides a mock function with given fields: status, tiers
func (_m *MockCacheService) CacheSet(status *pb.RpcMembershipGetStatusResponse, tiers *pb.RpcMembershipGetTiersResponse) error {
	ret := _m.Called(status, tiers)

	if len(ret) == 0 {
		panic("no return value specified for CacheSet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*pb.RpcMembershipGetStatusResponse, *pb.RpcMembershipGetTiersResponse) error); ok {
		r0 = rf(status, tiers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCacheService_CacheSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CacheSet'
type MockCacheService_CacheSet_Call struct {
	*mock.Call
}

// CacheSet is a helper method to define mock.On call
//   - status *pb.RpcMembershipGetStatusResponse
//   - tiers *pb.RpcMembershipGetTiersResponse
func (_e *MockCacheService_Expecter) CacheSet(status interface{}, tiers interface{}) *MockCacheService_CacheSet_Call {
	return &MockCacheService_CacheSet_Call{Call: _e.mock.On("CacheSet", status, tiers)}
}

func (_c *MockCacheService_CacheSet_Call) Run(run func(status *pb.RpcMembershipGetStatusResponse, tiers *pb.RpcMembershipGetTiersResponse)) *MockCacheService_CacheSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*pb.RpcMembershipGetStatusResponse), args[1].(*pb.RpcMembershipGetTiersResponse))
	})
	return _c
}

func (_c *MockCacheService_CacheSet_Call) Return(err error) *MockCacheService_CacheSet_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCacheService_CacheSet_Call) RunAndReturn(run func(*pb.RpcMembershipGetStatusResponse, *pb.RpcMembershipGetTiersResponse) error) *MockCacheService_CacheSet_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: a
func (_m *MockCacheService) Init(a *app.App) error {
	ret := _m.Called(a)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCacheService_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockCacheService_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - a *app.App
func (_e *MockCacheService_Expecter) Init(a interface{}) *MockCacheService_Init_Call {
	return &MockCacheService_Init_Call{Call: _e.mock.On("Init", a)}
}

func (_c *MockCacheService_Init_Call) Run(run func(a *app.App)) *MockCacheService_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app.App))
	})
	return _c
}

func (_c *MockCacheService_Init_Call) Return(err error) *MockCacheService_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCacheService_Init_Call) RunAndReturn(run func(*app.App) error) *MockCacheService_Init_Call {
	_c.Call.Return(run)
	return _c
}

// IsCacheDisabled provides a mock function with given fields:
func (_m *MockCacheService) IsCacheDisabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsCacheDisabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockCacheService_IsCacheDisabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsCacheDisabled'
type MockCacheService_IsCacheDisabled_Call struct {
	*mock.Call
}

// IsCacheDisabled is a helper method to define mock.On call
func (_e *MockCacheService_Expecter) IsCacheDisabled() *MockCacheService_IsCacheDisabled_Call {
	return &MockCacheService_IsCacheDisabled_Call{Call: _e.mock.On("IsCacheDisabled")}
}

func (_c *MockCacheService_IsCacheDisabled_Call) Run(run func()) *MockCacheService_IsCacheDisabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheService_IsCacheDisabled_Call) Return(disabled bool) *MockCacheService_IsCacheDisabled_Call {
	_c.Call.Return(disabled)
	return _c
}

func (_c *MockCacheService_IsCacheDisabled_Call) RunAndReturn(run func() bool) *MockCacheService_IsCacheDisabled_Call {
	_c.Call.Return(run)
	return _c
}

// IsCacheExpired provides a mock function with given fields:
func (_m *MockCacheService) IsCacheExpired() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsCacheExpired")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockCacheService_IsCacheExpired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsCacheExpired'
type MockCacheService_IsCacheExpired_Call struct {
	*mock.Call
}

// IsCacheExpired is a helper method to define mock.On call
func (_e *MockCacheService_Expecter) IsCacheExpired() *MockCacheService_IsCacheExpired_Call {
	return &MockCacheService_IsCacheExpired_Call{Call: _e.mock.On("IsCacheExpired")}
}

func (_c *MockCacheService_IsCacheExpired_Call) Run(run func()) *MockCacheService_IsCacheExpired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheService_IsCacheExpired_Call) Return(expired bool) *MockCacheService_IsCacheExpired_Call {
	_c.Call.Return(expired)
	return _c
}

func (_c *MockCacheService_IsCacheExpired_Call) RunAndReturn(run func() bool) *MockCacheService_IsCacheExpired_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockCacheService) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockCacheService_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockCacheService_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockCacheService_Expecter) Name() *MockCacheService_Name_Call {
	return &MockCacheService_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockCacheService_Name_Call) Run(run func()) *MockCacheService_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheService_Name_Call) Return(name string) *MockCacheService_Name_Call {
	_c.Call.Return(name)
	return _c
}

func (_c *MockCacheService_Name_Call) RunAndReturn(run func() string) *MockCacheService_Name_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCacheService creates a new instance of MockCacheService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacheService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacheService {
	mock := &MockCacheService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
