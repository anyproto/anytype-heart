// Code generated by mockery. DO NOT EDIT.

package mock_peerstatus

import (
	app "github.com/anyproto/any-sync/app"
	mock "github.com/stretchr/testify/mock"
)

// MockLocalDiscoveryHook is an autogenerated mock type for the LocalDiscoveryHook type
type MockLocalDiscoveryHook struct {
	mock.Mock
}

type MockLocalDiscoveryHook_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLocalDiscoveryHook) EXPECT() *MockLocalDiscoveryHook_Expecter {
	return &MockLocalDiscoveryHook_Expecter{mock: &_m.Mock}
}

// Init provides a mock function with given fields: a
func (_m *MockLocalDiscoveryHook) Init(a *app.App) error {
	ret := _m.Called(a)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLocalDiscoveryHook_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockLocalDiscoveryHook_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - a *app.App
func (_e *MockLocalDiscoveryHook_Expecter) Init(a interface{}) *MockLocalDiscoveryHook_Init_Call {
	return &MockLocalDiscoveryHook_Init_Call{Call: _e.mock.On("Init", a)}
}

func (_c *MockLocalDiscoveryHook_Init_Call) Run(run func(a *app.App)) *MockLocalDiscoveryHook_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app.App))
	})
	return _c
}

func (_c *MockLocalDiscoveryHook_Init_Call) Return(err error) *MockLocalDiscoveryHook_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLocalDiscoveryHook_Init_Call) RunAndReturn(run func(*app.App) error) *MockLocalDiscoveryHook_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockLocalDiscoveryHook) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockLocalDiscoveryHook_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockLocalDiscoveryHook_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockLocalDiscoveryHook_Expecter) Name() *MockLocalDiscoveryHook_Name_Call {
	return &MockLocalDiscoveryHook_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockLocalDiscoveryHook_Name_Call) Run(run func()) *MockLocalDiscoveryHook_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLocalDiscoveryHook_Name_Call) Return(name string) *MockLocalDiscoveryHook_Name_Call {
	_c.Call.Return(name)
	return _c
}

func (_c *MockLocalDiscoveryHook_Name_Call) RunAndReturn(run func() string) *MockLocalDiscoveryHook_Name_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterP2PNotPossible provides a mock function with given fields: hook
func (_m *MockLocalDiscoveryHook) RegisterP2PNotPossible(hook func()) {
	_m.Called(hook)
}

// MockLocalDiscoveryHook_RegisterP2PNotPossible_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterP2PNotPossible'
type MockLocalDiscoveryHook_RegisterP2PNotPossible_Call struct {
	*mock.Call
}

// RegisterP2PNotPossible is a helper method to define mock.On call
//   - hook func()
func (_e *MockLocalDiscoveryHook_Expecter) RegisterP2PNotPossible(hook interface{}) *MockLocalDiscoveryHook_RegisterP2PNotPossible_Call {
	return &MockLocalDiscoveryHook_RegisterP2PNotPossible_Call{Call: _e.mock.On("RegisterP2PNotPossible", hook)}
}

func (_c *MockLocalDiscoveryHook_RegisterP2PNotPossible_Call) Run(run func(hook func())) *MockLocalDiscoveryHook_RegisterP2PNotPossible_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func()))
	})
	return _c
}

func (_c *MockLocalDiscoveryHook_RegisterP2PNotPossible_Call) Return() *MockLocalDiscoveryHook_RegisterP2PNotPossible_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLocalDiscoveryHook_RegisterP2PNotPossible_Call) RunAndReturn(run func(func())) *MockLocalDiscoveryHook_RegisterP2PNotPossible_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterResetNotPossible provides a mock function with given fields: hook
func (_m *MockLocalDiscoveryHook) RegisterResetNotPossible(hook func()) {
	_m.Called(hook)
}

// MockLocalDiscoveryHook_RegisterResetNotPossible_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterResetNotPossible'
type MockLocalDiscoveryHook_RegisterResetNotPossible_Call struct {
	*mock.Call
}

// RegisterResetNotPossible is a helper method to define mock.On call
//   - hook func()
func (_e *MockLocalDiscoveryHook_Expecter) RegisterResetNotPossible(hook interface{}) *MockLocalDiscoveryHook_RegisterResetNotPossible_Call {
	return &MockLocalDiscoveryHook_RegisterResetNotPossible_Call{Call: _e.mock.On("RegisterResetNotPossible", hook)}
}

func (_c *MockLocalDiscoveryHook_RegisterResetNotPossible_Call) Run(run func(hook func())) *MockLocalDiscoveryHook_RegisterResetNotPossible_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func()))
	})
	return _c
}

func (_c *MockLocalDiscoveryHook_RegisterResetNotPossible_Call) Return() *MockLocalDiscoveryHook_RegisterResetNotPossible_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLocalDiscoveryHook_RegisterResetNotPossible_Call) RunAndReturn(run func(func())) *MockLocalDiscoveryHook_RegisterResetNotPossible_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLocalDiscoveryHook creates a new instance of MockLocalDiscoveryHook. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLocalDiscoveryHook(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLocalDiscoveryHook {
	mock := &MockLocalDiscoveryHook{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
