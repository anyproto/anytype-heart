// Code generated by mockery. DO NOT EDIT.

package mock_inviteservice

import (
	app "github.com/anyproto/any-sync/app"
	cid "github.com/ipfs/go-cid"

	context "context"

	crypto "github.com/anyproto/any-sync/util/crypto"

	domain "github.com/anyproto/anytype-heart/core/domain"

	mock "github.com/stretchr/testify/mock"

	model "github.com/anyproto/anytype-heart/pkg/lib/pb/model"
)

// MockInviteService is an autogenerated mock type for the InviteService type
type MockInviteService struct {
	mock.Mock
}

type MockInviteService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInviteService) EXPECT() *MockInviteService_Expecter {
	return &MockInviteService_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: ctx
func (_m *MockInviteService) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInviteService_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockInviteService_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockInviteService_Expecter) Close(ctx interface{}) *MockInviteService_Close_Call {
	return &MockInviteService_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *MockInviteService_Close_Call) Run(run func(ctx context.Context)) *MockInviteService_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockInviteService_Close_Call) Return(err error) *MockInviteService_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInviteService_Close_Call) RunAndReturn(run func(context.Context) error) *MockInviteService_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Generate provides a mock function with given fields: ctx, spaceId, inviteKey, sendInvite
func (_m *MockInviteService) Generate(ctx context.Context, spaceId string, inviteKey crypto.PrivKey, sendInvite func() error) (domain.InviteInfo, error) {
	ret := _m.Called(ctx, spaceId, inviteKey, sendInvite)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 domain.InviteInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, crypto.PrivKey, func() error) (domain.InviteInfo, error)); ok {
		return rf(ctx, spaceId, inviteKey, sendInvite)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, crypto.PrivKey, func() error) domain.InviteInfo); ok {
		r0 = rf(ctx, spaceId, inviteKey, sendInvite)
	} else {
		r0 = ret.Get(0).(domain.InviteInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, crypto.PrivKey, func() error) error); ok {
		r1 = rf(ctx, spaceId, inviteKey, sendInvite)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInviteService_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type MockInviteService_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - ctx context.Context
//   - spaceId string
//   - inviteKey crypto.PrivKey
//   - sendInvite func() error
func (_e *MockInviteService_Expecter) Generate(ctx interface{}, spaceId interface{}, inviteKey interface{}, sendInvite interface{}) *MockInviteService_Generate_Call {
	return &MockInviteService_Generate_Call{Call: _e.mock.On("Generate", ctx, spaceId, inviteKey, sendInvite)}
}

func (_c *MockInviteService_Generate_Call) Run(run func(ctx context.Context, spaceId string, inviteKey crypto.PrivKey, sendInvite func() error)) *MockInviteService_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(crypto.PrivKey), args[3].(func() error))
	})
	return _c
}

func (_c *MockInviteService_Generate_Call) Return(_a0 domain.InviteInfo, _a1 error) *MockInviteService_Generate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInviteService_Generate_Call) RunAndReturn(run func(context.Context, string, crypto.PrivKey, func() error) (domain.InviteInfo, error)) *MockInviteService_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrent provides a mock function with given fields: ctx, spaceId
func (_m *MockInviteService) GetCurrent(ctx context.Context, spaceId string) (domain.InviteInfo, error) {
	ret := _m.Called(ctx, spaceId)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrent")
	}

	var r0 domain.InviteInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.InviteInfo, error)); ok {
		return rf(ctx, spaceId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.InviteInfo); ok {
		r0 = rf(ctx, spaceId)
	} else {
		r0 = ret.Get(0).(domain.InviteInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, spaceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInviteService_GetCurrent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrent'
type MockInviteService_GetCurrent_Call struct {
	*mock.Call
}

// GetCurrent is a helper method to define mock.On call
//   - ctx context.Context
//   - spaceId string
func (_e *MockInviteService_Expecter) GetCurrent(ctx interface{}, spaceId interface{}) *MockInviteService_GetCurrent_Call {
	return &MockInviteService_GetCurrent_Call{Call: _e.mock.On("GetCurrent", ctx, spaceId)}
}

func (_c *MockInviteService_GetCurrent_Call) Run(run func(ctx context.Context, spaceId string)) *MockInviteService_GetCurrent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockInviteService_GetCurrent_Call) Return(_a0 domain.InviteInfo, _a1 error) *MockInviteService_GetCurrent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInviteService_GetCurrent_Call) RunAndReturn(run func(context.Context, string) (domain.InviteInfo, error)) *MockInviteService_GetCurrent_Call {
	_c.Call.Return(run)
	return _c
}

// GetPayload provides a mock function with given fields: ctx, inviteCid, inviteFileKey
func (_m *MockInviteService) GetPayload(ctx context.Context, inviteCid cid.Cid, inviteFileKey crypto.SymKey) (*model.InvitePayload, error) {
	ret := _m.Called(ctx, inviteCid, inviteFileKey)

	if len(ret) == 0 {
		panic("no return value specified for GetPayload")
	}

	var r0 *model.InvitePayload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cid.Cid, crypto.SymKey) (*model.InvitePayload, error)); ok {
		return rf(ctx, inviteCid, inviteFileKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cid.Cid, crypto.SymKey) *model.InvitePayload); ok {
		r0 = rf(ctx, inviteCid, inviteFileKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.InvitePayload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, cid.Cid, crypto.SymKey) error); ok {
		r1 = rf(ctx, inviteCid, inviteFileKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInviteService_GetPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPayload'
type MockInviteService_GetPayload_Call struct {
	*mock.Call
}

// GetPayload is a helper method to define mock.On call
//   - ctx context.Context
//   - inviteCid cid.Cid
//   - inviteFileKey crypto.SymKey
func (_e *MockInviteService_Expecter) GetPayload(ctx interface{}, inviteCid interface{}, inviteFileKey interface{}) *MockInviteService_GetPayload_Call {
	return &MockInviteService_GetPayload_Call{Call: _e.mock.On("GetPayload", ctx, inviteCid, inviteFileKey)}
}

func (_c *MockInviteService_GetPayload_Call) Run(run func(ctx context.Context, inviteCid cid.Cid, inviteFileKey crypto.SymKey)) *MockInviteService_GetPayload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cid.Cid), args[2].(crypto.SymKey))
	})
	return _c
}

func (_c *MockInviteService_GetPayload_Call) Return(_a0 *model.InvitePayload, _a1 error) *MockInviteService_GetPayload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInviteService_GetPayload_Call) RunAndReturn(run func(context.Context, cid.Cid, crypto.SymKey) (*model.InvitePayload, error)) *MockInviteService_GetPayload_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: a
func (_m *MockInviteService) Init(a *app.App) error {
	ret := _m.Called(a)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInviteService_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockInviteService_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - a *app.App
func (_e *MockInviteService_Expecter) Init(a interface{}) *MockInviteService_Init_Call {
	return &MockInviteService_Init_Call{Call: _e.mock.On("Init", a)}
}

func (_c *MockInviteService_Init_Call) Run(run func(a *app.App)) *MockInviteService_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app.App))
	})
	return _c
}

func (_c *MockInviteService_Init_Call) Return(err error) *MockInviteService_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInviteService_Init_Call) RunAndReturn(run func(*app.App) error) *MockInviteService_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockInviteService) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockInviteService_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockInviteService_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockInviteService_Expecter) Name() *MockInviteService_Name_Call {
	return &MockInviteService_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockInviteService_Name_Call) Run(run func()) *MockInviteService_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInviteService_Name_Call) Return(name string) *MockInviteService_Name_Call {
	_c.Call.Return(name)
	return _c
}

func (_c *MockInviteService_Name_Call) RunAndReturn(run func() string) *MockInviteService_Name_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveExisting provides a mock function with given fields: ctx, spaceId
func (_m *MockInviteService) RemoveExisting(ctx context.Context, spaceId string) error {
	ret := _m.Called(ctx, spaceId)

	if len(ret) == 0 {
		panic("no return value specified for RemoveExisting")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, spaceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInviteService_RemoveExisting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveExisting'
type MockInviteService_RemoveExisting_Call struct {
	*mock.Call
}

// RemoveExisting is a helper method to define mock.On call
//   - ctx context.Context
//   - spaceId string
func (_e *MockInviteService_Expecter) RemoveExisting(ctx interface{}, spaceId interface{}) *MockInviteService_RemoveExisting_Call {
	return &MockInviteService_RemoveExisting_Call{Call: _e.mock.On("RemoveExisting", ctx, spaceId)}
}

func (_c *MockInviteService_RemoveExisting_Call) Run(run func(ctx context.Context, spaceId string)) *MockInviteService_RemoveExisting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockInviteService_RemoveExisting_Call) Return(_a0 error) *MockInviteService_RemoveExisting_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInviteService_RemoveExisting_Call) RunAndReturn(run func(context.Context, string) error) *MockInviteService_RemoveExisting_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: ctx
func (_m *MockInviteService) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInviteService_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockInviteService_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockInviteService_Expecter) Run(ctx interface{}) *MockInviteService_Run_Call {
	return &MockInviteService_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *MockInviteService_Run_Call) Run(run func(ctx context.Context)) *MockInviteService_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockInviteService_Run_Call) Return(err error) *MockInviteService_Run_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockInviteService_Run_Call) RunAndReturn(run func(context.Context) error) *MockInviteService_Run_Call {
	_c.Call.Return(run)
	return _c
}

// View provides a mock function with given fields: ctx, inviteCid, inviteFileKey
func (_m *MockInviteService) View(ctx context.Context, inviteCid cid.Cid, inviteFileKey crypto.SymKey) (domain.InviteView, error) {
	ret := _m.Called(ctx, inviteCid, inviteFileKey)

	if len(ret) == 0 {
		panic("no return value specified for View")
	}

	var r0 domain.InviteView
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cid.Cid, crypto.SymKey) (domain.InviteView, error)); ok {
		return rf(ctx, inviteCid, inviteFileKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cid.Cid, crypto.SymKey) domain.InviteView); ok {
		r0 = rf(ctx, inviteCid, inviteFileKey)
	} else {
		r0 = ret.Get(0).(domain.InviteView)
	}

	if rf, ok := ret.Get(1).(func(context.Context, cid.Cid, crypto.SymKey) error); ok {
		r1 = rf(ctx, inviteCid, inviteFileKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInviteService_View_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'View'
type MockInviteService_View_Call struct {
	*mock.Call
}

// View is a helper method to define mock.On call
//   - ctx context.Context
//   - inviteCid cid.Cid
//   - inviteFileKey crypto.SymKey
func (_e *MockInviteService_Expecter) View(ctx interface{}, inviteCid interface{}, inviteFileKey interface{}) *MockInviteService_View_Call {
	return &MockInviteService_View_Call{Call: _e.mock.On("View", ctx, inviteCid, inviteFileKey)}
}

func (_c *MockInviteService_View_Call) Run(run func(ctx context.Context, inviteCid cid.Cid, inviteFileKey crypto.SymKey)) *MockInviteService_View_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cid.Cid), args[2].(crypto.SymKey))
	})
	return _c
}

func (_c *MockInviteService_View_Call) Return(_a0 domain.InviteView, _a1 error) *MockInviteService_View_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInviteService_View_Call) RunAndReturn(run func(context.Context, cid.Cid, crypto.SymKey) (domain.InviteView, error)) *MockInviteService_View_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInviteService creates a new instance of MockInviteService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInviteService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInviteService {
	mock := &MockInviteService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
