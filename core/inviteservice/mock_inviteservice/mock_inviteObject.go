// Code generated by mockery. DO NOT EDIT.

package mock_inviteservice

import mock "github.com/stretchr/testify/mock"

// MockinviteObject is an autogenerated mock type for the inviteObject type
type MockinviteObject struct {
	mock.Mock
}

type MockinviteObject_Expecter struct {
	mock *mock.Mock
}

func (_m *MockinviteObject) EXPECT() *MockinviteObject_Expecter {
	return &MockinviteObject_Expecter{mock: &_m.Mock}
}

// GetExistingInviteInfo provides a mock function with given fields:
func (_m *MockinviteObject) GetExistingInviteInfo() (string, string) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExistingInviteInfo")
	}

	var r0 string
	var r1 string
	if rf, ok := ret.Get(0).(func() (string, string)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// MockinviteObject_GetExistingInviteInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExistingInviteInfo'
type MockinviteObject_GetExistingInviteInfo_Call struct {
	*mock.Call
}

// GetExistingInviteInfo is a helper method to define mock.On call
func (_e *MockinviteObject_Expecter) GetExistingInviteInfo() *MockinviteObject_GetExistingInviteInfo_Call {
	return &MockinviteObject_GetExistingInviteInfo_Call{Call: _e.mock.On("GetExistingInviteInfo")}
}

func (_c *MockinviteObject_GetExistingInviteInfo_Call) Run(run func()) *MockinviteObject_GetExistingInviteInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockinviteObject_GetExistingInviteInfo_Call) Return(fileCid string, fileKey string) *MockinviteObject_GetExistingInviteInfo_Call {
	_c.Call.Return(fileCid, fileKey)
	return _c
}

func (_c *MockinviteObject_GetExistingInviteInfo_Call) RunAndReturn(run func() (string, string)) *MockinviteObject_GetExistingInviteInfo_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveExistingInviteInfo provides a mock function with given fields:
func (_m *MockinviteObject) RemoveExistingInviteInfo() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RemoveExistingInviteInfo")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockinviteObject_RemoveExistingInviteInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveExistingInviteInfo'
type MockinviteObject_RemoveExistingInviteInfo_Call struct {
	*mock.Call
}

// RemoveExistingInviteInfo is a helper method to define mock.On call
func (_e *MockinviteObject_Expecter) RemoveExistingInviteInfo() *MockinviteObject_RemoveExistingInviteInfo_Call {
	return &MockinviteObject_RemoveExistingInviteInfo_Call{Call: _e.mock.On("RemoveExistingInviteInfo")}
}

func (_c *MockinviteObject_RemoveExistingInviteInfo_Call) Run(run func()) *MockinviteObject_RemoveExistingInviteInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockinviteObject_RemoveExistingInviteInfo_Call) Return(fileCid string, err error) *MockinviteObject_RemoveExistingInviteInfo_Call {
	_c.Call.Return(fileCid, err)
	return _c
}

func (_c *MockinviteObject_RemoveExistingInviteInfo_Call) RunAndReturn(run func() (string, error)) *MockinviteObject_RemoveExistingInviteInfo_Call {
	_c.Call.Return(run)
	return _c
}

// SetInviteFileInfo provides a mock function with given fields: fileCid, fileKey
func (_m *MockinviteObject) SetInviteFileInfo(fileCid string, fileKey string) error {
	ret := _m.Called(fileCid, fileKey)

	if len(ret) == 0 {
		panic("no return value specified for SetInviteFileInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(fileCid, fileKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockinviteObject_SetInviteFileInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetInviteFileInfo'
type MockinviteObject_SetInviteFileInfo_Call struct {
	*mock.Call
}

// SetInviteFileInfo is a helper method to define mock.On call
//   - fileCid string
//   - fileKey string
func (_e *MockinviteObject_Expecter) SetInviteFileInfo(fileCid interface{}, fileKey interface{}) *MockinviteObject_SetInviteFileInfo_Call {
	return &MockinviteObject_SetInviteFileInfo_Call{Call: _e.mock.On("SetInviteFileInfo", fileCid, fileKey)}
}

func (_c *MockinviteObject_SetInviteFileInfo_Call) Run(run func(fileCid string, fileKey string)) *MockinviteObject_SetInviteFileInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockinviteObject_SetInviteFileInfo_Call) Return(err error) *MockinviteObject_SetInviteFileInfo_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockinviteObject_SetInviteFileInfo_Call) RunAndReturn(run func(string, string) error) *MockinviteObject_SetInviteFileInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockinviteObject creates a new instance of MockinviteObject. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockinviteObject(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockinviteObject {
	mock := &MockinviteObject{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
