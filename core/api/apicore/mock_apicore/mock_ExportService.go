// Code generated by mockery. DO NOT EDIT.

package mock_apicore

import (
	context "context"

	model "github.com/anyproto/anytype-heart/pkg/lib/pb/model"
	mock "github.com/stretchr/testify/mock"
)

// MockExportService is an autogenerated mock type for the ExportService type
type MockExportService struct {
	mock.Mock
}

type MockExportService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExportService) EXPECT() *MockExportService_Expecter {
	return &MockExportService_Expecter{mock: &_m.Mock}
}

// ExportSingleInMemory provides a mock function with given fields: ctx, spaceId, objectId, format
func (_m *MockExportService) ExportSingleInMemory(ctx context.Context, spaceId string, objectId string, format model.ExportFormat) (string, error) {
	ret := _m.Called(ctx, spaceId, objectId, format)

	if len(ret) == 0 {
		panic("no return value specified for ExportSingleInMemory")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, model.ExportFormat) (string, error)); ok {
		return rf(ctx, spaceId, objectId, format)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, model.ExportFormat) string); ok {
		r0 = rf(ctx, spaceId, objectId, format)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, model.ExportFormat) error); ok {
		r1 = rf(ctx, spaceId, objectId, format)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExportService_ExportSingleInMemory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportSingleInMemory'
type MockExportService_ExportSingleInMemory_Call struct {
	*mock.Call
}

// ExportSingleInMemory is a helper method to define mock.On call
//   - ctx context.Context
//   - spaceId string
//   - objectId string
//   - format model.ExportFormat
func (_e *MockExportService_Expecter) ExportSingleInMemory(ctx interface{}, spaceId interface{}, objectId interface{}, format interface{}) *MockExportService_ExportSingleInMemory_Call {
	return &MockExportService_ExportSingleInMemory_Call{Call: _e.mock.On("ExportSingleInMemory", ctx, spaceId, objectId, format)}
}

func (_c *MockExportService_ExportSingleInMemory_Call) Run(run func(ctx context.Context, spaceId string, objectId string, format model.ExportFormat)) *MockExportService_ExportSingleInMemory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(model.ExportFormat))
	})
	return _c
}

func (_c *MockExportService_ExportSingleInMemory_Call) Return(res string, err error) *MockExportService_ExportSingleInMemory_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockExportService_ExportSingleInMemory_Call) RunAndReturn(run func(context.Context, string, string, model.ExportFormat) (string, error)) *MockExportService_ExportSingleInMemory_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExportService creates a new instance of MockExportService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExportService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExportService {
	mock := &MockExportService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
