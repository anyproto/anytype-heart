// Code generated by mockery. DO NOT EDIT.

package mock_filter

import (
	apimodel "github.com/anyproto/anytype-heart/core/api/model"

	mock "github.com/stretchr/testify/mock"
)

// MockApiService is an autogenerated mock type for the ApiService type
type MockApiService struct {
	mock.Mock
}

type MockApiService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockApiService) EXPECT() *MockApiService_Expecter {
	return &MockApiService_Expecter{mock: &_m.Mock}
}

// GetCachedProperties provides a mock function with given fields: spaceId
func (_m *MockApiService) GetCachedProperties(spaceId string) map[string]*apimodel.Property {
	ret := _m.Called(spaceId)

	if len(ret) == 0 {
		panic("no return value specified for GetCachedProperties")
	}

	var r0 map[string]*apimodel.Property
	if rf, ok := ret.Get(0).(func(string) map[string]*apimodel.Property); ok {
		r0 = rf(spaceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*apimodel.Property)
		}
	}

	return r0
}

// MockApiService_GetCachedProperties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCachedProperties'
type MockApiService_GetCachedProperties_Call struct {
	*mock.Call
}

// GetCachedProperties is a helper method to define mock.On call
//   - spaceId string
func (_e *MockApiService_Expecter) GetCachedProperties(spaceId interface{}) *MockApiService_GetCachedProperties_Call {
	return &MockApiService_GetCachedProperties_Call{Call: _e.mock.On("GetCachedProperties", spaceId)}
}

func (_c *MockApiService_GetCachedProperties_Call) Run(run func(spaceId string)) *MockApiService_GetCachedProperties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockApiService_GetCachedProperties_Call) Return(_a0 map[string]*apimodel.Property) *MockApiService_GetCachedProperties_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApiService_GetCachedProperties_Call) RunAndReturn(run func(string) map[string]*apimodel.Property) *MockApiService_GetCachedProperties_Call {
	_c.Call.Return(run)
	return _c
}

// ResolvePropertyApiKey provides a mock function with given fields: properties, key
func (_m *MockApiService) ResolvePropertyApiKey(properties map[string]*apimodel.Property, key string) string {
	ret := _m.Called(properties, key)

	if len(ret) == 0 {
		panic("no return value specified for ResolvePropertyApiKey")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(map[string]*apimodel.Property, string) string); ok {
		r0 = rf(properties, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockApiService_ResolvePropertyApiKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolvePropertyApiKey'
type MockApiService_ResolvePropertyApiKey_Call struct {
	*mock.Call
}

// ResolvePropertyApiKey is a helper method to define mock.On call
//   - properties map[string]*apimodel.Property
//   - key string
func (_e *MockApiService_Expecter) ResolvePropertyApiKey(properties interface{}, key interface{}) *MockApiService_ResolvePropertyApiKey_Call {
	return &MockApiService_ResolvePropertyApiKey_Call{Call: _e.mock.On("ResolvePropertyApiKey", properties, key)}
}

func (_c *MockApiService_ResolvePropertyApiKey_Call) Run(run func(properties map[string]*apimodel.Property, key string)) *MockApiService_ResolvePropertyApiKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]*apimodel.Property), args[1].(string))
	})
	return _c
}

func (_c *MockApiService_ResolvePropertyApiKey_Call) Return(_a0 string) *MockApiService_ResolvePropertyApiKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockApiService_ResolvePropertyApiKey_Call) RunAndReturn(run func(map[string]*apimodel.Property, string) string) *MockApiService_ResolvePropertyApiKey_Call {
	_c.Call.Return(run)
	return _c
}

// SanitizeAndValidatePropertyValue provides a mock function with given fields: spaceId, key, format, value, property, propertyMap
func (_m *MockApiService) SanitizeAndValidatePropertyValue(spaceId string, key string, format apimodel.PropertyFormat, value interface{}, property *apimodel.Property, propertyMap map[string]*apimodel.Property) (interface{}, error) {
	ret := _m.Called(spaceId, key, format, value, property, propertyMap)

	if len(ret) == 0 {
		panic("no return value specified for SanitizeAndValidatePropertyValue")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, apimodel.PropertyFormat, interface{}, *apimodel.Property, map[string]*apimodel.Property) (interface{}, error)); ok {
		return rf(spaceId, key, format, value, property, propertyMap)
	}
	if rf, ok := ret.Get(0).(func(string, string, apimodel.PropertyFormat, interface{}, *apimodel.Property, map[string]*apimodel.Property) interface{}); ok {
		r0 = rf(spaceId, key, format, value, property, propertyMap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, apimodel.PropertyFormat, interface{}, *apimodel.Property, map[string]*apimodel.Property) error); ok {
		r1 = rf(spaceId, key, format, value, property, propertyMap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockApiService_SanitizeAndValidatePropertyValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SanitizeAndValidatePropertyValue'
type MockApiService_SanitizeAndValidatePropertyValue_Call struct {
	*mock.Call
}

// SanitizeAndValidatePropertyValue is a helper method to define mock.On call
//   - spaceId string
//   - key string
//   - format apimodel.PropertyFormat
//   - value interface{}
//   - property *apimodel.Property
//   - propertyMap map[string]*apimodel.Property
func (_e *MockApiService_Expecter) SanitizeAndValidatePropertyValue(spaceId interface{}, key interface{}, format interface{}, value interface{}, property interface{}, propertyMap interface{}) *MockApiService_SanitizeAndValidatePropertyValue_Call {
	return &MockApiService_SanitizeAndValidatePropertyValue_Call{Call: _e.mock.On("SanitizeAndValidatePropertyValue", spaceId, key, format, value, property, propertyMap)}
}

func (_c *MockApiService_SanitizeAndValidatePropertyValue_Call) Run(run func(spaceId string, key string, format apimodel.PropertyFormat, value interface{}, property *apimodel.Property, propertyMap map[string]*apimodel.Property)) *MockApiService_SanitizeAndValidatePropertyValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(apimodel.PropertyFormat), args[3].(interface{}), args[4].(*apimodel.Property), args[5].(map[string]*apimodel.Property))
	})
	return _c
}

func (_c *MockApiService_SanitizeAndValidatePropertyValue_Call) Return(_a0 interface{}, _a1 error) *MockApiService_SanitizeAndValidatePropertyValue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockApiService_SanitizeAndValidatePropertyValue_Call) RunAndReturn(run func(string, string, apimodel.PropertyFormat, interface{}, *apimodel.Property, map[string]*apimodel.Property) (interface{}, error)) *MockApiService_SanitizeAndValidatePropertyValue_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockApiService creates a new instance of MockApiService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockApiService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockApiService {
	mock := &MockApiService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
