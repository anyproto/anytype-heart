// Code generated by mockery. DO NOT EDIT.

package mock_apicore

import (
	model "github.com/anyproto/anytype-heart/pkg/lib/pb/model"
	mock "github.com/stretchr/testify/mock"
)

// MockSessionService is an autogenerated mock type for the SessionService type
type MockSessionService struct {
	mock.Mock
}

type MockSessionService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionService) EXPECT() *MockSessionService_Expecter {
	return &MockSessionService_Expecter{mock: &_m.Mock}
}

// SessionExists provides a mock function with given fields: token
func (_m *MockSessionService) SessionExists(token string) (model.AccountAuthLocalApiScope, bool) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for SessionExists")
	}

	var r0 model.AccountAuthLocalApiScope
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (model.AccountAuthLocalApiScope, bool)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) model.AccountAuthLocalApiScope); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(model.AccountAuthLocalApiScope)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockSessionService_SessionExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SessionExists'
type MockSessionService_SessionExists_Call struct {
	*mock.Call
}

// SessionExists is a helper method to define mock.On call
//   - token string
func (_e *MockSessionService_Expecter) SessionExists(token interface{}) *MockSessionService_SessionExists_Call {
	return &MockSessionService_SessionExists_Call{Call: _e.mock.On("SessionExists", token)}
}

func (_c *MockSessionService_SessionExists_Call) Run(run func(token string)) *MockSessionService_SessionExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSessionService_SessionExists_Call) Return(scope model.AccountAuthLocalApiScope, exists bool) *MockSessionService_SessionExists_Call {
	_c.Call.Return(scope, exists)
	return _c
}

func (_c *MockSessionService_SessionExists_Call) RunAndReturn(run func(string) (model.AccountAuthLocalApiScope, bool)) *MockSessionService_SessionExists_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSessionService creates a new instance of MockSessionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionService {
	mock := &MockSessionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
