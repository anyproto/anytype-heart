// Code generated by mockery. DO NOT EDIT.

package mock_apicore

import (
	crossspacesub "github.com/anyproto/anytype-heart/core/subscription/crossspacesub"
	mock "github.com/stretchr/testify/mock"

	subscription "github.com/anyproto/anytype-heart/core/subscription"
)

// MockCrossSpaceSubscriptionService is an autogenerated mock type for the CrossSpaceSubscriptionService type
type MockCrossSpaceSubscriptionService struct {
	mock.Mock
}

type MockCrossSpaceSubscriptionService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCrossSpaceSubscriptionService) EXPECT() *MockCrossSpaceSubscriptionService_Expecter {
	return &MockCrossSpaceSubscriptionService_Expecter{mock: &_m.Mock}
}

// Subscribe provides a mock function with given fields: req, predicate
func (_m *MockCrossSpaceSubscriptionService) Subscribe(req subscription.SubscribeRequest, predicate crossspacesub.Predicate) (*subscription.SubscribeResponse, error) {
	ret := _m.Called(req, predicate)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 *subscription.SubscribeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(subscription.SubscribeRequest, crossspacesub.Predicate) (*subscription.SubscribeResponse, error)); ok {
		return rf(req, predicate)
	}
	if rf, ok := ret.Get(0).(func(subscription.SubscribeRequest, crossspacesub.Predicate) *subscription.SubscribeResponse); ok {
		r0 = rf(req, predicate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subscription.SubscribeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(subscription.SubscribeRequest, crossspacesub.Predicate) error); ok {
		r1 = rf(req, predicate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCrossSpaceSubscriptionService_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockCrossSpaceSubscriptionService_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - req subscription.SubscribeRequest
//   - predicate crossspacesub.Predicate
func (_e *MockCrossSpaceSubscriptionService_Expecter) Subscribe(req interface{}, predicate interface{}) *MockCrossSpaceSubscriptionService_Subscribe_Call {
	return &MockCrossSpaceSubscriptionService_Subscribe_Call{Call: _e.mock.On("Subscribe", req, predicate)}
}

func (_c *MockCrossSpaceSubscriptionService_Subscribe_Call) Run(run func(req subscription.SubscribeRequest, predicate crossspacesub.Predicate)) *MockCrossSpaceSubscriptionService_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(subscription.SubscribeRequest), args[1].(crossspacesub.Predicate))
	})
	return _c
}

func (_c *MockCrossSpaceSubscriptionService_Subscribe_Call) Return(_a0 *subscription.SubscribeResponse, _a1 error) *MockCrossSpaceSubscriptionService_Subscribe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCrossSpaceSubscriptionService_Subscribe_Call) RunAndReturn(run func(subscription.SubscribeRequest, crossspacesub.Predicate) (*subscription.SubscribeResponse, error)) *MockCrossSpaceSubscriptionService_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// Unsubscribe provides a mock function with given fields: subId
func (_m *MockCrossSpaceSubscriptionService) Unsubscribe(subId string) error {
	ret := _m.Called(subId)

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(subId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCrossSpaceSubscriptionService_Unsubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unsubscribe'
type MockCrossSpaceSubscriptionService_Unsubscribe_Call struct {
	*mock.Call
}

// Unsubscribe is a helper method to define mock.On call
//   - subId string
func (_e *MockCrossSpaceSubscriptionService_Expecter) Unsubscribe(subId interface{}) *MockCrossSpaceSubscriptionService_Unsubscribe_Call {
	return &MockCrossSpaceSubscriptionService_Unsubscribe_Call{Call: _e.mock.On("Unsubscribe", subId)}
}

func (_c *MockCrossSpaceSubscriptionService_Unsubscribe_Call) Run(run func(subId string)) *MockCrossSpaceSubscriptionService_Unsubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCrossSpaceSubscriptionService_Unsubscribe_Call) Return(_a0 error) *MockCrossSpaceSubscriptionService_Unsubscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCrossSpaceSubscriptionService_Unsubscribe_Call) RunAndReturn(run func(string) error) *MockCrossSpaceSubscriptionService_Unsubscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCrossSpaceSubscriptionService creates a new instance of MockCrossSpaceSubscriptionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCrossSpaceSubscriptionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCrossSpaceSubscriptionService {
	mock := &MockCrossSpaceSubscriptionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
