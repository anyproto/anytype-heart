// Code generated by mockery. DO NOT EDIT.

package mock_notifications

import (
	context "context"

	app "github.com/anyproto/any-sync/app"

	mock "github.com/stretchr/testify/mock"

	model "github.com/anyproto/anytype-heart/pkg/lib/pb/model"
)

// MockNotifications is an autogenerated mock type for the Notifications type
type MockNotifications struct {
	mock.Mock
}

type MockNotifications_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotifications) EXPECT() *MockNotifications_Expecter {
	return &MockNotifications_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: ctx
func (_m *MockNotifications) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotifications_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockNotifications_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNotifications_Expecter) Close(ctx interface{}) *MockNotifications_Close_Call {
	return &MockNotifications_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *MockNotifications_Close_Call) Run(run func(ctx context.Context)) *MockNotifications_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockNotifications_Close_Call) Return(err error) *MockNotifications_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNotifications_Close_Call) RunAndReturn(run func(context.Context) error) *MockNotifications_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAndSend provides a mock function with given fields: notification
func (_m *MockNotifications) CreateAndSend(notification *model.Notification) error {
	ret := _m.Called(notification)

	if len(ret) == 0 {
		panic("no return value specified for CreateAndSend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Notification) error); ok {
		r0 = rf(notification)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotifications_CreateAndSend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAndSend'
type MockNotifications_CreateAndSend_Call struct {
	*mock.Call
}

// CreateAndSend is a helper method to define mock.On call
//   - notification *model.Notification
func (_e *MockNotifications_Expecter) CreateAndSend(notification interface{}) *MockNotifications_CreateAndSend_Call {
	return &MockNotifications_CreateAndSend_Call{Call: _e.mock.On("CreateAndSend", notification)}
}

func (_c *MockNotifications_CreateAndSend_Call) Run(run func(notification *model.Notification)) *MockNotifications_CreateAndSend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Notification))
	})
	return _c
}

func (_c *MockNotifications_CreateAndSend_Call) Return(_a0 error) *MockNotifications_CreateAndSend_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotifications_CreateAndSend_Call) RunAndReturn(run func(*model.Notification) error) *MockNotifications_CreateAndSend_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: a
func (_m *MockNotifications) Init(a *app.App) error {
	ret := _m.Called(a)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotifications_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockNotifications_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - a *app.App
func (_e *MockNotifications_Expecter) Init(a interface{}) *MockNotifications_Init_Call {
	return &MockNotifications_Init_Call{Call: _e.mock.On("Init", a)}
}

func (_c *MockNotifications_Init_Call) Run(run func(a *app.App)) *MockNotifications_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app.App))
	})
	return _c
}

func (_c *MockNotifications_Init_Call) Return(err error) *MockNotifications_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNotifications_Init_Call) RunAndReturn(run func(*app.App) error) *MockNotifications_Init_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: limit, includeRead
func (_m *MockNotifications) List(limit int64, includeRead bool) ([]*model.Notification, error) {
	ret := _m.Called(limit, includeRead)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*model.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, bool) ([]*model.Notification, error)); ok {
		return rf(limit, includeRead)
	}
	if rf, ok := ret.Get(0).(func(int64, bool) []*model.Notification); ok {
		r0 = rf(limit, includeRead)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, bool) error); ok {
		r1 = rf(limit, includeRead)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotifications_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockNotifications_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - limit int64
//   - includeRead bool
func (_e *MockNotifications_Expecter) List(limit interface{}, includeRead interface{}) *MockNotifications_List_Call {
	return &MockNotifications_List_Call{Call: _e.mock.On("List", limit, includeRead)}
}

func (_c *MockNotifications_List_Call) Run(run func(limit int64, includeRead bool)) *MockNotifications_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(bool))
	})
	return _c
}

func (_c *MockNotifications_List_Call) Return(_a0 []*model.Notification, _a1 error) *MockNotifications_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotifications_List_Call) RunAndReturn(run func(int64, bool) ([]*model.Notification, error)) *MockNotifications_List_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockNotifications) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockNotifications_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockNotifications_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockNotifications_Expecter) Name() *MockNotifications_Name_Call {
	return &MockNotifications_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockNotifications_Name_Call) Run(run func()) *MockNotifications_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNotifications_Name_Call) Return(name string) *MockNotifications_Name_Call {
	_c.Call.Return(name)
	return _c
}

func (_c *MockNotifications_Name_Call) RunAndReturn(run func() string) *MockNotifications_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Reply provides a mock function with given fields: notificationIds, notificationAction
func (_m *MockNotifications) Reply(notificationIds []string, notificationAction model.NotificationActionType) error {
	ret := _m.Called(notificationIds, notificationAction)

	if len(ret) == 0 {
		panic("no return value specified for Reply")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, model.NotificationActionType) error); ok {
		r0 = rf(notificationIds, notificationAction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotifications_Reply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reply'
type MockNotifications_Reply_Call struct {
	*mock.Call
}

// Reply is a helper method to define mock.On call
//   - notificationIds []string
//   - notificationAction model.NotificationActionType
func (_e *MockNotifications_Expecter) Reply(notificationIds interface{}, notificationAction interface{}) *MockNotifications_Reply_Call {
	return &MockNotifications_Reply_Call{Call: _e.mock.On("Reply", notificationIds, notificationAction)}
}

func (_c *MockNotifications_Reply_Call) Run(run func(notificationIds []string, notificationAction model.NotificationActionType)) *MockNotifications_Reply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string), args[1].(model.NotificationActionType))
	})
	return _c
}

func (_c *MockNotifications_Reply_Call) Return(_a0 error) *MockNotifications_Reply_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotifications_Reply_Call) RunAndReturn(run func([]string, model.NotificationActionType) error) *MockNotifications_Reply_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: ctx
func (_m *MockNotifications) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotifications_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockNotifications_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNotifications_Expecter) Run(ctx interface{}) *MockNotifications_Run_Call {
	return &MockNotifications_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *MockNotifications_Run_Call) Run(run func(ctx context.Context)) *MockNotifications_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockNotifications_Run_Call) Return(err error) *MockNotifications_Run_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNotifications_Run_Call) RunAndReturn(run func(context.Context) error) *MockNotifications_Run_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAndSend provides a mock function with given fields: notification
func (_m *MockNotifications) UpdateAndSend(notification *model.Notification) error {
	ret := _m.Called(notification)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAndSend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Notification) error); ok {
		r0 = rf(notification)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotifications_UpdateAndSend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAndSend'
type MockNotifications_UpdateAndSend_Call struct {
	*mock.Call
}

// UpdateAndSend is a helper method to define mock.On call
//   - notification *model.Notification
func (_e *MockNotifications_Expecter) UpdateAndSend(notification interface{}) *MockNotifications_UpdateAndSend_Call {
	return &MockNotifications_UpdateAndSend_Call{Call: _e.mock.On("UpdateAndSend", notification)}
}

func (_c *MockNotifications_UpdateAndSend_Call) Run(run func(notification *model.Notification)) *MockNotifications_UpdateAndSend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Notification))
	})
	return _c
}

func (_c *MockNotifications_UpdateAndSend_Call) Return(_a0 error) *MockNotifications_UpdateAndSend_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotifications_UpdateAndSend_Call) RunAndReturn(run func(*model.Notification) error) *MockNotifications_UpdateAndSend_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotifications creates a new instance of MockNotifications. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotifications(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotifications {
	mock := &MockNotifications{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
