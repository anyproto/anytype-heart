// Code generated by mockery. DO NOT EDIT.

package mock_fileobject

import (
	context "context"

	clientspace "github.com/anyproto/anytype-heart/space/clientspace"

	domain "github.com/anyproto/anytype-heart/core/domain"

	mock "github.com/stretchr/testify/mock"

	state "github.com/anyproto/anytype-heart/core/block/editor/state"

	types "github.com/gogo/protobuf/types"
)

// MockobjectCreatorService is an autogenerated mock type for the objectCreatorService type
type MockobjectCreatorService struct {
	mock.Mock
}

type MockobjectCreatorService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockobjectCreatorService) EXPECT() *MockobjectCreatorService_Expecter {
	return &MockobjectCreatorService_Expecter{mock: &_m.Mock}
}

// CreateSmartBlockFromStateInSpace provides a mock function with given fields: ctx, space, objectTypeKeys, createState
func (_m *MockobjectCreatorService) CreateSmartBlockFromStateInSpace(ctx context.Context, space clientspace.Space, objectTypeKeys []domain.TypeKey, createState *state.State) (string, *types.Struct, error) {
	ret := _m.Called(ctx, space, objectTypeKeys, createState)

	if len(ret) == 0 {
		panic("no return value specified for CreateSmartBlockFromStateInSpace")
	}

	var r0 string
	var r1 *types.Struct
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, clientspace.Space, []domain.TypeKey, *state.State) (string, *types.Struct, error)); ok {
		return rf(ctx, space, objectTypeKeys, createState)
	}
	if rf, ok := ret.Get(0).(func(context.Context, clientspace.Space, []domain.TypeKey, *state.State) string); ok {
		r0 = rf(ctx, space, objectTypeKeys, createState)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, clientspace.Space, []domain.TypeKey, *state.State) *types.Struct); ok {
		r1 = rf(ctx, space, objectTypeKeys, createState)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*types.Struct)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, clientspace.Space, []domain.TypeKey, *state.State) error); ok {
		r2 = rf(ctx, space, objectTypeKeys, createState)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockobjectCreatorService_CreateSmartBlockFromStateInSpace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSmartBlockFromStateInSpace'
type MockobjectCreatorService_CreateSmartBlockFromStateInSpace_Call struct {
	*mock.Call
}

// CreateSmartBlockFromStateInSpace is a helper method to define mock.On call
//   - ctx context.Context
//   - space clientspace.Space
//   - objectTypeKeys []domain.TypeKey
//   - createState *state.State
func (_e *MockobjectCreatorService_Expecter) CreateSmartBlockFromStateInSpace(ctx interface{}, space interface{}, objectTypeKeys interface{}, createState interface{}) *MockobjectCreatorService_CreateSmartBlockFromStateInSpace_Call {
	return &MockobjectCreatorService_CreateSmartBlockFromStateInSpace_Call{Call: _e.mock.On("CreateSmartBlockFromStateInSpace", ctx, space, objectTypeKeys, createState)}
}

func (_c *MockobjectCreatorService_CreateSmartBlockFromStateInSpace_Call) Run(run func(ctx context.Context, space clientspace.Space, objectTypeKeys []domain.TypeKey, createState *state.State)) *MockobjectCreatorService_CreateSmartBlockFromStateInSpace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(clientspace.Space), args[2].([]domain.TypeKey), args[3].(*state.State))
	})
	return _c
}

func (_c *MockobjectCreatorService_CreateSmartBlockFromStateInSpace_Call) Return(id string, newDetails *types.Struct, err error) *MockobjectCreatorService_CreateSmartBlockFromStateInSpace_Call {
	_c.Call.Return(id, newDetails, err)
	return _c
}

func (_c *MockobjectCreatorService_CreateSmartBlockFromStateInSpace_Call) RunAndReturn(run func(context.Context, clientspace.Space, []domain.TypeKey, *state.State) (string, *types.Struct, error)) *MockobjectCreatorService_CreateSmartBlockFromStateInSpace_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockobjectCreatorService creates a new instance of MockobjectCreatorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockobjectCreatorService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockobjectCreatorService {
	mock := &MockobjectCreatorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
