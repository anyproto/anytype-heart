// Code generated by mockery. DO NOT EDIT.

package mock_fileacl

import (
	app "github.com/anyproto/any-sync/app"
	domain "github.com/anyproto/anytype-heart/core/domain"

	mock "github.com/stretchr/testify/mock"

	model "github.com/anyproto/anytype-heart/pkg/lib/pb/model"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// GetInfoForFileSharing provides a mock function with given fields: fileObjectId
func (_m *MockService) GetInfoForFileSharing(fileObjectId string) (string, []*model.FileEncryptionKey, error) {
	ret := _m.Called(fileObjectId)

	if len(ret) == 0 {
		panic("no return value specified for GetInfoForFileSharing")
	}

	var r0 string
	var r1 []*model.FileEncryptionKey
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (string, []*model.FileEncryptionKey, error)); ok {
		return rf(fileObjectId)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(fileObjectId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) []*model.FileEncryptionKey); ok {
		r1 = rf(fileObjectId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*model.FileEncryptionKey)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(fileObjectId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockService_GetInfoForFileSharing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInfoForFileSharing'
type MockService_GetInfoForFileSharing_Call struct {
	*mock.Call
}

// GetInfoForFileSharing is a helper method to define mock.On call
//   - fileObjectId string
func (_e *MockService_Expecter) GetInfoForFileSharing(fileObjectId interface{}) *MockService_GetInfoForFileSharing_Call {
	return &MockService_GetInfoForFileSharing_Call{Call: _e.mock.On("GetInfoForFileSharing", fileObjectId)}
}

func (_c *MockService_GetInfoForFileSharing_Call) Run(run func(fileObjectId string)) *MockService_GetInfoForFileSharing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockService_GetInfoForFileSharing_Call) Return(cid string, encryptionKeys []*model.FileEncryptionKey, err error) *MockService_GetInfoForFileSharing_Call {
	_c.Call.Return(cid, encryptionKeys, err)
	return _c
}

func (_c *MockService_GetInfoForFileSharing_Call) RunAndReturn(run func(string) (string, []*model.FileEncryptionKey, error)) *MockService_GetInfoForFileSharing_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: a
func (_m *MockService) Init(a *app.App) error {
	ret := _m.Called(a)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockService_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - a *app.App
func (_e *MockService_Expecter) Init(a interface{}) *MockService_Init_Call {
	return &MockService_Init_Call{Call: _e.mock.On("Init", a)}
}

func (_c *MockService_Init_Call) Run(run func(a *app.App)) *MockService_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app.App))
	})
	return _c
}

func (_c *MockService_Init_Call) Return(err error) *MockService_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_Init_Call) RunAndReturn(run func(*app.App) error) *MockService_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockService) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockService_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockService_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockService_Expecter) Name() *MockService_Name_Call {
	return &MockService_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockService_Name_Call) Run(run func()) *MockService_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Name_Call) Return(name string) *MockService_Name_Call {
	_c.Call.Return(name)
	return _c
}

func (_c *MockService_Name_Call) RunAndReturn(run func() string) *MockService_Name_Call {
	_c.Call.Return(run)
	return _c
}

// StoreFileKeys provides a mock function with given fields: fileId, fileKeys
func (_m *MockService) StoreFileKeys(fileId domain.FileId, fileKeys []*model.FileEncryptionKey) error {
	ret := _m.Called(fileId, fileKeys)

	if len(ret) == 0 {
		panic("no return value specified for StoreFileKeys")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.FileId, []*model.FileEncryptionKey) error); ok {
		r0 = rf(fileId, fileKeys)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_StoreFileKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreFileKeys'
type MockService_StoreFileKeys_Call struct {
	*mock.Call
}

// StoreFileKeys is a helper method to define mock.On call
//   - fileId domain.FileId
//   - fileKeys []*model.FileEncryptionKey
func (_e *MockService_Expecter) StoreFileKeys(fileId interface{}, fileKeys interface{}) *MockService_StoreFileKeys_Call {
	return &MockService_StoreFileKeys_Call{Call: _e.mock.On("StoreFileKeys", fileId, fileKeys)}
}

func (_c *MockService_StoreFileKeys_Call) Run(run func(fileId domain.FileId, fileKeys []*model.FileEncryptionKey)) *MockService_StoreFileKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.FileId), args[1].([]*model.FileEncryptionKey))
	})
	return _c
}

func (_c *MockService_StoreFileKeys_Call) Return(_a0 error) *MockService_StoreFileKeys_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_StoreFileKeys_Call) RunAndReturn(run func(domain.FileId, []*model.FileEncryptionKey) error) *MockService_StoreFileKeys_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
