// Code generated by mockery. DO NOT EDIT.

package mock_files

import (
	context "context"

	domain "github.com/anyproto/anytype-heart/core/domain"
	files "github.com/anyproto/anytype-heart/core/files"

	mock "github.com/stretchr/testify/mock"

	types "github.com/gogo/protobuf/types"
)

// MockImage is an autogenerated mock type for the Image type
type MockImage struct {
	mock.Mock
}

type MockImage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockImage) EXPECT() *MockImage_Expecter {
	return &MockImage_Expecter{mock: &_m.Mock}
}

// Details provides a mock function with given fields: ctx
func (_m *MockImage) Details(ctx context.Context) (*types.Struct, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Details")
	}

	var r0 *types.Struct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*types.Struct, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *types.Struct); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Struct)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImage_Details_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Details'
type MockImage_Details_Call struct {
	*mock.Call
}

// Details is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockImage_Expecter) Details(ctx interface{}) *MockImage_Details_Call {
	return &MockImage_Details_Call{Call: _e.mock.On("Details", ctx)}
}

func (_c *MockImage_Details_Call) Run(run func(ctx context.Context)) *MockImage_Details_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockImage_Details_Call) Return(_a0 *types.Struct, _a1 error) *MockImage_Details_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImage_Details_Call) RunAndReturn(run func(context.Context) (*types.Struct, error)) *MockImage_Details_Call {
	_c.Call.Return(run)
	return _c
}

// FileId provides a mock function with given fields:
func (_m *MockImage) FileId() domain.FileId {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FileId")
	}

	var r0 domain.FileId
	if rf, ok := ret.Get(0).(func() domain.FileId); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.FileId)
	}

	return r0
}

// MockImage_FileId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FileId'
type MockImage_FileId_Call struct {
	*mock.Call
}

// FileId is a helper method to define mock.On call
func (_e *MockImage_Expecter) FileId() *MockImage_FileId_Call {
	return &MockImage_FileId_Call{Call: _e.mock.On("FileId")}
}

func (_c *MockImage_FileId_Call) Run(run func()) *MockImage_FileId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockImage_FileId_Call) Return(_a0 domain.FileId) *MockImage_FileId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockImage_FileId_Call) RunAndReturn(run func() domain.FileId) *MockImage_FileId_Call {
	_c.Call.Return(run)
	return _c
}

// GetFileForWidth provides a mock function with given fields: wantWidth
func (_m *MockImage) GetFileForWidth(wantWidth int) (files.File, error) {
	ret := _m.Called(wantWidth)

	if len(ret) == 0 {
		panic("no return value specified for GetFileForWidth")
	}

	var r0 files.File
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (files.File, error)); ok {
		return rf(wantWidth)
	}
	if rf, ok := ret.Get(0).(func(int) files.File); ok {
		r0 = rf(wantWidth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(files.File)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(wantWidth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImage_GetFileForWidth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileForWidth'
type MockImage_GetFileForWidth_Call struct {
	*mock.Call
}

// GetFileForWidth is a helper method to define mock.On call
//   - wantWidth int
func (_e *MockImage_Expecter) GetFileForWidth(wantWidth interface{}) *MockImage_GetFileForWidth_Call {
	return &MockImage_GetFileForWidth_Call{Call: _e.mock.On("GetFileForWidth", wantWidth)}
}

func (_c *MockImage_GetFileForWidth_Call) Run(run func(wantWidth int)) *MockImage_GetFileForWidth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockImage_GetFileForWidth_Call) Return(_a0 files.File, _a1 error) *MockImage_GetFileForWidth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImage_GetFileForWidth_Call) RunAndReturn(run func(int) (files.File, error)) *MockImage_GetFileForWidth_Call {
	_c.Call.Return(run)
	return _c
}

// GetOriginalFile provides a mock function with given fields:
func (_m *MockImage) GetOriginalFile() (files.File, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOriginalFile")
	}

	var r0 files.File
	var r1 error
	if rf, ok := ret.Get(0).(func() (files.File, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() files.File); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(files.File)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImage_GetOriginalFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOriginalFile'
type MockImage_GetOriginalFile_Call struct {
	*mock.Call
}

// GetOriginalFile is a helper method to define mock.On call
func (_e *MockImage_Expecter) GetOriginalFile() *MockImage_GetOriginalFile_Call {
	return &MockImage_GetOriginalFile_Call{Call: _e.mock.On("GetOriginalFile")}
}

func (_c *MockImage_GetOriginalFile_Call) Run(run func()) *MockImage_GetOriginalFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockImage_GetOriginalFile_Call) Return(_a0 files.File, _a1 error) *MockImage_GetOriginalFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImage_GetOriginalFile_Call) RunAndReturn(run func() (files.File, error)) *MockImage_GetOriginalFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockImage creates a new instance of MockImage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockImage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockImage {
	mock := &MockImage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
