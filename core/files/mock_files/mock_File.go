// Code generated by mockery. DO NOT EDIT.

package mock_files

import (
	context "context"

	domain "github.com/anyproto/anytype-heart/core/domain"
	files "github.com/anyproto/anytype-heart/core/files"

	io "io"

	mock "github.com/stretchr/testify/mock"

	storage "github.com/anyproto/anytype-heart/pkg/lib/pb/storage"

	types "github.com/gogo/protobuf/types"
)

// MockFile is an autogenerated mock type for the File type
type MockFile struct {
	mock.Mock
}

type MockFile_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFile) EXPECT() *MockFile_Expecter {
	return &MockFile_Expecter{mock: &_m.Mock}
}

// Details provides a mock function with given fields: ctx
func (_m *MockFile) Details(ctx context.Context) (*types.Struct, domain.TypeKey, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Details")
	}

	var r0 *types.Struct
	var r1 domain.TypeKey
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (*types.Struct, domain.TypeKey, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *types.Struct); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Struct)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) domain.TypeKey); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(domain.TypeKey)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockFile_Details_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Details'
type MockFile_Details_Call struct {
	*mock.Call
}

// Details is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockFile_Expecter) Details(ctx interface{}) *MockFile_Details_Call {
	return &MockFile_Details_Call{Call: _e.mock.On("Details", ctx)}
}

func (_c *MockFile_Details_Call) Run(run func(ctx context.Context)) *MockFile_Details_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockFile_Details_Call) Return(_a0 *types.Struct, _a1 domain.TypeKey, _a2 error) *MockFile_Details_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockFile_Details_Call) RunAndReturn(run func(context.Context) (*types.Struct, domain.TypeKey, error)) *MockFile_Details_Call {
	_c.Call.Return(run)
	return _c
}

// FileId provides a mock function with given fields:
func (_m *MockFile) FileId() domain.FileId {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FileId")
	}

	var r0 domain.FileId
	if rf, ok := ret.Get(0).(func() domain.FileId); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.FileId)
	}

	return r0
}

// MockFile_FileId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FileId'
type MockFile_FileId_Call struct {
	*mock.Call
}

// FileId is a helper method to define mock.On call
func (_e *MockFile_Expecter) FileId() *MockFile_FileId_Call {
	return &MockFile_FileId_Call{Call: _e.mock.On("FileId")}
}

func (_c *MockFile_FileId_Call) Run(run func()) *MockFile_FileId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFile_FileId_Call) Return(_a0 domain.FileId) *MockFile_FileId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFile_FileId_Call) RunAndReturn(run func() domain.FileId) *MockFile_FileId_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields:
func (_m *MockFile) Info() *storage.FileInfo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 *storage.FileInfo
	if rf, ok := ret.Get(0).(func() *storage.FileInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.FileInfo)
		}
	}

	return r0
}

// MockFile_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockFile_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
func (_e *MockFile_Expecter) Info() *MockFile_Info_Call {
	return &MockFile_Info_Call{Call: _e.mock.On("Info")}
}

func (_c *MockFile_Info_Call) Run(run func()) *MockFile_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFile_Info_Call) Return(_a0 *storage.FileInfo) *MockFile_Info_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFile_Info_Call) RunAndReturn(run func() *storage.FileInfo) *MockFile_Info_Call {
	_c.Call.Return(run)
	return _c
}

// Meta provides a mock function with given fields:
func (_m *MockFile) Meta() *files.FileMeta {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Meta")
	}

	var r0 *files.FileMeta
	if rf, ok := ret.Get(0).(func() *files.FileMeta); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*files.FileMeta)
		}
	}

	return r0
}

// MockFile_Meta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Meta'
type MockFile_Meta_Call struct {
	*mock.Call
}

// Meta is a helper method to define mock.On call
func (_e *MockFile_Expecter) Meta() *MockFile_Meta_Call {
	return &MockFile_Meta_Call{Call: _e.mock.On("Meta")}
}

func (_c *MockFile_Meta_Call) Run(run func()) *MockFile_Meta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFile_Meta_Call) Return(_a0 *files.FileMeta) *MockFile_Meta_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFile_Meta_Call) RunAndReturn(run func() *files.FileMeta) *MockFile_Meta_Call {
	_c.Call.Return(run)
	return _c
}

// Reader provides a mock function with given fields: ctx
func (_m *MockFile) Reader(ctx context.Context) (io.ReadSeeker, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Reader")
	}

	var r0 io.ReadSeeker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (io.ReadSeeker, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) io.ReadSeeker); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadSeeker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFile_Reader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reader'
type MockFile_Reader_Call struct {
	*mock.Call
}

// Reader is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockFile_Expecter) Reader(ctx interface{}) *MockFile_Reader_Call {
	return &MockFile_Reader_Call{Call: _e.mock.On("Reader", ctx)}
}

func (_c *MockFile_Reader_Call) Run(run func(ctx context.Context)) *MockFile_Reader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockFile_Reader_Call) Return(_a0 io.ReadSeeker, _a1 error) *MockFile_Reader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFile_Reader_Call) RunAndReturn(run func(context.Context) (io.ReadSeeker, error)) *MockFile_Reader_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFile creates a new instance of MockFile. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFile(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFile {
	mock := &MockFile{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
