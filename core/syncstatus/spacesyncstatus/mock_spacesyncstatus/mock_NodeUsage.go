// Code generated by mockery. DO NOT EDIT.

package mock_spacesyncstatus

import (
	context "context"

	app "github.com/anyproto/any-sync/app"

	files "github.com/anyproto/anytype-heart/core/files"

	mock "github.com/stretchr/testify/mock"
)

// MockNodeUsage is an autogenerated mock type for the NodeUsage type
type MockNodeUsage struct {
	mock.Mock
}

type MockNodeUsage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNodeUsage) EXPECT() *MockNodeUsage_Expecter {
	return &MockNodeUsage_Expecter{mock: &_m.Mock}
}

// GetNodeUsage provides a mock function with given fields: ctx
func (_m *MockNodeUsage) GetNodeUsage(ctx context.Context) (*files.NodeUsageResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeUsage")
	}

	var r0 *files.NodeUsageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*files.NodeUsageResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *files.NodeUsageResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*files.NodeUsageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNodeUsage_GetNodeUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeUsage'
type MockNodeUsage_GetNodeUsage_Call struct {
	*mock.Call
}

// GetNodeUsage is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNodeUsage_Expecter) GetNodeUsage(ctx interface{}) *MockNodeUsage_GetNodeUsage_Call {
	return &MockNodeUsage_GetNodeUsage_Call{Call: _e.mock.On("GetNodeUsage", ctx)}
}

func (_c *MockNodeUsage_GetNodeUsage_Call) Run(run func(ctx context.Context)) *MockNodeUsage_GetNodeUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockNodeUsage_GetNodeUsage_Call) Return(_a0 *files.NodeUsageResponse, _a1 error) *MockNodeUsage_GetNodeUsage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNodeUsage_GetNodeUsage_Call) RunAndReturn(run func(context.Context) (*files.NodeUsageResponse, error)) *MockNodeUsage_GetNodeUsage_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: a
func (_m *MockNodeUsage) Init(a *app.App) error {
	ret := _m.Called(a)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNodeUsage_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockNodeUsage_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - a *app.App
func (_e *MockNodeUsage_Expecter) Init(a interface{}) *MockNodeUsage_Init_Call {
	return &MockNodeUsage_Init_Call{Call: _e.mock.On("Init", a)}
}

func (_c *MockNodeUsage_Init_Call) Run(run func(a *app.App)) *MockNodeUsage_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app.App))
	})
	return _c
}

func (_c *MockNodeUsage_Init_Call) Return(err error) *MockNodeUsage_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNodeUsage_Init_Call) RunAndReturn(run func(*app.App) error) *MockNodeUsage_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockNodeUsage) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockNodeUsage_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockNodeUsage_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockNodeUsage_Expecter) Name() *MockNodeUsage_Name_Call {
	return &MockNodeUsage_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockNodeUsage_Name_Call) Run(run func()) *MockNodeUsage_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNodeUsage_Name_Call) Return(name string) *MockNodeUsage_Name_Call {
	_c.Call.Return(name)
	return _c
}

func (_c *MockNodeUsage_Name_Call) RunAndReturn(run func() string) *MockNodeUsage_Name_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNodeUsage creates a new instance of MockNodeUsage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNodeUsage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNodeUsage {
	mock := &MockNodeUsage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
