// Code generated by mockery. DO NOT EDIT.

package mock_spacesyncstatus

import (
	app "github.com/anyproto/any-sync/app"
	mock "github.com/stretchr/testify/mock"

	pb "github.com/anyproto/anytype-heart/pb"
)

// MockNetworkConfig is an autogenerated mock type for the NetworkConfig type
type MockNetworkConfig struct {
	mock.Mock
}

type MockNetworkConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNetworkConfig) EXPECT() *MockNetworkConfig_Expecter {
	return &MockNetworkConfig_Expecter{mock: &_m.Mock}
}

// GetNetworkMode provides a mock function with given fields:
func (_m *MockNetworkConfig) GetNetworkMode() pb.RpcAccountNetworkMode {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkMode")
	}

	var r0 pb.RpcAccountNetworkMode
	if rf, ok := ret.Get(0).(func() pb.RpcAccountNetworkMode); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(pb.RpcAccountNetworkMode)
	}

	return r0
}

// MockNetworkConfig_GetNetworkMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNetworkMode'
type MockNetworkConfig_GetNetworkMode_Call struct {
	*mock.Call
}

// GetNetworkMode is a helper method to define mock.On call
func (_e *MockNetworkConfig_Expecter) GetNetworkMode() *MockNetworkConfig_GetNetworkMode_Call {
	return &MockNetworkConfig_GetNetworkMode_Call{Call: _e.mock.On("GetNetworkMode")}
}

func (_c *MockNetworkConfig_GetNetworkMode_Call) Run(run func()) *MockNetworkConfig_GetNetworkMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNetworkConfig_GetNetworkMode_Call) Return(_a0 pb.RpcAccountNetworkMode) *MockNetworkConfig_GetNetworkMode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNetworkConfig_GetNetworkMode_Call) RunAndReturn(run func() pb.RpcAccountNetworkMode) *MockNetworkConfig_GetNetworkMode_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: a
func (_m *MockNetworkConfig) Init(a *app.App) error {
	ret := _m.Called(a)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNetworkConfig_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockNetworkConfig_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - a *app.App
func (_e *MockNetworkConfig_Expecter) Init(a interface{}) *MockNetworkConfig_Init_Call {
	return &MockNetworkConfig_Init_Call{Call: _e.mock.On("Init", a)}
}

func (_c *MockNetworkConfig_Init_Call) Run(run func(a *app.App)) *MockNetworkConfig_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app.App))
	})
	return _c
}

func (_c *MockNetworkConfig_Init_Call) Return(err error) *MockNetworkConfig_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNetworkConfig_Init_Call) RunAndReturn(run func(*app.App) error) *MockNetworkConfig_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockNetworkConfig) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockNetworkConfig_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockNetworkConfig_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockNetworkConfig_Expecter) Name() *MockNetworkConfig_Name_Call {
	return &MockNetworkConfig_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockNetworkConfig_Name_Call) Run(run func()) *MockNetworkConfig_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNetworkConfig_Name_Call) Return(name string) *MockNetworkConfig_Name_Call {
	_c.Call.Return(name)
	return _c
}

func (_c *MockNetworkConfig_Name_Call) RunAndReturn(run func() string) *MockNetworkConfig_Name_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNetworkConfig creates a new instance of MockNetworkConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNetworkConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNetworkConfig {
	mock := &MockNetworkConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
