// Code generated by mockery. DO NOT EDIT.

package mock_relationutils

import (
	context "context"

	app "github.com/anyproto/any-sync/app"

	domain "github.com/anyproto/anytype-heart/core/domain"

	mock "github.com/stretchr/testify/mock"

	model "github.com/anyproto/anytype-heart/pkg/lib/pb/model"
)

// MockRelationFormatFetcher is an autogenerated mock type for the RelationFormatFetcher type
type MockRelationFormatFetcher struct {
	mock.Mock
}

type MockRelationFormatFetcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRelationFormatFetcher) EXPECT() *MockRelationFormatFetcher_Expecter {
	return &MockRelationFormatFetcher_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: ctx
func (_m *MockRelationFormatFetcher) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRelationFormatFetcher_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockRelationFormatFetcher_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRelationFormatFetcher_Expecter) Close(ctx interface{}) *MockRelationFormatFetcher_Close_Call {
	return &MockRelationFormatFetcher_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *MockRelationFormatFetcher_Close_Call) Run(run func(ctx context.Context)) *MockRelationFormatFetcher_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRelationFormatFetcher_Close_Call) Return(err error) *MockRelationFormatFetcher_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRelationFormatFetcher_Close_Call) RunAndReturn(run func(context.Context) error) *MockRelationFormatFetcher_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetRelationFormatByKey provides a mock function with given fields: spaceId, key
func (_m *MockRelationFormatFetcher) GetRelationFormatByKey(spaceId string, key domain.RelationKey) (model.RelationFormat, error) {
	ret := _m.Called(spaceId, key)

	if len(ret) == 0 {
		panic("no return value specified for GetRelationFormatByKey")
	}

	var r0 model.RelationFormat
	var r1 error
	if rf, ok := ret.Get(0).(func(string, domain.RelationKey) (model.RelationFormat, error)); ok {
		return rf(spaceId, key)
	}
	if rf, ok := ret.Get(0).(func(string, domain.RelationKey) model.RelationFormat); ok {
		r0 = rf(spaceId, key)
	} else {
		r0 = ret.Get(0).(model.RelationFormat)
	}

	if rf, ok := ret.Get(1).(func(string, domain.RelationKey) error); ok {
		r1 = rf(spaceId, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRelationFormatFetcher_GetRelationFormatByKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRelationFormatByKey'
type MockRelationFormatFetcher_GetRelationFormatByKey_Call struct {
	*mock.Call
}

// GetRelationFormatByKey is a helper method to define mock.On call
//   - spaceId string
//   - key domain.RelationKey
func (_e *MockRelationFormatFetcher_Expecter) GetRelationFormatByKey(spaceId interface{}, key interface{}) *MockRelationFormatFetcher_GetRelationFormatByKey_Call {
	return &MockRelationFormatFetcher_GetRelationFormatByKey_Call{Call: _e.mock.On("GetRelationFormatByKey", spaceId, key)}
}

func (_c *MockRelationFormatFetcher_GetRelationFormatByKey_Call) Run(run func(spaceId string, key domain.RelationKey)) *MockRelationFormatFetcher_GetRelationFormatByKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(domain.RelationKey))
	})
	return _c
}

func (_c *MockRelationFormatFetcher_GetRelationFormatByKey_Call) Return(_a0 model.RelationFormat, _a1 error) *MockRelationFormatFetcher_GetRelationFormatByKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRelationFormatFetcher_GetRelationFormatByKey_Call) RunAndReturn(run func(string, domain.RelationKey) (model.RelationFormat, error)) *MockRelationFormatFetcher_GetRelationFormatByKey_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: a
func (_m *MockRelationFormatFetcher) Init(a *app.App) error {
	ret := _m.Called(a)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRelationFormatFetcher_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockRelationFormatFetcher_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - a *app.App
func (_e *MockRelationFormatFetcher_Expecter) Init(a interface{}) *MockRelationFormatFetcher_Init_Call {
	return &MockRelationFormatFetcher_Init_Call{Call: _e.mock.On("Init", a)}
}

func (_c *MockRelationFormatFetcher_Init_Call) Run(run func(a *app.App)) *MockRelationFormatFetcher_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app.App))
	})
	return _c
}

func (_c *MockRelationFormatFetcher_Init_Call) Return(err error) *MockRelationFormatFetcher_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRelationFormatFetcher_Init_Call) RunAndReturn(run func(*app.App) error) *MockRelationFormatFetcher_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockRelationFormatFetcher) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockRelationFormatFetcher_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockRelationFormatFetcher_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockRelationFormatFetcher_Expecter) Name() *MockRelationFormatFetcher_Name_Call {
	return &MockRelationFormatFetcher_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockRelationFormatFetcher_Name_Call) Run(run func()) *MockRelationFormatFetcher_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRelationFormatFetcher_Name_Call) Return(name string) *MockRelationFormatFetcher_Name_Call {
	_c.Call.Return(name)
	return _c
}

func (_c *MockRelationFormatFetcher_Name_Call) RunAndReturn(run func() string) *MockRelationFormatFetcher_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: ctx
func (_m *MockRelationFormatFetcher) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRelationFormatFetcher_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockRelationFormatFetcher_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRelationFormatFetcher_Expecter) Run(ctx interface{}) *MockRelationFormatFetcher_Run_Call {
	return &MockRelationFormatFetcher_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *MockRelationFormatFetcher_Run_Call) Run(run func(ctx context.Context)) *MockRelationFormatFetcher_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRelationFormatFetcher_Run_Call) Return(err error) *MockRelationFormatFetcher_Run_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRelationFormatFetcher_Run_Call) RunAndReturn(run func(context.Context) error) *MockRelationFormatFetcher_Run_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRelationFormatFetcher creates a new instance of MockRelationFormatFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRelationFormatFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRelationFormatFetcher {
	mock := &MockRelationFormatFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
