// Code generated by mockery. DO NOT EDIT.

package mock_account

import (
	accountdata "github.com/anyproto/any-sync/commonspace/object/accountdata"
	account "github.com/anyproto/anytype-heart/core/anytype/account"

	app "github.com/anyproto/any-sync/app"

	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/anyproto/anytype-heart/pkg/lib/pb/model"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// AccountID provides a mock function with given fields:
func (_m *MockService) AccountID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AccountID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockService_AccountID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AccountID'
type MockService_AccountID_Call struct {
	*mock.Call
}

// AccountID is a helper method to define mock.On call
func (_e *MockService_Expecter) AccountID() *MockService_AccountID_Call {
	return &MockService_AccountID_Call{Call: _e.mock.On("AccountID")}
}

func (_c *MockService_AccountID_Call) Run(run func()) *MockService_AccountID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_AccountID_Call) Return(_a0 string) *MockService_AccountID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_AccountID_Call) RunAndReturn(run func() string) *MockService_AccountID_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx
func (_m *MockService) Delete(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) Delete(ctx interface{}) *MockService_Delete_Call {
	return &MockService_Delete_Call{Call: _e.mock.On("Delete", ctx)}
}

func (_c *MockService_Delete_Call) Run(run func(ctx context.Context)) *MockService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockService_Delete_Call) Return(toBeDeleted int64, err error) *MockService_Delete_Call {
	_c.Call.Return(toBeDeleted, err)
	return _c
}

func (_c *MockService_Delete_Call) RunAndReturn(run func(context.Context) (int64, error)) *MockService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetInfo provides a mock function with given fields: ctx, spaceID
func (_m *MockService) GetInfo(ctx context.Context, spaceID string) (*model.AccountInfo, error) {
	ret := _m.Called(ctx, spaceID)

	if len(ret) == 0 {
		panic("no return value specified for GetInfo")
	}

	var r0 *model.AccountInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.AccountInfo, error)); ok {
		return rf(ctx, spaceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.AccountInfo); ok {
		r0 = rf(ctx, spaceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AccountInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, spaceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_GetInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInfo'
type MockService_GetInfo_Call struct {
	*mock.Call
}

// GetInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - spaceID string
func (_e *MockService_Expecter) GetInfo(ctx interface{}, spaceID interface{}) *MockService_GetInfo_Call {
	return &MockService_GetInfo_Call{Call: _e.mock.On("GetInfo", ctx, spaceID)}
}

func (_c *MockService_GetInfo_Call) Run(run func(ctx context.Context, spaceID string)) *MockService_GetInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockService_GetInfo_Call) Return(_a0 *model.AccountInfo, _a1 error) *MockService_GetInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_GetInfo_Call) RunAndReturn(run func(context.Context, string) (*model.AccountInfo, error)) *MockService_GetInfo_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: a
func (_m *MockService) Init(a *app.App) error {
	ret := _m.Called(a)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockService_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - a *app.App
func (_e *MockService_Expecter) Init(a interface{}) *MockService_Init_Call {
	return &MockService_Init_Call{Call: _e.mock.On("Init", a)}
}

func (_c *MockService_Init_Call) Run(run func(a *app.App)) *MockService_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app.App))
	})
	return _c
}

func (_c *MockService_Init_Call) Return(err error) *MockService_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_Init_Call) RunAndReturn(run func(*app.App) error) *MockService_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Keys provides a mock function with given fields:
func (_m *MockService) Keys() *accountdata.AccountKeys {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Keys")
	}

	var r0 *accountdata.AccountKeys
	if rf, ok := ret.Get(0).(func() *accountdata.AccountKeys); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accountdata.AccountKeys)
		}
	}

	return r0
}

// MockService_Keys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Keys'
type MockService_Keys_Call struct {
	*mock.Call
}

// Keys is a helper method to define mock.On call
func (_e *MockService_Expecter) Keys() *MockService_Keys_Call {
	return &MockService_Keys_Call{Call: _e.mock.On("Keys")}
}

func (_c *MockService_Keys_Call) Run(run func()) *MockService_Keys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Keys_Call) Return(_a0 *accountdata.AccountKeys) *MockService_Keys_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Keys_Call) RunAndReturn(run func() *accountdata.AccountKeys) *MockService_Keys_Call {
	_c.Call.Return(run)
	return _c
}

// MyParticipantId provides a mock function with given fields: _a0
func (_m *MockService) MyParticipantId(_a0 string) string {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for MyParticipantId")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockService_MyParticipantId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MyParticipantId'
type MockService_MyParticipantId_Call struct {
	*mock.Call
}

// MyParticipantId is a helper method to define mock.On call
//   - _a0 string
func (_e *MockService_Expecter) MyParticipantId(_a0 interface{}) *MockService_MyParticipantId_Call {
	return &MockService_MyParticipantId_Call{Call: _e.mock.On("MyParticipantId", _a0)}
}

func (_c *MockService_MyParticipantId_Call) Run(run func(_a0 string)) *MockService_MyParticipantId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockService_MyParticipantId_Call) Return(_a0 string) *MockService_MyParticipantId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_MyParticipantId_Call) RunAndReturn(run func(string) string) *MockService_MyParticipantId_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockService) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockService_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockService_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockService_Expecter) Name() *MockService_Name_Call {
	return &MockService_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockService_Name_Call) Run(run func()) *MockService_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Name_Call) Return(name string) *MockService_Name_Call {
	_c.Call.Return(name)
	return _c
}

func (_c *MockService_Name_Call) RunAndReturn(run func() string) *MockService_Name_Call {
	_c.Call.Return(run)
	return _c
}

// PersonalSpaceID provides a mock function with given fields:
func (_m *MockService) PersonalSpaceID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PersonalSpaceID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockService_PersonalSpaceID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PersonalSpaceID'
type MockService_PersonalSpaceID_Call struct {
	*mock.Call
}

// PersonalSpaceID is a helper method to define mock.On call
func (_e *MockService_Expecter) PersonalSpaceID() *MockService_PersonalSpaceID_Call {
	return &MockService_PersonalSpaceID_Call{Call: _e.mock.On("PersonalSpaceID")}
}

func (_c *MockService_PersonalSpaceID_Call) Run(run func()) *MockService_PersonalSpaceID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_PersonalSpaceID_Call) Return(_a0 string) *MockService_PersonalSpaceID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_PersonalSpaceID_Call) RunAndReturn(run func() string) *MockService_PersonalSpaceID_Call {
	_c.Call.Return(run)
	return _c
}

// ProfileInfo provides a mock function with given fields:
func (_m *MockService) ProfileInfo() (account.Profile, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ProfileInfo")
	}

	var r0 account.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func() (account.Profile, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() account.Profile); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(account.Profile)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_ProfileInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProfileInfo'
type MockService_ProfileInfo_Call struct {
	*mock.Call
}

// ProfileInfo is a helper method to define mock.On call
func (_e *MockService_Expecter) ProfileInfo() *MockService_ProfileInfo_Call {
	return &MockService_ProfileInfo_Call{Call: _e.mock.On("ProfileInfo")}
}

func (_c *MockService_ProfileInfo_Call) Run(run func()) *MockService_ProfileInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_ProfileInfo_Call) Return(_a0 account.Profile, _a1 error) *MockService_ProfileInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_ProfileInfo_Call) RunAndReturn(run func() (account.Profile, error)) *MockService_ProfileInfo_Call {
	_c.Call.Return(run)
	return _c
}

// ProfileObjectId provides a mock function with given fields:
func (_m *MockService) ProfileObjectId() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ProfileObjectId")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_ProfileObjectId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProfileObjectId'
type MockService_ProfileObjectId_Call struct {
	*mock.Call
}

// ProfileObjectId is a helper method to define mock.On call
func (_e *MockService_Expecter) ProfileObjectId() *MockService_ProfileObjectId_Call {
	return &MockService_ProfileObjectId_Call{Call: _e.mock.On("ProfileObjectId")}
}

func (_c *MockService_ProfileObjectId_Call) Run(run func()) *MockService_ProfileObjectId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_ProfileObjectId_Call) Return(_a0 string, _a1 error) *MockService_ProfileObjectId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_ProfileObjectId_Call) RunAndReturn(run func() (string, error)) *MockService_ProfileObjectId_Call {
	_c.Call.Return(run)
	return _c
}

// RevertDeletion provides a mock function with given fields: ctx
func (_m *MockService) RevertDeletion(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RevertDeletion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_RevertDeletion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevertDeletion'
type MockService_RevertDeletion_Call struct {
	*mock.Call
}

// RevertDeletion is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) RevertDeletion(ctx interface{}) *MockService_RevertDeletion_Call {
	return &MockService_RevertDeletion_Call{Call: _e.mock.On("RevertDeletion", ctx)}
}

func (_c *MockService_RevertDeletion_Call) Run(run func(ctx context.Context)) *MockService_RevertDeletion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockService_RevertDeletion_Call) Return(_a0 error) *MockService_RevertDeletion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_RevertDeletion_Call) RunAndReturn(run func(context.Context) error) *MockService_RevertDeletion_Call {
	_c.Call.Return(run)
	return _c
}

// SignData provides a mock function with given fields: data
func (_m *MockService) SignData(data []byte) ([]byte, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for SignData")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_SignData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignData'
type MockService_SignData_Call struct {
	*mock.Call
}

// SignData is a helper method to define mock.On call
//   - data []byte
func (_e *MockService_Expecter) SignData(data interface{}) *MockService_SignData_Call {
	return &MockService_SignData_Call{Call: _e.mock.On("SignData", data)}
}

func (_c *MockService_SignData_Call) Run(run func(data []byte)) *MockService_SignData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockService_SignData_Call) Return(signature []byte, err error) *MockService_SignData_Call {
	_c.Call.Return(signature, err)
	return _c
}

func (_c *MockService_SignData_Call) RunAndReturn(run func([]byte) ([]byte, error)) *MockService_SignData_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
