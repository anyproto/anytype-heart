// Code generated by mockery. DO NOT EDIT.

package mock_acl

import (
	context "context"

	crypto "github.com/anyproto/any-sync/util/crypto"
	mock "github.com/stretchr/testify/mock"
)

// MockparticipantRemover is an autogenerated mock type for the participantRemover type
type MockparticipantRemover struct {
	mock.Mock
}

type MockparticipantRemover_Expecter struct {
	mock *mock.Mock
}

func (_m *MockparticipantRemover) EXPECT() *MockparticipantRemover_Expecter {
	return &MockparticipantRemover_Expecter{mock: &_m.Mock}
}

// ApproveLeave provides a mock function with given fields: ctx, spaceId, identities
func (_m *MockparticipantRemover) ApproveLeave(ctx context.Context, spaceId string, identities []crypto.PubKey) error {
	ret := _m.Called(ctx, spaceId, identities)

	if len(ret) == 0 {
		panic("no return value specified for ApproveLeave")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []crypto.PubKey) error); ok {
		r0 = rf(ctx, spaceId, identities)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockparticipantRemover_ApproveLeave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApproveLeave'
type MockparticipantRemover_ApproveLeave_Call struct {
	*mock.Call
}

// ApproveLeave is a helper method to define mock.On call
//   - ctx context.Context
//   - spaceId string
//   - identities []crypto.PubKey
func (_e *MockparticipantRemover_Expecter) ApproveLeave(ctx interface{}, spaceId interface{}, identities interface{}) *MockparticipantRemover_ApproveLeave_Call {
	return &MockparticipantRemover_ApproveLeave_Call{Call: _e.mock.On("ApproveLeave", ctx, spaceId, identities)}
}

func (_c *MockparticipantRemover_ApproveLeave_Call) Run(run func(ctx context.Context, spaceId string, identities []crypto.PubKey)) *MockparticipantRemover_ApproveLeave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]crypto.PubKey))
	})
	return _c
}

func (_c *MockparticipantRemover_ApproveLeave_Call) Return(_a0 error) *MockparticipantRemover_ApproveLeave_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockparticipantRemover_ApproveLeave_Call) RunAndReturn(run func(context.Context, string, []crypto.PubKey) error) *MockparticipantRemover_ApproveLeave_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockparticipantRemover creates a new instance of MockparticipantRemover. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockparticipantRemover(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockparticipantRemover {
	mock := &MockparticipantRemover{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
