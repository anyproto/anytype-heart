// Code generated by mockery. DO NOT EDIT.

package mock_cache

import (
	app "github.com/anyproto/any-sync/app"

	context "context"

	domain "github.com/anyproto/anytype-heart/core/domain"

	mock "github.com/stretchr/testify/mock"

	smartblock "github.com/anyproto/anytype-heart/core/block/editor/smartblock"
)

// MockObjectGetterComponent is an autogenerated mock type for the ObjectGetterComponent type
type MockObjectGetterComponent struct {
	mock.Mock
}

type MockObjectGetterComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockObjectGetterComponent) EXPECT() *MockObjectGetterComponent_Expecter {
	return &MockObjectGetterComponent_Expecter{mock: &_m.Mock}
}

// GetObject provides a mock function with given fields: ctx, objectID
func (_m *MockObjectGetterComponent) GetObject(ctx context.Context, objectID string) (smartblock.SmartBlock, error) {
	ret := _m.Called(ctx, objectID)

	if len(ret) == 0 {
		panic("no return value specified for GetObject")
	}

	var r0 smartblock.SmartBlock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (smartblock.SmartBlock, error)); ok {
		return rf(ctx, objectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) smartblock.SmartBlock); ok {
		r0 = rf(ctx, objectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(smartblock.SmartBlock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, objectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectGetterComponent_GetObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObject'
type MockObjectGetterComponent_GetObject_Call struct {
	*mock.Call
}

// GetObject is a helper method to define mock.On call
//   - ctx context.Context
//   - objectID string
func (_e *MockObjectGetterComponent_Expecter) GetObject(ctx interface{}, objectID interface{}) *MockObjectGetterComponent_GetObject_Call {
	return &MockObjectGetterComponent_GetObject_Call{Call: _e.mock.On("GetObject", ctx, objectID)}
}

func (_c *MockObjectGetterComponent_GetObject_Call) Run(run func(ctx context.Context, objectID string)) *MockObjectGetterComponent_GetObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockObjectGetterComponent_GetObject_Call) Return(sb smartblock.SmartBlock, err error) *MockObjectGetterComponent_GetObject_Call {
	_c.Call.Return(sb, err)
	return _c
}

func (_c *MockObjectGetterComponent_GetObject_Call) RunAndReturn(run func(context.Context, string) (smartblock.SmartBlock, error)) *MockObjectGetterComponent_GetObject_Call {
	_c.Call.Return(run)
	return _c
}

// GetObjectByFullID provides a mock function with given fields: ctx, id
func (_m *MockObjectGetterComponent) GetObjectByFullID(ctx context.Context, id domain.FullID) (smartblock.SmartBlock, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetObjectByFullID")
	}

	var r0 smartblock.SmartBlock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.FullID) (smartblock.SmartBlock, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.FullID) smartblock.SmartBlock); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(smartblock.SmartBlock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.FullID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectGetterComponent_GetObjectByFullID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObjectByFullID'
type MockObjectGetterComponent_GetObjectByFullID_Call struct {
	*mock.Call
}

// GetObjectByFullID is a helper method to define mock.On call
//   - ctx context.Context
//   - id domain.FullID
func (_e *MockObjectGetterComponent_Expecter) GetObjectByFullID(ctx interface{}, id interface{}) *MockObjectGetterComponent_GetObjectByFullID_Call {
	return &MockObjectGetterComponent_GetObjectByFullID_Call{Call: _e.mock.On("GetObjectByFullID", ctx, id)}
}

func (_c *MockObjectGetterComponent_GetObjectByFullID_Call) Run(run func(ctx context.Context, id domain.FullID)) *MockObjectGetterComponent_GetObjectByFullID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.FullID))
	})
	return _c
}

func (_c *MockObjectGetterComponent_GetObjectByFullID_Call) Return(sb smartblock.SmartBlock, err error) *MockObjectGetterComponent_GetObjectByFullID_Call {
	_c.Call.Return(sb, err)
	return _c
}

func (_c *MockObjectGetterComponent_GetObjectByFullID_Call) RunAndReturn(run func(context.Context, domain.FullID) (smartblock.SmartBlock, error)) *MockObjectGetterComponent_GetObjectByFullID_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: a
func (_m *MockObjectGetterComponent) Init(a *app.App) error {
	ret := _m.Called(a)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectGetterComponent_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockObjectGetterComponent_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - a *app.App
func (_e *MockObjectGetterComponent_Expecter) Init(a interface{}) *MockObjectGetterComponent_Init_Call {
	return &MockObjectGetterComponent_Init_Call{Call: _e.mock.On("Init", a)}
}

func (_c *MockObjectGetterComponent_Init_Call) Run(run func(a *app.App)) *MockObjectGetterComponent_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app.App))
	})
	return _c
}

func (_c *MockObjectGetterComponent_Init_Call) Return(err error) *MockObjectGetterComponent_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockObjectGetterComponent_Init_Call) RunAndReturn(run func(*app.App) error) *MockObjectGetterComponent_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockObjectGetterComponent) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockObjectGetterComponent_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockObjectGetterComponent_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockObjectGetterComponent_Expecter) Name() *MockObjectGetterComponent_Name_Call {
	return &MockObjectGetterComponent_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockObjectGetterComponent_Name_Call) Run(run func()) *MockObjectGetterComponent_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObjectGetterComponent_Name_Call) Return(name string) *MockObjectGetterComponent_Name_Call {
	_c.Call.Return(name)
	return _c
}

func (_c *MockObjectGetterComponent_Name_Call) RunAndReturn(run func() string) *MockObjectGetterComponent_Name_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockObjectGetterComponent creates a new instance of MockObjectGetterComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockObjectGetterComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockObjectGetterComponent {
	mock := &MockObjectGetterComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
