// Code generated by mockery. DO NOT EDIT.

package mock_objectcreator

import (
	common "github.com/anyproto/anytype-heart/core/block/import/common"
	mock "github.com/stretchr/testify/mock"

	objectcreator "github.com/anyproto/anytype-heart/core/block/import/common/objectcreator"

	types "github.com/gogo/protobuf/types"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: dataObject, sn
func (_m *MockService) Create(dataObject *objectcreator.DataObject, sn *common.Snapshot) (*types.Struct, string, error) {
	ret := _m.Called(dataObject, sn)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *types.Struct
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(*objectcreator.DataObject, *common.Snapshot) (*types.Struct, string, error)); ok {
		return rf(dataObject, sn)
	}
	if rf, ok := ret.Get(0).(func(*objectcreator.DataObject, *common.Snapshot) *types.Struct); ok {
		r0 = rf(dataObject, sn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Struct)
		}
	}

	if rf, ok := ret.Get(1).(func(*objectcreator.DataObject, *common.Snapshot) string); ok {
		r1 = rf(dataObject, sn)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(*objectcreator.DataObject, *common.Snapshot) error); ok {
		r2 = rf(dataObject, sn)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - dataObject *objectcreator.DataObject
//   - sn *common.Snapshot
func (_e *MockService_Expecter) Create(dataObject interface{}, sn interface{}) *MockService_Create_Call {
	return &MockService_Create_Call{Call: _e.mock.On("Create", dataObject, sn)}
}

func (_c *MockService_Create_Call) Run(run func(dataObject *objectcreator.DataObject, sn *common.Snapshot)) *MockService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*objectcreator.DataObject), args[1].(*common.Snapshot))
	})
	return _c
}

func (_c *MockService_Create_Call) Return(_a0 *types.Struct, _a1 string, _a2 error) *MockService_Create_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockService_Create_Call) RunAndReturn(run func(*objectcreator.DataObject, *common.Snapshot) (*types.Struct, string, error)) *MockService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
