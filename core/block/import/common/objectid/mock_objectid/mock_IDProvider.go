// Code generated by mockery. DO NOT EDIT.

package mock_objectid

import (
	context "context"

	common "github.com/anyproto/anytype-heart/core/block/import/common"
	"github.com/anyproto/anytype-heart/core/domain/objectorigin"

	mock "github.com/stretchr/testify/mock"

	time "time"

	treestorage "github.com/anyproto/any-sync/commonspace/object/tree/treestorage"
)

// MockIDProvider is an autogenerated mock type for the IDProvider type
type MockIDProvider struct {
	mock.Mock
}

type MockIDProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIDProvider) EXPECT() *MockIDProvider_Expecter {
	return &MockIDProvider_Expecter{mock: &_m.Mock}
}

// GetIDAndPayload provides a mock function with given fields: ctx, spaceID, sn, createdTime, getExisting
func (_m *MockIDProvider) GetIDAndPayload(ctx context.Context, spaceID string, sn *common.Snapshot, createdTime time.Time, getExisting bool, origin objectorigin.ObjectOrigin) (string, treestorage.TreeStorageCreatePayload, error) {
	ret := _m.Called(ctx, spaceID, sn, createdTime, getExisting)

	if len(ret) == 0 {
		panic("no return value specified for GetIDAndPayload")
	}

	var r0 string
	var r1 treestorage.TreeStorageCreatePayload
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *common.Snapshot, time.Time, bool) (string, treestorage.TreeStorageCreatePayload, error)); ok {
		return rf(ctx, spaceID, sn, createdTime, getExisting)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *common.Snapshot, time.Time, bool) string); ok {
		r0 = rf(ctx, spaceID, sn, createdTime, getExisting)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *common.Snapshot, time.Time, bool) treestorage.TreeStorageCreatePayload); ok {
		r1 = rf(ctx, spaceID, sn, createdTime, getExisting)
	} else {
		r1 = ret.Get(1).(treestorage.TreeStorageCreatePayload)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *common.Snapshot, time.Time, bool) error); ok {
		r2 = rf(ctx, spaceID, sn, createdTime, getExisting)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockIDProvider_GetIDAndPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIDAndPayload'
type MockIDProvider_GetIDAndPayload_Call struct {
	*mock.Call
}

// GetIDAndPayload is a helper method to define mock.On call
//   - ctx context.Context
//   - spaceID string
//   - sn *common.Snapshot
//   - createdTime time.Time
//   - getExisting bool
func (_e *MockIDProvider_Expecter) GetIDAndPayload(ctx interface{}, spaceID interface{}, sn interface{}, createdTime interface{}, getExisting interface{}) *MockIDProvider_GetIDAndPayload_Call {
	return &MockIDProvider_GetIDAndPayload_Call{Call: _e.mock.On("GetIDAndPayload", ctx, spaceID, sn, createdTime, getExisting)}
}

func (_c *MockIDProvider_GetIDAndPayload_Call) Run(run func(ctx context.Context, spaceID string, sn *common.Snapshot, createdTime time.Time, getExisting bool)) *MockIDProvider_GetIDAndPayload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*common.Snapshot), args[3].(time.Time), args[4].(bool))
	})
	return _c
}

func (_c *MockIDProvider_GetIDAndPayload_Call) Return(_a0 string, _a1 treestorage.TreeStorageCreatePayload, _a2 error) *MockIDProvider_GetIDAndPayload_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockIDProvider_GetIDAndPayload_Call) RunAndReturn(run func(context.Context, string, *common.Snapshot, time.Time, bool) (string, treestorage.TreeStorageCreatePayload, error)) *MockIDProvider_GetIDAndPayload_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIDProvider creates a new instance of MockIDProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIDProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIDProvider {
	mock := &MockIDProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
