// Code generated by mockery. DO NOT EDIT.

package mock_common

import (
	context "context"

	common "github.com/anyproto/anytype-heart/core/block/import/common"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/anyproto/anytype-heart/pb"

	process "github.com/anyproto/anytype-heart/core/block/process"
)

// MockConverter is an autogenerated mock type for the Converter type
type MockConverter struct {
	mock.Mock
}

type MockConverter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConverter) EXPECT() *MockConverter_Expecter {
	return &MockConverter_Expecter{mock: &_m.Mock}
}

// GetSnapshots provides a mock function with given fields: ctx, req, progress
func (_m *MockConverter) GetSnapshots(ctx context.Context, req *pb.RpcObjectImportRequest, progress process.Progress) (*common.Response, *common.ConvertError) {
	ret := _m.Called(ctx, req, progress)

	if len(ret) == 0 {
		panic("no return value specified for GetSnapshots")
	}

	var r0 *common.Response
	var r1 *common.ConvertError
	if rf, ok := ret.Get(0).(func(context.Context, *pb.RpcObjectImportRequest, process.Progress) (*common.Response, *common.ConvertError)); ok {
		return rf(ctx, req, progress)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.RpcObjectImportRequest, process.Progress) *common.Response); ok {
		r0 = rf(ctx, req, progress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.RpcObjectImportRequest, process.Progress) *common.ConvertError); ok {
		r1 = rf(ctx, req, progress)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*common.ConvertError)
		}
	}

	return r0, r1
}

// MockConverter_GetSnapshots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSnapshots'
type MockConverter_GetSnapshots_Call struct {
	*mock.Call
}

// GetSnapshots is a helper method to define mock.On call
//   - ctx context.Context
//   - req *pb.RpcObjectImportRequest
//   - progress process.Progress
func (_e *MockConverter_Expecter) GetSnapshots(ctx interface{}, req interface{}, progress interface{}) *MockConverter_GetSnapshots_Call {
	return &MockConverter_GetSnapshots_Call{Call: _e.mock.On("GetSnapshots", ctx, req, progress)}
}

func (_c *MockConverter_GetSnapshots_Call) Run(run func(ctx context.Context, req *pb.RpcObjectImportRequest, progress process.Progress)) *MockConverter_GetSnapshots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pb.RpcObjectImportRequest), args[2].(process.Progress))
	})
	return _c
}

func (_c *MockConverter_GetSnapshots_Call) Return(_a0 *common.Response, _a1 *common.ConvertError) *MockConverter_GetSnapshots_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConverter_GetSnapshots_Call) RunAndReturn(run func(context.Context, *pb.RpcObjectImportRequest, process.Progress) (*common.Response, *common.ConvertError)) *MockConverter_GetSnapshots_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockConverter) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockConverter_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockConverter_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockConverter_Expecter) Name() *MockConverter_Name_Call {
	return &MockConverter_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockConverter_Name_Call) Run(run func()) *MockConverter_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConverter_Name_Call) Return(_a0 string) *MockConverter_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConverter_Name_Call) RunAndReturn(run func() string) *MockConverter_Name_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConverter creates a new instance of MockConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConverter {
	mock := &MockConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
