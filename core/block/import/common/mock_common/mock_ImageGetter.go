// Code generated by mockery. DO NOT EDIT.

package mock_common

import mock "github.com/stretchr/testify/mock"

// MockImageGetter is an autogenerated mock type for the ImageGetter type
type MockImageGetter struct {
	mock.Mock
}

type MockImageGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockImageGetter) EXPECT() *MockImageGetter_Expecter {
	return &MockImageGetter_Expecter{mock: &_m.Mock}
}

// GetImage provides a mock function with given fields:
func (_m *MockImageGetter) GetImage() ([]byte, int64, int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetImage")
	}

	var r0 []byte
	var r1 int64
	var r2 int64
	var r3 error
	if rf, ok := ret.Get(0).(func() ([]byte, int64, int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() int64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func() int64); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(int64)
	}

	if rf, ok := ret.Get(3).(func() error); ok {
		r3 = rf()
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// MockImageGetter_GetImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImage'
type MockImageGetter_GetImage_Call struct {
	*mock.Call
}

// GetImage is a helper method to define mock.On call
func (_e *MockImageGetter_Expecter) GetImage() *MockImageGetter_GetImage_Call {
	return &MockImageGetter_GetImage_Call{Call: _e.mock.On("GetImage")}
}

func (_c *MockImageGetter_GetImage_Call) Run(run func()) *MockImageGetter_GetImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockImageGetter_GetImage_Call) Return(_a0 []byte, _a1 int64, _a2 int64, _a3 error) *MockImageGetter_GetImage_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *MockImageGetter_GetImage_Call) RunAndReturn(run func() ([]byte, int64, int64, error)) *MockImageGetter_GetImage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockImageGetter creates a new instance of MockImageGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockImageGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockImageGetter {
	mock := &MockImageGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
