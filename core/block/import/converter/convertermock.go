// Code generated by MockGen. DO NOT EDIT.
// Source: core/block/import/converter/types.go

// Package mock_converter is a generated GoMock package.
package converter

import (
	context "context"
	"github.com/anyproto/anytype-heart/core/block/process"
	reflect "reflect"

	block "github.com/anyproto/anytype-heart/core/block"
	smartblock "github.com/anyproto/anytype-heart/core/block/editor/smartblock"
	pb "github.com/anyproto/anytype-heart/pb"
	smartblock0 "github.com/anyproto/anytype-heart/pkg/lib/core/smartblock"
	gomock "go.uber.org/mock/gomock"
)

// MockObjectTreeCreator is a mock of ObjectTreeCreator interface.
type MockObjectTreeCreator struct {
	ctrl     *gomock.Controller
	recorder *MockObjectTreeCreatorMockRecorder
}

// MockObjectTreeCreatorMockRecorder is the mock recorder for MockObjectTreeCreator.
type MockObjectTreeCreatorMockRecorder struct {
	mock *MockObjectTreeCreator
}

// NewMockObjectTreeCreator creates a new mock instance.
func NewMockObjectTreeCreator(ctrl *gomock.Controller) *MockObjectTreeCreator {
	mock := &MockObjectTreeCreator{ctrl: ctrl}
	mock.recorder = &MockObjectTreeCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectTreeCreator) EXPECT() *MockObjectTreeCreatorMockRecorder {
	return m.recorder
}

// CreateTreeObject mocks base method.
func (m *MockObjectTreeCreator) CreateTreeObject(ctx context.Context, tp smartblock0.SmartBlockType, initFunc block.InitFunc) (smartblock.SmartBlock, func(), error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTreeObject", ctx, tp, initFunc)
	ret0, _ := ret[0].(smartblock.SmartBlock)
	ret1, _ := ret[1].(func())
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTreeObject indicates an expected call of CreateTreeObject.
func (mr *MockObjectTreeCreatorMockRecorder) CreateTreeObject(ctx, tp, initFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTreeObject", reflect.TypeOf((*MockObjectTreeCreator)(nil).CreateTreeObject), ctx, tp, initFunc)
}

// MockConverter is a mock of Converter interface.
type MockConverter struct {
	ctrl     *gomock.Controller
	recorder *MockConverterMockRecorder
}

// MockConverterMockRecorder is the mock recorder for MockConverter.
type MockConverterMockRecorder struct {
	mock *MockConverter
}

// NewMockConverter creates a new mock instance.
func NewMockConverter(ctrl *gomock.Controller) *MockConverter {
	mock := &MockConverter{ctrl: ctrl}
	mock.recorder = &MockConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConverter) EXPECT() *MockConverterMockRecorder {
	return m.recorder
}

// GetSnapshots mocks base method.
func (m *MockConverter) GetSnapshots(req *pb.RpcObjectImportRequest, progress process.Progress, timestamp int64) (*Response, *ConvertError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshots", req, progress, timestamp)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(*ConvertError)
	return ret0, ret1
}

// GetSnapshots indicates an expected call of GetSnapshots.
func (mr *MockConverterMockRecorder) GetSnapshots(req interface{}, progress interface{}, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshots", reflect.TypeOf((*MockConverter)(nil).GetSnapshots), req, progress, timestamp)
}

// Name mocks base method.
func (m *MockConverter) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockConverterMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockConverter)(nil).Name))
}

// MockImageGetter is a mock of ImageGetter interface.
type MockImageGetter struct {
	ctrl     *gomock.Controller
	recorder *MockImageGetterMockRecorder
}

// MockImageGetterMockRecorder is the mock recorder for MockImageGetter.
type MockImageGetterMockRecorder struct {
	mock *MockImageGetter
}

// NewMockImageGetter creates a new mock instance.
func NewMockImageGetter(ctrl *gomock.Controller) *MockImageGetter {
	mock := &MockImageGetter{ctrl: ctrl}
	mock.recorder = &MockImageGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageGetter) EXPECT() *MockImageGetterMockRecorder {
	return m.recorder
}

// GetImage mocks base method.
func (m *MockImageGetter) GetImage() ([]byte, int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetImage indicates an expected call of GetImage.
func (mr *MockImageGetterMockRecorder) GetImage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockImageGetter)(nil).GetImage))
}
