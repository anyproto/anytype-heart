// Code generated by mockery. DO NOT EDIT.

package mock_importer

import (
	context "context"

	app "github.com/anyproto/any-sync/app"

	importer "github.com/anyproto/anytype-heart/core/block/import"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/anyproto/anytype-heart/pb"

	types "github.com/gogo/protobuf/types"
)

// MockImporter is an autogenerated mock type for the Importer type
type MockImporter struct {
	mock.Mock
}

type MockImporter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockImporter) EXPECT() *MockImporter_Expecter {
	return &MockImporter_Expecter{mock: &_m.Mock}
}

// Import provides a mock function with given fields: ctx, importRequest
func (_m *MockImporter) Import(ctx context.Context, importRequest *importer.ImportRequest) *importer.ImportResponse {
	ret := _m.Called(ctx, importRequest)

	if len(ret) == 0 {
		panic("no return value specified for Import")
	}

	var r0 *importer.ImportResponse
	if rf, ok := ret.Get(0).(func(context.Context, *importer.ImportRequest) *importer.ImportResponse); ok {
		r0 = rf(ctx, importRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*importer.ImportResponse)
		}
	}

	return r0
}

// MockImporter_Import_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Import'
type MockImporter_Import_Call struct {
	*mock.Call
}

// Import is a helper method to define mock.On call
//   - ctx context.Context
//   - importRequest *importer.ImportRequest
func (_e *MockImporter_Expecter) Import(ctx interface{}, importRequest interface{}) *MockImporter_Import_Call {
	return &MockImporter_Import_Call{Call: _e.mock.On("Import", ctx, importRequest)}
}

func (_c *MockImporter_Import_Call) Run(run func(ctx context.Context, importRequest *importer.ImportRequest)) *MockImporter_Import_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*importer.ImportRequest))
	})
	return _c
}

func (_c *MockImporter_Import_Call) Return(_a0 *importer.ImportResponse) *MockImporter_Import_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockImporter_Import_Call) RunAndReturn(run func(context.Context, *importer.ImportRequest) *importer.ImportResponse) *MockImporter_Import_Call {
	_c.Call.Return(run)
	return _c
}

// ImportWeb provides a mock function with given fields: ctx, req
func (_m *MockImporter) ImportWeb(ctx context.Context, req *pb.RpcObjectImportRequest) (string, *types.Struct, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ImportWeb")
	}

	var r0 string
	var r1 *types.Struct
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.RpcObjectImportRequest) (string, *types.Struct, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.RpcObjectImportRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.RpcObjectImportRequest) *types.Struct); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*types.Struct)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *pb.RpcObjectImportRequest) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockImporter_ImportWeb_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImportWeb'
type MockImporter_ImportWeb_Call struct {
	*mock.Call
}

// ImportWeb is a helper method to define mock.On call
//   - ctx context.Context
//   - req *pb.RpcObjectImportRequest
func (_e *MockImporter_Expecter) ImportWeb(ctx interface{}, req interface{}) *MockImporter_ImportWeb_Call {
	return &MockImporter_ImportWeb_Call{Call: _e.mock.On("ImportWeb", ctx, req)}
}

func (_c *MockImporter_ImportWeb_Call) Run(run func(ctx context.Context, req *pb.RpcObjectImportRequest)) *MockImporter_ImportWeb_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pb.RpcObjectImportRequest))
	})
	return _c
}

func (_c *MockImporter_ImportWeb_Call) Return(_a0 string, _a1 *types.Struct, _a2 error) *MockImporter_ImportWeb_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockImporter_ImportWeb_Call) RunAndReturn(run func(context.Context, *pb.RpcObjectImportRequest) (string, *types.Struct, error)) *MockImporter_ImportWeb_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: a
func (_m *MockImporter) Init(a *app.App) error {
	ret := _m.Called(a)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockImporter_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockImporter_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - a *app.App
func (_e *MockImporter_Expecter) Init(a interface{}) *MockImporter_Init_Call {
	return &MockImporter_Init_Call{Call: _e.mock.On("Init", a)}
}

func (_c *MockImporter_Init_Call) Run(run func(a *app.App)) *MockImporter_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app.App))
	})
	return _c
}

func (_c *MockImporter_Init_Call) Return(err error) *MockImporter_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockImporter_Init_Call) RunAndReturn(run func(*app.App) error) *MockImporter_Init_Call {
	_c.Call.Return(run)
	return _c
}

// ListImports provides a mock function with given fields: req
func (_m *MockImporter) ListImports(req *pb.RpcObjectImportListRequest) ([]*pb.RpcObjectImportListImportResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for ListImports")
	}

	var r0 []*pb.RpcObjectImportListImportResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*pb.RpcObjectImportListRequest) ([]*pb.RpcObjectImportListImportResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*pb.RpcObjectImportListRequest) []*pb.RpcObjectImportListImportResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pb.RpcObjectImportListImportResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*pb.RpcObjectImportListRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImporter_ListImports_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListImports'
type MockImporter_ListImports_Call struct {
	*mock.Call
}

// ListImports is a helper method to define mock.On call
//   - req *pb.RpcObjectImportListRequest
func (_e *MockImporter_Expecter) ListImports(req interface{}) *MockImporter_ListImports_Call {
	return &MockImporter_ListImports_Call{Call: _e.mock.On("ListImports", req)}
}

func (_c *MockImporter_ListImports_Call) Run(run func(req *pb.RpcObjectImportListRequest)) *MockImporter_ListImports_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*pb.RpcObjectImportListRequest))
	})
	return _c
}

func (_c *MockImporter_ListImports_Call) Return(_a0 []*pb.RpcObjectImportListImportResponse, _a1 error) *MockImporter_ListImports_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImporter_ListImports_Call) RunAndReturn(run func(*pb.RpcObjectImportListRequest) ([]*pb.RpcObjectImportListImportResponse, error)) *MockImporter_ListImports_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockImporter) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockImporter_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockImporter_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockImporter_Expecter) Name() *MockImporter_Name_Call {
	return &MockImporter_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockImporter_Name_Call) Run(run func()) *MockImporter_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockImporter_Name_Call) Return(name string) *MockImporter_Name_Call {
	_c.Call.Return(name)
	return _c
}

func (_c *MockImporter_Name_Call) RunAndReturn(run func() string) *MockImporter_Name_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateNotionToken provides a mock function with given fields: ctx, req
func (_m *MockImporter) ValidateNotionToken(ctx context.Context, req *pb.RpcObjectImportNotionValidateTokenRequest) (pb.RpcObjectImportNotionValidateTokenResponseErrorCode, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ValidateNotionToken")
	}

	var r0 pb.RpcObjectImportNotionValidateTokenResponseErrorCode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.RpcObjectImportNotionValidateTokenRequest) (pb.RpcObjectImportNotionValidateTokenResponseErrorCode, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.RpcObjectImportNotionValidateTokenRequest) pb.RpcObjectImportNotionValidateTokenResponseErrorCode); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(pb.RpcObjectImportNotionValidateTokenResponseErrorCode)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.RpcObjectImportNotionValidateTokenRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImporter_ValidateNotionToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateNotionToken'
type MockImporter_ValidateNotionToken_Call struct {
	*mock.Call
}

// ValidateNotionToken is a helper method to define mock.On call
//   - ctx context.Context
//   - req *pb.RpcObjectImportNotionValidateTokenRequest
func (_e *MockImporter_Expecter) ValidateNotionToken(ctx interface{}, req interface{}) *MockImporter_ValidateNotionToken_Call {
	return &MockImporter_ValidateNotionToken_Call{Call: _e.mock.On("ValidateNotionToken", ctx, req)}
}

func (_c *MockImporter_ValidateNotionToken_Call) Run(run func(ctx context.Context, req *pb.RpcObjectImportNotionValidateTokenRequest)) *MockImporter_ValidateNotionToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pb.RpcObjectImportNotionValidateTokenRequest))
	})
	return _c
}

func (_c *MockImporter_ValidateNotionToken_Call) Return(_a0 pb.RpcObjectImportNotionValidateTokenResponseErrorCode, _a1 error) *MockImporter_ValidateNotionToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImporter_ValidateNotionToken_Call) RunAndReturn(run func(context.Context, *pb.RpcObjectImportNotionValidateTokenRequest) (pb.RpcObjectImportNotionValidateTokenResponseErrorCode, error)) *MockImporter_ValidateNotionToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockImporter creates a new instance of MockImporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockImporter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockImporter {
	mock := &MockImporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
