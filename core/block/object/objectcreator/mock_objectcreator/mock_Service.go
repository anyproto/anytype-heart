// Code generated by mockery. DO NOT EDIT.

package mock_objectcreator

import (
	context "context"

	app "github.com/anyproto/any-sync/app"
	clientspace "github.com/anyproto/anytype-heart/space/clientspace"

	domain "github.com/anyproto/anytype-heart/core/domain"

	mock "github.com/stretchr/testify/mock"

	objectcreator "github.com/anyproto/anytype-heart/core/block/object/objectcreator"

	state "github.com/anyproto/anytype-heart/core/block/editor/state"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// AddChatDerivedObject provides a mock function with given fields: ctx, space, chatObjectId
func (_m *MockService) AddChatDerivedObject(ctx context.Context, space clientspace.Space, chatObjectId string) (string, error) {
	ret := _m.Called(ctx, space, chatObjectId)

	if len(ret) == 0 {
		panic("no return value specified for AddChatDerivedObject")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, clientspace.Space, string) (string, error)); ok {
		return rf(ctx, space, chatObjectId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, clientspace.Space, string) string); ok {
		r0 = rf(ctx, space, chatObjectId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, clientspace.Space, string) error); ok {
		r1 = rf(ctx, space, chatObjectId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_AddChatDerivedObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddChatDerivedObject'
type MockService_AddChatDerivedObject_Call struct {
	*mock.Call
}

// AddChatDerivedObject is a helper method to define mock.On call
//   - ctx context.Context
//   - space clientspace.Space
//   - chatObjectId string
func (_e *MockService_Expecter) AddChatDerivedObject(ctx interface{}, space interface{}, chatObjectId interface{}) *MockService_AddChatDerivedObject_Call {
	return &MockService_AddChatDerivedObject_Call{Call: _e.mock.On("AddChatDerivedObject", ctx, space, chatObjectId)}
}

func (_c *MockService_AddChatDerivedObject_Call) Run(run func(ctx context.Context, space clientspace.Space, chatObjectId string)) *MockService_AddChatDerivedObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(clientspace.Space), args[2].(string))
	})
	return _c
}

func (_c *MockService_AddChatDerivedObject_Call) Return(chatId string, err error) *MockService_AddChatDerivedObject_Call {
	_c.Call.Return(chatId, err)
	return _c
}

func (_c *MockService_AddChatDerivedObject_Call) RunAndReturn(run func(context.Context, clientspace.Space, string) (string, error)) *MockService_AddChatDerivedObject_Call {
	_c.Call.Return(run)
	return _c
}

// CreateObject provides a mock function with given fields: ctx, spaceID, req
func (_m *MockService) CreateObject(ctx context.Context, spaceID string, req objectcreator.CreateObjectRequest) (string, *domain.Details, error) {
	ret := _m.Called(ctx, spaceID, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateObject")
	}

	var r0 string
	var r1 *domain.Details
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, objectcreator.CreateObjectRequest) (string, *domain.Details, error)); ok {
		return rf(ctx, spaceID, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, objectcreator.CreateObjectRequest) string); ok {
		r0 = rf(ctx, spaceID, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, objectcreator.CreateObjectRequest) *domain.Details); ok {
		r1 = rf(ctx, spaceID, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.Details)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, objectcreator.CreateObjectRequest) error); ok {
		r2 = rf(ctx, spaceID, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockService_CreateObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateObject'
type MockService_CreateObject_Call struct {
	*mock.Call
}

// CreateObject is a helper method to define mock.On call
//   - ctx context.Context
//   - spaceID string
//   - req objectcreator.CreateObjectRequest
func (_e *MockService_Expecter) CreateObject(ctx interface{}, spaceID interface{}, req interface{}) *MockService_CreateObject_Call {
	return &MockService_CreateObject_Call{Call: _e.mock.On("CreateObject", ctx, spaceID, req)}
}

func (_c *MockService_CreateObject_Call) Run(run func(ctx context.Context, spaceID string, req objectcreator.CreateObjectRequest)) *MockService_CreateObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(objectcreator.CreateObjectRequest))
	})
	return _c
}

func (_c *MockService_CreateObject_Call) Return(id string, details *domain.Details, err error) *MockService_CreateObject_Call {
	_c.Call.Return(id, details, err)
	return _c
}

func (_c *MockService_CreateObject_Call) RunAndReturn(run func(context.Context, string, objectcreator.CreateObjectRequest) (string, *domain.Details, error)) *MockService_CreateObject_Call {
	_c.Call.Return(run)
	return _c
}

// CreateObjectUsingObjectUniqueTypeKey provides a mock function with given fields: ctx, spaceID, objectUniqueTypeKey, req
func (_m *MockService) CreateObjectUsingObjectUniqueTypeKey(ctx context.Context, spaceID string, objectUniqueTypeKey string, req objectcreator.CreateObjectRequest) (string, *domain.Details, error) {
	ret := _m.Called(ctx, spaceID, objectUniqueTypeKey, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateObjectUsingObjectUniqueTypeKey")
	}

	var r0 string
	var r1 *domain.Details
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, objectcreator.CreateObjectRequest) (string, *domain.Details, error)); ok {
		return rf(ctx, spaceID, objectUniqueTypeKey, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, objectcreator.CreateObjectRequest) string); ok {
		r0 = rf(ctx, spaceID, objectUniqueTypeKey, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, objectcreator.CreateObjectRequest) *domain.Details); ok {
		r1 = rf(ctx, spaceID, objectUniqueTypeKey, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.Details)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, objectcreator.CreateObjectRequest) error); ok {
		r2 = rf(ctx, spaceID, objectUniqueTypeKey, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockService_CreateObjectUsingObjectUniqueTypeKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateObjectUsingObjectUniqueTypeKey'
type MockService_CreateObjectUsingObjectUniqueTypeKey_Call struct {
	*mock.Call
}

// CreateObjectUsingObjectUniqueTypeKey is a helper method to define mock.On call
//   - ctx context.Context
//   - spaceID string
//   - objectUniqueTypeKey string
//   - req objectcreator.CreateObjectRequest
func (_e *MockService_Expecter) CreateObjectUsingObjectUniqueTypeKey(ctx interface{}, spaceID interface{}, objectUniqueTypeKey interface{}, req interface{}) *MockService_CreateObjectUsingObjectUniqueTypeKey_Call {
	return &MockService_CreateObjectUsingObjectUniqueTypeKey_Call{Call: _e.mock.On("CreateObjectUsingObjectUniqueTypeKey", ctx, spaceID, objectUniqueTypeKey, req)}
}

func (_c *MockService_CreateObjectUsingObjectUniqueTypeKey_Call) Run(run func(ctx context.Context, spaceID string, objectUniqueTypeKey string, req objectcreator.CreateObjectRequest)) *MockService_CreateObjectUsingObjectUniqueTypeKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(objectcreator.CreateObjectRequest))
	})
	return _c
}

func (_c *MockService_CreateObjectUsingObjectUniqueTypeKey_Call) Return(id string, details *domain.Details, err error) *MockService_CreateObjectUsingObjectUniqueTypeKey_Call {
	_c.Call.Return(id, details, err)
	return _c
}

func (_c *MockService_CreateObjectUsingObjectUniqueTypeKey_Call) RunAndReturn(run func(context.Context, string, string, objectcreator.CreateObjectRequest) (string, *domain.Details, error)) *MockService_CreateObjectUsingObjectUniqueTypeKey_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSmartBlockFromState provides a mock function with given fields: ctx, spaceID, objectTypeKeys, createState
func (_m *MockService) CreateSmartBlockFromState(ctx context.Context, spaceID string, objectTypeKeys []domain.TypeKey, createState *state.State) (string, *domain.Details, error) {
	ret := _m.Called(ctx, spaceID, objectTypeKeys, createState)

	if len(ret) == 0 {
		panic("no return value specified for CreateSmartBlockFromState")
	}

	var r0 string
	var r1 *domain.Details
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []domain.TypeKey, *state.State) (string, *domain.Details, error)); ok {
		return rf(ctx, spaceID, objectTypeKeys, createState)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []domain.TypeKey, *state.State) string); ok {
		r0 = rf(ctx, spaceID, objectTypeKeys, createState)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []domain.TypeKey, *state.State) *domain.Details); ok {
		r1 = rf(ctx, spaceID, objectTypeKeys, createState)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.Details)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, []domain.TypeKey, *state.State) error); ok {
		r2 = rf(ctx, spaceID, objectTypeKeys, createState)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockService_CreateSmartBlockFromState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSmartBlockFromState'
type MockService_CreateSmartBlockFromState_Call struct {
	*mock.Call
}

// CreateSmartBlockFromState is a helper method to define mock.On call
//   - ctx context.Context
//   - spaceID string
//   - objectTypeKeys []domain.TypeKey
//   - createState *state.State
func (_e *MockService_Expecter) CreateSmartBlockFromState(ctx interface{}, spaceID interface{}, objectTypeKeys interface{}, createState interface{}) *MockService_CreateSmartBlockFromState_Call {
	return &MockService_CreateSmartBlockFromState_Call{Call: _e.mock.On("CreateSmartBlockFromState", ctx, spaceID, objectTypeKeys, createState)}
}

func (_c *MockService_CreateSmartBlockFromState_Call) Run(run func(ctx context.Context, spaceID string, objectTypeKeys []domain.TypeKey, createState *state.State)) *MockService_CreateSmartBlockFromState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]domain.TypeKey), args[3].(*state.State))
	})
	return _c
}

func (_c *MockService_CreateSmartBlockFromState_Call) Return(id string, newDetails *domain.Details, err error) *MockService_CreateSmartBlockFromState_Call {
	_c.Call.Return(id, newDetails, err)
	return _c
}

func (_c *MockService_CreateSmartBlockFromState_Call) RunAndReturn(run func(context.Context, string, []domain.TypeKey, *state.State) (string, *domain.Details, error)) *MockService_CreateSmartBlockFromState_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSmartBlockFromStateInSpace provides a mock function with given fields: ctx, space, objectTypeKeys, createState
func (_m *MockService) CreateSmartBlockFromStateInSpace(ctx context.Context, space clientspace.Space, objectTypeKeys []domain.TypeKey, createState *state.State) (string, *domain.Details, error) {
	ret := _m.Called(ctx, space, objectTypeKeys, createState)

	if len(ret) == 0 {
		panic("no return value specified for CreateSmartBlockFromStateInSpace")
	}

	var r0 string
	var r1 *domain.Details
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, clientspace.Space, []domain.TypeKey, *state.State) (string, *domain.Details, error)); ok {
		return rf(ctx, space, objectTypeKeys, createState)
	}
	if rf, ok := ret.Get(0).(func(context.Context, clientspace.Space, []domain.TypeKey, *state.State) string); ok {
		r0 = rf(ctx, space, objectTypeKeys, createState)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, clientspace.Space, []domain.TypeKey, *state.State) *domain.Details); ok {
		r1 = rf(ctx, space, objectTypeKeys, createState)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.Details)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, clientspace.Space, []domain.TypeKey, *state.State) error); ok {
		r2 = rf(ctx, space, objectTypeKeys, createState)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockService_CreateSmartBlockFromStateInSpace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSmartBlockFromStateInSpace'
type MockService_CreateSmartBlockFromStateInSpace_Call struct {
	*mock.Call
}

// CreateSmartBlockFromStateInSpace is a helper method to define mock.On call
//   - ctx context.Context
//   - space clientspace.Space
//   - objectTypeKeys []domain.TypeKey
//   - createState *state.State
func (_e *MockService_Expecter) CreateSmartBlockFromStateInSpace(ctx interface{}, space interface{}, objectTypeKeys interface{}, createState interface{}) *MockService_CreateSmartBlockFromStateInSpace_Call {
	return &MockService_CreateSmartBlockFromStateInSpace_Call{Call: _e.mock.On("CreateSmartBlockFromStateInSpace", ctx, space, objectTypeKeys, createState)}
}

func (_c *MockService_CreateSmartBlockFromStateInSpace_Call) Run(run func(ctx context.Context, space clientspace.Space, objectTypeKeys []domain.TypeKey, createState *state.State)) *MockService_CreateSmartBlockFromStateInSpace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(clientspace.Space), args[2].([]domain.TypeKey), args[3].(*state.State))
	})
	return _c
}

func (_c *MockService_CreateSmartBlockFromStateInSpace_Call) Return(id string, newDetails *domain.Details, err error) *MockService_CreateSmartBlockFromStateInSpace_Call {
	_c.Call.Return(id, newDetails, err)
	return _c
}

func (_c *MockService_CreateSmartBlockFromStateInSpace_Call) RunAndReturn(run func(context.Context, clientspace.Space, []domain.TypeKey, *state.State) (string, *domain.Details, error)) *MockService_CreateSmartBlockFromStateInSpace_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: a
func (_m *MockService) Init(a *app.App) error {
	ret := _m.Called(a)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockService_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - a *app.App
func (_e *MockService_Expecter) Init(a interface{}) *MockService_Init_Call {
	return &MockService_Init_Call{Call: _e.mock.On("Init", a)}
}

func (_c *MockService_Init_Call) Run(run func(a *app.App)) *MockService_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app.App))
	})
	return _c
}

func (_c *MockService_Init_Call) Return(err error) *MockService_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_Init_Call) RunAndReturn(run func(*app.App) error) *MockService_Init_Call {
	_c.Call.Return(run)
	return _c
}

// InstallBundledObjects provides a mock function with given fields: ctx, space, sourceObjectIds, isNewSpace
func (_m *MockService) InstallBundledObjects(ctx context.Context, space clientspace.Space, sourceObjectIds []string, isNewSpace bool) ([]string, []*domain.Details, error) {
	ret := _m.Called(ctx, space, sourceObjectIds, isNewSpace)

	if len(ret) == 0 {
		panic("no return value specified for InstallBundledObjects")
	}

	var r0 []string
	var r1 []*domain.Details
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, clientspace.Space, []string, bool) ([]string, []*domain.Details, error)); ok {
		return rf(ctx, space, sourceObjectIds, isNewSpace)
	}
	if rf, ok := ret.Get(0).(func(context.Context, clientspace.Space, []string, bool) []string); ok {
		r0 = rf(ctx, space, sourceObjectIds, isNewSpace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, clientspace.Space, []string, bool) []*domain.Details); ok {
		r1 = rf(ctx, space, sourceObjectIds, isNewSpace)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*domain.Details)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, clientspace.Space, []string, bool) error); ok {
		r2 = rf(ctx, space, sourceObjectIds, isNewSpace)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockService_InstallBundledObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InstallBundledObjects'
type MockService_InstallBundledObjects_Call struct {
	*mock.Call
}

// InstallBundledObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - space clientspace.Space
//   - sourceObjectIds []string
//   - isNewSpace bool
func (_e *MockService_Expecter) InstallBundledObjects(ctx interface{}, space interface{}, sourceObjectIds interface{}, isNewSpace interface{}) *MockService_InstallBundledObjects_Call {
	return &MockService_InstallBundledObjects_Call{Call: _e.mock.On("InstallBundledObjects", ctx, space, sourceObjectIds, isNewSpace)}
}

func (_c *MockService_InstallBundledObjects_Call) Run(run func(ctx context.Context, space clientspace.Space, sourceObjectIds []string, isNewSpace bool)) *MockService_InstallBundledObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(clientspace.Space), args[2].([]string), args[3].(bool))
	})
	return _c
}

func (_c *MockService_InstallBundledObjects_Call) Return(ids []string, objects []*domain.Details, err error) *MockService_InstallBundledObjects_Call {
	_c.Call.Return(ids, objects, err)
	return _c
}

func (_c *MockService_InstallBundledObjects_Call) RunAndReturn(run func(context.Context, clientspace.Space, []string, bool) ([]string, []*domain.Details, error)) *MockService_InstallBundledObjects_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockService) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockService_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockService_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockService_Expecter) Name() *MockService_Name_Call {
	return &MockService_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockService_Name_Call) Run(run func()) *MockService_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Name_Call) Return(name string) *MockService_Name_Call {
	_c.Call.Return(name)
	return _c
}

func (_c *MockService_Name_Call) RunAndReturn(run func() string) *MockService_Name_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
