// Code generated by mockery. DO NOT EDIT.

package mock_detailservice

import (
	context "context"

	app "github.com/anyproto/any-sync/app"

	domain "github.com/anyproto/anytype-heart/core/domain"

	mock "github.com/stretchr/testify/mock"

	model "github.com/anyproto/anytype-heart/pkg/lib/pb/model"

	pb "github.com/anyproto/anytype-heart/pb"

	session "github.com/anyproto/anytype-heart/core/session"

	types "github.com/gogo/protobuf/types"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// Init provides a mock function with given fields: a
func (_m *MockService) Init(a *app.App) error {
	ret := _m.Called(a)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockService_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - a *app.App
func (_e *MockService_Expecter) Init(a interface{}) *MockService_Init_Call {
	return &MockService_Init_Call{Call: _e.mock.On("Init", a)}
}

func (_c *MockService_Init_Call) Run(run func(a *app.App)) *MockService_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app.App))
	})
	return _c
}

func (_c *MockService_Init_Call) Return(err error) *MockService_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_Init_Call) RunAndReturn(run func(*app.App) error) *MockService_Init_Call {
	_c.Call.Return(run)
	return _c
}

// ListRelationsWithValue provides a mock function with given fields: spaceId, value
func (_m *MockService) ListRelationsWithValue(spaceId string, value *types.Value) ([]string, []int64, error) {
	ret := _m.Called(spaceId, value)

	if len(ret) == 0 {
		panic("no return value specified for ListRelationsWithValue")
	}

	var r0 []string
	var r1 []int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, *types.Value) ([]string, []int64, error)); ok {
		return rf(spaceId, value)
	}
	if rf, ok := ret.Get(0).(func(string, *types.Value) []string); ok {
		r0 = rf(spaceId, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *types.Value) []int64); ok {
		r1 = rf(spaceId, value)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]int64)
		}
	}

	if rf, ok := ret.Get(2).(func(string, *types.Value) error); ok {
		r2 = rf(spaceId, value)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockService_ListRelationsWithValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRelationsWithValue'
type MockService_ListRelationsWithValue_Call struct {
	*mock.Call
}

// ListRelationsWithValue is a helper method to define mock.On call
//   - spaceId string
//   - value *types.Value
func (_e *MockService_Expecter) ListRelationsWithValue(spaceId interface{}, value interface{}) *MockService_ListRelationsWithValue_Call {
	return &MockService_ListRelationsWithValue_Call{Call: _e.mock.On("ListRelationsWithValue", spaceId, value)}
}

func (_c *MockService_ListRelationsWithValue_Call) Run(run func(spaceId string, value *types.Value)) *MockService_ListRelationsWithValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*types.Value))
	})
	return _c
}

func (_c *MockService_ListRelationsWithValue_Call) Return(keys []string, counters []int64, err error) *MockService_ListRelationsWithValue_Call {
	_c.Call.Return(keys, counters, err)
	return _c
}

func (_c *MockService_ListRelationsWithValue_Call) RunAndReturn(run func(string, *types.Value) ([]string, []int64, error)) *MockService_ListRelationsWithValue_Call {
	_c.Call.Return(run)
	return _c
}

// ModifyDetails provides a mock function with given fields: objectId, modifier
func (_m *MockService) ModifyDetails(objectId string, modifier func(*types.Struct) (*types.Struct, error)) error {
	ret := _m.Called(objectId, modifier)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDetails")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(*types.Struct) (*types.Struct, error)) error); ok {
		r0 = rf(objectId, modifier)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_ModifyDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModifyDetails'
type MockService_ModifyDetails_Call struct {
	*mock.Call
}

// ModifyDetails is a helper method to define mock.On call
//   - objectId string
//   - modifier func(*types.Struct)(*types.Struct , error)
func (_e *MockService_Expecter) ModifyDetails(objectId interface{}, modifier interface{}) *MockService_ModifyDetails_Call {
	return &MockService_ModifyDetails_Call{Call: _e.mock.On("ModifyDetails", objectId, modifier)}
}

func (_c *MockService_ModifyDetails_Call) Run(run func(objectId string, modifier func(*types.Struct) (*types.Struct, error))) *MockService_ModifyDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func(*types.Struct) (*types.Struct, error)))
	})
	return _c
}

func (_c *MockService_ModifyDetails_Call) Return(_a0 error) *MockService_ModifyDetails_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_ModifyDetails_Call) RunAndReturn(run func(string, func(*types.Struct) (*types.Struct, error)) error) *MockService_ModifyDetails_Call {
	_c.Call.Return(run)
	return _c
}

// ModifyDetailsList provides a mock function with given fields: req
func (_m *MockService) ModifyDetailsList(req *pb.RpcObjectListModifyDetailValuesRequest) error {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDetailsList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*pb.RpcObjectListModifyDetailValuesRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_ModifyDetailsList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModifyDetailsList'
type MockService_ModifyDetailsList_Call struct {
	*mock.Call
}

// ModifyDetailsList is a helper method to define mock.On call
//   - req *pb.RpcObjectListModifyDetailValuesRequest
func (_e *MockService_Expecter) ModifyDetailsList(req interface{}) *MockService_ModifyDetailsList_Call {
	return &MockService_ModifyDetailsList_Call{Call: _e.mock.On("ModifyDetailsList", req)}
}

func (_c *MockService_ModifyDetailsList_Call) Run(run func(req *pb.RpcObjectListModifyDetailValuesRequest)) *MockService_ModifyDetailsList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*pb.RpcObjectListModifyDetailValuesRequest))
	})
	return _c
}

func (_c *MockService_ModifyDetailsList_Call) Return(_a0 error) *MockService_ModifyDetailsList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_ModifyDetailsList_Call) RunAndReturn(run func(*pb.RpcObjectListModifyDetailValuesRequest) error) *MockService_ModifyDetailsList_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockService) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockService_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockService_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockService_Expecter) Name() *MockService_Name_Call {
	return &MockService_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockService_Name_Call) Run(run func()) *MockService_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Name_Call) Return(name string) *MockService_Name_Call {
	_c.Call.Return(name)
	return _c
}

func (_c *MockService_Name_Call) RunAndReturn(run func() string) *MockService_Name_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectTypeAddRelations provides a mock function with given fields: ctx, objectTypeId, relationKeys
func (_m *MockService) ObjectTypeAddRelations(ctx context.Context, objectTypeId string, relationKeys []domain.RelationKey) error {
	ret := _m.Called(ctx, objectTypeId, relationKeys)

	if len(ret) == 0 {
		panic("no return value specified for ObjectTypeAddRelations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []domain.RelationKey) error); ok {
		r0 = rf(ctx, objectTypeId, relationKeys)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_ObjectTypeAddRelations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectTypeAddRelations'
type MockService_ObjectTypeAddRelations_Call struct {
	*mock.Call
}

// ObjectTypeAddRelations is a helper method to define mock.On call
//   - ctx context.Context
//   - objectTypeId string
//   - relationKeys []domain.RelationKey
func (_e *MockService_Expecter) ObjectTypeAddRelations(ctx interface{}, objectTypeId interface{}, relationKeys interface{}) *MockService_ObjectTypeAddRelations_Call {
	return &MockService_ObjectTypeAddRelations_Call{Call: _e.mock.On("ObjectTypeAddRelations", ctx, objectTypeId, relationKeys)}
}

func (_c *MockService_ObjectTypeAddRelations_Call) Run(run func(ctx context.Context, objectTypeId string, relationKeys []domain.RelationKey)) *MockService_ObjectTypeAddRelations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]domain.RelationKey))
	})
	return _c
}

func (_c *MockService_ObjectTypeAddRelations_Call) Return(_a0 error) *MockService_ObjectTypeAddRelations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_ObjectTypeAddRelations_Call) RunAndReturn(run func(context.Context, string, []domain.RelationKey) error) *MockService_ObjectTypeAddRelations_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectTypeRemoveRelations provides a mock function with given fields: ctx, objectTypeId, relationKeys
func (_m *MockService) ObjectTypeRemoveRelations(ctx context.Context, objectTypeId string, relationKeys []domain.RelationKey) error {
	ret := _m.Called(ctx, objectTypeId, relationKeys)

	if len(ret) == 0 {
		panic("no return value specified for ObjectTypeRemoveRelations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []domain.RelationKey) error); ok {
		r0 = rf(ctx, objectTypeId, relationKeys)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_ObjectTypeRemoveRelations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectTypeRemoveRelations'
type MockService_ObjectTypeRemoveRelations_Call struct {
	*mock.Call
}

// ObjectTypeRemoveRelations is a helper method to define mock.On call
//   - ctx context.Context
//   - objectTypeId string
//   - relationKeys []domain.RelationKey
func (_e *MockService_Expecter) ObjectTypeRemoveRelations(ctx interface{}, objectTypeId interface{}, relationKeys interface{}) *MockService_ObjectTypeRemoveRelations_Call {
	return &MockService_ObjectTypeRemoveRelations_Call{Call: _e.mock.On("ObjectTypeRemoveRelations", ctx, objectTypeId, relationKeys)}
}

func (_c *MockService_ObjectTypeRemoveRelations_Call) Run(run func(ctx context.Context, objectTypeId string, relationKeys []domain.RelationKey)) *MockService_ObjectTypeRemoveRelations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]domain.RelationKey))
	})
	return _c
}

func (_c *MockService_ObjectTypeRemoveRelations_Call) Return(_a0 error) *MockService_ObjectTypeRemoveRelations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_ObjectTypeRemoveRelations_Call) RunAndReturn(run func(context.Context, string, []domain.RelationKey) error) *MockService_ObjectTypeRemoveRelations_Call {
	_c.Call.Return(run)
	return _c
}

// SetDetails provides a mock function with given fields: ctx, objectId, details
func (_m *MockService) SetDetails(ctx session.Context, objectId string, details []*model.Detail) error {
	ret := _m.Called(ctx, objectId, details)

	if len(ret) == 0 {
		panic("no return value specified for SetDetails")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(session.Context, string, []*model.Detail) error); ok {
		r0 = rf(ctx, objectId, details)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_SetDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDetails'
type MockService_SetDetails_Call struct {
	*mock.Call
}

// SetDetails is a helper method to define mock.On call
//   - ctx session.Context
//   - objectId string
//   - details []*model.Detail
func (_e *MockService_Expecter) SetDetails(ctx interface{}, objectId interface{}, details interface{}) *MockService_SetDetails_Call {
	return &MockService_SetDetails_Call{Call: _e.mock.On("SetDetails", ctx, objectId, details)}
}

func (_c *MockService_SetDetails_Call) Run(run func(ctx session.Context, objectId string, details []*model.Detail)) *MockService_SetDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(session.Context), args[1].(string), args[2].([]*model.Detail))
	})
	return _c
}

func (_c *MockService_SetDetails_Call) Return(_a0 error) *MockService_SetDetails_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_SetDetails_Call) RunAndReturn(run func(session.Context, string, []*model.Detail) error) *MockService_SetDetails_Call {
	_c.Call.Return(run)
	return _c
}

// SetDetailsAndUpdateLastUsed provides a mock function with given fields: ctx, objectId, details
func (_m *MockService) SetDetailsAndUpdateLastUsed(ctx session.Context, objectId string, details []*model.Detail) error {
	ret := _m.Called(ctx, objectId, details)

	if len(ret) == 0 {
		panic("no return value specified for SetDetailsAndUpdateLastUsed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(session.Context, string, []*model.Detail) error); ok {
		r0 = rf(ctx, objectId, details)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_SetDetailsAndUpdateLastUsed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDetailsAndUpdateLastUsed'
type MockService_SetDetailsAndUpdateLastUsed_Call struct {
	*mock.Call
}

// SetDetailsAndUpdateLastUsed is a helper method to define mock.On call
//   - ctx session.Context
//   - objectId string
//   - details []*model.Detail
func (_e *MockService_Expecter) SetDetailsAndUpdateLastUsed(ctx interface{}, objectId interface{}, details interface{}) *MockService_SetDetailsAndUpdateLastUsed_Call {
	return &MockService_SetDetailsAndUpdateLastUsed_Call{Call: _e.mock.On("SetDetailsAndUpdateLastUsed", ctx, objectId, details)}
}

func (_c *MockService_SetDetailsAndUpdateLastUsed_Call) Run(run func(ctx session.Context, objectId string, details []*model.Detail)) *MockService_SetDetailsAndUpdateLastUsed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(session.Context), args[1].(string), args[2].([]*model.Detail))
	})
	return _c
}

func (_c *MockService_SetDetailsAndUpdateLastUsed_Call) Return(_a0 error) *MockService_SetDetailsAndUpdateLastUsed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_SetDetailsAndUpdateLastUsed_Call) RunAndReturn(run func(session.Context, string, []*model.Detail) error) *MockService_SetDetailsAndUpdateLastUsed_Call {
	_c.Call.Return(run)
	return _c
}

// SetDetailsList provides a mock function with given fields: ctx, objectIds, details
func (_m *MockService) SetDetailsList(ctx session.Context, objectIds []string, details []*model.Detail) error {
	ret := _m.Called(ctx, objectIds, details)

	if len(ret) == 0 {
		panic("no return value specified for SetDetailsList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(session.Context, []string, []*model.Detail) error); ok {
		r0 = rf(ctx, objectIds, details)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_SetDetailsList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDetailsList'
type MockService_SetDetailsList_Call struct {
	*mock.Call
}

// SetDetailsList is a helper method to define mock.On call
//   - ctx session.Context
//   - objectIds []string
//   - details []*model.Detail
func (_e *MockService_Expecter) SetDetailsList(ctx interface{}, objectIds interface{}, details interface{}) *MockService_SetDetailsList_Call {
	return &MockService_SetDetailsList_Call{Call: _e.mock.On("SetDetailsList", ctx, objectIds, details)}
}

func (_c *MockService_SetDetailsList_Call) Run(run func(ctx session.Context, objectIds []string, details []*model.Detail)) *MockService_SetDetailsList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(session.Context), args[1].([]string), args[2].([]*model.Detail))
	})
	return _c
}

func (_c *MockService_SetDetailsList_Call) Return(_a0 error) *MockService_SetDetailsList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_SetDetailsList_Call) RunAndReturn(run func(session.Context, []string, []*model.Detail) error) *MockService_SetDetailsList_Call {
	_c.Call.Return(run)
	return _c
}

// SetIsArchived provides a mock function with given fields: objectId, isArchived
func (_m *MockService) SetIsArchived(objectId string, isArchived bool) error {
	ret := _m.Called(objectId, isArchived)

	if len(ret) == 0 {
		panic("no return value specified for SetIsArchived")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(objectId, isArchived)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_SetIsArchived_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetIsArchived'
type MockService_SetIsArchived_Call struct {
	*mock.Call
}

// SetIsArchived is a helper method to define mock.On call
//   - objectId string
//   - isArchived bool
func (_e *MockService_Expecter) SetIsArchived(objectId interface{}, isArchived interface{}) *MockService_SetIsArchived_Call {
	return &MockService_SetIsArchived_Call{Call: _e.mock.On("SetIsArchived", objectId, isArchived)}
}

func (_c *MockService_SetIsArchived_Call) Run(run func(objectId string, isArchived bool)) *MockService_SetIsArchived_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *MockService_SetIsArchived_Call) Return(_a0 error) *MockService_SetIsArchived_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_SetIsArchived_Call) RunAndReturn(run func(string, bool) error) *MockService_SetIsArchived_Call {
	_c.Call.Return(run)
	return _c
}

// SetIsFavorite provides a mock function with given fields: objectId, isFavorite
func (_m *MockService) SetIsFavorite(objectId string, isFavorite bool) error {
	ret := _m.Called(objectId, isFavorite)

	if len(ret) == 0 {
		panic("no return value specified for SetIsFavorite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(objectId, isFavorite)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_SetIsFavorite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetIsFavorite'
type MockService_SetIsFavorite_Call struct {
	*mock.Call
}

// SetIsFavorite is a helper method to define mock.On call
//   - objectId string
//   - isFavorite bool
func (_e *MockService_Expecter) SetIsFavorite(objectId interface{}, isFavorite interface{}) *MockService_SetIsFavorite_Call {
	return &MockService_SetIsFavorite_Call{Call: _e.mock.On("SetIsFavorite", objectId, isFavorite)}
}

func (_c *MockService_SetIsFavorite_Call) Run(run func(objectId string, isFavorite bool)) *MockService_SetIsFavorite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *MockService_SetIsFavorite_Call) Return(_a0 error) *MockService_SetIsFavorite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_SetIsFavorite_Call) RunAndReturn(run func(string, bool) error) *MockService_SetIsFavorite_Call {
	_c.Call.Return(run)
	return _c
}

// SetListIsArchived provides a mock function with given fields: objectIds, isArchived
func (_m *MockService) SetListIsArchived(objectIds []string, isArchived bool) error {
	ret := _m.Called(objectIds, isArchived)

	if len(ret) == 0 {
		panic("no return value specified for SetListIsArchived")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, bool) error); ok {
		r0 = rf(objectIds, isArchived)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_SetListIsArchived_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetListIsArchived'
type MockService_SetListIsArchived_Call struct {
	*mock.Call
}

// SetListIsArchived is a helper method to define mock.On call
//   - objectIds []string
//   - isArchived bool
func (_e *MockService_Expecter) SetListIsArchived(objectIds interface{}, isArchived interface{}) *MockService_SetListIsArchived_Call {
	return &MockService_SetListIsArchived_Call{Call: _e.mock.On("SetListIsArchived", objectIds, isArchived)}
}

func (_c *MockService_SetListIsArchived_Call) Run(run func(objectIds []string, isArchived bool)) *MockService_SetListIsArchived_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string), args[1].(bool))
	})
	return _c
}

func (_c *MockService_SetListIsArchived_Call) Return(_a0 error) *MockService_SetListIsArchived_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_SetListIsArchived_Call) RunAndReturn(run func([]string, bool) error) *MockService_SetListIsArchived_Call {
	_c.Call.Return(run)
	return _c
}

// SetListIsFavorite provides a mock function with given fields: objectIds, isFavorite
func (_m *MockService) SetListIsFavorite(objectIds []string, isFavorite bool) error {
	ret := _m.Called(objectIds, isFavorite)

	if len(ret) == 0 {
		panic("no return value specified for SetListIsFavorite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, bool) error); ok {
		r0 = rf(objectIds, isFavorite)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_SetListIsFavorite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetListIsFavorite'
type MockService_SetListIsFavorite_Call struct {
	*mock.Call
}

// SetListIsFavorite is a helper method to define mock.On call
//   - objectIds []string
//   - isFavorite bool
func (_e *MockService_Expecter) SetListIsFavorite(objectIds interface{}, isFavorite interface{}) *MockService_SetListIsFavorite_Call {
	return &MockService_SetListIsFavorite_Call{Call: _e.mock.On("SetListIsFavorite", objectIds, isFavorite)}
}

func (_c *MockService_SetListIsFavorite_Call) Run(run func(objectIds []string, isFavorite bool)) *MockService_SetListIsFavorite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string), args[1].(bool))
	})
	return _c
}

func (_c *MockService_SetListIsFavorite_Call) Return(_a0 error) *MockService_SetListIsFavorite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_SetListIsFavorite_Call) RunAndReturn(run func([]string, bool) error) *MockService_SetListIsFavorite_Call {
	_c.Call.Return(run)
	return _c
}

// SetSpaceInfo provides a mock function with given fields: spaceId, details
func (_m *MockService) SetSpaceInfo(spaceId string, details *types.Struct) error {
	ret := _m.Called(spaceId, details)

	if len(ret) == 0 {
		panic("no return value specified for SetSpaceInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *types.Struct) error); ok {
		r0 = rf(spaceId, details)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_SetSpaceInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSpaceInfo'
type MockService_SetSpaceInfo_Call struct {
	*mock.Call
}

// SetSpaceInfo is a helper method to define mock.On call
//   - spaceId string
//   - details *types.Struct
func (_e *MockService_Expecter) SetSpaceInfo(spaceId interface{}, details interface{}) *MockService_SetSpaceInfo_Call {
	return &MockService_SetSpaceInfo_Call{Call: _e.mock.On("SetSpaceInfo", spaceId, details)}
}

func (_c *MockService_SetSpaceInfo_Call) Run(run func(spaceId string, details *types.Struct)) *MockService_SetSpaceInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*types.Struct))
	})
	return _c
}

func (_c *MockService_SetSpaceInfo_Call) Return(_a0 error) *MockService_SetSpaceInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_SetSpaceInfo_Call) RunAndReturn(run func(string, *types.Struct) error) *MockService_SetSpaceInfo_Call {
	_c.Call.Return(run)
	return _c
}

// SetWorkspaceDashboardId provides a mock function with given fields: ctx, workspaceId, id
func (_m *MockService) SetWorkspaceDashboardId(ctx session.Context, workspaceId string, id string) (string, error) {
	ret := _m.Called(ctx, workspaceId, id)

	if len(ret) == 0 {
		panic("no return value specified for SetWorkspaceDashboardId")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(session.Context, string, string) (string, error)); ok {
		return rf(ctx, workspaceId, id)
	}
	if rf, ok := ret.Get(0).(func(session.Context, string, string) string); ok {
		r0 = rf(ctx, workspaceId, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(session.Context, string, string) error); ok {
		r1 = rf(ctx, workspaceId, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_SetWorkspaceDashboardId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetWorkspaceDashboardId'
type MockService_SetWorkspaceDashboardId_Call struct {
	*mock.Call
}

// SetWorkspaceDashboardId is a helper method to define mock.On call
//   - ctx session.Context
//   - workspaceId string
//   - id string
func (_e *MockService_Expecter) SetWorkspaceDashboardId(ctx interface{}, workspaceId interface{}, id interface{}) *MockService_SetWorkspaceDashboardId_Call {
	return &MockService_SetWorkspaceDashboardId_Call{Call: _e.mock.On("SetWorkspaceDashboardId", ctx, workspaceId, id)}
}

func (_c *MockService_SetWorkspaceDashboardId_Call) Run(run func(ctx session.Context, workspaceId string, id string)) *MockService_SetWorkspaceDashboardId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(session.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockService_SetWorkspaceDashboardId_Call) Return(setId string, err error) *MockService_SetWorkspaceDashboardId_Call {
	_c.Call.Return(setId, err)
	return _c
}

func (_c *MockService_SetWorkspaceDashboardId_Call) RunAndReturn(run func(session.Context, string, string) (string, error)) *MockService_SetWorkspaceDashboardId_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
