// Code generated by mockery. DO NOT EDIT.

package mock_contact

import (
	app "github.com/anyproto/any-sync/app"

	context "context"

	crypto "github.com/anyproto/any-sync/util/crypto"

	mock "github.com/stretchr/testify/mock"

	model "github.com/anyproto/anytype-heart/pkg/lib/pb/model"
)

// MockidentityService is an autogenerated mock type for the identityService type
type MockidentityService struct {
	mock.Mock
}

type MockidentityService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockidentityService) EXPECT() *MockidentityService_Expecter {
	return &MockidentityService_Expecter{mock: &_m.Mock}
}

// AddObserver provides a mock function with given fields: spaceId, identity, observer
func (_m *MockidentityService) AddObserver(spaceId string, identity string, observer func(string, *model.IdentityProfile)) {
	_m.Called(spaceId, identity, observer)
}

// MockidentityService_AddObserver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddObserver'
type MockidentityService_AddObserver_Call struct {
	*mock.Call
}

// AddObserver is a helper method to define mock.On call
//   - spaceId string
//   - identity string
//   - observer func(string , *model.IdentityProfile)
func (_e *MockidentityService_Expecter) AddObserver(spaceId interface{}, identity interface{}, observer interface{}) *MockidentityService_AddObserver_Call {
	return &MockidentityService_AddObserver_Call{Call: _e.mock.On("AddObserver", spaceId, identity, observer)}
}

func (_c *MockidentityService_AddObserver_Call) Run(run func(spaceId string, identity string, observer func(string, *model.IdentityProfile))) *MockidentityService_AddObserver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(func(string, *model.IdentityProfile)))
	})
	return _c
}

func (_c *MockidentityService_AddObserver_Call) Return() *MockidentityService_AddObserver_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockidentityService_AddObserver_Call) RunAndReturn(run func(string, string, func(string, *model.IdentityProfile))) *MockidentityService_AddObserver_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: a
func (_m *MockidentityService) Init(a *app.App) error {
	ret := _m.Called(a)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockidentityService_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockidentityService_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - a *app.App
func (_e *MockidentityService_Expecter) Init(a interface{}) *MockidentityService_Init_Call {
	return &MockidentityService_Init_Call{Call: _e.mock.On("Init", a)}
}

func (_c *MockidentityService_Init_Call) Run(run func(a *app.App)) *MockidentityService_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app.App))
	})
	return _c
}

func (_c *MockidentityService_Init_Call) Return(err error) *MockidentityService_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockidentityService_Init_Call) RunAndReturn(run func(*app.App) error) *MockidentityService_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockidentityService) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockidentityService_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockidentityService_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockidentityService_Expecter) Name() *MockidentityService_Name_Call {
	return &MockidentityService_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockidentityService_Name_Call) Run(run func()) *MockidentityService_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockidentityService_Name_Call) Return(name string) *MockidentityService_Name_Call {
	_c.Call.Return(name)
	return _c
}

func (_c *MockidentityService_Name_Call) RunAndReturn(run func() string) *MockidentityService_Name_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterIdentity provides a mock function with given fields: spaceId, identity, encryptionKey, observer
func (_m *MockidentityService) RegisterIdentity(spaceId string, identity string, encryptionKey crypto.SymKey, observer func(string, *model.IdentityProfile)) error {
	ret := _m.Called(spaceId, identity, encryptionKey, observer)

	if len(ret) == 0 {
		panic("no return value specified for RegisterIdentity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, crypto.SymKey, func(string, *model.IdentityProfile)) error); ok {
		r0 = rf(spaceId, identity, encryptionKey, observer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockidentityService_RegisterIdentity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterIdentity'
type MockidentityService_RegisterIdentity_Call struct {
	*mock.Call
}

// RegisterIdentity is a helper method to define mock.On call
//   - spaceId string
//   - identity string
//   - encryptionKey crypto.SymKey
//   - observer func(string , *model.IdentityProfile)
func (_e *MockidentityService_Expecter) RegisterIdentity(spaceId interface{}, identity interface{}, encryptionKey interface{}, observer interface{}) *MockidentityService_RegisterIdentity_Call {
	return &MockidentityService_RegisterIdentity_Call{Call: _e.mock.On("RegisterIdentity", spaceId, identity, encryptionKey, observer)}
}

func (_c *MockidentityService_RegisterIdentity_Call) Run(run func(spaceId string, identity string, encryptionKey crypto.SymKey, observer func(string, *model.IdentityProfile))) *MockidentityService_RegisterIdentity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(crypto.SymKey), args[3].(func(string, *model.IdentityProfile)))
	})
	return _c
}

func (_c *MockidentityService_RegisterIdentity_Call) Return(_a0 error) *MockidentityService_RegisterIdentity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockidentityService_RegisterIdentity_Call) RunAndReturn(run func(string, string, crypto.SymKey, func(string, *model.IdentityProfile)) error) *MockidentityService_RegisterIdentity_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterIdentity provides a mock function with given fields: spaceId, identity
func (_m *MockidentityService) UnregisterIdentity(spaceId string, identity string) {
	_m.Called(spaceId, identity)
}

// MockidentityService_UnregisterIdentity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterIdentity'
type MockidentityService_UnregisterIdentity_Call struct {
	*mock.Call
}

// UnregisterIdentity is a helper method to define mock.On call
//   - spaceId string
//   - identity string
func (_e *MockidentityService_Expecter) UnregisterIdentity(spaceId interface{}, identity interface{}) *MockidentityService_UnregisterIdentity_Call {
	return &MockidentityService_UnregisterIdentity_Call{Call: _e.mock.On("UnregisterIdentity", spaceId, identity)}
}

func (_c *MockidentityService_UnregisterIdentity_Call) Run(run func(spaceId string, identity string)) *MockidentityService_UnregisterIdentity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockidentityService_UnregisterIdentity_Call) Return() *MockidentityService_UnregisterIdentity_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockidentityService_UnregisterIdentity_Call) RunAndReturn(run func(string, string)) *MockidentityService_UnregisterIdentity_Call {
	_c.Call.Return(run)
	return _c
}

// WaitProfile provides a mock function with given fields: ctx, identity
func (_m *MockidentityService) WaitProfile(ctx context.Context, identity string) *model.IdentityProfile {
	ret := _m.Called(ctx, identity)

	if len(ret) == 0 {
		panic("no return value specified for WaitProfile")
	}

	var r0 *model.IdentityProfile
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.IdentityProfile); ok {
		r0 = rf(ctx, identity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.IdentityProfile)
		}
	}

	return r0
}

// MockidentityService_WaitProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitProfile'
type MockidentityService_WaitProfile_Call struct {
	*mock.Call
}

// WaitProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - identity string
func (_e *MockidentityService_Expecter) WaitProfile(ctx interface{}, identity interface{}) *MockidentityService_WaitProfile_Call {
	return &MockidentityService_WaitProfile_Call{Call: _e.mock.On("WaitProfile", ctx, identity)}
}

func (_c *MockidentityService_WaitProfile_Call) Run(run func(ctx context.Context, identity string)) *MockidentityService_WaitProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockidentityService_WaitProfile_Call) Return(_a0 *model.IdentityProfile) *MockidentityService_WaitProfile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockidentityService_WaitProfile_Call) RunAndReturn(run func(context.Context, string) *model.IdentityProfile) *MockidentityService_WaitProfile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockidentityService creates a new instance of MockidentityService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockidentityService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockidentityService {
	mock := &MockidentityService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
