// Code generated by mockery. DO NOT EDIT.

package mock_techspace

import (
	spaceinfo "github.com/anyproto/anytype-heart/space/spaceinfo"
	mock "github.com/stretchr/testify/mock"

	types "github.com/gogo/protobuf/types"
)

// MockSpaceView is an autogenerated mock type for the SpaceView type
type MockSpaceView struct {
	mock.Mock
}

type MockSpaceView_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSpaceView) EXPECT() *MockSpaceView_Expecter {
	return &MockSpaceView_Expecter{mock: &_m.Mock}
}

// Lock provides a mock function with given fields:
func (_m *MockSpaceView) Lock() {
	_m.Called()
}

// MockSpaceView_Lock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lock'
type MockSpaceView_Lock_Call struct {
	*mock.Call
}

// Lock is a helper method to define mock.On call
func (_e *MockSpaceView_Expecter) Lock() *MockSpaceView_Lock_Call {
	return &MockSpaceView_Lock_Call{Call: _e.mock.On("Lock")}
}

func (_c *MockSpaceView_Lock_Call) Run(run func()) *MockSpaceView_Lock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSpaceView_Lock_Call) Return() *MockSpaceView_Lock_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSpaceView_Lock_Call) RunAndReturn(run func()) *MockSpaceView_Lock_Call {
	_c.Call.Return(run)
	return _c
}

// SetSpaceData provides a mock function with given fields: details
func (_m *MockSpaceView) SetSpaceData(details *types.Struct) error {
	ret := _m.Called(details)

	if len(ret) == 0 {
		panic("no return value specified for SetSpaceData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Struct) error); ok {
		r0 = rf(details)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSpaceView_SetSpaceData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSpaceData'
type MockSpaceView_SetSpaceData_Call struct {
	*mock.Call
}

// SetSpaceData is a helper method to define mock.On call
//   - details *types.Struct
func (_e *MockSpaceView_Expecter) SetSpaceData(details interface{}) *MockSpaceView_SetSpaceData_Call {
	return &MockSpaceView_SetSpaceData_Call{Call: _e.mock.On("SetSpaceData", details)}
}

func (_c *MockSpaceView_SetSpaceData_Call) Run(run func(details *types.Struct)) *MockSpaceView_SetSpaceData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.Struct))
	})
	return _c
}

func (_c *MockSpaceView_SetSpaceData_Call) Return(_a0 error) *MockSpaceView_SetSpaceData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpaceView_SetSpaceData_Call) RunAndReturn(run func(*types.Struct) error) *MockSpaceView_SetSpaceData_Call {
	_c.Call.Return(run)
	return _c
}

// SetSpaceLocalInfo provides a mock function with given fields: info
func (_m *MockSpaceView) SetSpaceLocalInfo(info spaceinfo.SpaceLocalInfo) error {
	ret := _m.Called(info)

	if len(ret) == 0 {
		panic("no return value specified for SetSpaceLocalInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(spaceinfo.SpaceLocalInfo) error); ok {
		r0 = rf(info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSpaceView_SetSpaceLocalInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSpaceLocalInfo'
type MockSpaceView_SetSpaceLocalInfo_Call struct {
	*mock.Call
}

// SetSpaceLocalInfo is a helper method to define mock.On call
//   - info spaceinfo.SpaceLocalInfo
func (_e *MockSpaceView_Expecter) SetSpaceLocalInfo(info interface{}) *MockSpaceView_SetSpaceLocalInfo_Call {
	return &MockSpaceView_SetSpaceLocalInfo_Call{Call: _e.mock.On("SetSpaceLocalInfo", info)}
}

func (_c *MockSpaceView_SetSpaceLocalInfo_Call) Run(run func(info spaceinfo.SpaceLocalInfo)) *MockSpaceView_SetSpaceLocalInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(spaceinfo.SpaceLocalInfo))
	})
	return _c
}

func (_c *MockSpaceView_SetSpaceLocalInfo_Call) Return(_a0 error) *MockSpaceView_SetSpaceLocalInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpaceView_SetSpaceLocalInfo_Call) RunAndReturn(run func(spaceinfo.SpaceLocalInfo) error) *MockSpaceView_SetSpaceLocalInfo_Call {
	_c.Call.Return(run)
	return _c
}

// SetSpacePersistentInfo provides a mock function with given fields: info
func (_m *MockSpaceView) SetSpacePersistentInfo(info spaceinfo.SpacePersistentInfo) error {
	ret := _m.Called(info)

	if len(ret) == 0 {
		panic("no return value specified for SetSpacePersistentInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(spaceinfo.SpacePersistentInfo) error); ok {
		r0 = rf(info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSpaceView_SetSpacePersistentInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSpacePersistentInfo'
type MockSpaceView_SetSpacePersistentInfo_Call struct {
	*mock.Call
}

// SetSpacePersistentInfo is a helper method to define mock.On call
//   - info spaceinfo.SpacePersistentInfo
func (_e *MockSpaceView_Expecter) SetSpacePersistentInfo(info interface{}) *MockSpaceView_SetSpacePersistentInfo_Call {
	return &MockSpaceView_SetSpacePersistentInfo_Call{Call: _e.mock.On("SetSpacePersistentInfo", info)}
}

func (_c *MockSpaceView_SetSpacePersistentInfo_Call) Run(run func(info spaceinfo.SpacePersistentInfo)) *MockSpaceView_SetSpacePersistentInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(spaceinfo.SpacePersistentInfo))
	})
	return _c
}

func (_c *MockSpaceView_SetSpacePersistentInfo_Call) Return(_a0 error) *MockSpaceView_SetSpacePersistentInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpaceView_SetSpacePersistentInfo_Call) RunAndReturn(run func(spaceinfo.SpacePersistentInfo) error) *MockSpaceView_SetSpacePersistentInfo_Call {
	_c.Call.Return(run)
	return _c
}

// Unlock provides a mock function with given fields:
func (_m *MockSpaceView) Unlock() {
	_m.Called()
}

// MockSpaceView_Unlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unlock'
type MockSpaceView_Unlock_Call struct {
	*mock.Call
}

// Unlock is a helper method to define mock.On call
func (_e *MockSpaceView_Expecter) Unlock() *MockSpaceView_Unlock_Call {
	return &MockSpaceView_Unlock_Call{Call: _e.mock.On("Unlock")}
}

func (_c *MockSpaceView_Unlock_Call) Run(run func()) *MockSpaceView_Unlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSpaceView_Unlock_Call) Return() *MockSpaceView_Unlock_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSpaceView_Unlock_Call) RunAndReturn(run func()) *MockSpaceView_Unlock_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSpaceView creates a new instance of MockSpaceView. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSpaceView(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSpaceView {
	mock := &MockSpaceView{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
