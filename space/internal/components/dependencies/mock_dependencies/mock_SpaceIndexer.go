// Code generated by mockery. DO NOT EDIT.

package mock_dependencies

import (
	app "github.com/anyproto/any-sync/app"
	clientspace "github.com/anyproto/anytype-heart/space/clientspace"

	mock "github.com/stretchr/testify/mock"
)

// MockSpaceIndexer is an autogenerated mock type for the SpaceIndexer type
type MockSpaceIndexer struct {
	mock.Mock
}

type MockSpaceIndexer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSpaceIndexer) EXPECT() *MockSpaceIndexer_Expecter {
	return &MockSpaceIndexer_Expecter{mock: &_m.Mock}
}

// Init provides a mock function with given fields: a
func (_m *MockSpaceIndexer) Init(a *app.App) error {
	ret := _m.Called(a)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSpaceIndexer_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockSpaceIndexer_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - a *app.App
func (_e *MockSpaceIndexer_Expecter) Init(a interface{}) *MockSpaceIndexer_Init_Call {
	return &MockSpaceIndexer_Init_Call{Call: _e.mock.On("Init", a)}
}

func (_c *MockSpaceIndexer_Init_Call) Run(run func(a *app.App)) *MockSpaceIndexer_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app.App))
	})
	return _c
}

func (_c *MockSpaceIndexer_Init_Call) Return(err error) *MockSpaceIndexer_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSpaceIndexer_Init_Call) RunAndReturn(run func(*app.App) error) *MockSpaceIndexer_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockSpaceIndexer) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSpaceIndexer_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockSpaceIndexer_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockSpaceIndexer_Expecter) Name() *MockSpaceIndexer_Name_Call {
	return &MockSpaceIndexer_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockSpaceIndexer_Name_Call) Run(run func()) *MockSpaceIndexer_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSpaceIndexer_Name_Call) Return(name string) *MockSpaceIndexer_Name_Call {
	_c.Call.Return(name)
	return _c
}

func (_c *MockSpaceIndexer_Name_Call) RunAndReturn(run func() string) *MockSpaceIndexer_Name_Call {
	_c.Call.Return(run)
	return _c
}

// ReindexMarketplaceSpace provides a mock function with given fields: space
func (_m *MockSpaceIndexer) ReindexMarketplaceSpace(space clientspace.Space) error {
	ret := _m.Called(space)

	if len(ret) == 0 {
		panic("no return value specified for ReindexMarketplaceSpace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(clientspace.Space) error); ok {
		r0 = rf(space)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSpaceIndexer_ReindexMarketplaceSpace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReindexMarketplaceSpace'
type MockSpaceIndexer_ReindexMarketplaceSpace_Call struct {
	*mock.Call
}

// ReindexMarketplaceSpace is a helper method to define mock.On call
//   - space clientspace.Space
func (_e *MockSpaceIndexer_Expecter) ReindexMarketplaceSpace(space interface{}) *MockSpaceIndexer_ReindexMarketplaceSpace_Call {
	return &MockSpaceIndexer_ReindexMarketplaceSpace_Call{Call: _e.mock.On("ReindexMarketplaceSpace", space)}
}

func (_c *MockSpaceIndexer_ReindexMarketplaceSpace_Call) Run(run func(space clientspace.Space)) *MockSpaceIndexer_ReindexMarketplaceSpace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(clientspace.Space))
	})
	return _c
}

func (_c *MockSpaceIndexer_ReindexMarketplaceSpace_Call) Return(_a0 error) *MockSpaceIndexer_ReindexMarketplaceSpace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpaceIndexer_ReindexMarketplaceSpace_Call) RunAndReturn(run func(clientspace.Space) error) *MockSpaceIndexer_ReindexMarketplaceSpace_Call {
	_c.Call.Return(run)
	return _c
}

// ReindexSpace provides a mock function with given fields: space
func (_m *MockSpaceIndexer) ReindexSpace(space clientspace.Space) error {
	ret := _m.Called(space)

	if len(ret) == 0 {
		panic("no return value specified for ReindexSpace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(clientspace.Space) error); ok {
		r0 = rf(space)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSpaceIndexer_ReindexSpace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReindexSpace'
type MockSpaceIndexer_ReindexSpace_Call struct {
	*mock.Call
}

// ReindexSpace is a helper method to define mock.On call
//   - space clientspace.Space
func (_e *MockSpaceIndexer_Expecter) ReindexSpace(space interface{}) *MockSpaceIndexer_ReindexSpace_Call {
	return &MockSpaceIndexer_ReindexSpace_Call{Call: _e.mock.On("ReindexSpace", space)}
}

func (_c *MockSpaceIndexer_ReindexSpace_Call) Run(run func(space clientspace.Space)) *MockSpaceIndexer_ReindexSpace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(clientspace.Space))
	})
	return _c
}

func (_c *MockSpaceIndexer_ReindexSpace_Call) Return(_a0 error) *MockSpaceIndexer_ReindexSpace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpaceIndexer_ReindexSpace_Call) RunAndReturn(run func(clientspace.Space) error) *MockSpaceIndexer_ReindexSpace_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAclIndexes provides a mock function with given fields: spaceID
func (_m *MockSpaceIndexer) RemoveAclIndexes(spaceID string) error {
	ret := _m.Called(spaceID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAclIndexes")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(spaceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSpaceIndexer_RemoveAclIndexes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAclIndexes'
type MockSpaceIndexer_RemoveAclIndexes_Call struct {
	*mock.Call
}

// RemoveAclIndexes is a helper method to define mock.On call
//   - spaceID string
func (_e *MockSpaceIndexer_Expecter) RemoveAclIndexes(spaceID interface{}) *MockSpaceIndexer_RemoveAclIndexes_Call {
	return &MockSpaceIndexer_RemoveAclIndexes_Call{Call: _e.mock.On("RemoveAclIndexes", spaceID)}
}

func (_c *MockSpaceIndexer_RemoveAclIndexes_Call) Run(run func(spaceID string)) *MockSpaceIndexer_RemoveAclIndexes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSpaceIndexer_RemoveAclIndexes_Call) Return(err error) *MockSpaceIndexer_RemoveAclIndexes_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSpaceIndexer_RemoveAclIndexes_Call) RunAndReturn(run func(string) error) *MockSpaceIndexer_RemoveAclIndexes_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveIndexes provides a mock function with given fields: spaceID
func (_m *MockSpaceIndexer) RemoveIndexes(spaceID string) error {
	ret := _m.Called(spaceID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveIndexes")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(spaceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSpaceIndexer_RemoveIndexes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveIndexes'
type MockSpaceIndexer_RemoveIndexes_Call struct {
	*mock.Call
}

// RemoveIndexes is a helper method to define mock.On call
//   - spaceID string
func (_e *MockSpaceIndexer_Expecter) RemoveIndexes(spaceID interface{}) *MockSpaceIndexer_RemoveIndexes_Call {
	return &MockSpaceIndexer_RemoveIndexes_Call{Call: _e.mock.On("RemoveIndexes", spaceID)}
}

func (_c *MockSpaceIndexer_RemoveIndexes_Call) Run(run func(spaceID string)) *MockSpaceIndexer_RemoveIndexes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSpaceIndexer_RemoveIndexes_Call) Return(err error) *MockSpaceIndexer_RemoveIndexes_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSpaceIndexer_RemoveIndexes_Call) RunAndReturn(run func(string) error) *MockSpaceIndexer_RemoveIndexes_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSpaceIndexer creates a new instance of MockSpaceIndexer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSpaceIndexer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSpaceIndexer {
	mock := &MockSpaceIndexer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
