// Code generated by mockery. DO NOT EDIT.

package mock_personalmigration

import (
	context "context"

	app "github.com/anyproto/any-sync/app"

	domain "github.com/anyproto/anytype-heart/core/domain"

	filemodels "github.com/anyproto/anytype-heart/core/files/fileobject/filemodels"

	fileobject "github.com/anyproto/anytype-heart/core/block/editor/fileobject"

	mock "github.com/stretchr/testify/mock"
)

// MockfileObjectGetter is an autogenerated mock type for the fileObjectGetter type
type MockfileObjectGetter struct {
	mock.Mock
}

type MockfileObjectGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockfileObjectGetter) EXPECT() *MockfileObjectGetter_Expecter {
	return &MockfileObjectGetter_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, spaceId, req
func (_m *MockfileObjectGetter) Create(ctx context.Context, spaceId string, req filemodels.CreateRequest) (string, *domain.Details, error) {
	ret := _m.Called(ctx, spaceId, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 *domain.Details
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, filemodels.CreateRequest) (string, *domain.Details, error)); ok {
		return rf(ctx, spaceId, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, filemodels.CreateRequest) string); ok {
		r0 = rf(ctx, spaceId, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, filemodels.CreateRequest) *domain.Details); ok {
		r1 = rf(ctx, spaceId, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.Details)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, filemodels.CreateRequest) error); ok {
		r2 = rf(ctx, spaceId, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockfileObjectGetter_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockfileObjectGetter_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - spaceId string
//   - req filemodels.CreateRequest
func (_e *MockfileObjectGetter_Expecter) Create(ctx interface{}, spaceId interface{}, req interface{}) *MockfileObjectGetter_Create_Call {
	return &MockfileObjectGetter_Create_Call{Call: _e.mock.On("Create", ctx, spaceId, req)}
}

func (_c *MockfileObjectGetter_Create_Call) Run(run func(ctx context.Context, spaceId string, req filemodels.CreateRequest)) *MockfileObjectGetter_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(filemodels.CreateRequest))
	})
	return _c
}

func (_c *MockfileObjectGetter_Create_Call) Return(id string, object *domain.Details, err error) *MockfileObjectGetter_Create_Call {
	_c.Call.Return(id, object, err)
	return _c
}

func (_c *MockfileObjectGetter_Create_Call) RunAndReturn(run func(context.Context, string, filemodels.CreateRequest) (string, *domain.Details, error)) *MockfileObjectGetter_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DoFileWaitLoad provides a mock function with given fields: ctx, objectId, proc
func (_m *MockfileObjectGetter) DoFileWaitLoad(ctx context.Context, objectId string, proc func(fileobject.FileObject) error) error {
	ret := _m.Called(ctx, objectId, proc)

	if len(ret) == 0 {
		panic("no return value specified for DoFileWaitLoad")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, func(fileobject.FileObject) error) error); ok {
		r0 = rf(ctx, objectId, proc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockfileObjectGetter_DoFileWaitLoad_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoFileWaitLoad'
type MockfileObjectGetter_DoFileWaitLoad_Call struct {
	*mock.Call
}

// DoFileWaitLoad is a helper method to define mock.On call
//   - ctx context.Context
//   - objectId string
//   - proc func(fileobject.FileObject) error
func (_e *MockfileObjectGetter_Expecter) DoFileWaitLoad(ctx interface{}, objectId interface{}, proc interface{}) *MockfileObjectGetter_DoFileWaitLoad_Call {
	return &MockfileObjectGetter_DoFileWaitLoad_Call{Call: _e.mock.On("DoFileWaitLoad", ctx, objectId, proc)}
}

func (_c *MockfileObjectGetter_DoFileWaitLoad_Call) Run(run func(ctx context.Context, objectId string, proc func(fileobject.FileObject) error)) *MockfileObjectGetter_DoFileWaitLoad_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(func(fileobject.FileObject) error))
	})
	return _c
}

func (_c *MockfileObjectGetter_DoFileWaitLoad_Call) Return(_a0 error) *MockfileObjectGetter_DoFileWaitLoad_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockfileObjectGetter_DoFileWaitLoad_Call) RunAndReturn(run func(context.Context, string, func(fileobject.FileObject) error) error) *MockfileObjectGetter_DoFileWaitLoad_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: a
func (_m *MockfileObjectGetter) Init(a *app.App) error {
	ret := _m.Called(a)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockfileObjectGetter_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockfileObjectGetter_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - a *app.App
func (_e *MockfileObjectGetter_Expecter) Init(a interface{}) *MockfileObjectGetter_Init_Call {
	return &MockfileObjectGetter_Init_Call{Call: _e.mock.On("Init", a)}
}

func (_c *MockfileObjectGetter_Init_Call) Run(run func(a *app.App)) *MockfileObjectGetter_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app.App))
	})
	return _c
}

func (_c *MockfileObjectGetter_Init_Call) Return(err error) *MockfileObjectGetter_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockfileObjectGetter_Init_Call) RunAndReturn(run func(*app.App) error) *MockfileObjectGetter_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockfileObjectGetter) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockfileObjectGetter_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockfileObjectGetter_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockfileObjectGetter_Expecter) Name() *MockfileObjectGetter_Name_Call {
	return &MockfileObjectGetter_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockfileObjectGetter_Name_Call) Run(run func()) *MockfileObjectGetter_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockfileObjectGetter_Name_Call) Return(name string) *MockfileObjectGetter_Name_Call {
	_c.Call.Return(name)
	return _c
}

func (_c *MockfileObjectGetter_Name_Call) RunAndReturn(run func() string) *MockfileObjectGetter_Name_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockfileObjectGetter creates a new instance of MockfileObjectGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockfileObjectGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockfileObjectGetter {
	mock := &MockfileObjectGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
