// Code generated by mockery. DO NOT EDIT.

package mock_spaceloader

import (
	context "context"

	app "github.com/anyproto/any-sync/app"
	clientspace "github.com/anyproto/anytype-heart/space/clientspace"

	mock "github.com/stretchr/testify/mock"
)

// MockSpaceLoader is an autogenerated mock type for the SpaceLoader type
type MockSpaceLoader struct {
	mock.Mock
}

type MockSpaceLoader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSpaceLoader) EXPECT() *MockSpaceLoader_Expecter {
	return &MockSpaceLoader_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: ctx
func (_m *MockSpaceLoader) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSpaceLoader_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockSpaceLoader_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSpaceLoader_Expecter) Close(ctx interface{}) *MockSpaceLoader_Close_Call {
	return &MockSpaceLoader_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *MockSpaceLoader_Close_Call) Run(run func(ctx context.Context)) *MockSpaceLoader_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSpaceLoader_Close_Call) Return(err error) *MockSpaceLoader_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSpaceLoader_Close_Call) RunAndReturn(run func(context.Context) error) *MockSpaceLoader_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: a
func (_m *MockSpaceLoader) Init(a *app.App) error {
	ret := _m.Called(a)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSpaceLoader_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockSpaceLoader_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - a *app.App
func (_e *MockSpaceLoader_Expecter) Init(a interface{}) *MockSpaceLoader_Init_Call {
	return &MockSpaceLoader_Init_Call{Call: _e.mock.On("Init", a)}
}

func (_c *MockSpaceLoader_Init_Call) Run(run func(a *app.App)) *MockSpaceLoader_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app.App))
	})
	return _c
}

func (_c *MockSpaceLoader_Init_Call) Return(err error) *MockSpaceLoader_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSpaceLoader_Init_Call) RunAndReturn(run func(*app.App) error) *MockSpaceLoader_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockSpaceLoader) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSpaceLoader_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockSpaceLoader_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockSpaceLoader_Expecter) Name() *MockSpaceLoader_Name_Call {
	return &MockSpaceLoader_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockSpaceLoader_Name_Call) Run(run func()) *MockSpaceLoader_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSpaceLoader_Name_Call) Return(name string) *MockSpaceLoader_Name_Call {
	_c.Call.Return(name)
	return _c
}

func (_c *MockSpaceLoader_Name_Call) RunAndReturn(run func() string) *MockSpaceLoader_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: ctx
func (_m *MockSpaceLoader) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSpaceLoader_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockSpaceLoader_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSpaceLoader_Expecter) Run(ctx interface{}) *MockSpaceLoader_Run_Call {
	return &MockSpaceLoader_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *MockSpaceLoader_Run_Call) Run(run func(ctx context.Context)) *MockSpaceLoader_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSpaceLoader_Run_Call) Return(err error) *MockSpaceLoader_Run_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSpaceLoader_Run_Call) RunAndReturn(run func(context.Context) error) *MockSpaceLoader_Run_Call {
	_c.Call.Return(run)
	return _c
}

// WaitLoad provides a mock function with given fields: ctx
func (_m *MockSpaceLoader) WaitLoad(ctx context.Context) (clientspace.Space, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WaitLoad")
	}

	var r0 clientspace.Space
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (clientspace.Space, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) clientspace.Space); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clientspace.Space)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSpaceLoader_WaitLoad_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitLoad'
type MockSpaceLoader_WaitLoad_Call struct {
	*mock.Call
}

// WaitLoad is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSpaceLoader_Expecter) WaitLoad(ctx interface{}) *MockSpaceLoader_WaitLoad_Call {
	return &MockSpaceLoader_WaitLoad_Call{Call: _e.mock.On("WaitLoad", ctx)}
}

func (_c *MockSpaceLoader_WaitLoad_Call) Run(run func(ctx context.Context)) *MockSpaceLoader_WaitLoad_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSpaceLoader_WaitLoad_Call) Return(sp clientspace.Space, err error) *MockSpaceLoader_WaitLoad_Call {
	_c.Call.Return(sp, err)
	return _c
}

func (_c *MockSpaceLoader_WaitLoad_Call) RunAndReturn(run func(context.Context) (clientspace.Space, error)) *MockSpaceLoader_WaitLoad_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSpaceLoader creates a new instance of MockSpaceLoader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSpaceLoader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSpaceLoader {
	mock := &MockSpaceLoader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
