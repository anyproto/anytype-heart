// Code generated by mockery v2.38.0. DO NOT EDIT.

package mock_space

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Mockoffloader is an autogenerated mock type for the offloader type
type Mockoffloader struct {
	mock.Mock
}

type Mockoffloader_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockoffloader) EXPECT() *Mockoffloader_Expecter {
	return &Mockoffloader_Expecter{mock: &_m.Mock}
}

// offload provides a mock function with given fields: ctx, id
func (_m *Mockoffloader) offload(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for offload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockoffloader_offload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'offload'
type Mockoffloader_offload_Call struct {
	*mock.Call
}

// offload is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Mockoffloader_Expecter) offload(ctx interface{}, id interface{}) *Mockoffloader_offload_Call {
	return &Mockoffloader_offload_Call{Call: _e.mock.On("offload", ctx, id)}
}

func (_c *Mockoffloader_offload_Call) Run(run func(ctx context.Context, id string)) *Mockoffloader_offload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Mockoffloader_offload_Call) Return(err error) *Mockoffloader_offload_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Mockoffloader_offload_Call) RunAndReturn(run func(context.Context, string) error) *Mockoffloader_offload_Call {
	_c.Call.Return(run)
	return _c
}

// onOffload provides a mock function with given fields: id, err
func (_m *Mockoffloader) onOffload(id string, err error) {
	_m.Called(id, err)
}

// Mockoffloader_onOffload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'onOffload'
type Mockoffloader_onOffload_Call struct {
	*mock.Call
}

// onOffload is a helper method to define mock.On call
//   - id string
//   - err error
func (_e *Mockoffloader_Expecter) onOffload(id interface{}, err interface{}) *Mockoffloader_onOffload_Call {
	return &Mockoffloader_onOffload_Call{Call: _e.mock.On("onOffload", id, err)}
}

func (_c *Mockoffloader_onOffload_Call) Run(run func(id string, err error)) *Mockoffloader_onOffload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(error))
	})
	return _c
}

func (_c *Mockoffloader_onOffload_Call) Return() *Mockoffloader_onOffload_Call {
	_c.Call.Return()
	return _c
}

func (_c *Mockoffloader_onOffload_Call) RunAndReturn(run func(string, error)) *Mockoffloader_onOffload_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockoffloader creates a new instance of Mockoffloader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockoffloader(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockoffloader {
	mock := &Mockoffloader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
