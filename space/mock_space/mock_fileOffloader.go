// Code generated by mockery v2.35.2. DO NOT EDIT.

package mock_space

import (
	context "context"

	app "github.com/anyproto/any-sync/app"

	mock "github.com/stretchr/testify/mock"
)

// MockfileOffloader is an autogenerated mock type for the fileOffloader type
type MockfileOffloader struct {
	mock.Mock
}

type MockfileOffloader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockfileOffloader) EXPECT() *MockfileOffloader_Expecter {
	return &MockfileOffloader_Expecter{mock: &_m.Mock}
}

// FilesSpaceOffload provides a mock function with given fields: ctx, spaceID
func (_m *MockfileOffloader) FilesSpaceOffload(ctx context.Context, spaceID string) error {
	ret := _m.Called(ctx, spaceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, spaceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockfileOffloader_FilesSpaceOffload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilesSpaceOffload'
type MockfileOffloader_FilesSpaceOffload_Call struct {
	*mock.Call
}

// FilesSpaceOffload is a helper method to define mock.On call
//   - ctx context.Context
//   - spaceID string
func (_e *MockfileOffloader_Expecter) FilesSpaceOffload(ctx interface{}, spaceID interface{}) *MockfileOffloader_FilesSpaceOffload_Call {
	return &MockfileOffloader_FilesSpaceOffload_Call{Call: _e.mock.On("FilesSpaceOffload", ctx, spaceID)}
}

func (_c *MockfileOffloader_FilesSpaceOffload_Call) Run(run func(ctx context.Context, spaceID string)) *MockfileOffloader_FilesSpaceOffload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockfileOffloader_FilesSpaceOffload_Call) Return(err error) *MockfileOffloader_FilesSpaceOffload_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockfileOffloader_FilesSpaceOffload_Call) RunAndReturn(run func(context.Context, string) error) *MockfileOffloader_FilesSpaceOffload_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: a
func (_m *MockfileOffloader) Init(a *app.App) error {
	ret := _m.Called(a)

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockfileOffloader_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockfileOffloader_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - a *app.App
func (_e *MockfileOffloader_Expecter) Init(a interface{}) *MockfileOffloader_Init_Call {
	return &MockfileOffloader_Init_Call{Call: _e.mock.On("Init", a)}
}

func (_c *MockfileOffloader_Init_Call) Run(run func(a *app.App)) *MockfileOffloader_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app.App))
	})
	return _c
}

func (_c *MockfileOffloader_Init_Call) Return(err error) *MockfileOffloader_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockfileOffloader_Init_Call) RunAndReturn(run func(*app.App) error) *MockfileOffloader_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockfileOffloader) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockfileOffloader_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockfileOffloader_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockfileOffloader_Expecter) Name() *MockfileOffloader_Name_Call {
	return &MockfileOffloader_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockfileOffloader_Name_Call) Run(run func()) *MockfileOffloader_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockfileOffloader_Name_Call) Return(name string) *MockfileOffloader_Name_Call {
	_c.Call.Return(name)
	return _c
}

func (_c *MockfileOffloader_Name_Call) RunAndReturn(run func() string) *MockfileOffloader_Name_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockfileOffloader creates a new instance of MockfileOffloader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockfileOffloader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockfileOffloader {
	mock := &MockfileOffloader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
