// Code generated by mockery v2.35.2. DO NOT EDIT.

package mock_space

import (
	app "github.com/anyproto/any-sync/app"
	mock "github.com/stretchr/testify/mock"

	space "github.com/anyproto/anytype-heart/space"
)

// MockspaceIndexer is an autogenerated mock type for the spaceIndexer type
type MockspaceIndexer struct {
	mock.Mock
}

type MockspaceIndexer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockspaceIndexer) EXPECT() *MockspaceIndexer_Expecter {
	return &MockspaceIndexer_Expecter{mock: &_m.Mock}
}

// Init provides a mock function with given fields: a
func (_m *MockspaceIndexer) Init(a *app.App) error {
	ret := _m.Called(a)

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockspaceIndexer_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockspaceIndexer_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - a *app.App
func (_e *MockspaceIndexer_Expecter) Init(a interface{}) *MockspaceIndexer_Init_Call {
	return &MockspaceIndexer_Init_Call{Call: _e.mock.On("Init", a)}
}

func (_c *MockspaceIndexer_Init_Call) Run(run func(a *app.App)) *MockspaceIndexer_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app.App))
	})
	return _c
}

func (_c *MockspaceIndexer_Init_Call) Return(err error) *MockspaceIndexer_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockspaceIndexer_Init_Call) RunAndReturn(run func(*app.App) error) *MockspaceIndexer_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockspaceIndexer) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockspaceIndexer_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockspaceIndexer_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockspaceIndexer_Expecter) Name() *MockspaceIndexer_Name_Call {
	return &MockspaceIndexer_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockspaceIndexer_Name_Call) Run(run func()) *MockspaceIndexer_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockspaceIndexer_Name_Call) Return(name string) *MockspaceIndexer_Name_Call {
	_c.Call.Return(name)
	return _c
}

func (_c *MockspaceIndexer_Name_Call) RunAndReturn(run func() string) *MockspaceIndexer_Name_Call {
	_c.Call.Return(run)
	return _c
}

// ReindexMarketplaceSpace provides a mock function with given fields: _a0
func (_m *MockspaceIndexer) ReindexMarketplaceSpace(_a0 space.Space) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(space.Space) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockspaceIndexer_ReindexMarketplaceSpace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReindexMarketplaceSpace'
type MockspaceIndexer_ReindexMarketplaceSpace_Call struct {
	*mock.Call
}

// ReindexMarketplaceSpace is a helper method to define mock.On call
//   - _a0 space.Space
func (_e *MockspaceIndexer_Expecter) ReindexMarketplaceSpace(_a0 interface{}) *MockspaceIndexer_ReindexMarketplaceSpace_Call {
	return &MockspaceIndexer_ReindexMarketplaceSpace_Call{Call: _e.mock.On("ReindexMarketplaceSpace", _a0)}
}

func (_c *MockspaceIndexer_ReindexMarketplaceSpace_Call) Run(run func(_a0 space.Space)) *MockspaceIndexer_ReindexMarketplaceSpace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(space.Space))
	})
	return _c
}

func (_c *MockspaceIndexer_ReindexMarketplaceSpace_Call) Return(_a0 error) *MockspaceIndexer_ReindexMarketplaceSpace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockspaceIndexer_ReindexMarketplaceSpace_Call) RunAndReturn(run func(space.Space) error) *MockspaceIndexer_ReindexMarketplaceSpace_Call {
	_c.Call.Return(run)
	return _c
}

// ReindexSpace provides a mock function with given fields: _a0
func (_m *MockspaceIndexer) ReindexSpace(_a0 space.Space) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(space.Space) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockspaceIndexer_ReindexSpace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReindexSpace'
type MockspaceIndexer_ReindexSpace_Call struct {
	*mock.Call
}

// ReindexSpace is a helper method to define mock.On call
//   - _a0 space.Space
func (_e *MockspaceIndexer_Expecter) ReindexSpace(_a0 interface{}) *MockspaceIndexer_ReindexSpace_Call {
	return &MockspaceIndexer_ReindexSpace_Call{Call: _e.mock.On("ReindexSpace", _a0)}
}

func (_c *MockspaceIndexer_ReindexSpace_Call) Run(run func(_a0 space.Space)) *MockspaceIndexer_ReindexSpace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(space.Space))
	})
	return _c
}

func (_c *MockspaceIndexer_ReindexSpace_Call) Return(_a0 error) *MockspaceIndexer_ReindexSpace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockspaceIndexer_ReindexSpace_Call) RunAndReturn(run func(space.Space) error) *MockspaceIndexer_ReindexSpace_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveIndexes provides a mock function with given fields: spaceID
func (_m *MockspaceIndexer) RemoveIndexes(spaceID string) error {
	ret := _m.Called(spaceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(spaceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockspaceIndexer_RemoveIndexes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveIndexes'
type MockspaceIndexer_RemoveIndexes_Call struct {
	*mock.Call
}

// RemoveIndexes is a helper method to define mock.On call
//   - spaceID string
func (_e *MockspaceIndexer_Expecter) RemoveIndexes(spaceID interface{}) *MockspaceIndexer_RemoveIndexes_Call {
	return &MockspaceIndexer_RemoveIndexes_Call{Call: _e.mock.On("RemoveIndexes", spaceID)}
}

func (_c *MockspaceIndexer_RemoveIndexes_Call) Run(run func(spaceID string)) *MockspaceIndexer_RemoveIndexes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockspaceIndexer_RemoveIndexes_Call) Return(err error) *MockspaceIndexer_RemoveIndexes_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockspaceIndexer_RemoveIndexes_Call) RunAndReturn(run func(string) error) *MockspaceIndexer_RemoveIndexes_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockspaceIndexer creates a new instance of MockspaceIndexer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockspaceIndexer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockspaceIndexer {
	mock := &MockspaceIndexer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
