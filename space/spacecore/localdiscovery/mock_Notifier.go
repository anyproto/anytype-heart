// Code generated by mockery. DO NOT EDIT.

package localdiscovery

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockNotifier is an autogenerated mock type for the Notifier type
type MockNotifier struct {
	mock.Mock
}

type MockNotifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotifier) EXPECT() *MockNotifier_Expecter {
	return &MockNotifier_Expecter{mock: &_m.Mock}
}

// PeerDiscovered provides a mock function with given fields: ctx, peer, own
func (_m *MockNotifier) PeerDiscovered(ctx context.Context, peer DiscoveredPeer, own OwnAddresses) {
	_m.Called(ctx, peer, own)
}

// MockNotifier_PeerDiscovered_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PeerDiscovered'
type MockNotifier_PeerDiscovered_Call struct {
	*mock.Call
}

// PeerDiscovered is a helper method to define mock.On call
//   - ctx context.Context
//   - peer DiscoveredPeer
//   - own OwnAddresses
func (_e *MockNotifier_Expecter) PeerDiscovered(ctx interface{}, peer interface{}, own interface{}) *MockNotifier_PeerDiscovered_Call {
	return &MockNotifier_PeerDiscovered_Call{Call: _e.mock.On("PeerDiscovered", ctx, peer, own)}
}

func (_c *MockNotifier_PeerDiscovered_Call) Run(run func(ctx context.Context, peer DiscoveredPeer, own OwnAddresses)) *MockNotifier_PeerDiscovered_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DiscoveredPeer), args[2].(OwnAddresses))
	})
	return _c
}

func (_c *MockNotifier_PeerDiscovered_Call) Return() *MockNotifier_PeerDiscovered_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNotifier_PeerDiscovered_Call) RunAndReturn(run func(context.Context, DiscoveredPeer, OwnAddresses)) *MockNotifier_PeerDiscovered_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotifier creates a new instance of MockNotifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotifier {
	mock := &MockNotifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
