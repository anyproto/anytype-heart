// Code generated by mockery v2.38.0. DO NOT EDIT.

package mock_spacecore

import (
	commonspace "github.com/anyproto/any-sync/commonspace"
	mock "github.com/stretchr/testify/mock"
)

// MocksyncStatusService is an autogenerated mock type for the syncStatusService type
type MocksyncStatusService struct {
	mock.Mock
}

type MocksyncStatusService_Expecter struct {
	mock *mock.Mock
}

func (_m *MocksyncStatusService) EXPECT() *MocksyncStatusService_Expecter {
	return &MocksyncStatusService_Expecter{mock: &_m.Mock}
}

// RegisterSpace provides a mock function with given fields: space
func (_m *MocksyncStatusService) RegisterSpace(space commonspace.Space) {
	_m.Called(space)
}

// MocksyncStatusService_RegisterSpace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterSpace'
type MocksyncStatusService_RegisterSpace_Call struct {
	*mock.Call
}

// RegisterSpace is a helper method to define mock.On call
//   - space commonspace.Space
func (_e *MocksyncStatusService_Expecter) RegisterSpace(space interface{}) *MocksyncStatusService_RegisterSpace_Call {
	return &MocksyncStatusService_RegisterSpace_Call{Call: _e.mock.On("RegisterSpace", space)}
}

func (_c *MocksyncStatusService_RegisterSpace_Call) Run(run func(space commonspace.Space)) *MocksyncStatusService_RegisterSpace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(commonspace.Space))
	})
	return _c
}

func (_c *MocksyncStatusService_RegisterSpace_Call) Return() *MocksyncStatusService_RegisterSpace_Call {
	_c.Call.Return()
	return _c
}

func (_c *MocksyncStatusService_RegisterSpace_Call) RunAndReturn(run func(commonspace.Space)) *MocksyncStatusService_RegisterSpace_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterSpace provides a mock function with given fields: space
func (_m *MocksyncStatusService) UnregisterSpace(space commonspace.Space) {
	_m.Called(space)
}

// MocksyncStatusService_UnregisterSpace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterSpace'
type MocksyncStatusService_UnregisterSpace_Call struct {
	*mock.Call
}

// UnregisterSpace is a helper method to define mock.On call
//   - space commonspace.Space
func (_e *MocksyncStatusService_Expecter) UnregisterSpace(space interface{}) *MocksyncStatusService_UnregisterSpace_Call {
	return &MocksyncStatusService_UnregisterSpace_Call{Call: _e.mock.On("UnregisterSpace", space)}
}

func (_c *MocksyncStatusService_UnregisterSpace_Call) Run(run func(space commonspace.Space)) *MocksyncStatusService_UnregisterSpace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(commonspace.Space))
	})
	return _c
}

func (_c *MocksyncStatusService_UnregisterSpace_Call) Return() *MocksyncStatusService_UnregisterSpace_Call {
	_c.Call.Return()
	return _c
}

func (_c *MocksyncStatusService_UnregisterSpace_Call) RunAndReturn(run func(commonspace.Space)) *MocksyncStatusService_UnregisterSpace_Call {
	_c.Call.Return(run)
	return _c
}

// NewMocksyncStatusService creates a new instance of MocksyncStatusService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocksyncStatusService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MocksyncStatusService {
	mock := &MocksyncStatusService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
