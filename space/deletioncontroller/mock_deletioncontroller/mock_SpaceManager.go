// Code generated by mockery. DO NOT EDIT.

package mock_deletioncontroller

import (
	context "context"

	app "github.com/anyproto/any-sync/app"

	mock "github.com/stretchr/testify/mock"

	spaceinfo "github.com/anyproto/anytype-heart/space/spaceinfo"
)

// MockSpaceManager is an autogenerated mock type for the SpaceManager type
type MockSpaceManager struct {
	mock.Mock
}

type MockSpaceManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSpaceManager) EXPECT() *MockSpaceManager_Expecter {
	return &MockSpaceManager_Expecter{mock: &_m.Mock}
}

// AllSpaceIds provides a mock function with given fields:
func (_m *MockSpaceManager) AllSpaceIds() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AllSpaceIds")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockSpaceManager_AllSpaceIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllSpaceIds'
type MockSpaceManager_AllSpaceIds_Call struct {
	*mock.Call
}

// AllSpaceIds is a helper method to define mock.On call
func (_e *MockSpaceManager_Expecter) AllSpaceIds() *MockSpaceManager_AllSpaceIds_Call {
	return &MockSpaceManager_AllSpaceIds_Call{Call: _e.mock.On("AllSpaceIds")}
}

func (_c *MockSpaceManager_AllSpaceIds_Call) Run(run func()) *MockSpaceManager_AllSpaceIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSpaceManager_AllSpaceIds_Call) Return(ids []string) *MockSpaceManager_AllSpaceIds_Call {
	_c.Call.Return(ids)
	return _c
}

func (_c *MockSpaceManager_AllSpaceIds_Call) RunAndReturn(run func() []string) *MockSpaceManager_AllSpaceIds_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: a
func (_m *MockSpaceManager) Init(a *app.App) error {
	ret := _m.Called(a)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSpaceManager_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockSpaceManager_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - a *app.App
func (_e *MockSpaceManager_Expecter) Init(a interface{}) *MockSpaceManager_Init_Call {
	return &MockSpaceManager_Init_Call{Call: _e.mock.On("Init", a)}
}

func (_c *MockSpaceManager_Init_Call) Run(run func(a *app.App)) *MockSpaceManager_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app.App))
	})
	return _c
}

func (_c *MockSpaceManager_Init_Call) Return(err error) *MockSpaceManager_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSpaceManager_Init_Call) RunAndReturn(run func(*app.App) error) *MockSpaceManager_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockSpaceManager) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSpaceManager_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockSpaceManager_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockSpaceManager_Expecter) Name() *MockSpaceManager_Name_Call {
	return &MockSpaceManager_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockSpaceManager_Name_Call) Run(run func()) *MockSpaceManager_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSpaceManager_Name_Call) Return(name string) *MockSpaceManager_Name_Call {
	_c.Call.Return(name)
	return _c
}

func (_c *MockSpaceManager_Name_Call) RunAndReturn(run func() string) *MockSpaceManager_Name_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRemoteStatus provides a mock function with given fields: ctx, spaceStatusInfo
func (_m *MockSpaceManager) UpdateRemoteStatus(ctx context.Context, spaceStatusInfo spaceinfo.SpaceRemoteStatusInfo) error {
	ret := _m.Called(ctx, spaceStatusInfo)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRemoteStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, spaceinfo.SpaceRemoteStatusInfo) error); ok {
		r0 = rf(ctx, spaceStatusInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSpaceManager_UpdateRemoteStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRemoteStatus'
type MockSpaceManager_UpdateRemoteStatus_Call struct {
	*mock.Call
}

// UpdateRemoteStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - spaceStatusInfo spaceinfo.SpaceRemoteStatusInfo
func (_e *MockSpaceManager_Expecter) UpdateRemoteStatus(ctx interface{}, spaceStatusInfo interface{}) *MockSpaceManager_UpdateRemoteStatus_Call {
	return &MockSpaceManager_UpdateRemoteStatus_Call{Call: _e.mock.On("UpdateRemoteStatus", ctx, spaceStatusInfo)}
}

func (_c *MockSpaceManager_UpdateRemoteStatus_Call) Run(run func(ctx context.Context, spaceStatusInfo spaceinfo.SpaceRemoteStatusInfo)) *MockSpaceManager_UpdateRemoteStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(spaceinfo.SpaceRemoteStatusInfo))
	})
	return _c
}

func (_c *MockSpaceManager_UpdateRemoteStatus_Call) Return(_a0 error) *MockSpaceManager_UpdateRemoteStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpaceManager_UpdateRemoteStatus_Call) RunAndReturn(run func(context.Context, spaceinfo.SpaceRemoteStatusInfo) error) *MockSpaceManager_UpdateRemoteStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSharedLimits provides a mock function with given fields: ctx, limits
func (_m *MockSpaceManager) UpdateSharedLimits(ctx context.Context, limits int) error {
	ret := _m.Called(ctx, limits)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSharedLimits")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, limits)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSpaceManager_UpdateSharedLimits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSharedLimits'
type MockSpaceManager_UpdateSharedLimits_Call struct {
	*mock.Call
}

// UpdateSharedLimits is a helper method to define mock.On call
//   - ctx context.Context
//   - limits int
func (_e *MockSpaceManager_Expecter) UpdateSharedLimits(ctx interface{}, limits interface{}) *MockSpaceManager_UpdateSharedLimits_Call {
	return &MockSpaceManager_UpdateSharedLimits_Call{Call: _e.mock.On("UpdateSharedLimits", ctx, limits)}
}

func (_c *MockSpaceManager_UpdateSharedLimits_Call) Run(run func(ctx context.Context, limits int)) *MockSpaceManager_UpdateSharedLimits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockSpaceManager_UpdateSharedLimits_Call) Return(_a0 error) *MockSpaceManager_UpdateSharedLimits_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpaceManager_UpdateSharedLimits_Call) RunAndReturn(run func(context.Context, int) error) *MockSpaceManager_UpdateSharedLimits_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSpaceManager creates a new instance of MockSpaceManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSpaceManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSpaceManager {
	mock := &MockSpaceManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
