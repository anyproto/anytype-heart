// Code generated by mockery. DO NOT EDIT.

package mock_deletioncontroller

import (
	context "context"

	app "github.com/anyproto/any-sync/app"

	mock "github.com/stretchr/testify/mock"
)

// MockDeletionController is an autogenerated mock type for the DeletionController type
type MockDeletionController struct {
	mock.Mock
}

type MockDeletionController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDeletionController) EXPECT() *MockDeletionController_Expecter {
	return &MockDeletionController_Expecter{mock: &_m.Mock}
}

// AddSpaceToDelete provides a mock function with given fields: spaceId
func (_m *MockDeletionController) AddSpaceToDelete(spaceId string) {
	_m.Called(spaceId)
}

// MockDeletionController_AddSpaceToDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSpaceToDelete'
type MockDeletionController_AddSpaceToDelete_Call struct {
	*mock.Call
}

// AddSpaceToDelete is a helper method to define mock.On call
//   - spaceId string
func (_e *MockDeletionController_Expecter) AddSpaceToDelete(spaceId interface{}) *MockDeletionController_AddSpaceToDelete_Call {
	return &MockDeletionController_AddSpaceToDelete_Call{Call: _e.mock.On("AddSpaceToDelete", spaceId)}
}

func (_c *MockDeletionController_AddSpaceToDelete_Call) Run(run func(spaceId string)) *MockDeletionController_AddSpaceToDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDeletionController_AddSpaceToDelete_Call) Return() *MockDeletionController_AddSpaceToDelete_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDeletionController_AddSpaceToDelete_Call) RunAndReturn(run func(string)) *MockDeletionController_AddSpaceToDelete_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields: ctx
func (_m *MockDeletionController) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDeletionController_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockDeletionController_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDeletionController_Expecter) Close(ctx interface{}) *MockDeletionController_Close_Call {
	return &MockDeletionController_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *MockDeletionController_Close_Call) Run(run func(ctx context.Context)) *MockDeletionController_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDeletionController_Close_Call) Return(err error) *MockDeletionController_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDeletionController_Close_Call) RunAndReturn(run func(context.Context) error) *MockDeletionController_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: a
func (_m *MockDeletionController) Init(a *app.App) error {
	ret := _m.Called(a)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDeletionController_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockDeletionController_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - a *app.App
func (_e *MockDeletionController_Expecter) Init(a interface{}) *MockDeletionController_Init_Call {
	return &MockDeletionController_Init_Call{Call: _e.mock.On("Init", a)}
}

func (_c *MockDeletionController_Init_Call) Run(run func(a *app.App)) *MockDeletionController_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app.App))
	})
	return _c
}

func (_c *MockDeletionController_Init_Call) Return(err error) *MockDeletionController_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDeletionController_Init_Call) RunAndReturn(run func(*app.App) error) *MockDeletionController_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockDeletionController) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockDeletionController_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockDeletionController_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockDeletionController_Expecter) Name() *MockDeletionController_Name_Call {
	return &MockDeletionController_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockDeletionController_Name_Call) Run(run func()) *MockDeletionController_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDeletionController_Name_Call) Return(name string) *MockDeletionController_Name_Call {
	_c.Call.Return(name)
	return _c
}

func (_c *MockDeletionController_Name_Call) RunAndReturn(run func() string) *MockDeletionController_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: ctx
func (_m *MockDeletionController) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDeletionController_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockDeletionController_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDeletionController_Expecter) Run(ctx interface{}) *MockDeletionController_Run_Call {
	return &MockDeletionController_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *MockDeletionController_Run_Call) Run(run func(ctx context.Context)) *MockDeletionController_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDeletionController_Run_Call) Return(err error) *MockDeletionController_Run_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDeletionController_Run_Call) RunAndReturn(run func(context.Context) error) *MockDeletionController_Run_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCoordinatorStatus provides a mock function with given fields:
func (_m *MockDeletionController) UpdateCoordinatorStatus() {
	_m.Called()
}

// MockDeletionController_UpdateCoordinatorStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCoordinatorStatus'
type MockDeletionController_UpdateCoordinatorStatus_Call struct {
	*mock.Call
}

// UpdateCoordinatorStatus is a helper method to define mock.On call
func (_e *MockDeletionController_Expecter) UpdateCoordinatorStatus() *MockDeletionController_UpdateCoordinatorStatus_Call {
	return &MockDeletionController_UpdateCoordinatorStatus_Call{Call: _e.mock.On("UpdateCoordinatorStatus")}
}

func (_c *MockDeletionController_UpdateCoordinatorStatus_Call) Run(run func()) *MockDeletionController_UpdateCoordinatorStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDeletionController_UpdateCoordinatorStatus_Call) Return() *MockDeletionController_UpdateCoordinatorStatus_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDeletionController_UpdateCoordinatorStatus_Call) RunAndReturn(run func()) *MockDeletionController_UpdateCoordinatorStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDeletionController creates a new instance of MockDeletionController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDeletionController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDeletionController {
	mock := &MockDeletionController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
