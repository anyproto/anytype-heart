// Code generated by mockery. DO NOT EDIT.

package mock_techspace

import (
	spaceinfo "github.com/anyproto/anytype-heart/space/spaceinfo"
	mock "github.com/stretchr/testify/mock"

	types "github.com/gogo/protobuf/types"
)

// MockSpaceView is an autogenerated mock type for the SpaceView type
type MockSpaceView struct {
	mock.Mock
}

type MockSpaceView_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSpaceView) EXPECT() *MockSpaceView_Expecter {
	return &MockSpaceView_Expecter{mock: &_m.Mock}
}

// GetExistingInviteInfo provides a mock function with given fields:
func (_m *MockSpaceView) GetExistingInviteInfo() (string, string) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExistingInviteInfo")
	}

	var r0 string
	var r1 string
	if rf, ok := ret.Get(0).(func() (string, string)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// MockSpaceView_GetExistingInviteInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExistingInviteInfo'
type MockSpaceView_GetExistingInviteInfo_Call struct {
	*mock.Call
}

// GetExistingInviteInfo is a helper method to define mock.On call
func (_e *MockSpaceView_Expecter) GetExistingInviteInfo() *MockSpaceView_GetExistingInviteInfo_Call {
	return &MockSpaceView_GetExistingInviteInfo_Call{Call: _e.mock.On("GetExistingInviteInfo")}
}

func (_c *MockSpaceView_GetExistingInviteInfo_Call) Run(run func()) *MockSpaceView_GetExistingInviteInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSpaceView_GetExistingInviteInfo_Call) Return(fileCid string, fileKey string) *MockSpaceView_GetExistingInviteInfo_Call {
	_c.Call.Return(fileCid, fileKey)
	return _c
}

func (_c *MockSpaceView_GetExistingInviteInfo_Call) RunAndReturn(run func() (string, string)) *MockSpaceView_GetExistingInviteInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetLocalInfo provides a mock function with given fields:
func (_m *MockSpaceView) GetLocalInfo() spaceinfo.SpaceLocalInfo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLocalInfo")
	}

	var r0 spaceinfo.SpaceLocalInfo
	if rf, ok := ret.Get(0).(func() spaceinfo.SpaceLocalInfo); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(spaceinfo.SpaceLocalInfo)
	}

	return r0
}

// MockSpaceView_GetLocalInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocalInfo'
type MockSpaceView_GetLocalInfo_Call struct {
	*mock.Call
}

// GetLocalInfo is a helper method to define mock.On call
func (_e *MockSpaceView_Expecter) GetLocalInfo() *MockSpaceView_GetLocalInfo_Call {
	return &MockSpaceView_GetLocalInfo_Call{Call: _e.mock.On("GetLocalInfo")}
}

func (_c *MockSpaceView_GetLocalInfo_Call) Run(run func()) *MockSpaceView_GetLocalInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSpaceView_GetLocalInfo_Call) Return(_a0 spaceinfo.SpaceLocalInfo) *MockSpaceView_GetLocalInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpaceView_GetLocalInfo_Call) RunAndReturn(run func() spaceinfo.SpaceLocalInfo) *MockSpaceView_GetLocalInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersistentInfo provides a mock function with given fields:
func (_m *MockSpaceView) GetPersistentInfo() spaceinfo.SpacePersistentInfo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPersistentInfo")
	}

	var r0 spaceinfo.SpacePersistentInfo
	if rf, ok := ret.Get(0).(func() spaceinfo.SpacePersistentInfo); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(spaceinfo.SpacePersistentInfo)
	}

	return r0
}

// MockSpaceView_GetPersistentInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersistentInfo'
type MockSpaceView_GetPersistentInfo_Call struct {
	*mock.Call
}

// GetPersistentInfo is a helper method to define mock.On call
func (_e *MockSpaceView_Expecter) GetPersistentInfo() *MockSpaceView_GetPersistentInfo_Call {
	return &MockSpaceView_GetPersistentInfo_Call{Call: _e.mock.On("GetPersistentInfo")}
}

func (_c *MockSpaceView_GetPersistentInfo_Call) Run(run func()) *MockSpaceView_GetPersistentInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSpaceView_GetPersistentInfo_Call) Return(_a0 spaceinfo.SpacePersistentInfo) *MockSpaceView_GetPersistentInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpaceView_GetPersistentInfo_Call) RunAndReturn(run func() spaceinfo.SpacePersistentInfo) *MockSpaceView_GetPersistentInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetSharedSpacesLimit provides a mock function with given fields:
func (_m *MockSpaceView) GetSharedSpacesLimit() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSharedSpacesLimit")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockSpaceView_GetSharedSpacesLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSharedSpacesLimit'
type MockSpaceView_GetSharedSpacesLimit_Call struct {
	*mock.Call
}

// GetSharedSpacesLimit is a helper method to define mock.On call
func (_e *MockSpaceView_Expecter) GetSharedSpacesLimit() *MockSpaceView_GetSharedSpacesLimit_Call {
	return &MockSpaceView_GetSharedSpacesLimit_Call{Call: _e.mock.On("GetSharedSpacesLimit")}
}

func (_c *MockSpaceView_GetSharedSpacesLimit_Call) Run(run func()) *MockSpaceView_GetSharedSpacesLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSpaceView_GetSharedSpacesLimit_Call) Return(limits int) *MockSpaceView_GetSharedSpacesLimit_Call {
	_c.Call.Return(limits)
	return _c
}

func (_c *MockSpaceView_GetSharedSpacesLimit_Call) RunAndReturn(run func() int) *MockSpaceView_GetSharedSpacesLimit_Call {
	_c.Call.Return(run)
	return _c
}

// GetSpaceDescription provides a mock function with given fields:
func (_m *MockSpaceView) GetSpaceDescription() spaceinfo.SpaceDescription {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSpaceDescription")
	}

	var r0 spaceinfo.SpaceDescription
	if rf, ok := ret.Get(0).(func() spaceinfo.SpaceDescription); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(spaceinfo.SpaceDescription)
	}

	return r0
}

// MockSpaceView_GetSpaceDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSpaceDescription'
type MockSpaceView_GetSpaceDescription_Call struct {
	*mock.Call
}

// GetSpaceDescription is a helper method to define mock.On call
func (_e *MockSpaceView_Expecter) GetSpaceDescription() *MockSpaceView_GetSpaceDescription_Call {
	return &MockSpaceView_GetSpaceDescription_Call{Call: _e.mock.On("GetSpaceDescription")}
}

func (_c *MockSpaceView_GetSpaceDescription_Call) Run(run func()) *MockSpaceView_GetSpaceDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSpaceView_GetSpaceDescription_Call) Return(data spaceinfo.SpaceDescription) *MockSpaceView_GetSpaceDescription_Call {
	_c.Call.Return(data)
	return _c
}

func (_c *MockSpaceView_GetSpaceDescription_Call) RunAndReturn(run func() spaceinfo.SpaceDescription) *MockSpaceView_GetSpaceDescription_Call {
	_c.Call.Return(run)
	return _c
}

// Lock provides a mock function with given fields:
func (_m *MockSpaceView) Lock() {
	_m.Called()
}

// MockSpaceView_Lock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lock'
type MockSpaceView_Lock_Call struct {
	*mock.Call
}

// Lock is a helper method to define mock.On call
func (_e *MockSpaceView_Expecter) Lock() *MockSpaceView_Lock_Call {
	return &MockSpaceView_Lock_Call{Call: _e.mock.On("Lock")}
}

func (_c *MockSpaceView_Lock_Call) Run(run func()) *MockSpaceView_Lock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSpaceView_Lock_Call) Return() *MockSpaceView_Lock_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSpaceView_Lock_Call) RunAndReturn(run func()) *MockSpaceView_Lock_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveExistingInviteInfo provides a mock function with given fields:
func (_m *MockSpaceView) RemoveExistingInviteInfo() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RemoveExistingInviteInfo")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSpaceView_RemoveExistingInviteInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveExistingInviteInfo'
type MockSpaceView_RemoveExistingInviteInfo_Call struct {
	*mock.Call
}

// RemoveExistingInviteInfo is a helper method to define mock.On call
func (_e *MockSpaceView_Expecter) RemoveExistingInviteInfo() *MockSpaceView_RemoveExistingInviteInfo_Call {
	return &MockSpaceView_RemoveExistingInviteInfo_Call{Call: _e.mock.On("RemoveExistingInviteInfo")}
}

func (_c *MockSpaceView_RemoveExistingInviteInfo_Call) Run(run func()) *MockSpaceView_RemoveExistingInviteInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSpaceView_RemoveExistingInviteInfo_Call) Return(fileCid string, err error) *MockSpaceView_RemoveExistingInviteInfo_Call {
	_c.Call.Return(fileCid, err)
	return _c
}

func (_c *MockSpaceView_RemoveExistingInviteInfo_Call) RunAndReturn(run func() (string, error)) *MockSpaceView_RemoveExistingInviteInfo_Call {
	_c.Call.Return(run)
	return _c
}

// SetAccessType provides a mock function with given fields: acc
func (_m *MockSpaceView) SetAccessType(acc spaceinfo.AccessType) error {
	ret := _m.Called(acc)

	if len(ret) == 0 {
		panic("no return value specified for SetAccessType")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(spaceinfo.AccessType) error); ok {
		r0 = rf(acc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSpaceView_SetAccessType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAccessType'
type MockSpaceView_SetAccessType_Call struct {
	*mock.Call
}

// SetAccessType is a helper method to define mock.On call
//   - acc spaceinfo.AccessType
func (_e *MockSpaceView_Expecter) SetAccessType(acc interface{}) *MockSpaceView_SetAccessType_Call {
	return &MockSpaceView_SetAccessType_Call{Call: _e.mock.On("SetAccessType", acc)}
}

func (_c *MockSpaceView_SetAccessType_Call) Run(run func(acc spaceinfo.AccessType)) *MockSpaceView_SetAccessType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(spaceinfo.AccessType))
	})
	return _c
}

func (_c *MockSpaceView_SetAccessType_Call) Return(_a0 error) *MockSpaceView_SetAccessType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpaceView_SetAccessType_Call) RunAndReturn(run func(spaceinfo.AccessType) error) *MockSpaceView_SetAccessType_Call {
	_c.Call.Return(run)
	return _c
}

// SetAclIsEmpty provides a mock function with given fields: isEmpty
func (_m *MockSpaceView) SetAclIsEmpty(isEmpty bool) error {
	ret := _m.Called(isEmpty)

	if len(ret) == 0 {
		panic("no return value specified for SetAclIsEmpty")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(isEmpty)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSpaceView_SetAclIsEmpty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAclIsEmpty'
type MockSpaceView_SetAclIsEmpty_Call struct {
	*mock.Call
}

// SetAclIsEmpty is a helper method to define mock.On call
//   - isEmpty bool
func (_e *MockSpaceView_Expecter) SetAclIsEmpty(isEmpty interface{}) *MockSpaceView_SetAclIsEmpty_Call {
	return &MockSpaceView_SetAclIsEmpty_Call{Call: _e.mock.On("SetAclIsEmpty", isEmpty)}
}

func (_c *MockSpaceView_SetAclIsEmpty_Call) Run(run func(isEmpty bool)) *MockSpaceView_SetAclIsEmpty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockSpaceView_SetAclIsEmpty_Call) Return(err error) *MockSpaceView_SetAclIsEmpty_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSpaceView_SetAclIsEmpty_Call) RunAndReturn(run func(bool) error) *MockSpaceView_SetAclIsEmpty_Call {
	_c.Call.Return(run)
	return _c
}

// SetInviteFileInfo provides a mock function with given fields: fileCid, fileKey
func (_m *MockSpaceView) SetInviteFileInfo(fileCid string, fileKey string) error {
	ret := _m.Called(fileCid, fileKey)

	if len(ret) == 0 {
		panic("no return value specified for SetInviteFileInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(fileCid, fileKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSpaceView_SetInviteFileInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetInviteFileInfo'
type MockSpaceView_SetInviteFileInfo_Call struct {
	*mock.Call
}

// SetInviteFileInfo is a helper method to define mock.On call
//   - fileCid string
//   - fileKey string
func (_e *MockSpaceView_Expecter) SetInviteFileInfo(fileCid interface{}, fileKey interface{}) *MockSpaceView_SetInviteFileInfo_Call {
	return &MockSpaceView_SetInviteFileInfo_Call{Call: _e.mock.On("SetInviteFileInfo", fileCid, fileKey)}
}

func (_c *MockSpaceView_SetInviteFileInfo_Call) Run(run func(fileCid string, fileKey string)) *MockSpaceView_SetInviteFileInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockSpaceView_SetInviteFileInfo_Call) Return(err error) *MockSpaceView_SetInviteFileInfo_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSpaceView_SetInviteFileInfo_Call) RunAndReturn(run func(string, string) error) *MockSpaceView_SetInviteFileInfo_Call {
	_c.Call.Return(run)
	return _c
}

// SetSharedSpacesLimit provides a mock function with given fields: limits
func (_m *MockSpaceView) SetSharedSpacesLimit(limits int) error {
	ret := _m.Called(limits)

	if len(ret) == 0 {
		panic("no return value specified for SetSharedSpacesLimit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(limits)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSpaceView_SetSharedSpacesLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSharedSpacesLimit'
type MockSpaceView_SetSharedSpacesLimit_Call struct {
	*mock.Call
}

// SetSharedSpacesLimit is a helper method to define mock.On call
//   - limits int
func (_e *MockSpaceView_Expecter) SetSharedSpacesLimit(limits interface{}) *MockSpaceView_SetSharedSpacesLimit_Call {
	return &MockSpaceView_SetSharedSpacesLimit_Call{Call: _e.mock.On("SetSharedSpacesLimit", limits)}
}

func (_c *MockSpaceView_SetSharedSpacesLimit_Call) Run(run func(limits int)) *MockSpaceView_SetSharedSpacesLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockSpaceView_SetSharedSpacesLimit_Call) Return(err error) *MockSpaceView_SetSharedSpacesLimit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSpaceView_SetSharedSpacesLimit_Call) RunAndReturn(run func(int) error) *MockSpaceView_SetSharedSpacesLimit_Call {
	_c.Call.Return(run)
	return _c
}

// SetSpaceData provides a mock function with given fields: details
func (_m *MockSpaceView) SetSpaceData(details *types.Struct) error {
	ret := _m.Called(details)

	if len(ret) == 0 {
		panic("no return value specified for SetSpaceData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Struct) error); ok {
		r0 = rf(details)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSpaceView_SetSpaceData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSpaceData'
type MockSpaceView_SetSpaceData_Call struct {
	*mock.Call
}

// SetSpaceData is a helper method to define mock.On call
//   - details *types.Struct
func (_e *MockSpaceView_Expecter) SetSpaceData(details interface{}) *MockSpaceView_SetSpaceData_Call {
	return &MockSpaceView_SetSpaceData_Call{Call: _e.mock.On("SetSpaceData", details)}
}

func (_c *MockSpaceView_SetSpaceData_Call) Run(run func(details *types.Struct)) *MockSpaceView_SetSpaceData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.Struct))
	})
	return _c
}

func (_c *MockSpaceView_SetSpaceData_Call) Return(_a0 error) *MockSpaceView_SetSpaceData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpaceView_SetSpaceData_Call) RunAndReturn(run func(*types.Struct) error) *MockSpaceView_SetSpaceData_Call {
	_c.Call.Return(run)
	return _c
}

// SetSpaceLocalInfo provides a mock function with given fields: info
func (_m *MockSpaceView) SetSpaceLocalInfo(info spaceinfo.SpaceLocalInfo) error {
	ret := _m.Called(info)

	if len(ret) == 0 {
		panic("no return value specified for SetSpaceLocalInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(spaceinfo.SpaceLocalInfo) error); ok {
		r0 = rf(info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSpaceView_SetSpaceLocalInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSpaceLocalInfo'
type MockSpaceView_SetSpaceLocalInfo_Call struct {
	*mock.Call
}

// SetSpaceLocalInfo is a helper method to define mock.On call
//   - info spaceinfo.SpaceLocalInfo
func (_e *MockSpaceView_Expecter) SetSpaceLocalInfo(info interface{}) *MockSpaceView_SetSpaceLocalInfo_Call {
	return &MockSpaceView_SetSpaceLocalInfo_Call{Call: _e.mock.On("SetSpaceLocalInfo", info)}
}

func (_c *MockSpaceView_SetSpaceLocalInfo_Call) Run(run func(info spaceinfo.SpaceLocalInfo)) *MockSpaceView_SetSpaceLocalInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(spaceinfo.SpaceLocalInfo))
	})
	return _c
}

func (_c *MockSpaceView_SetSpaceLocalInfo_Call) Return(_a0 error) *MockSpaceView_SetSpaceLocalInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpaceView_SetSpaceLocalInfo_Call) RunAndReturn(run func(spaceinfo.SpaceLocalInfo) error) *MockSpaceView_SetSpaceLocalInfo_Call {
	_c.Call.Return(run)
	return _c
}

// SetSpacePersistentInfo provides a mock function with given fields: info
func (_m *MockSpaceView) SetSpacePersistentInfo(info spaceinfo.SpacePersistentInfo) error {
	ret := _m.Called(info)

	if len(ret) == 0 {
		panic("no return value specified for SetSpacePersistentInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(spaceinfo.SpacePersistentInfo) error); ok {
		r0 = rf(info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSpaceView_SetSpacePersistentInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSpacePersistentInfo'
type MockSpaceView_SetSpacePersistentInfo_Call struct {
	*mock.Call
}

// SetSpacePersistentInfo is a helper method to define mock.On call
//   - info spaceinfo.SpacePersistentInfo
func (_e *MockSpaceView_Expecter) SetSpacePersistentInfo(info interface{}) *MockSpaceView_SetSpacePersistentInfo_Call {
	return &MockSpaceView_SetSpacePersistentInfo_Call{Call: _e.mock.On("SetSpacePersistentInfo", info)}
}

func (_c *MockSpaceView_SetSpacePersistentInfo_Call) Run(run func(info spaceinfo.SpacePersistentInfo)) *MockSpaceView_SetSpacePersistentInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(spaceinfo.SpacePersistentInfo))
	})
	return _c
}

func (_c *MockSpaceView_SetSpacePersistentInfo_Call) Return(_a0 error) *MockSpaceView_SetSpacePersistentInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpaceView_SetSpacePersistentInfo_Call) RunAndReturn(run func(spaceinfo.SpacePersistentInfo) error) *MockSpaceView_SetSpacePersistentInfo_Call {
	_c.Call.Return(run)
	return _c
}

// Unlock provides a mock function with given fields:
func (_m *MockSpaceView) Unlock() {
	_m.Called()
}

// MockSpaceView_Unlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unlock'
type MockSpaceView_Unlock_Call struct {
	*mock.Call
}

// Unlock is a helper method to define mock.On call
func (_e *MockSpaceView_Expecter) Unlock() *MockSpaceView_Unlock_Call {
	return &MockSpaceView_Unlock_Call{Call: _e.mock.On("Unlock")}
}

func (_c *MockSpaceView_Unlock_Call) Run(run func()) *MockSpaceView_Unlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSpaceView_Unlock_Call) Return() *MockSpaceView_Unlock_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSpaceView_Unlock_Call) RunAndReturn(run func()) *MockSpaceView_Unlock_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSpaceView creates a new instance of MockSpaceView. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSpaceView(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSpaceView {
	mock := &MockSpaceView{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
