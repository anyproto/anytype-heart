name: Nightly Builds

on:
  push:
    branches:
      - 'nightly*'
  workflow_dispatch:
    inputs:
      channel:
        description: electron.builder channel
        required: true
        default: alpha
        type: choice
        options:
          - alpha
          - beta
#  schedule:
#    - cron: '0 0 * * *' # every day at midnight
#      filters:
#        branches:
#          include:
#            - 'nightly-ci-test'

permissions:
  actions: 'write'
  packages: 'write'
  contents: 'write'

jobs:
  build:
    runs-on: 'macos-14'
    steps:
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23.2
          check-latest: true

      - name: Setup GO
        run: |
          go version
          echo GOPATH=$(go env GOPATH) >> $GITHUB_ENV
          echo GOBIN=$(go env GOPATH)/bin >> $GITHUB_ENV
          echo $(go env GOPATH)/bin >> $GITHUB_PATH

      - name: Checkout
        uses: actions/checkout@v3

      - name: Install brew and node deps
        run: make install-brew-and-node-deps

      - name: Nightly mode env settings
        shell: bash
        run: |
          # choice channel name {{
          if [[ -z "${{ github.event.inputs.channel }}" ]]; then
            # choice default value for channel from ref name
            if echo "${{ github.ref_name }}" | grep -q "beta"; then
              CHANNEL="beta"
            else
              CHANNEL="alpha"
            fi
          else
            CHANNEL="${{github.event.inputs.channel}}"
          fi
          echo "CHANNEL=$CHANNEL" >> $GITHUB_ENV
          # }}
          # choice s3 bucket for publishing {{
          if [[ "$CHANNEL" == "beta" ]]; then
            S3_BUCKET="${{secrets.NIGHTLY_AWS_S3_BUCKET_BETA}}"
          else
            S3_BUCKET="${{secrets.NIGHTLY_AWS_S3_BUCKET}}"
          fi
          echo "S3_BUCKET=$S3_BUCKET" >> $GITHUB_ENV
          # }}

      - name: Set env vars
        env:
          UNSPLASH_KEY: ${{ secrets.UNSPLASH_KEY }}
          INHOUSE_KEY: ${{ secrets.INHOUSE_KEY }}
        run: |
          GIT_SUMMARY=$(git describe --tags --always)
          echo "FLAGS=-X github.com/anyproto/anytype-heart/util/vcs.GitSummary=${GIT_SUMMARY} -X github.com/anyproto/anytype-heart/metrics.DefaultInHouseKey=${INHOUSE_KEY} -X github.com/anyproto/anytype-heart/util/unsplash.DefaultToken=${UNSPLASH_KEY}" >> $GITHUB_ENV

          VERSION="nightly"
          echo "${{ secrets.STAGING_NODE_CONF }}" > ./core/anytype/config/nodes/custom.yml
          echo BUILD_TAG_NETWORK=envnetworkcustom >> $GITHUB_ENV

          echo VERSION=${VERSION} >> $GITHUB_ENV
          echo GOPRIVATE=github.com/anyproto >> $GITHUB_ENV
          echo $(pwd)/deps >> $GITHUB_PATH
          git config --global url."https://${{ secrets.ANYTYPE_PAT }}@github.com/".insteadOf "https://github.com/"

      - name: Go mod download
        run: go mod download

      - name: install protoc
        run: make setup-protoc

      - name: setup go
        run: |
          make setup-go
          make setup-gomobile
          which gomobile

      - name: Cross-compile library mac/win/linux
        run: |
          make cross-compile-library
          ls -lha .

      - name: Make JS protos
        run: |
          make protos-js
          make ci-js-protos

      - name: Add system relations/types jsons
        run: make ci-add-system-relations-types-jsons

      - name: Pack servers
        run: make pack-server

      - name: Make swift protos
        run: make swift-protos

      - name: Compile ios lib
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_USER: ${{ github.actor }}
          PUBLISH_GRADLE: 0
        run: make compile-ios-lib

      - name: Make java protos
        run: make ci-java-protos

      - name: Compile android lib
        run: make compile-android-lib

      # upload release artifacts to s3 {{
      - name: Install AWS CLI
        run: |
          if ! which aws; then
            brew install awscli
          fi
          aws --version
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.NIGHTLY_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.NIGHTLY_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.NIGHTLY_AWS_REGION }}
      - name: Upload build artifacts to S3
        run: |
          aws s3 cp .release/ s3://${{ env.S3_BUCKET }}/mw/ --recursive --acl public-read
      # }}
