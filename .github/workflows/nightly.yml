name: Nightly Builds

on:
  push:
    branches:
      - 'nightly*'
  workflow_dispatch:
    inputs:
      channel:
        description: electron.builder channel
        required: true
        default: alpha
        type: choice
        options:
          - alpha
          - beta
#  schedule:
#    - cron: '0 0 * * *' # every day at midnight
#      filters:
#        branches:
#          include:
#            - 'nightly-ci-test'

permissions:
  actions: 'write'
  packages: 'write'
  contents: 'write'

jobs:
  build:
    runs-on: 'macos-14'
    steps:
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23.2
          check-latest: true

      - name: Setup GO
        run: |
          go version
          echo GOPATH=$(go env GOPATH) >> $GITHUB_ENV
          echo GOBIN=$(go env GOPATH)/bin >> $GITHUB_ENV
          echo $(go env GOPATH)/bin >> $GITHUB_PATH

      - name: Install brew and node deps
        run: |
          curl https://raw.githubusercontent.com/Homebrew/homebrew-core/31b24d65a7210ea0a5689d5ad00dd8d1bf5211db/Formula/protobuf.rb --output protobuf.rb
          curl https://raw.githubusercontent.com/Homebrew/homebrew-core/d600b1f7119f6e6a4e97fb83233b313b0468b7e4/Formula/s/swift-protobuf.rb --output swift-protobuf.rb
          HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1 HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_NO_INSTALL_CLEANUP=1 brew install ./protobuf.rb
          HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1 HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_NO_INSTALL_CLEANUP=1 brew install --ignore-dependencies ./swift-protobuf.rb
          HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1 HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_NO_INSTALL_CLEANUP=1 brew install mingw-w64
          HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1 HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_NO_INSTALL_CLEANUP=1 brew install grpcurl
          HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1 HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_NO_INSTALL_CLEANUP=1 brew tap messense/macos-cross-toolchains && brew install x86_64-unknown-linux-musl && brew install aarch64-unknown-linux-musl
          npm i -g node-gyp

      - name: Checkout
        uses: actions/checkout@v3

      - name: Nightly mode env settings
        shell: bash
        run: |
          # choice channel name {{
          if [[ -z "${{ github.event.inputs.channel }}" ]]; then
            # choice default value for channel from ref name
            if echo "${{ github.ref_name }}" | grep -q "beta"; then
              CHANNEL="beta"
            else
              CHANNEL="alpha"
            fi
          else
            CHANNEL="${{github.event.inputs.channel}}"
          fi
          echo "CHANNEL=$CHANNEL" >> $GITHUB_ENV
          # }}
          # choice s3 bucket for publishing {{
          if [[ "$CHANNEL" == "beta" ]]; then
            S3_BUCKET="${{secrets.NIGHTLY_AWS_S3_BUCKET_BETA}}"
          else
            S3_BUCKET="${{secrets.NIGHTLY_AWS_S3_BUCKET}}"
          fi
          echo "S3_BUCKET=$S3_BUCKET" >> $GITHUB_ENV
          # }}

      - name: Set env vars
        env:
          UNSPLASH_KEY: ${{ secrets.UNSPLASH_KEY }}
          INHOUSE_KEY: ${{ secrets.INHOUSE_KEY }}
        run: |
          GIT_SUMMARY=$(git describe --tags --always)
          echo "FLAGS=-X github.com/anyproto/anytype-heart/util/vcs.GitSummary=${GIT_SUMMARY} -X github.com/anyproto/anytype-heart/metrics.DefaultInHouseKey=${INHOUSE_KEY} -X github.com/anyproto/anytype-heart/util/unsplash.DefaultToken=${UNSPLASH_KEY}" >> $GITHUB_ENV

          VERSION="nightly"
          echo "${{ secrets.STAGING_NODE_CONF }}" > ./core/anytype/config/nodes/custom.yml
          echo BUILD_TAG_NETWORK=envnetworkcustom >> $GITHUB_ENV

          echo VERSION=${VERSION} >> $GITHUB_ENV
          echo GOPRIVATE=github.com/anyproto >> $GITHUB_ENV
          echo $(pwd)/deps >> $GITHUB_PATH
          git config --global url."https://${{ secrets.ANYTYPE_PAT }}@github.com/".insteadOf "https://github.com/"

      - name: Go mod download
        run: go mod download

      - name: install protoc
        run: make setup-protoc

      - name: setup go
        run: |
          make setup-go
          make setup-gomobile
          which gomobile

      - name: Cross-compile library mac/win/linux
        run: |
          echo $FLAGS
          mkdir -p .release
          echo $SDKROOT
          GOOS="darwin" CGO_CFLAGS="-mmacosx-version-min=11" MACOSX_DEPLOYMENT_TARGET=11.0 GOARCH="amd64" CGO_ENABLED="1" go build -tags="$BUILD_TAG_NETWORK nographviz nowatchdog nosigar nomutexdeadlockdetector" -ldflags="$FLAGS" -o darwin-amd64 github.com/anyproto/anytype-heart/cmd/grpcserver
          export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
          echo $SDKROOT
          GOOS="darwin" CGO_CFLAGS="-mmacosx-version-min=11" MACOSX_DEPLOYMENT_TARGET=11.0 GOARCH="arm64" CGO_ENABLED="1" go build -tags="$BUILD_TAG_NETWORK nographviz nowatchdog nosigar nomutexdeadlockdetector" -ldflags="$FLAGS" -o darwin-arm64 github.com/anyproto/anytype-heart/cmd/grpcserver
          GOOS="windows" GOARCH="amd64" CGO_ENABLED="1" CC="x86_64-w64-mingw32-gcc" CXX="x86_64-w64-mingw32-g++" go build -tags="$BUILD_TAG_NETWORK nographviz nowatchdog nosigar nomutexdeadlockdetector noheic" -ldflags="$FLAGS -linkmode external -extldflags=-static" -o windows-amd64 github.com/anyproto/anytype-heart/cmd/grpcserver
          GOOS="linux" GOARCH="amd64" CGO_ENABLED="1" CC="x86_64-linux-musl-gcc" go build -tags="$BUILD_TAG_NETWORK nographviz nowatchdog nosigar nomutexdeadlockdetector noheic" -ldflags="$FLAGS -linkmode external -extldflags '-static -Wl,-z stack-size=1000000'" -o linux-amd64 github.com/anyproto/anytype-heart/cmd/grpcserver
          GOOS="linux" GOARCH="arm64" CGO_ENABLED="1" CC="aarch64-linux-musl-gcc" go build -tags="$BUILD_TAG_NETWORK nographviz nowatchdog nosigar nomutexdeadlockdetector noheic" -ldflags="$FLAGS -linkmode external" -o linux-arm64 github.com/anyproto/anytype-heart/cmd/grpcserver
          ls -lha .

      - name: Make JS protos
        run: |
          make protos-js
          mv dist/js/pb protobuf
          mkdir -p protobuf/protos
          cp pb/protos/*.proto ./protobuf/protos
          cp pb/protos/service/*.proto ./protobuf/protos
          cp pkg/lib/pb/model/protos/*.proto ./protobuf/protos

      - name: Add system relations/types jsons
        run: |
          mkdir -p json/
          cp pkg/lib/bundle/systemRelations.json ./json
          cp pkg/lib/bundle/systemTypes.json ./json
          cp pkg/lib/bundle/internalRelations.json ./json
          cp pkg/lib/bundle/internalTypes.json ./json

      - name: Pack server win
        run: |
          declare -a arr=("windows-amd64")
          for i in "${arr[@]}"; do
            OSARCH=${i%.*}
            cp ./${i}* ./grpc-server.exe
            zip -r js_${VERSION}_${OSARCH}.zip grpc-server.exe protobuf json
            mv js_${VERSION}_${OSARCH}.zip .release/
          done

      - name: Pack server unix
        run: |
          declare -a arr=("darwin-amd64" "darwin-arm64" "linux-amd64")
          for i in "${arr[@]}"; do
            OSARCH=${i%.*}
            cp ./${i}* ./grpc-server
            tar -czf js_${VERSION}_${OSARCH}.tar.gz grpc-server protobuf json
            mv js_${VERSION}_${OSARCH}.tar.gz .release/
          done

      - name: Make swift protos
        run: |
          mkdir -p .release
          make protos-swift
          rm -rf protobuf
          mv dist/ios/protobuf protobuf
          mkdir -p protobuf/protos
          cp pb/protos/*.proto ./protobuf/protos
          cp pb/protos/service/*.proto ./protobuf/protos
          cp pkg/lib/pb/model/protos/*.proto ./protobuf/protos

      - name: Add system relations/types jsons
        run: |
          mkdir -p json/
          cp pkg/lib/bundle/systemRelations.json ./json
          cp pkg/lib/bundle/relations.json ./json
          cp pkg/lib/bundle/systemTypes.json ./json
          cp pkg/lib/bundle/internalRelations.json ./json
          cp pkg/lib/bundle/internalTypes.json ./json

      - name: Compile ios lib
        run: |
          go install github.com/vektra/mockery/v2@v2.47.0
          go install go.uber.org/mock/mockgen@v0.5.0
          make test-deps
          gomobile bind -tags "$BUILD_TAG_NETWORK nogrpcserver gomobile nowatchdog nosigar nomutexdeadlockdetector timetzdata rasterizesvg" -ldflags "$FLAGS" -v -target=ios -o Lib.xcframework github.com/anyproto/anytype-heart/clientlibrary/service github.com/anyproto/anytype-heart/core || true
          mkdir -p dist/ios/ && mv Lib.xcframework dist/ios/
          go run cmd/iosrepack/main.go
          mv dist/ios/Lib.xcframework .
          gtar --exclude ".*" -czvf ios_framework.tar.gz Lib.xcframework protobuf json
          #gradle publish
          mv ios_framework.tar.gz .release/ios_framework_${VERSION}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_USER: ${{ github.actor }}

      - name: Make java protos
        run: |
          make protos-java
          rm -rf protobuf
          mv dist/android/pb protobuf
          mkdir -p protobuf/protos
          cp pb/protos/*.proto ./protobuf/protos
          cp pb/protos/service/*.proto ./protobuf/protos
          cp pkg/lib/pb/model/protos/*.proto ./protobuf/protos

      - name: Add system relations/types jsons
        run: |
          mkdir -p json/
          cp pkg/lib/bundle/systemRelations.json ./json
          cp pkg/lib/bundle/systemTypes.json ./json
          cp pkg/lib/bundle/internalRelations.json ./json
          cp pkg/lib/bundle/internalTypes.json ./json

      - name: Compile android lib
        run: |
          gomobile bind -tags "$BUILD_TAG_NETWORK nogrpcserver gomobile nowatchdog nosigar nomutexdeadlockdetector timetzdata rasterizesvg" -ldflags "$FLAGS" -v -target=android -androidapi 26 -o lib.aar github.com/anyproto/anytype-heart/clientlibrary/service github.com/anyproto/anytype-heart/core || true
          gtar --exclude ".*" -czvf android_lib_${VERSION}.tar.gz lib.aar protobuf json
          mv android_lib_${VERSION}.tar.gz .release/

      # upload release artifacts to s3 {{
      - name: Install AWS CLI
        run: |
          if ! which aws; then
            brew install awscli
          fi
          aws --version
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.NIGHTLY_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.NIGHTLY_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.NIGHTLY_AWS_REGION }}
      - name: Upload build artifacts to S3
        run: |
          aws s3 cp .release/ s3://${{ env.S3_BUCKET }}/mw/ --recursive --acl public-read
      # }}
