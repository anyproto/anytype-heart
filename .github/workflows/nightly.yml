name: Nightly Builds

on:
  workflow_dispatch:
    inputs:
      run-on-runner:
        description: 'Specify the runner to use'
        required: true
        default: 'mac-mini-org-heart'
        type: choice
        options:
          - mac-mini-org-heart
          - macos-14
      nightly-base-version:
        description: 'Nightly builds base version (optional, overrides repository variable)'
        required: false

  schedule:
    - cron: '25 17 * * *' # every day at 1am (UTC)


# Define unified "effective" values for both triggers (workflow_dispatch & schedule)
env:
  # Use input if workflow was triggered manually, otherwise fallback to default
  NIGHTLY_BASE_VERSION: ${{ github.event.inputs.nightly-base-version || vars.NIGHTLY_BASE_VERSION }}


permissions:
  actions: 'write'
  packages: 'write'
  contents: 'write'


jobs:
  wait_for_perftest:
    uses: ./.github/workflows/reusable_wait_for_perftest.yml

  build:
    needs: wait_for_perftest
    runs-on: ${{ github.event.inputs.run-on-runner || 'mac-mini-org-heart' }}
    steps:
      - name: Install Go
        if: ${{ !startsWith(runner.name, 'mac-mini-runner-') }}
        uses: actions/setup-go@v4
        with:
          go-version: 1.24.0
          check-latest: true

      - name: Setup GO
        run: |
          echo "PATH=$PATH"
          echo "which go: '$(which go)'"
          echo "which go version: '$( $(which go) version )'"
          echo "go version: '$(go version)'"
          echo GOPATH=$(go env GOPATH) >> $GITHUB_ENV
          echo GOBIN=$(go env GOPATH)/bin >> $GITHUB_ENV
          echo $(go env GOPATH)/bin >> $GITHUB_PATH

      - name: Checkout
        uses: actions/checkout@v3

      - name: Install brew and node deps
        if: ${{ !startsWith(runner.name, 'mac-mini-runner-') }}
        run: make install-brew-and-node-deps

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1.6.0
        with:
          xcode-version: '16.2'

      - name: Set env vars
        env:
          UNSPLASH_KEY: ${{ secrets.UNSPLASH_KEY }}
          INHOUSE_KEY: ${{ secrets.INHOUSE_KEY }}
        run: |
          GIT_SUMMARY=$(git describe --tags --always)
          echo "FLAGS=-X github.com/anyproto/anytype-heart/util/vcs.GitSummary=${GIT_SUMMARY} -X github.com/anyproto/anytype-heart/metrics.DefaultInHouseKey=${INHOUSE_KEY} -X github.com/anyproto/anytype-heart/util/unsplash.DefaultToken=${UNSPLASH_KEY}" >> $GITHUB_ENV

          VERSION="nightly"
          echo "${{ secrets.STAGING_NODE_CONF }}" > ./core/anytype/config/nodes/custom.yml
          echo BUILD_TAG_NETWORK=envnetworkcustom >> $GITHUB_ENV

          echo VERSION=${VERSION} >> $GITHUB_ENV
          echo GOPRIVATE=github.com/anyproto >> $GITHUB_ENV
          echo $(pwd)/deps >> $GITHUB_PATH
          git config --global url."https://${{ secrets.ANYTYPE_PAT }}@github.com/".insteadOf "https://github.com/"

      - name: Go mod download
        run: go mod download

      - name: install protoc
        run: make setup-protoc

      - name: setup go
        run: |
          make setup-go
          make setup-gomobile
          which gomobile

      - name: Cross-compile library mac/win/linux
        run: |
          make cross-compile-library
          ls -lha .

      - name: Make JS protos
        run: |
          make protos-js
          make ci-js-protos

      - name: Add system relations/types jsons
        run: make ci-add-system-relations-types-jsons

      - name: Pack servers
        run: make pack-server

      - name: Make swift protos
        run: make swift-protos

      - name: Compile ios lib
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_USER: ${{ github.actor }}
          PUBLISH_GRADLE: 0
        run: make compile-ios-lib

      - name: Make java protos
        run: make ci-java-protos

      - name: Compile android lib
        run: make compile-android-lib

      - name: Compute nightly version
        id: nightly_info
        run: |
          TS=$(date -u +"%Y%m%d%H%M%S")
          echo "version=v${NIGHTLY_BASE_VERSION}-nightly-${TS}" >> $GITHUB_OUTPUT

      - name: Release
        id: release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.nightly_info.outputs.version }} # create new tag
          target_commitish: ${{ github.sha }}                 # set current commit for new tag
          prerelease: true
          make_latest: false
          fail_on_unmatched_files: true
          generate_release_notes: true
          files: '.release/*'

      - name: Get release info
        id: release_info
        uses: actions/github-script@v7
        with:
          script: |
            const release_id = Number(`${{ steps.release.outputs.id }}`);
            const { data } = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id
            });
            core.setOutput('body', data.body || '');
            core.setOutput('html_url', data.html_url);
            core.setOutput('tag_name', data.tag_name);

      # FAILURE - send to alerts channel
      - name: Notify Slack (failure → alerts)
        if: ${{ failure() }}
        uses: ravsamhq/notify-slack-action@v2
        with:
          status: ${{ job.status }}
          notification_title: "❌ {workflow}"
          message_format: "{emoji} *{job}* in *{workflow}* {status_message}"
          footer: "Linked Repo <{repo_url}|{repo}> | <{run_url}|View Workflow Run>"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_ALERT_WEBHOOK }}

      # SUCCESS - send to builds channel
      - name: Notify Slack (ok → builds)
        if: ${{ success() }}
        uses: ravsamhq/notify-slack-action@v2
        with:
          status: ${{ job.status }}
          notification_title: "✅ {workflow}"
          message_format: |
            {emoji} *{job}* in *{workflow}* {status_message}
            *Release:* <${{ steps.release_info.outputs.html_url }}|${{ steps.release_info.outputs.tag_name }}>
            *Description:*
            ${{ steps.release_info.outputs.body }}
          footer: "Linked Repo <{repo_url}|{repo}> | <{run_url}|View Workflow Run>"

        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_BUILD_WEBHOOK }}
