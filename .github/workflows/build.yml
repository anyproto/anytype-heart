on:
  push:
    tags:
      - 'v*.*.*'
name: Build
jobs:
  build:
    runs-on: macos-11
    steps:
      - name: fix android ndk bundle
        run: |
          majorVersion=23
          ANDROID_NDK_ROOT=${ANDROID_SDK_ROOT}/ndk-bundle
          SDKMANAGER=${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager
          ndkVersion=$(${SDKMANAGER} --list | grep "ndk;${majorVersion}.*" | awk '{gsub("ndk;", ""); print $1}' | sort -V | tail -n1)
          echo $ndkVersion
          ln -sf $ANDROID_SDK_ROOT/ndk/$ndkVersion $ANDROID_NDK_ROOT
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: '~1.20.8'
      - name: Setup GO
        run: |
          echo GOPATH=$(go env GOPATH) >> $GITHUB_ENV
          echo GOBIN=$(go env GOPATH)/bin >> $GITHUB_ENV
          echo $(go env GOPATH)/bin >> $GITHUB_PATH
      - name: Install patched gox
        run: |
          mkdir -p $GOPATH/src/github.com/mitchellh
          cd $GOPATH/src/github.com/mitchellh
          git clone https://github.com/aslakhellesoy/gox
          cd gox
          git fetch
          git checkout db6184738b77fbd5089e5fa1112177f391c91b24
          go install github.com/mitchellh/gox
      - name: Install brew and node deps
        run: |
          curl https://raw.githubusercontent.com/Homebrew/homebrew-core/31b24d65a7210ea0a5689d5ad00dd8d1bf5211db/Formula/protobuf.rb --output protobuf.rb
          HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1 HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_NO_INSTALL_CLEANUP=1 brew install ./protobuf.rb
          HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1 HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_NO_INSTALL_CLEANUP=1 brew install --ignore-dependencies swift-protobuf
          HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1 HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_NO_INSTALL_CLEANUP=1  brew install mingw-w64
          brew tap filosottile/musl-cross
          HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1 HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_NO_INSTALL_CLEANUP=1 brew install filosottile/musl-cross/musl-cross
          npm i -g node-gyp
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
      - name: Set env vars
        env:
          AMPLITUDE_KEY: ${{ secrets.AMPLITUDE_KEY }}
          UNSPLASH_KEY: ${{ secrets.UNSPLASH_KEY }}
        run: |
          GIT_SUMMARY=$(git describe --tags --always)
          echo "FLAGS=-X github.com/anyproto/anytype-heart/util/vcs.GitSummary=${GIT_SUMMARY} -X github.com/anyproto/anytype-heart/metrics.DefaultAmplitudeKey=${AMPLITUDE_KEY} -X github.com/anyproto/anytype-heart/util/unsplash.DefaultToken=${UNSPLASH_KEY}" >> $GITHUB_ENV
          echo VERSION=${GITHUB_REF##*/} >> $GITHUB_ENV
          echo SDKROOT=$(xcrun --sdk macosx --show-sdk-path) >> $GITHUB_ENV
          echo GOPRIVATE=github.com/anyproto >> $GITHUB_ENV
          echo $(pwd)/deps >> $GITHUB_PATH
          echo "${GOBIN}" >> $GITHUB_PATH
          git config --global url."https://${{ secrets.ANYTYPE_PAT }}@github.com/".insteadOf "https://github.com/"
      - name: Go mod download
        run: |
          go mod download
      - name: install protoc
        run: |
          make setup-protoc
      - name: setup go
        run: |
          make setup-go
          make setup-gomobile
          which gomobile
      - name: Cross-compile library mac/win
        run: |
          echo $FLAGS
          mkdir -p .release
          gox -cgo -ldflags="$FLAGS" -osarch="darwin/amd64 darwin/arm64" --tags="envproduction nographviz nowatchdog nosigar nomutexdeadlockdetector" -output="{{.OS}}-{{.Arch}}" github.com/anyproto/anytype-heart/cmd/grpcserver
          make protos-server
          CC="x86_64-w64-mingw32-gcc" CXX="x86_64-w64-mingw32-g++" gox -cgo -ldflags="$FLAGS -linkmode external -extldflags=-static" -osarch="windows/amd64" --tags="envproduction nographviz nowatchdog nosigar nomutexdeadlockdetector noheic" -output="{{.OS}}-{{.Arch}}" github.com/anyproto/anytype-heart/cmd/grpcserver
          ls -lha .
      - name: Make JS protos
        run: |
          make protos-js
          mv dist/js/pb protobuf
          mkdir -p protobuf/protos
          cp pb/protos/*.proto ./protobuf/protos
          cp pb/protos/service/*.proto ./protobuf/protos
          cp pkg/lib/pb/model/protos/*.proto ./protobuf/protos
      - name: Add system relations/types jsons
        run: |
          mkdir -p json/
          cp pkg/lib/bundle/systemRelations.json ./json
          cp pkg/lib/bundle/systemTypes.json ./json
          cp pkg/lib/bundle/internalRelations.json ./json
          cp pkg/lib/bundle/internalTypes.json ./json
      - name: Upload protobuf artifact for linux build
        uses: actions/upload-artifact@v2
        with:
          name: libs
          path: |
            protobuf
          if-no-files-found: error
          retention-days: 1
      - name: Pack server win
        run: |
          declare -a arr=("windows-amd64")
          for i in "${arr[@]}"
          do
          OSARCH=${i%.*}
          cp ./${i}* ./grpc-server.exe
          zip -r js_${VERSION}_${OSARCH}.zip grpc-server.exe protobuf json
          mv js_${VERSION}_${OSARCH}.zip .release/
          done
      - name: Pack server unix
        run: |
          declare -a arr=("darwin-amd64" "darwin-arm64")
          for i in "${arr[@]}"
          do
          OSARCH=${i%.*}
          cp ./${i}* ./grpc-server
          tar -czf js_${VERSION}_${OSARCH}.tar.gz grpc-server protobuf json
          mv js_${VERSION}_${OSARCH}.tar.gz .release/
          done
      - name: Make swift protos
        run: |
          mkdir -p .release
          make protos-swift
          rm -rf protobuf
          mv dist/ios/protobuf protobuf
          mkdir -p protobuf/protos
          cp pb/protos/*.proto ./protobuf/protos
          cp pb/protos/service/*.proto ./protobuf/protos
          cp pkg/lib/pb/model/protos/*.proto ./protobuf/protos
      - name: Add system relations/types jsons
        run: |
          mkdir -p json/
          cp pkg/lib/bundle/systemRelations.json ./json
          cp pkg/lib/bundle/relations.json ./json
          cp pkg/lib/bundle/systemTypes.json ./json
          cp pkg/lib/bundle/internalRelations.json ./json
          cp pkg/lib/bundle/internalTypes.json ./json
      - name: Compile ios lib
        run: |
          go install github.com/vektra/mockery/v2@v2.32.0
          go install go.uber.org/mock/mockgen@v0.3.0
          make test-deps
          gomobile bind -tags "envproduction nogrpcserver gomobile nowatchdog nosigar nomutexdeadlockdetector" -ldflags "$FLAGS" -v -target=ios -o Lib.xcframework github.com/anyproto/anytype-heart/clientlibrary/service github.com/anyproto/anytype-heart/core || true
          sudo /usr/sbin/purge
          gtar --exclude ".*" -czvf ios_framework_${VERSION}.tar.gz Lib.xcframework protobuf json
          mv ios_framework_${VERSION}.tar.gz .release/
      - name: Make java protos
        run: |
          make protos-java
          rm -rf protobuf
          mv dist/android/pb protobuf
          mkdir -p protobuf/protos
          cp pb/protos/*.proto ./protobuf/protos
          cp pb/protos/service/*.proto ./protobuf/protos
          cp pkg/lib/pb/model/protos/*.proto ./protobuf/protos
      - name: Add system relations/types jsons
        run: |
          mkdir -p json/
          cp pkg/lib/bundle/systemRelations.json ./json
          cp pkg/lib/bundle/systemTypes.json ./json
          cp pkg/lib/bundle/internalRelations.json ./json
          cp pkg/lib/bundle/internalTypes.json ./json
      - name: Compile android lib
        run: |
          gomobile bind -tags "envproduction nogrpcserver gomobile nowatchdog nosigar nomutexdeadlockdetector" -ldflags "$FLAGS" -v -target=android -androidapi 19 -o lib.aar github.com/anyproto/anytype-heart/clientlibrary/service github.com/anyproto/anytype-heart/core || true
          sudo /usr/sbin/purge
          gtar --exclude ".*" -czvf android_lib_${VERSION}.tar.gz lib.aar protobuf json
          mv android_lib_${VERSION}.tar.gz .release/
      - name: Publish android lib to maven
        run: |
          gradle publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_USER: ${{ github.actor }}
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          prerelease: ${{ contains(github.ref, '-rc') }}
          fail_on_unmatched_files: true
          files: '.release/*'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build_linux:
    runs-on: ubuntu-22.04
    steps:
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: '~1.20.8'
      - name: Setup GO
        run: |
          echo GOPATH=$(go env GOPATH) >> $GITHUB_ENV
          echo GOBIN=$(go env GOPATH)/bin >> $GITHUB_ENV
          echo $(go env GOPATH)/bin >> $GITHUB_PATH

      - name: Setup license repositor
        uses: actions/checkout@master
        with:
          repository: anyproto/open
          ref: refs/heads/main
          path: ./open

      - name: Check licenses
        run: |
          cd open
          python3 tools/generate.py --platform golang
          cd ..
          sudo gem install license_finder
          license_finder inherited_decisions add open/decisions.yml
          license_finder --enabled-package-managers gomodules

      - name: Install patched gox
        run: |
          rm -rf $GOPATH/src/github.com/mitchellh
          mkdir -p $GOPATH/src/github.com/mitchellh
          cd $GOPATH/src/github.com/mitchellh
          git clone https://github.com/aslakhellesoy/gox
          cd gox
          git fetch
          git checkout db6184738b77fbd5089e5fa1112177f391c91b24
          go install github.com/mitchellh/gox
      - name: Apt install and node deps
        run: |
          sudo apt update
          sudo apt install -y protobuf-compiler libprotoc-dev
          curl -O https://musl.cc/aarch64-linux-musl-cross.tgz
          curl -O https://musl.cc/x86_64-linux-musl-native.tgz
          tar xzf aarch64-linux-musl-cross.tgz -C $HOME
          tar xzf x86_64-linux-musl-native.tgz -C $HOME
          npm i -g node-gyp
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
      - name: Set env vars
        env:
          AMPLITUDE_KEY: ${{ secrets.AMPLITUDE_KEY }}
          UNSPLASH_KEY: ${{ secrets.UNSPLASH_KEY }}
        run: |
          GIT_SUMMARY=$(git describe --tags --always)
          echo GOPRIVATE=github.com/anyproto >> $GITHUB_ENV
          echo "FLAGS=-X github.com/anyproto/anytype-heart/util/vcs.GitSummary=${GIT_SUMMARY} -X github.com/anyproto/anytype-heart/metrics.DefaultAmplitudeKey=${AMPLITUDE_KEY} -X github.com/anyproto/anytype-heart/util/unsplash.DefaultToken=${UNSPLASH_KEY}" >> $GITHUB_ENV
          echo VERSION=${GITHUB_REF##*/} >> $GITHUB_ENV
          git config --global url."https://${{ secrets.ANYTYPE_PAT }}@github.com/".insteadOf "https://github.com/"
      - name: Go mod download
        run: |
          go mod download
      - name: install protoc
        run: |
          HAS_SYSTEM_PROTOBUF=false make setup-protoc
      - name: setup go
        run: |
          make setup-go
      - name: Cross-compile library for linux amd64/arm64
        run: |
          echo $FLAGS
          mkdir -p .release
          CXX=$HOME/x86_64-linux-musl-native/bin/x86_64-linux-musl-g++ CC=$HOME/x86_64-linux-musl-native/bin/x86_64-linux-musl-gcc gox -cgo -osarch="linux/amd64" -ldflags="$FLAGS -linkmode external -extldflags=-static" --tags="envproduction nographviz nowatchdog nosigar nomutexdeadlockdetector" -output="{{.OS}}-{{.Arch}}" github.com/anyproto/anytype-heart/cmd/grpcserver
          CXX=$HOME/aarch64-linux-musl-cross/bin/aarch64-linux-musl-g++ CC=$HOME/aarch64-linux-musl-cross/bin/aarch64-linux-musl-gcc gox -cgo -osarch="linux/arm64" -ldflags="$FLAGS -linkmode external -extldflags=-static" --tags="envproduction nographviz nowatchdog nosigar nomutexdeadlockdetector" -output="{{.OS}}-{{.Arch}}" github.com/anyproto/anytype-heart/cmd/grpcserver
          make protos-server
      - name: Make JS protos
        run: |
          make protos-js
          mv dist/js/pb protobuf
          mkdir -p protobuf/protos
          cp pb/protos/*.proto ./protobuf/protos
          cp pb/protos/service/*.proto ./protobuf/protos
          cp pkg/lib/pb/model/protos/*.proto ./protobuf/protos
      - name: Add system relations
        run: |
          mkdir -p json/
          cp pkg/lib/bundle/systemRelations.json ./json
          cp pkg/lib/bundle/systemTypes.json ./json
          cp pkg/lib/bundle/internalRelations.json ./json
          cp pkg/lib/bundle/internalTypes.json ./json
      - name: Upload protobuf artifact for linux build
        uses: actions/upload-artifact@v2
        with:
          name: libs
          path: |
            protobuf
          if-no-files-found: error
          retention-days: 1
      - name: Pack server unix
        run: |
          declare -a arr=("linux-amd64" "linux-arm64")
          for i in "${arr[@]}"
          do
          OSARCH=${i%.*}
          cp ./${i}* ./grpc-server
          tar -czf js_${VERSION}_${OSARCH}.tar.gz grpc-server protobuf json
          mv js_${VERSION}_${OSARCH}.tar.gz .release/
          done
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          prerelease: ${{ contains(github.ref, '-rc') }}
          fail_on_unmatched_files: true
          files: '.release/*'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}