// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.0.0-20250314150957-57a97b786bfd
// source: pb/protos/service/service.proto

package service

import (
	context "context"
	pb "github.com/anyproto/anytype-heart/pb"
	grpc "google.golang.org/grpc"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientCommandsHandler is the handler API for ClientCommands service.
var clientCommandsHandler ClientCommandsHandler

type ClientCommandsHandler interface {
	AppGetVersion(context.Context, *pb.RpcAppGetVersionRequest) *pb.RpcAppGetVersionResponse
	AppSetDeviceState(context.Context, *pb.RpcAppSetDeviceStateRequest) *pb.RpcAppSetDeviceStateResponse
	AppShutdown(context.Context, *pb.RpcAppShutdownRequest) *pb.RpcAppShutdownResponse
	WalletCreate(context.Context, *pb.RpcWalletCreateRequest) *pb.RpcWalletCreateResponse
	WalletRecover(context.Context, *pb.RpcWalletRecoverRequest) *pb.RpcWalletRecoverResponse
	WalletConvert(context.Context, *pb.RpcWalletConvertRequest) *pb.RpcWalletConvertResponse
	AccountLocalLinkNewChallenge(context.Context, *pb.RpcAccountLocalLinkNewChallengeRequest) *pb.RpcAccountLocalLinkNewChallengeResponse
	AccountLocalLinkSolveChallenge(context.Context, *pb.RpcAccountLocalLinkSolveChallengeRequest) *pb.RpcAccountLocalLinkSolveChallengeResponse
	WalletCreateSession(context.Context, *pb.RpcWalletCreateSessionRequest) *pb.RpcWalletCreateSessionResponse
	WalletCloseSession(context.Context, *pb.RpcWalletCloseSessionRequest) *pb.RpcWalletCloseSessionResponse
	WorkspaceCreate(context.Context, *pb.RpcWorkspaceCreateRequest) *pb.RpcWorkspaceCreateResponse
	WorkspaceOpen(context.Context, *pb.RpcWorkspaceOpenRequest) *pb.RpcWorkspaceOpenResponse
	WorkspaceObjectAdd(context.Context, *pb.RpcWorkspaceObjectAddRequest) *pb.RpcWorkspaceObjectAddResponse
	WorkspaceObjectListAdd(context.Context, *pb.RpcWorkspaceObjectListAddRequest) *pb.RpcWorkspaceObjectListAddResponse
	WorkspaceObjectListRemove(context.Context, *pb.RpcWorkspaceObjectListRemoveRequest) *pb.RpcWorkspaceObjectListRemoveResponse
	WorkspaceSelect(context.Context, *pb.RpcWorkspaceSelectRequest) *pb.RpcWorkspaceSelectResponse
	WorkspaceGetCurrent(context.Context, *pb.RpcWorkspaceGetCurrentRequest) *pb.RpcWorkspaceGetCurrentResponse
	WorkspaceGetAll(context.Context, *pb.RpcWorkspaceGetAllRequest) *pb.RpcWorkspaceGetAllResponse
	WorkspaceSetInfo(context.Context, *pb.RpcWorkspaceSetInfoRequest) *pb.RpcWorkspaceSetInfoResponse
	WorkspaceExport(context.Context, *pb.RpcWorkspaceExportRequest) *pb.RpcWorkspaceExportResponse
	AccountRecover(context.Context, *pb.RpcAccountRecoverRequest) *pb.RpcAccountRecoverResponse
	AccountMigrate(context.Context, *pb.RpcAccountMigrateRequest) *pb.RpcAccountMigrateResponse
	AccountMigrateCancel(context.Context, *pb.RpcAccountMigrateCancelRequest) *pb.RpcAccountMigrateCancelResponse
	AccountCreate(context.Context, *pb.RpcAccountCreateRequest) *pb.RpcAccountCreateResponse
	AccountDelete(context.Context, *pb.RpcAccountDeleteRequest) *pb.RpcAccountDeleteResponse
	AccountRevertDeletion(context.Context, *pb.RpcAccountRevertDeletionRequest) *pb.RpcAccountRevertDeletionResponse
	AccountSelect(context.Context, *pb.RpcAccountSelectRequest) *pb.RpcAccountSelectResponse
	AccountEnableLocalNetworkSync(context.Context, *pb.RpcAccountEnableLocalNetworkSyncRequest) *pb.RpcAccountEnableLocalNetworkSyncResponse
	AccountChangeJsonApiAddr(context.Context, *pb.RpcAccountChangeJsonApiAddrRequest) *pb.RpcAccountChangeJsonApiAddrResponse
	AccountStop(context.Context, *pb.RpcAccountStopRequest) *pb.RpcAccountStopResponse
	AccountMove(context.Context, *pb.RpcAccountMoveRequest) *pb.RpcAccountMoveResponse
	AccountConfigUpdate(context.Context, *pb.RpcAccountConfigUpdateRequest) *pb.RpcAccountConfigUpdateResponse
	AccountRecoverFromLegacyExport(context.Context, *pb.RpcAccountRecoverFromLegacyExportRequest) *pb.RpcAccountRecoverFromLegacyExportResponse
	AccountChangeNetworkConfigAndRestart(context.Context, *pb.RpcAccountChangeNetworkConfigAndRestartRequest) *pb.RpcAccountChangeNetworkConfigAndRestartResponse
	SpaceDelete(context.Context, *pb.RpcSpaceDeleteRequest) *pb.RpcSpaceDeleteResponse
	SpaceInviteGenerate(context.Context, *pb.RpcSpaceInviteGenerateRequest) *pb.RpcSpaceInviteGenerateResponse
	SpaceInviteGetCurrent(context.Context, *pb.RpcSpaceInviteGetCurrentRequest) *pb.RpcSpaceInviteGetCurrentResponse
	SpaceInviteRevoke(context.Context, *pb.RpcSpaceInviteRevokeRequest) *pb.RpcSpaceInviteRevokeResponse
	SpaceInviteView(context.Context, *pb.RpcSpaceInviteViewRequest) *pb.RpcSpaceInviteViewResponse
	SpaceJoin(context.Context, *pb.RpcSpaceJoinRequest) *pb.RpcSpaceJoinResponse
	SpaceJoinCancel(context.Context, *pb.RpcSpaceJoinCancelRequest) *pb.RpcSpaceJoinCancelResponse
	SpaceStopSharing(context.Context, *pb.RpcSpaceStopSharingRequest) *pb.RpcSpaceStopSharingResponse
	SpaceRequestApprove(context.Context, *pb.RpcSpaceRequestApproveRequest) *pb.RpcSpaceRequestApproveResponse
	SpaceRequestDecline(context.Context, *pb.RpcSpaceRequestDeclineRequest) *pb.RpcSpaceRequestDeclineResponse
	SpaceLeaveApprove(context.Context, *pb.RpcSpaceLeaveApproveRequest) *pb.RpcSpaceLeaveApproveResponse
	SpaceMakeShareable(context.Context, *pb.RpcSpaceMakeShareableRequest) *pb.RpcSpaceMakeShareableResponse
	SpaceParticipantRemove(context.Context, *pb.RpcSpaceParticipantRemoveRequest) *pb.RpcSpaceParticipantRemoveResponse
	SpaceParticipantPermissionsChange(context.Context, *pb.RpcSpaceParticipantPermissionsChangeRequest) *pb.RpcSpaceParticipantPermissionsChangeResponse
	SpaceSetOrder(context.Context, *pb.RpcSpaceSetOrderRequest) *pb.RpcSpaceSetOrderResponse
	SpaceUnsetOrder(context.Context, *pb.RpcSpaceUnsetOrderRequest) *pb.RpcSpaceUnsetOrderResponse
	PublishingCreate(context.Context, *pb.RpcPublishingCreateRequest) *pb.RpcPublishingCreateResponse
	PublishingRemove(context.Context, *pb.RpcPublishingRemoveRequest) *pb.RpcPublishingRemoveResponse
	PublishingList(context.Context, *pb.RpcPublishingListRequest) *pb.RpcPublishingListResponse
	PublishingResolveUri(context.Context, *pb.RpcPublishingResolveUriRequest) *pb.RpcPublishingResolveUriResponse
	PublishingGetStatus(context.Context, *pb.RpcPublishingGetStatusRequest) *pb.RpcPublishingGetStatusResponse
	ObjectOpen(context.Context, *pb.RpcObjectOpenRequest) *pb.RpcObjectOpenResponse
	ObjectClose(context.Context, *pb.RpcObjectCloseRequest) *pb.RpcObjectCloseResponse
	ObjectShow(context.Context, *pb.RpcObjectShowRequest) *pb.RpcObjectShowResponse
	ObjectCreate(context.Context, *pb.RpcObjectCreateRequest) *pb.RpcObjectCreateResponse
	ObjectCreateBookmark(context.Context, *pb.RpcObjectCreateBookmarkRequest) *pb.RpcObjectCreateBookmarkResponse
	ObjectCreateFromUrl(context.Context, *pb.RpcObjectCreateFromUrlRequest) *pb.RpcObjectCreateFromUrlResponse
	ObjectCreateSet(context.Context, *pb.RpcObjectCreateSetRequest) *pb.RpcObjectCreateSetResponse
	ObjectGraph(context.Context, *pb.RpcObjectGraphRequest) *pb.RpcObjectGraphResponse
	ObjectSearch(context.Context, *pb.RpcObjectSearchRequest) *pb.RpcObjectSearchResponse
	ObjectSearchWithMeta(context.Context, *pb.RpcObjectSearchWithMetaRequest) *pb.RpcObjectSearchWithMetaResponse
	ObjectSearchSubscribe(context.Context, *pb.RpcObjectSearchSubscribeRequest) *pb.RpcObjectSearchSubscribeResponse
	ObjectCrossSpaceSearchSubscribe(context.Context, *pb.RpcObjectCrossSpaceSearchSubscribeRequest) *pb.RpcObjectCrossSpaceSearchSubscribeResponse
	ObjectCrossSpaceSearchUnsubscribe(context.Context, *pb.RpcObjectCrossSpaceSearchUnsubscribeRequest) *pb.RpcObjectCrossSpaceSearchUnsubscribeResponse
	ObjectSubscribeIds(context.Context, *pb.RpcObjectSubscribeIdsRequest) *pb.RpcObjectSubscribeIdsResponse
	ObjectGroupsSubscribe(context.Context, *pb.RpcObjectGroupsSubscribeRequest) *pb.RpcObjectGroupsSubscribeResponse
	ObjectSearchUnsubscribe(context.Context, *pb.RpcObjectSearchUnsubscribeRequest) *pb.RpcObjectSearchUnsubscribeResponse
	ObjectSetDetails(context.Context, *pb.RpcObjectSetDetailsRequest) *pb.RpcObjectSetDetailsResponse
	ObjectDuplicate(context.Context, *pb.RpcObjectDuplicateRequest) *pb.RpcObjectDuplicateResponse
	ObjectSetObjectType(context.Context, *pb.RpcObjectSetObjectTypeRequest) *pb.RpcObjectSetObjectTypeResponse
	ObjectSetLayout(context.Context, *pb.RpcObjectSetLayoutRequest) *pb.RpcObjectSetLayoutResponse
	ObjectSetInternalFlags(context.Context, *pb.RpcObjectSetInternalFlagsRequest) *pb.RpcObjectSetInternalFlagsResponse
	ObjectSetIsFavorite(context.Context, *pb.RpcObjectSetIsFavoriteRequest) *pb.RpcObjectSetIsFavoriteResponse
	ObjectSetIsArchived(context.Context, *pb.RpcObjectSetIsArchivedRequest) *pb.RpcObjectSetIsArchivedResponse
	ObjectSetSource(context.Context, *pb.RpcObjectSetSourceRequest) *pb.RpcObjectSetSourceResponse
	ObjectWorkspaceSetDashboard(context.Context, *pb.RpcObjectWorkspaceSetDashboardRequest) *pb.RpcObjectWorkspaceSetDashboardResponse
	ObjectListDuplicate(context.Context, *pb.RpcObjectListDuplicateRequest) *pb.RpcObjectListDuplicateResponse
	ObjectListDelete(context.Context, *pb.RpcObjectListDeleteRequest) *pb.RpcObjectListDeleteResponse
	ObjectListSetIsArchived(context.Context, *pb.RpcObjectListSetIsArchivedRequest) *pb.RpcObjectListSetIsArchivedResponse
	ObjectListSetIsFavorite(context.Context, *pb.RpcObjectListSetIsFavoriteRequest) *pb.RpcObjectListSetIsFavoriteResponse
	ObjectListSetObjectType(context.Context, *pb.RpcObjectListSetObjectTypeRequest) *pb.RpcObjectListSetObjectTypeResponse
	ObjectListSetDetails(context.Context, *pb.RpcObjectListSetDetailsRequest) *pb.RpcObjectListSetDetailsResponse
	ObjectListModifyDetailValues(context.Context, *pb.RpcObjectListModifyDetailValuesRequest) *pb.RpcObjectListModifyDetailValuesResponse
	ObjectApplyTemplate(context.Context, *pb.RpcObjectApplyTemplateRequest) *pb.RpcObjectApplyTemplateResponse
	ObjectToSet(context.Context, *pb.RpcObjectToSetRequest) *pb.RpcObjectToSetResponse
	ObjectToCollection(context.Context, *pb.RpcObjectToCollectionRequest) *pb.RpcObjectToCollectionResponse
	ObjectShareByLink(context.Context, *pb.RpcObjectShareByLinkRequest) *pb.RpcObjectShareByLinkResponse
	ObjectUndo(context.Context, *pb.RpcObjectUndoRequest) *pb.RpcObjectUndoResponse
	ObjectRedo(context.Context, *pb.RpcObjectRedoRequest) *pb.RpcObjectRedoResponse
	ObjectListExport(context.Context, *pb.RpcObjectListExportRequest) *pb.RpcObjectListExportResponse
	ObjectBookmarkFetch(context.Context, *pb.RpcObjectBookmarkFetchRequest) *pb.RpcObjectBookmarkFetchResponse
	ObjectToBookmark(context.Context, *pb.RpcObjectToBookmarkRequest) *pb.RpcObjectToBookmarkResponse
	ObjectImport(context.Context, *pb.RpcObjectImportRequest) *pb.RpcObjectImportResponse
	ObjectImportList(context.Context, *pb.RpcObjectImportListRequest) *pb.RpcObjectImportListResponse
	ObjectImportNotionValidateToken(context.Context, *pb.RpcObjectImportNotionValidateTokenRequest) *pb.RpcObjectImportNotionValidateTokenResponse
	ObjectImportUseCase(context.Context, *pb.RpcObjectImportUseCaseRequest) *pb.RpcObjectImportUseCaseResponse
	ObjectImportExperience(context.Context, *pb.RpcObjectImportExperienceRequest) *pb.RpcObjectImportExperienceResponse
	ObjectDateByTimestamp(context.Context, *pb.RpcObjectDateByTimestampRequest) *pb.RpcObjectDateByTimestampResponse
	ObjectCollectionAdd(context.Context, *pb.RpcObjectCollectionAddRequest) *pb.RpcObjectCollectionAddResponse
	ObjectCollectionRemove(context.Context, *pb.RpcObjectCollectionRemoveRequest) *pb.RpcObjectCollectionRemoveResponse
	ObjectCollectionSort(context.Context, *pb.RpcObjectCollectionSortRequest) *pb.RpcObjectCollectionSortResponse
	ObjectCreateRelation(context.Context, *pb.RpcObjectCreateRelationRequest) *pb.RpcObjectCreateRelationResponse
	ObjectCreateRelationOption(context.Context, *pb.RpcObjectCreateRelationOptionRequest) *pb.RpcObjectCreateRelationOptionResponse
	RelationListRemoveOption(context.Context, *pb.RpcRelationListRemoveOptionRequest) *pb.RpcRelationListRemoveOptionResponse
	RelationOptions(context.Context, *pb.RpcRelationOptionsRequest) *pb.RpcRelationOptionsResponse
	RelationListWithValue(context.Context, *pb.RpcRelationListWithValueRequest) *pb.RpcRelationListWithValueResponse
	ObjectRelationAdd(context.Context, *pb.RpcObjectRelationAddRequest) *pb.RpcObjectRelationAddResponse
	ObjectRelationDelete(context.Context, *pb.RpcObjectRelationDeleteRequest) *pb.RpcObjectRelationDeleteResponse
	ObjectRelationAddFeatured(context.Context, *pb.RpcObjectRelationAddFeaturedRequest) *pb.RpcObjectRelationAddFeaturedResponse
	ObjectRelationRemoveFeatured(context.Context, *pb.RpcObjectRelationRemoveFeaturedRequest) *pb.RpcObjectRelationRemoveFeaturedResponse
	ObjectRelationListAvailable(context.Context, *pb.RpcObjectRelationListAvailableRequest) *pb.RpcObjectRelationListAvailableResponse
	ObjectCreateObjectType(context.Context, *pb.RpcObjectCreateObjectTypeRequest) *pb.RpcObjectCreateObjectTypeResponse
	ObjectTypeRelationAdd(context.Context, *pb.RpcObjectTypeRelationAddRequest) *pb.RpcObjectTypeRelationAddResponse
	ObjectTypeRelationRemove(context.Context, *pb.RpcObjectTypeRelationRemoveRequest) *pb.RpcObjectTypeRelationRemoveResponse
	ObjectTypeRecommendedRelationsSet(context.Context, *pb.RpcObjectTypeRecommendedRelationsSetRequest) *pb.RpcObjectTypeRecommendedRelationsSetResponse
	ObjectTypeRecommendedFeaturedRelationsSet(context.Context, *pb.RpcObjectTypeRecommendedFeaturedRelationsSetRequest) *pb.RpcObjectTypeRecommendedFeaturedRelationsSetResponse
	ObjectTypeListConflictingRelations(context.Context, *pb.RpcObjectTypeListConflictingRelationsRequest) *pb.RpcObjectTypeListConflictingRelationsResponse
	HistoryShowVersion(context.Context, *pb.RpcHistoryShowVersionRequest) *pb.RpcHistoryShowVersionResponse
	HistoryGetVersions(context.Context, *pb.RpcHistoryGetVersionsRequest) *pb.RpcHistoryGetVersionsResponse
	HistorySetVersion(context.Context, *pb.RpcHistorySetVersionRequest) *pb.RpcHistorySetVersionResponse
	HistoryDiffVersions(context.Context, *pb.RpcHistoryDiffVersionsRequest) *pb.RpcHistoryDiffVersionsResponse
	FileSpaceOffload(context.Context, *pb.RpcFileSpaceOffloadRequest) *pb.RpcFileSpaceOffloadResponse
	FileReconcile(context.Context, *pb.RpcFileReconcileRequest) *pb.RpcFileReconcileResponse
	FileListOffload(context.Context, *pb.RpcFileListOffloadRequest) *pb.RpcFileListOffloadResponse
	FileUpload(context.Context, *pb.RpcFileUploadRequest) *pb.RpcFileUploadResponse
	FileDownload(context.Context, *pb.RpcFileDownloadRequest) *pb.RpcFileDownloadResponse
	FileDrop(context.Context, *pb.RpcFileDropRequest) *pb.RpcFileDropResponse
	FileSpaceUsage(context.Context, *pb.RpcFileSpaceUsageRequest) *pb.RpcFileSpaceUsageResponse
	FileNodeUsage(context.Context, *pb.RpcFileNodeUsageRequest) *pb.RpcFileNodeUsageResponse
	NavigationListObjects(context.Context, *pb.RpcNavigationListObjectsRequest) *pb.RpcNavigationListObjectsResponse
	NavigationGetObjectInfoWithLinks(context.Context, *pb.RpcNavigationGetObjectInfoWithLinksRequest) *pb.RpcNavigationGetObjectInfoWithLinksResponse
	TemplateCreateFromObject(context.Context, *pb.RpcTemplateCreateFromObjectRequest) *pb.RpcTemplateCreateFromObjectResponse
	TemplateClone(context.Context, *pb.RpcTemplateCloneRequest) *pb.RpcTemplateCloneResponse
	TemplateExportAll(context.Context, *pb.RpcTemplateExportAllRequest) *pb.RpcTemplateExportAllResponse
	LinkPreview(context.Context, *pb.RpcLinkPreviewRequest) *pb.RpcLinkPreviewResponse
	UnsplashSearch(context.Context, *pb.RpcUnsplashSearchRequest) *pb.RpcUnsplashSearchResponse
	UnsplashDownload(context.Context, *pb.RpcUnsplashDownloadRequest) *pb.RpcUnsplashDownloadResponse
	GalleryDownloadManifest(context.Context, *pb.RpcGalleryDownloadManifestRequest) *pb.RpcGalleryDownloadManifestResponse
	GalleryDownloadIndex(context.Context, *pb.RpcGalleryDownloadIndexRequest) *pb.RpcGalleryDownloadIndexResponse
	BlockUpload(context.Context, *pb.RpcBlockUploadRequest) *pb.RpcBlockUploadResponse
	BlockReplace(context.Context, *pb.RpcBlockReplaceRequest) *pb.RpcBlockReplaceResponse
	BlockCreate(context.Context, *pb.RpcBlockCreateRequest) *pb.RpcBlockCreateResponse
	BlockSplit(context.Context, *pb.RpcBlockSplitRequest) *pb.RpcBlockSplitResponse
	BlockMerge(context.Context, *pb.RpcBlockMergeRequest) *pb.RpcBlockMergeResponse
	BlockCopy(context.Context, *pb.RpcBlockCopyRequest) *pb.RpcBlockCopyResponse
	BlockPaste(context.Context, *pb.RpcBlockPasteRequest) *pb.RpcBlockPasteResponse
	BlockCut(context.Context, *pb.RpcBlockCutRequest) *pb.RpcBlockCutResponse
	BlockSetFields(context.Context, *pb.RpcBlockSetFieldsRequest) *pb.RpcBlockSetFieldsResponse
	BlockExport(context.Context, *pb.RpcBlockExportRequest) *pb.RpcBlockExportResponse
	BlockSetCarriage(context.Context, *pb.RpcBlockSetCarriageRequest) *pb.RpcBlockSetCarriageResponse
	BlockPreview(context.Context, *pb.RpcBlockPreviewRequest) *pb.RpcBlockPreviewResponse
	BlockListDelete(context.Context, *pb.RpcBlockListDeleteRequest) *pb.RpcBlockListDeleteResponse
	BlockListMoveToExistingObject(context.Context, *pb.RpcBlockListMoveToExistingObjectRequest) *pb.RpcBlockListMoveToExistingObjectResponse
	BlockListMoveToNewObject(context.Context, *pb.RpcBlockListMoveToNewObjectRequest) *pb.RpcBlockListMoveToNewObjectResponse
	BlockListConvertToObjects(context.Context, *pb.RpcBlockListConvertToObjectsRequest) *pb.RpcBlockListConvertToObjectsResponse
	BlockListSetFields(context.Context, *pb.RpcBlockListSetFieldsRequest) *pb.RpcBlockListSetFieldsResponse
	BlockListDuplicate(context.Context, *pb.RpcBlockListDuplicateRequest) *pb.RpcBlockListDuplicateResponse
	BlockListSetBackgroundColor(context.Context, *pb.RpcBlockListSetBackgroundColorRequest) *pb.RpcBlockListSetBackgroundColorResponse
	BlockListSetAlign(context.Context, *pb.RpcBlockListSetAlignRequest) *pb.RpcBlockListSetAlignResponse
	BlockListSetVerticalAlign(context.Context, *pb.RpcBlockListSetVerticalAlignRequest) *pb.RpcBlockListSetVerticalAlignResponse
	BlockListTurnInto(context.Context, *pb.RpcBlockListTurnIntoRequest) *pb.RpcBlockListTurnIntoResponse
	BlockTextSetText(context.Context, *pb.RpcBlockTextSetTextRequest) *pb.RpcBlockTextSetTextResponse
	BlockTextSetColor(context.Context, *pb.RpcBlockTextSetColorRequest) *pb.RpcBlockTextSetColorResponse
	BlockTextSetStyle(context.Context, *pb.RpcBlockTextSetStyleRequest) *pb.RpcBlockTextSetStyleResponse
	BlockTextSetChecked(context.Context, *pb.RpcBlockTextSetCheckedRequest) *pb.RpcBlockTextSetCheckedResponse
	BlockTextSetIcon(context.Context, *pb.RpcBlockTextSetIconRequest) *pb.RpcBlockTextSetIconResponse
	BlockTextListSetColor(context.Context, *pb.RpcBlockTextListSetColorRequest) *pb.RpcBlockTextListSetColorResponse
	BlockTextListSetMark(context.Context, *pb.RpcBlockTextListSetMarkRequest) *pb.RpcBlockTextListSetMarkResponse
	BlockTextListSetStyle(context.Context, *pb.RpcBlockTextListSetStyleRequest) *pb.RpcBlockTextListSetStyleResponse
	BlockTextListClearStyle(context.Context, *pb.RpcBlockTextListClearStyleRequest) *pb.RpcBlockTextListClearStyleResponse
	BlockTextListClearContent(context.Context, *pb.RpcBlockTextListClearContentRequest) *pb.RpcBlockTextListClearContentResponse
	BlockFileSetName(context.Context, *pb.RpcBlockFileSetNameRequest) *pb.RpcBlockFileSetNameResponse
	BlockFileSetTargetObjectId(context.Context, *pb.RpcBlockFileSetTargetObjectIdRequest) *pb.RpcBlockFileSetTargetObjectIdResponse
	BlockImageSetName(context.Context, *pb.RpcBlockImageSetNameRequest) *pb.RpcBlockImageSetNameResponse
	BlockVideoSetName(context.Context, *pb.RpcBlockVideoSetNameRequest) *pb.RpcBlockVideoSetNameResponse
	BlockFileCreateAndUpload(context.Context, *pb.RpcBlockFileCreateAndUploadRequest) *pb.RpcBlockFileCreateAndUploadResponse
	BlockFileListSetStyle(context.Context, *pb.RpcBlockFileListSetStyleRequest) *pb.RpcBlockFileListSetStyleResponse
	BlockDataviewViewCreate(context.Context, *pb.RpcBlockDataviewViewCreateRequest) *pb.RpcBlockDataviewViewCreateResponse
	BlockDataviewViewDelete(context.Context, *pb.RpcBlockDataviewViewDeleteRequest) *pb.RpcBlockDataviewViewDeleteResponse
	BlockDataviewViewUpdate(context.Context, *pb.RpcBlockDataviewViewUpdateRequest) *pb.RpcBlockDataviewViewUpdateResponse
	BlockDataviewViewSetActive(context.Context, *pb.RpcBlockDataviewViewSetActiveRequest) *pb.RpcBlockDataviewViewSetActiveResponse
	BlockDataviewViewSetPosition(context.Context, *pb.RpcBlockDataviewViewSetPositionRequest) *pb.RpcBlockDataviewViewSetPositionResponse
	BlockDataviewSetSource(context.Context, *pb.RpcBlockDataviewSetSourceRequest) *pb.RpcBlockDataviewSetSourceResponse
	BlockDataviewRelationAdd(context.Context, *pb.RpcBlockDataviewRelationAddRequest) *pb.RpcBlockDataviewRelationAddResponse
	BlockDataviewRelationDelete(context.Context, *pb.RpcBlockDataviewRelationDeleteRequest) *pb.RpcBlockDataviewRelationDeleteResponse
	BlockDataviewGroupOrderUpdate(context.Context, *pb.RpcBlockDataviewGroupOrderUpdateRequest) *pb.RpcBlockDataviewGroupOrderUpdateResponse
	BlockDataviewObjectOrderUpdate(context.Context, *pb.RpcBlockDataviewObjectOrderUpdateRequest) *pb.RpcBlockDataviewObjectOrderUpdateResponse
	BlockDataviewObjectOrderMove(context.Context, *pb.RpcBlockDataviewObjectOrderMoveRequest) *pb.RpcBlockDataviewObjectOrderMoveResponse
	BlockDataviewCreateFromExistingObject(context.Context, *pb.RpcBlockDataviewCreateFromExistingObjectRequest) *pb.RpcBlockDataviewCreateFromExistingObjectResponse
	BlockDataviewFilterAdd(context.Context, *pb.RpcBlockDataviewFilterAddRequest) *pb.RpcBlockDataviewFilterAddResponse
	BlockDataviewFilterRemove(context.Context, *pb.RpcBlockDataviewFilterRemoveRequest) *pb.RpcBlockDataviewFilterRemoveResponse
	BlockDataviewFilterReplace(context.Context, *pb.RpcBlockDataviewFilterReplaceRequest) *pb.RpcBlockDataviewFilterReplaceResponse
	BlockDataviewFilterSort(context.Context, *pb.RpcBlockDataviewFilterSortRequest) *pb.RpcBlockDataviewFilterSortResponse
	BlockDataviewSortAdd(context.Context, *pb.RpcBlockDataviewSortAddRequest) *pb.RpcBlockDataviewSortAddResponse
	BlockDataviewSortRemove(context.Context, *pb.RpcBlockDataviewSortRemoveRequest) *pb.RpcBlockDataviewSortRemoveResponse
	BlockDataviewSortReplace(context.Context, *pb.RpcBlockDataviewSortReplaceRequest) *pb.RpcBlockDataviewSortReplaceResponse
	BlockDataviewSortSort(context.Context, *pb.RpcBlockDataviewSortSSortRequest) *pb.RpcBlockDataviewSortSSortResponse
	BlockDataviewViewRelationAdd(context.Context, *pb.RpcBlockDataviewViewRelationAddRequest) *pb.RpcBlockDataviewViewRelationAddResponse
	BlockDataviewViewRelationRemove(context.Context, *pb.RpcBlockDataviewViewRelationRemoveRequest) *pb.RpcBlockDataviewViewRelationRemoveResponse
	BlockDataviewViewRelationReplace(context.Context, *pb.RpcBlockDataviewViewRelationReplaceRequest) *pb.RpcBlockDataviewViewRelationReplaceResponse
	BlockDataviewViewRelationSort(context.Context, *pb.RpcBlockDataviewViewRelationSortRequest) *pb.RpcBlockDataviewViewRelationSortResponse
	BlockTableCreate(context.Context, *pb.RpcBlockTableCreateRequest) *pb.RpcBlockTableCreateResponse
	BlockTableExpand(context.Context, *pb.RpcBlockTableExpandRequest) *pb.RpcBlockTableExpandResponse
	BlockTableRowCreate(context.Context, *pb.RpcBlockTableRowCreateRequest) *pb.RpcBlockTableRowCreateResponse
	BlockTableRowDelete(context.Context, *pb.RpcBlockTableRowDeleteRequest) *pb.RpcBlockTableRowDeleteResponse
	BlockTableRowDuplicate(context.Context, *pb.RpcBlockTableRowDuplicateRequest) *pb.RpcBlockTableRowDuplicateResponse
	BlockTableRowSetHeader(context.Context, *pb.RpcBlockTableRowSetHeaderRequest) *pb.RpcBlockTableRowSetHeaderResponse
	BlockTableColumnCreate(context.Context, *pb.RpcBlockTableColumnCreateRequest) *pb.RpcBlockTableColumnCreateResponse
	BlockTableColumnMove(context.Context, *pb.RpcBlockTableColumnMoveRequest) *pb.RpcBlockTableColumnMoveResponse
	BlockTableColumnDelete(context.Context, *pb.RpcBlockTableColumnDeleteRequest) *pb.RpcBlockTableColumnDeleteResponse
	BlockTableColumnDuplicate(context.Context, *pb.RpcBlockTableColumnDuplicateRequest) *pb.RpcBlockTableColumnDuplicateResponse
	BlockTableRowListFill(context.Context, *pb.RpcBlockTableRowListFillRequest) *pb.RpcBlockTableRowListFillResponse
	BlockTableRowListClean(context.Context, *pb.RpcBlockTableRowListCleanRequest) *pb.RpcBlockTableRowListCleanResponse
	BlockTableColumnListFill(context.Context, *pb.RpcBlockTableColumnListFillRequest) *pb.RpcBlockTableColumnListFillResponse
	BlockTableSort(context.Context, *pb.RpcBlockTableSortRequest) *pb.RpcBlockTableSortResponse
	BlockCreateWidget(context.Context, *pb.RpcBlockCreateWidgetRequest) *pb.RpcBlockCreateWidgetResponse
	BlockWidgetSetTargetId(context.Context, *pb.RpcBlockWidgetSetTargetIdRequest) *pb.RpcBlockWidgetSetTargetIdResponse
	BlockWidgetSetLayout(context.Context, *pb.RpcBlockWidgetSetLayoutRequest) *pb.RpcBlockWidgetSetLayoutResponse
	BlockWidgetSetLimit(context.Context, *pb.RpcBlockWidgetSetLimitRequest) *pb.RpcBlockWidgetSetLimitResponse
	BlockWidgetSetViewId(context.Context, *pb.RpcBlockWidgetSetViewIdRequest) *pb.RpcBlockWidgetSetViewIdResponse
	BlockLinkCreateWithObject(context.Context, *pb.RpcBlockLinkCreateWithObjectRequest) *pb.RpcBlockLinkCreateWithObjectResponse
	BlockLinkListSetAppearance(context.Context, *pb.RpcBlockLinkListSetAppearanceRequest) *pb.RpcBlockLinkListSetAppearanceResponse
	BlockBookmarkFetch(context.Context, *pb.RpcBlockBookmarkFetchRequest) *pb.RpcBlockBookmarkFetchResponse
	BlockBookmarkCreateAndFetch(context.Context, *pb.RpcBlockBookmarkCreateAndFetchRequest) *pb.RpcBlockBookmarkCreateAndFetchResponse
	BlockRelationSetKey(context.Context, *pb.RpcBlockRelationSetKeyRequest) *pb.RpcBlockRelationSetKeyResponse
	BlockRelationAdd(context.Context, *pb.RpcBlockRelationAddRequest) *pb.RpcBlockRelationAddResponse
	BlockDivListSetStyle(context.Context, *pb.RpcBlockDivListSetStyleRequest) *pb.RpcBlockDivListSetStyleResponse
	BlockLatexSetText(context.Context, *pb.RpcBlockLatexSetTextRequest) *pb.RpcBlockLatexSetTextResponse
	ProcessCancel(context.Context, *pb.RpcProcessCancelRequest) *pb.RpcProcessCancelResponse
	ProcessSubscribe(context.Context, *pb.RpcProcessSubscribeRequest) *pb.RpcProcessSubscribeResponse
	ProcessUnsubscribe(context.Context, *pb.RpcProcessUnsubscribeRequest) *pb.RpcProcessUnsubscribeResponse
	LogSend(context.Context, *pb.RpcLogSendRequest) *pb.RpcLogSendResponse
	DebugStat(context.Context, *pb.RpcDebugStatRequest) *pb.RpcDebugStatResponse
	DebugTree(context.Context, *pb.RpcDebugTreeRequest) *pb.RpcDebugTreeResponse
	DebugTreeHeads(context.Context, *pb.RpcDebugTreeHeadsRequest) *pb.RpcDebugTreeHeadsResponse
	DebugSpaceSummary(context.Context, *pb.RpcDebugSpaceSummaryRequest) *pb.RpcDebugSpaceSummaryResponse
	DebugStackGoroutines(context.Context, *pb.RpcDebugStackGoroutinesRequest) *pb.RpcDebugStackGoroutinesResponse
	DebugExportLocalstore(context.Context, *pb.RpcDebugExportLocalstoreRequest) *pb.RpcDebugExportLocalstoreResponse
	DebugPing(context.Context, *pb.RpcDebugPingRequest) *pb.RpcDebugPingResponse
	DebugSubscriptions(context.Context, *pb.RpcDebugSubscriptionsRequest) *pb.RpcDebugSubscriptionsResponse
	DebugOpenedObjects(context.Context, *pb.RpcDebugOpenedObjectsRequest) *pb.RpcDebugOpenedObjectsResponse
	DebugRunProfiler(context.Context, *pb.RpcDebugRunProfilerRequest) *pb.RpcDebugRunProfilerResponse
	DebugAccountSelectTrace(context.Context, *pb.RpcDebugAccountSelectTraceRequest) *pb.RpcDebugAccountSelectTraceResponse
	DebugAnystoreObjectChanges(context.Context, *pb.RpcDebugAnystoreObjectChangesRequest) *pb.RpcDebugAnystoreObjectChangesResponse
	DebugNetCheck(context.Context, *pb.RpcDebugNetCheckRequest) *pb.RpcDebugNetCheckResponse
	DebugExportLog(context.Context, *pb.RpcDebugExportLogRequest) *pb.RpcDebugExportLogResponse
	InitialSetParameters(context.Context, *pb.RpcInitialSetParametersRequest) *pb.RpcInitialSetParametersResponse
	// Streams not supported ### ListenSessionEvents(context.Context, *pb.StreamRequest)
	NotificationList(context.Context, *pb.RpcNotificationListRequest) *pb.RpcNotificationListResponse
	NotificationReply(context.Context, *pb.RpcNotificationReplyRequest) *pb.RpcNotificationReplyResponse
	NotificationTest(context.Context, *pb.RpcNotificationTestRequest) *pb.RpcNotificationTestResponse
	MembershipGetStatus(context.Context, *pb.RpcMembershipGetStatusRequest) *pb.RpcMembershipGetStatusResponse
	MembershipIsNameValid(context.Context, *pb.RpcMembershipIsNameValidRequest) *pb.RpcMembershipIsNameValidResponse
	MembershipRegisterPaymentRequest(context.Context, *pb.RpcMembershipRegisterPaymentRequestRequest) *pb.RpcMembershipRegisterPaymentRequestResponse
	MembershipGetPortalLinkUrl(context.Context, *pb.RpcMembershipGetPortalLinkUrlRequest) *pb.RpcMembershipGetPortalLinkUrlResponse
	MembershipGetVerificationEmailStatus(context.Context, *pb.RpcMembershipGetVerificationEmailStatusRequest) *pb.RpcMembershipGetVerificationEmailStatusResponse
	MembershipGetVerificationEmail(context.Context, *pb.RpcMembershipGetVerificationEmailRequest) *pb.RpcMembershipGetVerificationEmailResponse
	MembershipVerifyEmailCode(context.Context, *pb.RpcMembershipVerifyEmailCodeRequest) *pb.RpcMembershipVerifyEmailCodeResponse
	MembershipFinalize(context.Context, *pb.RpcMembershipFinalizeRequest) *pb.RpcMembershipFinalizeResponse
	MembershipGetTiers(context.Context, *pb.RpcMembershipGetTiersRequest) *pb.RpcMembershipGetTiersResponse
	MembershipVerifyAppStoreReceipt(context.Context, *pb.RpcMembershipVerifyAppStoreReceiptRequest) *pb.RpcMembershipVerifyAppStoreReceiptResponse
	NameServiceUserAccountGet(context.Context, *pb.RpcNameServiceUserAccountGetRequest) *pb.RpcNameServiceUserAccountGetResponse
	NameServiceResolveName(context.Context, *pb.RpcNameServiceResolveNameRequest) *pb.RpcNameServiceResolveNameResponse
	NameServiceResolveAnyId(context.Context, *pb.RpcNameServiceResolveAnyIdRequest) *pb.RpcNameServiceResolveAnyIdResponse
	BroadcastPayloadEvent(context.Context, *pb.RpcBroadcastPayloadEventRequest) *pb.RpcBroadcastPayloadEventResponse
	DeviceSetName(context.Context, *pb.RpcDeviceSetNameRequest) *pb.RpcDeviceSetNameResponse
	DeviceList(context.Context, *pb.RpcDeviceListRequest) *pb.RpcDeviceListResponse
	DeviceNetworkStateSet(context.Context, *pb.RpcDeviceNetworkStateSetRequest) *pb.RpcDeviceNetworkStateSetResponse
	ChatAddMessage(context.Context, *pb.RpcChatAddMessageRequest) *pb.RpcChatAddMessageResponse
	ChatEditMessageContent(context.Context, *pb.RpcChatEditMessageContentRequest) *pb.RpcChatEditMessageContentResponse
	ChatToggleMessageReaction(context.Context, *pb.RpcChatToggleMessageReactionRequest) *pb.RpcChatToggleMessageReactionResponse
	ChatDeleteMessage(context.Context, *pb.RpcChatDeleteMessageRequest) *pb.RpcChatDeleteMessageResponse
	ChatGetMessages(context.Context, *pb.RpcChatGetMessagesRequest) *pb.RpcChatGetMessagesResponse
	ChatGetMessagesByIds(context.Context, *pb.RpcChatGetMessagesByIdsRequest) *pb.RpcChatGetMessagesByIdsResponse
	ChatSubscribeLastMessages(context.Context, *pb.RpcChatSubscribeLastMessagesRequest) *pb.RpcChatSubscribeLastMessagesResponse
	ChatUnsubscribe(context.Context, *pb.RpcChatUnsubscribeRequest) *pb.RpcChatUnsubscribeResponse
	ChatReadMessages(context.Context, *pb.RpcChatReadMessagesRequest) *pb.RpcChatReadMessagesResponse
	ChatUnreadMessages(context.Context, *pb.RpcChatUnreadRequest) *pb.RpcChatUnreadResponse
	ChatSubscribeToMessagePreviews(context.Context, *pb.RpcChatSubscribeToMessagePreviewsRequest) *pb.RpcChatSubscribeToMessagePreviewsResponse
	ObjectChatAdd(context.Context, *pb.RpcObjectChatAddRequest) *pb.RpcObjectChatAddResponse
}

func registerClientCommandsHandler(srv ClientCommandsHandler) {
	clientCommandsHandler = srv
}

func AppGetVersion(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAppGetVersionResponse{Error: &pb.RpcAppGetVersionResponse_Error{Code: pb.RpcAppGetVersionResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAppGetVersionRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcAppGetVersionResponse{Error: &pb.RpcAppGetVersionResponse_Error{Code: pb.RpcAppGetVersionResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.AppGetVersion(context.Background(), in).MarshalVT()
	return resp
}

func AppSetDeviceState(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAppSetDeviceStateResponse{Error: &pb.RpcAppSetDeviceStateResponse_Error{Code: pb.RpcAppSetDeviceStateResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAppSetDeviceStateRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcAppSetDeviceStateResponse{Error: &pb.RpcAppSetDeviceStateResponse_Error{Code: pb.RpcAppSetDeviceStateResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.AppSetDeviceState(context.Background(), in).MarshalVT()
	return resp
}

func AppShutdown(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAppShutdownResponse{Error: &pb.RpcAppShutdownResponse_Error{Code: pb.RpcAppShutdownResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAppShutdownRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcAppShutdownResponse{Error: &pb.RpcAppShutdownResponse_Error{Code: pb.RpcAppShutdownResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.AppShutdown(context.Background(), in).MarshalVT()
	return resp
}

func WalletCreate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWalletCreateResponse{Error: &pb.RpcWalletCreateResponse_Error{Code: pb.RpcWalletCreateResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWalletCreateRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcWalletCreateResponse{Error: &pb.RpcWalletCreateResponse_Error{Code: pb.RpcWalletCreateResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.WalletCreate(context.Background(), in).MarshalVT()
	return resp
}

func WalletRecover(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWalletRecoverResponse{Error: &pb.RpcWalletRecoverResponse_Error{Code: pb.RpcWalletRecoverResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWalletRecoverRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcWalletRecoverResponse{Error: &pb.RpcWalletRecoverResponse_Error{Code: pb.RpcWalletRecoverResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.WalletRecover(context.Background(), in).MarshalVT()
	return resp
}

func WalletConvert(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWalletConvertResponse{Error: &pb.RpcWalletConvertResponse_Error{Code: pb.RpcWalletConvertResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWalletConvertRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcWalletConvertResponse{Error: &pb.RpcWalletConvertResponse_Error{Code: pb.RpcWalletConvertResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.WalletConvert(context.Background(), in).MarshalVT()
	return resp
}

func AccountLocalLinkNewChallenge(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountLocalLinkNewChallengeResponse{Error: &pb.RpcAccountLocalLinkNewChallengeResponse_Error{Code: pb.RpcAccountLocalLinkNewChallengeResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountLocalLinkNewChallengeRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcAccountLocalLinkNewChallengeResponse{Error: &pb.RpcAccountLocalLinkNewChallengeResponse_Error{Code: pb.RpcAccountLocalLinkNewChallengeResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountLocalLinkNewChallenge(context.Background(), in).MarshalVT()
	return resp
}

func AccountLocalLinkSolveChallenge(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountLocalLinkSolveChallengeResponse{Error: &pb.RpcAccountLocalLinkSolveChallengeResponse_Error{Code: pb.RpcAccountLocalLinkSolveChallengeResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountLocalLinkSolveChallengeRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcAccountLocalLinkSolveChallengeResponse{Error: &pb.RpcAccountLocalLinkSolveChallengeResponse_Error{Code: pb.RpcAccountLocalLinkSolveChallengeResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountLocalLinkSolveChallenge(context.Background(), in).MarshalVT()
	return resp
}

func WalletCreateSession(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWalletCreateSessionResponse{Error: &pb.RpcWalletCreateSessionResponse_Error{Code: pb.RpcWalletCreateSessionResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWalletCreateSessionRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcWalletCreateSessionResponse{Error: &pb.RpcWalletCreateSessionResponse_Error{Code: pb.RpcWalletCreateSessionResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.WalletCreateSession(context.Background(), in).MarshalVT()
	return resp
}

func WalletCloseSession(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWalletCloseSessionResponse{Error: &pb.RpcWalletCloseSessionResponse_Error{Code: pb.RpcWalletCloseSessionResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWalletCloseSessionRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcWalletCloseSessionResponse{Error: &pb.RpcWalletCloseSessionResponse_Error{Code: pb.RpcWalletCloseSessionResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.WalletCloseSession(context.Background(), in).MarshalVT()
	return resp
}

func WorkspaceCreate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWorkspaceCreateResponse{Error: &pb.RpcWorkspaceCreateResponse_Error{Code: pb.RpcWorkspaceCreateResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWorkspaceCreateRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcWorkspaceCreateResponse{Error: &pb.RpcWorkspaceCreateResponse_Error{Code: pb.RpcWorkspaceCreateResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.WorkspaceCreate(context.Background(), in).MarshalVT()
	return resp
}

func WorkspaceOpen(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWorkspaceOpenResponse{Error: &pb.RpcWorkspaceOpenResponse_Error{Code: pb.RpcWorkspaceOpenResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWorkspaceOpenRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcWorkspaceOpenResponse{Error: &pb.RpcWorkspaceOpenResponse_Error{Code: pb.RpcWorkspaceOpenResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.WorkspaceOpen(context.Background(), in).MarshalVT()
	return resp
}

func WorkspaceObjectAdd(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWorkspaceObjectAddResponse{Error: &pb.RpcWorkspaceObjectAddResponse_Error{Code: pb.RpcWorkspaceObjectAddResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWorkspaceObjectAddRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcWorkspaceObjectAddResponse{Error: &pb.RpcWorkspaceObjectAddResponse_Error{Code: pb.RpcWorkspaceObjectAddResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.WorkspaceObjectAdd(context.Background(), in).MarshalVT()
	return resp
}

func WorkspaceObjectListAdd(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWorkspaceObjectListAddResponse{Error: &pb.RpcWorkspaceObjectListAddResponse_Error{Code: pb.RpcWorkspaceObjectListAddResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWorkspaceObjectListAddRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcWorkspaceObjectListAddResponse{Error: &pb.RpcWorkspaceObjectListAddResponse_Error{Code: pb.RpcWorkspaceObjectListAddResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.WorkspaceObjectListAdd(context.Background(), in).MarshalVT()
	return resp
}

func WorkspaceObjectListRemove(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWorkspaceObjectListRemoveResponse{Error: &pb.RpcWorkspaceObjectListRemoveResponse_Error{Code: pb.RpcWorkspaceObjectListRemoveResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWorkspaceObjectListRemoveRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcWorkspaceObjectListRemoveResponse{Error: &pb.RpcWorkspaceObjectListRemoveResponse_Error{Code: pb.RpcWorkspaceObjectListRemoveResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.WorkspaceObjectListRemove(context.Background(), in).MarshalVT()
	return resp
}

func WorkspaceSelect(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWorkspaceSelectResponse{Error: &pb.RpcWorkspaceSelectResponse_Error{Code: pb.RpcWorkspaceSelectResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWorkspaceSelectRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcWorkspaceSelectResponse{Error: &pb.RpcWorkspaceSelectResponse_Error{Code: pb.RpcWorkspaceSelectResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.WorkspaceSelect(context.Background(), in).MarshalVT()
	return resp
}

func WorkspaceGetCurrent(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWorkspaceGetCurrentResponse{Error: &pb.RpcWorkspaceGetCurrentResponse_Error{Code: pb.RpcWorkspaceGetCurrentResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWorkspaceGetCurrentRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcWorkspaceGetCurrentResponse{Error: &pb.RpcWorkspaceGetCurrentResponse_Error{Code: pb.RpcWorkspaceGetCurrentResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.WorkspaceGetCurrent(context.Background(), in).MarshalVT()
	return resp
}

func WorkspaceGetAll(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWorkspaceGetAllResponse{Error: &pb.RpcWorkspaceGetAllResponse_Error{Code: pb.RpcWorkspaceGetAllResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWorkspaceGetAllRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcWorkspaceGetAllResponse{Error: &pb.RpcWorkspaceGetAllResponse_Error{Code: pb.RpcWorkspaceGetAllResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.WorkspaceGetAll(context.Background(), in).MarshalVT()
	return resp
}

func WorkspaceSetInfo(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWorkspaceSetInfoResponse{Error: &pb.RpcWorkspaceSetInfoResponse_Error{Code: pb.RpcWorkspaceSetInfoResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWorkspaceSetInfoRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcWorkspaceSetInfoResponse{Error: &pb.RpcWorkspaceSetInfoResponse_Error{Code: pb.RpcWorkspaceSetInfoResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.WorkspaceSetInfo(context.Background(), in).MarshalVT()
	return resp
}

func WorkspaceExport(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWorkspaceExportResponse{Error: &pb.RpcWorkspaceExportResponse_Error{Code: pb.RpcWorkspaceExportResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWorkspaceExportRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcWorkspaceExportResponse{Error: &pb.RpcWorkspaceExportResponse_Error{Code: pb.RpcWorkspaceExportResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.WorkspaceExport(context.Background(), in).MarshalVT()
	return resp
}

func AccountRecover(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountRecoverResponse{Error: &pb.RpcAccountRecoverResponse_Error{Code: pb.RpcAccountRecoverResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountRecoverRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcAccountRecoverResponse{Error: &pb.RpcAccountRecoverResponse_Error{Code: pb.RpcAccountRecoverResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountRecover(context.Background(), in).MarshalVT()
	return resp
}

func AccountMigrate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountMigrateResponse{Error: &pb.RpcAccountMigrateResponse_Error{Code: pb.RpcAccountMigrateResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountMigrateRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcAccountMigrateResponse{Error: &pb.RpcAccountMigrateResponse_Error{Code: pb.RpcAccountMigrateResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountMigrate(context.Background(), in).MarshalVT()
	return resp
}

func AccountMigrateCancel(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountMigrateCancelResponse{Error: &pb.RpcAccountMigrateCancelResponse_Error{Code: pb.RpcAccountMigrateCancelResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountMigrateCancelRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcAccountMigrateCancelResponse{Error: &pb.RpcAccountMigrateCancelResponse_Error{Code: pb.RpcAccountMigrateCancelResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountMigrateCancel(context.Background(), in).MarshalVT()
	return resp
}

func AccountCreate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountCreateResponse{Error: &pb.RpcAccountCreateResponse_Error{Code: pb.RpcAccountCreateResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountCreateRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcAccountCreateResponse{Error: &pb.RpcAccountCreateResponse_Error{Code: pb.RpcAccountCreateResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountCreate(context.Background(), in).MarshalVT()
	return resp
}

func AccountDelete(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountDeleteResponse{Error: &pb.RpcAccountDeleteResponse_Error{Code: pb.RpcAccountDeleteResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountDeleteRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcAccountDeleteResponse{Error: &pb.RpcAccountDeleteResponse_Error{Code: pb.RpcAccountDeleteResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountDelete(context.Background(), in).MarshalVT()
	return resp
}

func AccountRevertDeletion(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountRevertDeletionResponse{Error: &pb.RpcAccountRevertDeletionResponse_Error{Code: pb.RpcAccountRevertDeletionResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountRevertDeletionRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcAccountRevertDeletionResponse{Error: &pb.RpcAccountRevertDeletionResponse_Error{Code: pb.RpcAccountRevertDeletionResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountRevertDeletion(context.Background(), in).MarshalVT()
	return resp
}

func AccountSelect(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountSelectResponse{Error: &pb.RpcAccountSelectResponse_Error{Code: pb.RpcAccountSelectResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountSelectRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcAccountSelectResponse{Error: &pb.RpcAccountSelectResponse_Error{Code: pb.RpcAccountSelectResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountSelect(context.Background(), in).MarshalVT()
	return resp
}

func AccountEnableLocalNetworkSync(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountEnableLocalNetworkSyncResponse{Error: &pb.RpcAccountEnableLocalNetworkSyncResponse_Error{Code: pb.RpcAccountEnableLocalNetworkSyncResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountEnableLocalNetworkSyncRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcAccountEnableLocalNetworkSyncResponse{Error: &pb.RpcAccountEnableLocalNetworkSyncResponse_Error{Code: pb.RpcAccountEnableLocalNetworkSyncResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountEnableLocalNetworkSync(context.Background(), in).MarshalVT()
	return resp
}

func AccountChangeJsonApiAddr(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountChangeJsonApiAddrResponse{Error: &pb.RpcAccountChangeJsonApiAddrResponse_Error{Code: pb.RpcAccountChangeJsonApiAddrResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountChangeJsonApiAddrRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcAccountChangeJsonApiAddrResponse{Error: &pb.RpcAccountChangeJsonApiAddrResponse_Error{Code: pb.RpcAccountChangeJsonApiAddrResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountChangeJsonApiAddr(context.Background(), in).MarshalVT()
	return resp
}

func AccountStop(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountStopResponse{Error: &pb.RpcAccountStopResponse_Error{Code: pb.RpcAccountStopResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountStopRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcAccountStopResponse{Error: &pb.RpcAccountStopResponse_Error{Code: pb.RpcAccountStopResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountStop(context.Background(), in).MarshalVT()
	return resp
}

func AccountMove(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountMoveResponse{Error: &pb.RpcAccountMoveResponse_Error{Code: pb.RpcAccountMoveResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountMoveRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcAccountMoveResponse{Error: &pb.RpcAccountMoveResponse_Error{Code: pb.RpcAccountMoveResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountMove(context.Background(), in).MarshalVT()
	return resp
}

func AccountConfigUpdate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountConfigUpdateResponse{Error: &pb.RpcAccountConfigUpdateResponse_Error{Code: pb.RpcAccountConfigUpdateResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountConfigUpdateRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcAccountConfigUpdateResponse{Error: &pb.RpcAccountConfigUpdateResponse_Error{Code: pb.RpcAccountConfigUpdateResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountConfigUpdate(context.Background(), in).MarshalVT()
	return resp
}

func AccountRecoverFromLegacyExport(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountRecoverFromLegacyExportResponse{Error: &pb.RpcAccountRecoverFromLegacyExportResponse_Error{Code: pb.RpcAccountRecoverFromLegacyExportResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountRecoverFromLegacyExportRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcAccountRecoverFromLegacyExportResponse{Error: &pb.RpcAccountRecoverFromLegacyExportResponse_Error{Code: pb.RpcAccountRecoverFromLegacyExportResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountRecoverFromLegacyExport(context.Background(), in).MarshalVT()
	return resp
}

func AccountChangeNetworkConfigAndRestart(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountChangeNetworkConfigAndRestartResponse{Error: &pb.RpcAccountChangeNetworkConfigAndRestartResponse_Error{Code: pb.RpcAccountChangeNetworkConfigAndRestartResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountChangeNetworkConfigAndRestartRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcAccountChangeNetworkConfigAndRestartResponse{Error: &pb.RpcAccountChangeNetworkConfigAndRestartResponse_Error{Code: pb.RpcAccountChangeNetworkConfigAndRestartResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountChangeNetworkConfigAndRestart(context.Background(), in).MarshalVT()
	return resp
}

func SpaceDelete(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcSpaceDeleteResponse{Error: &pb.RpcSpaceDeleteResponse_Error{Code: pb.RpcSpaceDeleteResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcSpaceDeleteRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcSpaceDeleteResponse{Error: &pb.RpcSpaceDeleteResponse_Error{Code: pb.RpcSpaceDeleteResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.SpaceDelete(context.Background(), in).MarshalVT()
	return resp
}

func SpaceInviteGenerate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcSpaceInviteGenerateResponse{Error: &pb.RpcSpaceInviteGenerateResponse_Error{Code: pb.RpcSpaceInviteGenerateResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcSpaceInviteGenerateRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcSpaceInviteGenerateResponse{Error: &pb.RpcSpaceInviteGenerateResponse_Error{Code: pb.RpcSpaceInviteGenerateResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.SpaceInviteGenerate(context.Background(), in).MarshalVT()
	return resp
}

func SpaceInviteGetCurrent(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcSpaceInviteGetCurrentResponse{Error: &pb.RpcSpaceInviteGetCurrentResponse_Error{Code: pb.RpcSpaceInviteGetCurrentResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcSpaceInviteGetCurrentRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcSpaceInviteGetCurrentResponse{Error: &pb.RpcSpaceInviteGetCurrentResponse_Error{Code: pb.RpcSpaceInviteGetCurrentResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.SpaceInviteGetCurrent(context.Background(), in).MarshalVT()
	return resp
}

func SpaceInviteRevoke(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcSpaceInviteRevokeResponse{Error: &pb.RpcSpaceInviteRevokeResponse_Error{Code: pb.RpcSpaceInviteRevokeResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcSpaceInviteRevokeRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcSpaceInviteRevokeResponse{Error: &pb.RpcSpaceInviteRevokeResponse_Error{Code: pb.RpcSpaceInviteRevokeResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.SpaceInviteRevoke(context.Background(), in).MarshalVT()
	return resp
}

func SpaceInviteView(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcSpaceInviteViewResponse{Error: &pb.RpcSpaceInviteViewResponse_Error{Code: pb.RpcSpaceInviteViewResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcSpaceInviteViewRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcSpaceInviteViewResponse{Error: &pb.RpcSpaceInviteViewResponse_Error{Code: pb.RpcSpaceInviteViewResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.SpaceInviteView(context.Background(), in).MarshalVT()
	return resp
}

func SpaceJoin(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcSpaceJoinResponse{Error: &pb.RpcSpaceJoinResponse_Error{Code: pb.RpcSpaceJoinResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcSpaceJoinRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcSpaceJoinResponse{Error: &pb.RpcSpaceJoinResponse_Error{Code: pb.RpcSpaceJoinResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.SpaceJoin(context.Background(), in).MarshalVT()
	return resp
}

func SpaceJoinCancel(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcSpaceJoinCancelResponse{Error: &pb.RpcSpaceJoinCancelResponse_Error{Code: pb.RpcSpaceJoinCancelResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcSpaceJoinCancelRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcSpaceJoinCancelResponse{Error: &pb.RpcSpaceJoinCancelResponse_Error{Code: pb.RpcSpaceJoinCancelResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.SpaceJoinCancel(context.Background(), in).MarshalVT()
	return resp
}

func SpaceStopSharing(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcSpaceStopSharingResponse{Error: &pb.RpcSpaceStopSharingResponse_Error{Code: pb.RpcSpaceStopSharingResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcSpaceStopSharingRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcSpaceStopSharingResponse{Error: &pb.RpcSpaceStopSharingResponse_Error{Code: pb.RpcSpaceStopSharingResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.SpaceStopSharing(context.Background(), in).MarshalVT()
	return resp
}

func SpaceRequestApprove(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcSpaceRequestApproveResponse{Error: &pb.RpcSpaceRequestApproveResponse_Error{Code: pb.RpcSpaceRequestApproveResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcSpaceRequestApproveRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcSpaceRequestApproveResponse{Error: &pb.RpcSpaceRequestApproveResponse_Error{Code: pb.RpcSpaceRequestApproveResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.SpaceRequestApprove(context.Background(), in).MarshalVT()
	return resp
}

func SpaceRequestDecline(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcSpaceRequestDeclineResponse{Error: &pb.RpcSpaceRequestDeclineResponse_Error{Code: pb.RpcSpaceRequestDeclineResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcSpaceRequestDeclineRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcSpaceRequestDeclineResponse{Error: &pb.RpcSpaceRequestDeclineResponse_Error{Code: pb.RpcSpaceRequestDeclineResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.SpaceRequestDecline(context.Background(), in).MarshalVT()
	return resp
}

func SpaceLeaveApprove(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcSpaceLeaveApproveResponse{Error: &pb.RpcSpaceLeaveApproveResponse_Error{Code: pb.RpcSpaceLeaveApproveResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcSpaceLeaveApproveRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcSpaceLeaveApproveResponse{Error: &pb.RpcSpaceLeaveApproveResponse_Error{Code: pb.RpcSpaceLeaveApproveResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.SpaceLeaveApprove(context.Background(), in).MarshalVT()
	return resp
}

func SpaceMakeShareable(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcSpaceMakeShareableResponse{Error: &pb.RpcSpaceMakeShareableResponse_Error{Code: pb.RpcSpaceMakeShareableResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcSpaceMakeShareableRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcSpaceMakeShareableResponse{Error: &pb.RpcSpaceMakeShareableResponse_Error{Code: pb.RpcSpaceMakeShareableResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.SpaceMakeShareable(context.Background(), in).MarshalVT()
	return resp
}

func SpaceParticipantRemove(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcSpaceParticipantRemoveResponse{Error: &pb.RpcSpaceParticipantRemoveResponse_Error{Code: pb.RpcSpaceParticipantRemoveResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcSpaceParticipantRemoveRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcSpaceParticipantRemoveResponse{Error: &pb.RpcSpaceParticipantRemoveResponse_Error{Code: pb.RpcSpaceParticipantRemoveResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.SpaceParticipantRemove(context.Background(), in).MarshalVT()
	return resp
}

func SpaceParticipantPermissionsChange(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcSpaceParticipantPermissionsChangeResponse{Error: &pb.RpcSpaceParticipantPermissionsChangeResponse_Error{Code: pb.RpcSpaceParticipantPermissionsChangeResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcSpaceParticipantPermissionsChangeRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcSpaceParticipantPermissionsChangeResponse{Error: &pb.RpcSpaceParticipantPermissionsChangeResponse_Error{Code: pb.RpcSpaceParticipantPermissionsChangeResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.SpaceParticipantPermissionsChange(context.Background(), in).MarshalVT()
	return resp
}

func SpaceSetOrder(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcSpaceSetOrderResponse{Error: &pb.RpcSpaceSetOrderResponse_Error{Code: pb.RpcSpaceSetOrderResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcSpaceSetOrderRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcSpaceSetOrderResponse{Error: &pb.RpcSpaceSetOrderResponse_Error{Code: pb.RpcSpaceSetOrderResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.SpaceSetOrder(context.Background(), in).MarshalVT()
	return resp
}

func SpaceUnsetOrder(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcSpaceUnsetOrderResponse{Error: &pb.RpcSpaceUnsetOrderResponse_Error{Code: pb.RpcSpaceUnsetOrderResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcSpaceUnsetOrderRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcSpaceUnsetOrderResponse{Error: &pb.RpcSpaceUnsetOrderResponse_Error{Code: pb.RpcSpaceUnsetOrderResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.SpaceUnsetOrder(context.Background(), in).MarshalVT()
	return resp
}

func PublishingCreate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcPublishingCreateResponse{Error: &pb.RpcPublishingCreateResponse_Error{Code: pb.RpcPublishingCreateResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcPublishingCreateRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcPublishingCreateResponse{Error: &pb.RpcPublishingCreateResponse_Error{Code: pb.RpcPublishingCreateResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.PublishingCreate(context.Background(), in).MarshalVT()
	return resp
}

func PublishingRemove(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcPublishingRemoveResponse{Error: &pb.RpcPublishingRemoveResponse_Error{Code: pb.RpcPublishingRemoveResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcPublishingRemoveRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcPublishingRemoveResponse{Error: &pb.RpcPublishingRemoveResponse_Error{Code: pb.RpcPublishingRemoveResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.PublishingRemove(context.Background(), in).MarshalVT()
	return resp
}

func PublishingList(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcPublishingListResponse{Error: &pb.RpcPublishingListResponse_Error{Code: pb.RpcPublishingListResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcPublishingListRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcPublishingListResponse{Error: &pb.RpcPublishingListResponse_Error{Code: pb.RpcPublishingListResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.PublishingList(context.Background(), in).MarshalVT()
	return resp
}

func PublishingResolveUri(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcPublishingResolveUriResponse{Error: &pb.RpcPublishingResolveUriResponse_Error{Code: pb.RpcPublishingResolveUriResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcPublishingResolveUriRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcPublishingResolveUriResponse{Error: &pb.RpcPublishingResolveUriResponse_Error{Code: pb.RpcPublishingResolveUriResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.PublishingResolveUri(context.Background(), in).MarshalVT()
	return resp
}

func PublishingGetStatus(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcPublishingGetStatusResponse{Error: &pb.RpcPublishingGetStatusResponse_Error{Code: pb.RpcPublishingGetStatusResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcPublishingGetStatusRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcPublishingGetStatusResponse{Error: &pb.RpcPublishingGetStatusResponse_Error{Code: pb.RpcPublishingGetStatusResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.PublishingGetStatus(context.Background(), in).MarshalVT()
	return resp
}

func ObjectOpen(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectOpenResponse{Error: &pb.RpcObjectOpenResponse_Error{Code: pb.RpcObjectOpenResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectOpenRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectOpenResponse{Error: &pb.RpcObjectOpenResponse_Error{Code: pb.RpcObjectOpenResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectOpen(context.Background(), in).MarshalVT()
	return resp
}

func ObjectClose(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectCloseResponse{Error: &pb.RpcObjectCloseResponse_Error{Code: pb.RpcObjectCloseResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectCloseRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectCloseResponse{Error: &pb.RpcObjectCloseResponse_Error{Code: pb.RpcObjectCloseResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectClose(context.Background(), in).MarshalVT()
	return resp
}

func ObjectShow(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectShowResponse{Error: &pb.RpcObjectShowResponse_Error{Code: pb.RpcObjectShowResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectShowRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectShowResponse{Error: &pb.RpcObjectShowResponse_Error{Code: pb.RpcObjectShowResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectShow(context.Background(), in).MarshalVT()
	return resp
}

func ObjectCreate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectCreateResponse{Error: &pb.RpcObjectCreateResponse_Error{Code: pb.RpcObjectCreateResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectCreateRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectCreateResponse{Error: &pb.RpcObjectCreateResponse_Error{Code: pb.RpcObjectCreateResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectCreate(context.Background(), in).MarshalVT()
	return resp
}

func ObjectCreateBookmark(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectCreateBookmarkResponse{Error: &pb.RpcObjectCreateBookmarkResponse_Error{Code: pb.RpcObjectCreateBookmarkResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectCreateBookmarkRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectCreateBookmarkResponse{Error: &pb.RpcObjectCreateBookmarkResponse_Error{Code: pb.RpcObjectCreateBookmarkResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectCreateBookmark(context.Background(), in).MarshalVT()
	return resp
}

func ObjectCreateFromUrl(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectCreateFromUrlResponse{Error: &pb.RpcObjectCreateFromUrlResponse_Error{Code: pb.RpcObjectCreateFromUrlResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectCreateFromUrlRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectCreateFromUrlResponse{Error: &pb.RpcObjectCreateFromUrlResponse_Error{Code: pb.RpcObjectCreateFromUrlResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectCreateFromUrl(context.Background(), in).MarshalVT()
	return resp
}

func ObjectCreateSet(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectCreateSetResponse{Error: &pb.RpcObjectCreateSetResponse_Error{Code: pb.RpcObjectCreateSetResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectCreateSetRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectCreateSetResponse{Error: &pb.RpcObjectCreateSetResponse_Error{Code: pb.RpcObjectCreateSetResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectCreateSet(context.Background(), in).MarshalVT()
	return resp
}

func ObjectGraph(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectGraphResponse{Error: &pb.RpcObjectGraphResponse_Error{Code: pb.RpcObjectGraphResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectGraphRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectGraphResponse{Error: &pb.RpcObjectGraphResponse_Error{Code: pb.RpcObjectGraphResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectGraph(context.Background(), in).MarshalVT()
	return resp
}

func ObjectSearch(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSearchResponse{Error: &pb.RpcObjectSearchResponse_Error{Code: pb.RpcObjectSearchResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSearchRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectSearchResponse{Error: &pb.RpcObjectSearchResponse_Error{Code: pb.RpcObjectSearchResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSearch(context.Background(), in).MarshalVT()
	return resp
}

func ObjectSearchWithMeta(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSearchWithMetaResponse{Error: &pb.RpcObjectSearchWithMetaResponse_Error{Code: pb.RpcObjectSearchWithMetaResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSearchWithMetaRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectSearchWithMetaResponse{Error: &pb.RpcObjectSearchWithMetaResponse_Error{Code: pb.RpcObjectSearchWithMetaResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSearchWithMeta(context.Background(), in).MarshalVT()
	return resp
}

func ObjectSearchSubscribe(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSearchSubscribeResponse{Error: &pb.RpcObjectSearchSubscribeResponse_Error{Code: pb.RpcObjectSearchSubscribeResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSearchSubscribeRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectSearchSubscribeResponse{Error: &pb.RpcObjectSearchSubscribeResponse_Error{Code: pb.RpcObjectSearchSubscribeResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSearchSubscribe(context.Background(), in).MarshalVT()
	return resp
}

func ObjectCrossSpaceSearchSubscribe(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectCrossSpaceSearchSubscribeResponse{Error: &pb.RpcObjectCrossSpaceSearchSubscribeResponse_Error{Code: pb.RpcObjectCrossSpaceSearchSubscribeResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectCrossSpaceSearchSubscribeRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectCrossSpaceSearchSubscribeResponse{Error: &pb.RpcObjectCrossSpaceSearchSubscribeResponse_Error{Code: pb.RpcObjectCrossSpaceSearchSubscribeResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectCrossSpaceSearchSubscribe(context.Background(), in).MarshalVT()
	return resp
}

func ObjectCrossSpaceSearchUnsubscribe(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectCrossSpaceSearchUnsubscribeResponse{Error: &pb.RpcObjectCrossSpaceSearchUnsubscribeResponse_Error{Code: pb.RpcObjectCrossSpaceSearchUnsubscribeResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectCrossSpaceSearchUnsubscribeRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectCrossSpaceSearchUnsubscribeResponse{Error: &pb.RpcObjectCrossSpaceSearchUnsubscribeResponse_Error{Code: pb.RpcObjectCrossSpaceSearchUnsubscribeResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectCrossSpaceSearchUnsubscribe(context.Background(), in).MarshalVT()
	return resp
}

func ObjectSubscribeIds(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSubscribeIdsResponse{Error: &pb.RpcObjectSubscribeIdsResponse_Error{Code: pb.RpcObjectSubscribeIdsResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSubscribeIdsRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectSubscribeIdsResponse{Error: &pb.RpcObjectSubscribeIdsResponse_Error{Code: pb.RpcObjectSubscribeIdsResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSubscribeIds(context.Background(), in).MarshalVT()
	return resp
}

func ObjectGroupsSubscribe(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectGroupsSubscribeResponse{Error: &pb.RpcObjectGroupsSubscribeResponse_Error{Code: pb.RpcObjectGroupsSubscribeResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectGroupsSubscribeRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectGroupsSubscribeResponse{Error: &pb.RpcObjectGroupsSubscribeResponse_Error{Code: pb.RpcObjectGroupsSubscribeResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectGroupsSubscribe(context.Background(), in).MarshalVT()
	return resp
}

func ObjectSearchUnsubscribe(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSearchUnsubscribeResponse{Error: &pb.RpcObjectSearchUnsubscribeResponse_Error{Code: pb.RpcObjectSearchUnsubscribeResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSearchUnsubscribeRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectSearchUnsubscribeResponse{Error: &pb.RpcObjectSearchUnsubscribeResponse_Error{Code: pb.RpcObjectSearchUnsubscribeResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSearchUnsubscribe(context.Background(), in).MarshalVT()
	return resp
}

func ObjectSetDetails(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSetDetailsResponse{Error: &pb.RpcObjectSetDetailsResponse_Error{Code: pb.RpcObjectSetDetailsResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSetDetailsRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectSetDetailsResponse{Error: &pb.RpcObjectSetDetailsResponse_Error{Code: pb.RpcObjectSetDetailsResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSetDetails(context.Background(), in).MarshalVT()
	return resp
}

func ObjectDuplicate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectDuplicateResponse{Error: &pb.RpcObjectDuplicateResponse_Error{Code: pb.RpcObjectDuplicateResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectDuplicateRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectDuplicateResponse{Error: &pb.RpcObjectDuplicateResponse_Error{Code: pb.RpcObjectDuplicateResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectDuplicate(context.Background(), in).MarshalVT()
	return resp
}

func ObjectSetObjectType(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSetObjectTypeResponse{Error: &pb.RpcObjectSetObjectTypeResponse_Error{Code: pb.RpcObjectSetObjectTypeResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSetObjectTypeRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectSetObjectTypeResponse{Error: &pb.RpcObjectSetObjectTypeResponse_Error{Code: pb.RpcObjectSetObjectTypeResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSetObjectType(context.Background(), in).MarshalVT()
	return resp
}

func ObjectSetLayout(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSetLayoutResponse{Error: &pb.RpcObjectSetLayoutResponse_Error{Code: pb.RpcObjectSetLayoutResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSetLayoutRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectSetLayoutResponse{Error: &pb.RpcObjectSetLayoutResponse_Error{Code: pb.RpcObjectSetLayoutResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSetLayout(context.Background(), in).MarshalVT()
	return resp
}

func ObjectSetInternalFlags(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSetInternalFlagsResponse{Error: &pb.RpcObjectSetInternalFlagsResponse_Error{Code: pb.RpcObjectSetInternalFlagsResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSetInternalFlagsRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectSetInternalFlagsResponse{Error: &pb.RpcObjectSetInternalFlagsResponse_Error{Code: pb.RpcObjectSetInternalFlagsResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSetInternalFlags(context.Background(), in).MarshalVT()
	return resp
}

func ObjectSetIsFavorite(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSetIsFavoriteResponse{Error: &pb.RpcObjectSetIsFavoriteResponse_Error{Code: pb.RpcObjectSetIsFavoriteResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSetIsFavoriteRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectSetIsFavoriteResponse{Error: &pb.RpcObjectSetIsFavoriteResponse_Error{Code: pb.RpcObjectSetIsFavoriteResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSetIsFavorite(context.Background(), in).MarshalVT()
	return resp
}

func ObjectSetIsArchived(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSetIsArchivedResponse{Error: &pb.RpcObjectSetIsArchivedResponse_Error{Code: pb.RpcObjectSetIsArchivedResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSetIsArchivedRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectSetIsArchivedResponse{Error: &pb.RpcObjectSetIsArchivedResponse_Error{Code: pb.RpcObjectSetIsArchivedResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSetIsArchived(context.Background(), in).MarshalVT()
	return resp
}

func ObjectSetSource(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSetSourceResponse{Error: &pb.RpcObjectSetSourceResponse_Error{Code: pb.RpcObjectSetSourceResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSetSourceRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectSetSourceResponse{Error: &pb.RpcObjectSetSourceResponse_Error{Code: pb.RpcObjectSetSourceResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSetSource(context.Background(), in).MarshalVT()
	return resp
}

func ObjectWorkspaceSetDashboard(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectWorkspaceSetDashboardResponse{Error: &pb.RpcObjectWorkspaceSetDashboardResponse_Error{Code: pb.RpcObjectWorkspaceSetDashboardResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectWorkspaceSetDashboardRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectWorkspaceSetDashboardResponse{Error: &pb.RpcObjectWorkspaceSetDashboardResponse_Error{Code: pb.RpcObjectWorkspaceSetDashboardResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectWorkspaceSetDashboard(context.Background(), in).MarshalVT()
	return resp
}

func ObjectListDuplicate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectListDuplicateResponse{Error: &pb.RpcObjectListDuplicateResponse_Error{Code: pb.RpcObjectListDuplicateResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectListDuplicateRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectListDuplicateResponse{Error: &pb.RpcObjectListDuplicateResponse_Error{Code: pb.RpcObjectListDuplicateResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectListDuplicate(context.Background(), in).MarshalVT()
	return resp
}

func ObjectListDelete(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectListDeleteResponse{Error: &pb.RpcObjectListDeleteResponse_Error{Code: pb.RpcObjectListDeleteResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectListDeleteRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectListDeleteResponse{Error: &pb.RpcObjectListDeleteResponse_Error{Code: pb.RpcObjectListDeleteResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectListDelete(context.Background(), in).MarshalVT()
	return resp
}

func ObjectListSetIsArchived(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectListSetIsArchivedResponse{Error: &pb.RpcObjectListSetIsArchivedResponse_Error{Code: pb.RpcObjectListSetIsArchivedResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectListSetIsArchivedRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectListSetIsArchivedResponse{Error: &pb.RpcObjectListSetIsArchivedResponse_Error{Code: pb.RpcObjectListSetIsArchivedResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectListSetIsArchived(context.Background(), in).MarshalVT()
	return resp
}

func ObjectListSetIsFavorite(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectListSetIsFavoriteResponse{Error: &pb.RpcObjectListSetIsFavoriteResponse_Error{Code: pb.RpcObjectListSetIsFavoriteResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectListSetIsFavoriteRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectListSetIsFavoriteResponse{Error: &pb.RpcObjectListSetIsFavoriteResponse_Error{Code: pb.RpcObjectListSetIsFavoriteResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectListSetIsFavorite(context.Background(), in).MarshalVT()
	return resp
}

func ObjectListSetObjectType(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectListSetObjectTypeResponse{Error: &pb.RpcObjectListSetObjectTypeResponse_Error{Code: pb.RpcObjectListSetObjectTypeResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectListSetObjectTypeRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectListSetObjectTypeResponse{Error: &pb.RpcObjectListSetObjectTypeResponse_Error{Code: pb.RpcObjectListSetObjectTypeResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectListSetObjectType(context.Background(), in).MarshalVT()
	return resp
}

func ObjectListSetDetails(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectListSetDetailsResponse{Error: &pb.RpcObjectListSetDetailsResponse_Error{Code: pb.RpcObjectListSetDetailsResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectListSetDetailsRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectListSetDetailsResponse{Error: &pb.RpcObjectListSetDetailsResponse_Error{Code: pb.RpcObjectListSetDetailsResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectListSetDetails(context.Background(), in).MarshalVT()
	return resp
}

func ObjectListModifyDetailValues(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectListModifyDetailValuesResponse{Error: &pb.RpcObjectListModifyDetailValuesResponse_Error{Code: pb.RpcObjectListModifyDetailValuesResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectListModifyDetailValuesRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectListModifyDetailValuesResponse{Error: &pb.RpcObjectListModifyDetailValuesResponse_Error{Code: pb.RpcObjectListModifyDetailValuesResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectListModifyDetailValues(context.Background(), in).MarshalVT()
	return resp
}

func ObjectApplyTemplate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectApplyTemplateResponse{Error: &pb.RpcObjectApplyTemplateResponse_Error{Code: pb.RpcObjectApplyTemplateResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectApplyTemplateRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectApplyTemplateResponse{Error: &pb.RpcObjectApplyTemplateResponse_Error{Code: pb.RpcObjectApplyTemplateResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectApplyTemplate(context.Background(), in).MarshalVT()
	return resp
}

func ObjectToSet(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectToSetResponse{Error: &pb.RpcObjectToSetResponse_Error{Code: pb.RpcObjectToSetResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectToSetRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectToSetResponse{Error: &pb.RpcObjectToSetResponse_Error{Code: pb.RpcObjectToSetResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectToSet(context.Background(), in).MarshalVT()
	return resp
}

func ObjectToCollection(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectToCollectionResponse{Error: &pb.RpcObjectToCollectionResponse_Error{Code: pb.RpcObjectToCollectionResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectToCollectionRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectToCollectionResponse{Error: &pb.RpcObjectToCollectionResponse_Error{Code: pb.RpcObjectToCollectionResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectToCollection(context.Background(), in).MarshalVT()
	return resp
}

func ObjectShareByLink(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectShareByLinkResponse{Error: &pb.RpcObjectShareByLinkResponse_Error{Code: pb.RpcObjectShareByLinkResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectShareByLinkRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectShareByLinkResponse{Error: &pb.RpcObjectShareByLinkResponse_Error{Code: pb.RpcObjectShareByLinkResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectShareByLink(context.Background(), in).MarshalVT()
	return resp
}

func ObjectUndo(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectUndoResponse{Error: &pb.RpcObjectUndoResponse_Error{Code: pb.RpcObjectUndoResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectUndoRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectUndoResponse{Error: &pb.RpcObjectUndoResponse_Error{Code: pb.RpcObjectUndoResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectUndo(context.Background(), in).MarshalVT()
	return resp
}

func ObjectRedo(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectRedoResponse{Error: &pb.RpcObjectRedoResponse_Error{Code: pb.RpcObjectRedoResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectRedoRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectRedoResponse{Error: &pb.RpcObjectRedoResponse_Error{Code: pb.RpcObjectRedoResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectRedo(context.Background(), in).MarshalVT()
	return resp
}

func ObjectListExport(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectListExportResponse{Error: &pb.RpcObjectListExportResponse_Error{Code: pb.RpcObjectListExportResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectListExportRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectListExportResponse{Error: &pb.RpcObjectListExportResponse_Error{Code: pb.RpcObjectListExportResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectListExport(context.Background(), in).MarshalVT()
	return resp
}

func ObjectBookmarkFetch(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectBookmarkFetchResponse{Error: &pb.RpcObjectBookmarkFetchResponse_Error{Code: pb.RpcObjectBookmarkFetchResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectBookmarkFetchRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectBookmarkFetchResponse{Error: &pb.RpcObjectBookmarkFetchResponse_Error{Code: pb.RpcObjectBookmarkFetchResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectBookmarkFetch(context.Background(), in).MarshalVT()
	return resp
}

func ObjectToBookmark(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectToBookmarkResponse{Error: &pb.RpcObjectToBookmarkResponse_Error{Code: pb.RpcObjectToBookmarkResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectToBookmarkRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectToBookmarkResponse{Error: &pb.RpcObjectToBookmarkResponse_Error{Code: pb.RpcObjectToBookmarkResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectToBookmark(context.Background(), in).MarshalVT()
	return resp
}

func ObjectImport(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectImportResponse{Error: &pb.RpcObjectImportResponse_Error{Code: pb.RpcObjectImportResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectImportRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectImportResponse{Error: &pb.RpcObjectImportResponse_Error{Code: pb.RpcObjectImportResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectImport(context.Background(), in).MarshalVT()
	return resp
}

func ObjectImportList(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectImportListResponse{Error: &pb.RpcObjectImportListResponse_Error{Code: pb.RpcObjectImportListResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectImportListRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectImportListResponse{Error: &pb.RpcObjectImportListResponse_Error{Code: pb.RpcObjectImportListResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectImportList(context.Background(), in).MarshalVT()
	return resp
}

func ObjectImportNotionValidateToken(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectImportNotionValidateTokenResponse{Error: &pb.RpcObjectImportNotionValidateTokenResponse_Error{Code: pb.RpcObjectImportNotionValidateTokenResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectImportNotionValidateTokenRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectImportNotionValidateTokenResponse{Error: &pb.RpcObjectImportNotionValidateTokenResponse_Error{Code: pb.RpcObjectImportNotionValidateTokenResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectImportNotionValidateToken(context.Background(), in).MarshalVT()
	return resp
}

func ObjectImportUseCase(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectImportUseCaseResponse{Error: &pb.RpcObjectImportUseCaseResponse_Error{Code: pb.RpcObjectImportUseCaseResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectImportUseCaseRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectImportUseCaseResponse{Error: &pb.RpcObjectImportUseCaseResponse_Error{Code: pb.RpcObjectImportUseCaseResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectImportUseCase(context.Background(), in).MarshalVT()
	return resp
}

func ObjectImportExperience(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectImportExperienceResponse{Error: &pb.RpcObjectImportExperienceResponse_Error{Code: pb.RpcObjectImportExperienceResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectImportExperienceRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectImportExperienceResponse{Error: &pb.RpcObjectImportExperienceResponse_Error{Code: pb.RpcObjectImportExperienceResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectImportExperience(context.Background(), in).MarshalVT()
	return resp
}

func ObjectDateByTimestamp(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectDateByTimestampResponse{Error: &pb.RpcObjectDateByTimestampResponse_Error{Code: pb.RpcObjectDateByTimestampResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectDateByTimestampRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectDateByTimestampResponse{Error: &pb.RpcObjectDateByTimestampResponse_Error{Code: pb.RpcObjectDateByTimestampResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectDateByTimestamp(context.Background(), in).MarshalVT()
	return resp
}

func ObjectCollectionAdd(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectCollectionAddResponse{Error: &pb.RpcObjectCollectionAddResponse_Error{Code: pb.RpcObjectCollectionAddResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectCollectionAddRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectCollectionAddResponse{Error: &pb.RpcObjectCollectionAddResponse_Error{Code: pb.RpcObjectCollectionAddResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectCollectionAdd(context.Background(), in).MarshalVT()
	return resp
}

func ObjectCollectionRemove(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectCollectionRemoveResponse{Error: &pb.RpcObjectCollectionRemoveResponse_Error{Code: pb.RpcObjectCollectionRemoveResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectCollectionRemoveRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectCollectionRemoveResponse{Error: &pb.RpcObjectCollectionRemoveResponse_Error{Code: pb.RpcObjectCollectionRemoveResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectCollectionRemove(context.Background(), in).MarshalVT()
	return resp
}

func ObjectCollectionSort(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectCollectionSortResponse{Error: &pb.RpcObjectCollectionSortResponse_Error{Code: pb.RpcObjectCollectionSortResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectCollectionSortRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectCollectionSortResponse{Error: &pb.RpcObjectCollectionSortResponse_Error{Code: pb.RpcObjectCollectionSortResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectCollectionSort(context.Background(), in).MarshalVT()
	return resp
}

func ObjectCreateRelation(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectCreateRelationResponse{Error: &pb.RpcObjectCreateRelationResponse_Error{Code: pb.RpcObjectCreateRelationResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectCreateRelationRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectCreateRelationResponse{Error: &pb.RpcObjectCreateRelationResponse_Error{Code: pb.RpcObjectCreateRelationResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectCreateRelation(context.Background(), in).MarshalVT()
	return resp
}

func ObjectCreateRelationOption(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectCreateRelationOptionResponse{Error: &pb.RpcObjectCreateRelationOptionResponse_Error{Code: pb.RpcObjectCreateRelationOptionResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectCreateRelationOptionRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectCreateRelationOptionResponse{Error: &pb.RpcObjectCreateRelationOptionResponse_Error{Code: pb.RpcObjectCreateRelationOptionResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectCreateRelationOption(context.Background(), in).MarshalVT()
	return resp
}

func RelationListRemoveOption(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcRelationListRemoveOptionResponse{Error: &pb.RpcRelationListRemoveOptionResponse_Error{Code: pb.RpcRelationListRemoveOptionResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcRelationListRemoveOptionRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcRelationListRemoveOptionResponse{Error: &pb.RpcRelationListRemoveOptionResponse_Error{Code: pb.RpcRelationListRemoveOptionResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.RelationListRemoveOption(context.Background(), in).MarshalVT()
	return resp
}

func RelationOptions(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcRelationOptionsResponse{Error: &pb.RpcRelationOptionsResponse_Error{Code: pb.RpcRelationOptionsResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcRelationOptionsRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcRelationOptionsResponse{Error: &pb.RpcRelationOptionsResponse_Error{Code: pb.RpcRelationOptionsResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.RelationOptions(context.Background(), in).MarshalVT()
	return resp
}

func RelationListWithValue(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcRelationListWithValueResponse{Error: &pb.RpcRelationListWithValueResponse_Error{Code: pb.RpcRelationListWithValueResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcRelationListWithValueRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcRelationListWithValueResponse{Error: &pb.RpcRelationListWithValueResponse_Error{Code: pb.RpcRelationListWithValueResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.RelationListWithValue(context.Background(), in).MarshalVT()
	return resp
}

func ObjectRelationAdd(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectRelationAddResponse{Error: &pb.RpcObjectRelationAddResponse_Error{Code: pb.RpcObjectRelationAddResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectRelationAddRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectRelationAddResponse{Error: &pb.RpcObjectRelationAddResponse_Error{Code: pb.RpcObjectRelationAddResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectRelationAdd(context.Background(), in).MarshalVT()
	return resp
}

func ObjectRelationDelete(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectRelationDeleteResponse{Error: &pb.RpcObjectRelationDeleteResponse_Error{Code: pb.RpcObjectRelationDeleteResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectRelationDeleteRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectRelationDeleteResponse{Error: &pb.RpcObjectRelationDeleteResponse_Error{Code: pb.RpcObjectRelationDeleteResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectRelationDelete(context.Background(), in).MarshalVT()
	return resp
}

func ObjectRelationAddFeatured(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectRelationAddFeaturedResponse{Error: &pb.RpcObjectRelationAddFeaturedResponse_Error{Code: pb.RpcObjectRelationAddFeaturedResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectRelationAddFeaturedRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectRelationAddFeaturedResponse{Error: &pb.RpcObjectRelationAddFeaturedResponse_Error{Code: pb.RpcObjectRelationAddFeaturedResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectRelationAddFeatured(context.Background(), in).MarshalVT()
	return resp
}

func ObjectRelationRemoveFeatured(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectRelationRemoveFeaturedResponse{Error: &pb.RpcObjectRelationRemoveFeaturedResponse_Error{Code: pb.RpcObjectRelationRemoveFeaturedResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectRelationRemoveFeaturedRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectRelationRemoveFeaturedResponse{Error: &pb.RpcObjectRelationRemoveFeaturedResponse_Error{Code: pb.RpcObjectRelationRemoveFeaturedResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectRelationRemoveFeatured(context.Background(), in).MarshalVT()
	return resp
}

func ObjectRelationListAvailable(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectRelationListAvailableResponse{Error: &pb.RpcObjectRelationListAvailableResponse_Error{Code: pb.RpcObjectRelationListAvailableResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectRelationListAvailableRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectRelationListAvailableResponse{Error: &pb.RpcObjectRelationListAvailableResponse_Error{Code: pb.RpcObjectRelationListAvailableResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectRelationListAvailable(context.Background(), in).MarshalVT()
	return resp
}

func ObjectCreateObjectType(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectCreateObjectTypeResponse{Error: &pb.RpcObjectCreateObjectTypeResponse_Error{Code: pb.RpcObjectCreateObjectTypeResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectCreateObjectTypeRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectCreateObjectTypeResponse{Error: &pb.RpcObjectCreateObjectTypeResponse_Error{Code: pb.RpcObjectCreateObjectTypeResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectCreateObjectType(context.Background(), in).MarshalVT()
	return resp
}

func ObjectTypeRelationAdd(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectTypeRelationAddResponse{Error: &pb.RpcObjectTypeRelationAddResponse_Error{Code: pb.RpcObjectTypeRelationAddResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectTypeRelationAddRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectTypeRelationAddResponse{Error: &pb.RpcObjectTypeRelationAddResponse_Error{Code: pb.RpcObjectTypeRelationAddResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectTypeRelationAdd(context.Background(), in).MarshalVT()
	return resp
}

func ObjectTypeRelationRemove(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectTypeRelationRemoveResponse{Error: &pb.RpcObjectTypeRelationRemoveResponse_Error{Code: pb.RpcObjectTypeRelationRemoveResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectTypeRelationRemoveRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectTypeRelationRemoveResponse{Error: &pb.RpcObjectTypeRelationRemoveResponse_Error{Code: pb.RpcObjectTypeRelationRemoveResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectTypeRelationRemove(context.Background(), in).MarshalVT()
	return resp
}

func ObjectTypeRecommendedRelationsSet(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectTypeRecommendedRelationsSetResponse{Error: &pb.RpcObjectTypeRecommendedRelationsSetResponse_Error{Code: pb.RpcObjectTypeRecommendedRelationsSetResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectTypeRecommendedRelationsSetRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectTypeRecommendedRelationsSetResponse{Error: &pb.RpcObjectTypeRecommendedRelationsSetResponse_Error{Code: pb.RpcObjectTypeRecommendedRelationsSetResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectTypeRecommendedRelationsSet(context.Background(), in).MarshalVT()
	return resp
}

func ObjectTypeRecommendedFeaturedRelationsSet(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectTypeRecommendedFeaturedRelationsSetResponse{Error: &pb.RpcObjectTypeRecommendedFeaturedRelationsSetResponse_Error{Code: pb.RpcObjectTypeRecommendedFeaturedRelationsSetResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectTypeRecommendedFeaturedRelationsSetRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectTypeRecommendedFeaturedRelationsSetResponse{Error: &pb.RpcObjectTypeRecommendedFeaturedRelationsSetResponse_Error{Code: pb.RpcObjectTypeRecommendedFeaturedRelationsSetResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectTypeRecommendedFeaturedRelationsSet(context.Background(), in).MarshalVT()
	return resp
}

func ObjectTypeListConflictingRelations(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectTypeListConflictingRelationsResponse{Error: &pb.RpcObjectTypeListConflictingRelationsResponse_Error{Code: pb.RpcObjectTypeListConflictingRelationsResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectTypeListConflictingRelationsRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectTypeListConflictingRelationsResponse{Error: &pb.RpcObjectTypeListConflictingRelationsResponse_Error{Code: pb.RpcObjectTypeListConflictingRelationsResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectTypeListConflictingRelations(context.Background(), in).MarshalVT()
	return resp
}

func HistoryShowVersion(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcHistoryShowVersionResponse{Error: &pb.RpcHistoryShowVersionResponse_Error{Code: pb.RpcHistoryShowVersionResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcHistoryShowVersionRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcHistoryShowVersionResponse{Error: &pb.RpcHistoryShowVersionResponse_Error{Code: pb.RpcHistoryShowVersionResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.HistoryShowVersion(context.Background(), in).MarshalVT()
	return resp
}

func HistoryGetVersions(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcHistoryGetVersionsResponse{Error: &pb.RpcHistoryGetVersionsResponse_Error{Code: pb.RpcHistoryGetVersionsResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcHistoryGetVersionsRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcHistoryGetVersionsResponse{Error: &pb.RpcHistoryGetVersionsResponse_Error{Code: pb.RpcHistoryGetVersionsResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.HistoryGetVersions(context.Background(), in).MarshalVT()
	return resp
}

func HistorySetVersion(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcHistorySetVersionResponse{Error: &pb.RpcHistorySetVersionResponse_Error{Code: pb.RpcHistorySetVersionResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcHistorySetVersionRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcHistorySetVersionResponse{Error: &pb.RpcHistorySetVersionResponse_Error{Code: pb.RpcHistorySetVersionResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.HistorySetVersion(context.Background(), in).MarshalVT()
	return resp
}

func HistoryDiffVersions(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcHistoryDiffVersionsResponse{Error: &pb.RpcHistoryDiffVersionsResponse_Error{Code: pb.RpcHistoryDiffVersionsResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcHistoryDiffVersionsRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcHistoryDiffVersionsResponse{Error: &pb.RpcHistoryDiffVersionsResponse_Error{Code: pb.RpcHistoryDiffVersionsResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.HistoryDiffVersions(context.Background(), in).MarshalVT()
	return resp
}

func FileSpaceOffload(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcFileSpaceOffloadResponse{Error: &pb.RpcFileSpaceOffloadResponse_Error{Code: pb.RpcFileSpaceOffloadResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcFileSpaceOffloadRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcFileSpaceOffloadResponse{Error: &pb.RpcFileSpaceOffloadResponse_Error{Code: pb.RpcFileSpaceOffloadResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.FileSpaceOffload(context.Background(), in).MarshalVT()
	return resp
}

func FileReconcile(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcFileReconcileResponse{Error: &pb.RpcFileReconcileResponse_Error{Code: pb.RpcFileReconcileResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcFileReconcileRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcFileReconcileResponse{Error: &pb.RpcFileReconcileResponse_Error{Code: pb.RpcFileReconcileResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.FileReconcile(context.Background(), in).MarshalVT()
	return resp
}

func FileListOffload(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcFileListOffloadResponse{Error: &pb.RpcFileListOffloadResponse_Error{Code: pb.RpcFileListOffloadResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcFileListOffloadRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcFileListOffloadResponse{Error: &pb.RpcFileListOffloadResponse_Error{Code: pb.RpcFileListOffloadResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.FileListOffload(context.Background(), in).MarshalVT()
	return resp
}

func FileUpload(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcFileUploadResponse{Error: &pb.RpcFileUploadResponse_Error{Code: pb.RpcFileUploadResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcFileUploadRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcFileUploadResponse{Error: &pb.RpcFileUploadResponse_Error{Code: pb.RpcFileUploadResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.FileUpload(context.Background(), in).MarshalVT()
	return resp
}

func FileDownload(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcFileDownloadResponse{Error: &pb.RpcFileDownloadResponse_Error{Code: pb.RpcFileDownloadResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcFileDownloadRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcFileDownloadResponse{Error: &pb.RpcFileDownloadResponse_Error{Code: pb.RpcFileDownloadResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.FileDownload(context.Background(), in).MarshalVT()
	return resp
}

func FileDrop(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcFileDropResponse{Error: &pb.RpcFileDropResponse_Error{Code: pb.RpcFileDropResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcFileDropRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcFileDropResponse{Error: &pb.RpcFileDropResponse_Error{Code: pb.RpcFileDropResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.FileDrop(context.Background(), in).MarshalVT()
	return resp
}

func FileSpaceUsage(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcFileSpaceUsageResponse{Error: &pb.RpcFileSpaceUsageResponse_Error{Code: pb.RpcFileSpaceUsageResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcFileSpaceUsageRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcFileSpaceUsageResponse{Error: &pb.RpcFileSpaceUsageResponse_Error{Code: pb.RpcFileSpaceUsageResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.FileSpaceUsage(context.Background(), in).MarshalVT()
	return resp
}

func FileNodeUsage(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcFileNodeUsageResponse{Error: &pb.RpcFileNodeUsageResponse_Error{Code: pb.RpcFileNodeUsageResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcFileNodeUsageRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcFileNodeUsageResponse{Error: &pb.RpcFileNodeUsageResponse_Error{Code: pb.RpcFileNodeUsageResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.FileNodeUsage(context.Background(), in).MarshalVT()
	return resp
}

func NavigationListObjects(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcNavigationListObjectsResponse{Error: &pb.RpcNavigationListObjectsResponse_Error{Code: pb.RpcNavigationListObjectsResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcNavigationListObjectsRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcNavigationListObjectsResponse{Error: &pb.RpcNavigationListObjectsResponse_Error{Code: pb.RpcNavigationListObjectsResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.NavigationListObjects(context.Background(), in).MarshalVT()
	return resp
}

func NavigationGetObjectInfoWithLinks(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcNavigationGetObjectInfoWithLinksResponse{Error: &pb.RpcNavigationGetObjectInfoWithLinksResponse_Error{Code: pb.RpcNavigationGetObjectInfoWithLinksResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcNavigationGetObjectInfoWithLinksRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcNavigationGetObjectInfoWithLinksResponse{Error: &pb.RpcNavigationGetObjectInfoWithLinksResponse_Error{Code: pb.RpcNavigationGetObjectInfoWithLinksResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.NavigationGetObjectInfoWithLinks(context.Background(), in).MarshalVT()
	return resp
}

func TemplateCreateFromObject(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcTemplateCreateFromObjectResponse{Error: &pb.RpcTemplateCreateFromObjectResponse_Error{Code: pb.RpcTemplateCreateFromObjectResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcTemplateCreateFromObjectRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcTemplateCreateFromObjectResponse{Error: &pb.RpcTemplateCreateFromObjectResponse_Error{Code: pb.RpcTemplateCreateFromObjectResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.TemplateCreateFromObject(context.Background(), in).MarshalVT()
	return resp
}

func TemplateClone(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcTemplateCloneResponse{Error: &pb.RpcTemplateCloneResponse_Error{Code: pb.RpcTemplateCloneResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcTemplateCloneRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcTemplateCloneResponse{Error: &pb.RpcTemplateCloneResponse_Error{Code: pb.RpcTemplateCloneResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.TemplateClone(context.Background(), in).MarshalVT()
	return resp
}

func TemplateExportAll(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcTemplateExportAllResponse{Error: &pb.RpcTemplateExportAllResponse_Error{Code: pb.RpcTemplateExportAllResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcTemplateExportAllRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcTemplateExportAllResponse{Error: &pb.RpcTemplateExportAllResponse_Error{Code: pb.RpcTemplateExportAllResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.TemplateExportAll(context.Background(), in).MarshalVT()
	return resp
}

func LinkPreview(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcLinkPreviewResponse{Error: &pb.RpcLinkPreviewResponse_Error{Code: pb.RpcLinkPreviewResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcLinkPreviewRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcLinkPreviewResponse{Error: &pb.RpcLinkPreviewResponse_Error{Code: pb.RpcLinkPreviewResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.LinkPreview(context.Background(), in).MarshalVT()
	return resp
}

func UnsplashSearch(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcUnsplashSearchResponse{Error: &pb.RpcUnsplashSearchResponse_Error{Code: pb.RpcUnsplashSearchResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcUnsplashSearchRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcUnsplashSearchResponse{Error: &pb.RpcUnsplashSearchResponse_Error{Code: pb.RpcUnsplashSearchResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.UnsplashSearch(context.Background(), in).MarshalVT()
	return resp
}

func UnsplashDownload(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcUnsplashDownloadResponse{Error: &pb.RpcUnsplashDownloadResponse_Error{Code: pb.RpcUnsplashDownloadResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcUnsplashDownloadRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcUnsplashDownloadResponse{Error: &pb.RpcUnsplashDownloadResponse_Error{Code: pb.RpcUnsplashDownloadResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.UnsplashDownload(context.Background(), in).MarshalVT()
	return resp
}

func GalleryDownloadManifest(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcGalleryDownloadManifestResponse{Error: &pb.RpcGalleryDownloadManifestResponse_Error{Code: pb.RpcGalleryDownloadManifestResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcGalleryDownloadManifestRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcGalleryDownloadManifestResponse{Error: &pb.RpcGalleryDownloadManifestResponse_Error{Code: pb.RpcGalleryDownloadManifestResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.GalleryDownloadManifest(context.Background(), in).MarshalVT()
	return resp
}

func GalleryDownloadIndex(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcGalleryDownloadIndexResponse{Error: &pb.RpcGalleryDownloadIndexResponse_Error{Code: pb.RpcGalleryDownloadIndexResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcGalleryDownloadIndexRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcGalleryDownloadIndexResponse{Error: &pb.RpcGalleryDownloadIndexResponse_Error{Code: pb.RpcGalleryDownloadIndexResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.GalleryDownloadIndex(context.Background(), in).MarshalVT()
	return resp
}

func BlockUpload(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockUploadResponse{Error: &pb.RpcBlockUploadResponse_Error{Code: pb.RpcBlockUploadResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockUploadRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockUploadResponse{Error: &pb.RpcBlockUploadResponse_Error{Code: pb.RpcBlockUploadResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockUpload(context.Background(), in).MarshalVT()
	return resp
}

func BlockReplace(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockReplaceResponse{Error: &pb.RpcBlockReplaceResponse_Error{Code: pb.RpcBlockReplaceResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockReplaceRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockReplaceResponse{Error: &pb.RpcBlockReplaceResponse_Error{Code: pb.RpcBlockReplaceResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockReplace(context.Background(), in).MarshalVT()
	return resp
}

func BlockCreate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockCreateResponse{Error: &pb.RpcBlockCreateResponse_Error{Code: pb.RpcBlockCreateResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockCreateRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockCreateResponse{Error: &pb.RpcBlockCreateResponse_Error{Code: pb.RpcBlockCreateResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockCreate(context.Background(), in).MarshalVT()
	return resp
}

func BlockSplit(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockSplitResponse{Error: &pb.RpcBlockSplitResponse_Error{Code: pb.RpcBlockSplitResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockSplitRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockSplitResponse{Error: &pb.RpcBlockSplitResponse_Error{Code: pb.RpcBlockSplitResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockSplit(context.Background(), in).MarshalVT()
	return resp
}

func BlockMerge(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockMergeResponse{Error: &pb.RpcBlockMergeResponse_Error{Code: pb.RpcBlockMergeResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockMergeRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockMergeResponse{Error: &pb.RpcBlockMergeResponse_Error{Code: pb.RpcBlockMergeResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockMerge(context.Background(), in).MarshalVT()
	return resp
}

func BlockCopy(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockCopyResponse{Error: &pb.RpcBlockCopyResponse_Error{Code: pb.RpcBlockCopyResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockCopyRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockCopyResponse{Error: &pb.RpcBlockCopyResponse_Error{Code: pb.RpcBlockCopyResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockCopy(context.Background(), in).MarshalVT()
	return resp
}

func BlockPaste(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockPasteResponse{Error: &pb.RpcBlockPasteResponse_Error{Code: pb.RpcBlockPasteResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockPasteRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockPasteResponse{Error: &pb.RpcBlockPasteResponse_Error{Code: pb.RpcBlockPasteResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockPaste(context.Background(), in).MarshalVT()
	return resp
}

func BlockCut(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockCutResponse{Error: &pb.RpcBlockCutResponse_Error{Code: pb.RpcBlockCutResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockCutRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockCutResponse{Error: &pb.RpcBlockCutResponse_Error{Code: pb.RpcBlockCutResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockCut(context.Background(), in).MarshalVT()
	return resp
}

func BlockSetFields(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockSetFieldsResponse{Error: &pb.RpcBlockSetFieldsResponse_Error{Code: pb.RpcBlockSetFieldsResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockSetFieldsRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockSetFieldsResponse{Error: &pb.RpcBlockSetFieldsResponse_Error{Code: pb.RpcBlockSetFieldsResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockSetFields(context.Background(), in).MarshalVT()
	return resp
}

func BlockExport(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockExportResponse{Error: &pb.RpcBlockExportResponse_Error{Code: pb.RpcBlockExportResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockExportRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockExportResponse{Error: &pb.RpcBlockExportResponse_Error{Code: pb.RpcBlockExportResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockExport(context.Background(), in).MarshalVT()
	return resp
}

func BlockSetCarriage(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockSetCarriageResponse{Error: &pb.RpcBlockSetCarriageResponse_Error{Code: pb.RpcBlockSetCarriageResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockSetCarriageRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockSetCarriageResponse{Error: &pb.RpcBlockSetCarriageResponse_Error{Code: pb.RpcBlockSetCarriageResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockSetCarriage(context.Background(), in).MarshalVT()
	return resp
}

func BlockPreview(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockPreviewResponse{Error: &pb.RpcBlockPreviewResponse_Error{Code: pb.RpcBlockPreviewResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockPreviewRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockPreviewResponse{Error: &pb.RpcBlockPreviewResponse_Error{Code: pb.RpcBlockPreviewResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockPreview(context.Background(), in).MarshalVT()
	return resp
}

func BlockListDelete(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockListDeleteResponse{Error: &pb.RpcBlockListDeleteResponse_Error{Code: pb.RpcBlockListDeleteResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockListDeleteRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockListDeleteResponse{Error: &pb.RpcBlockListDeleteResponse_Error{Code: pb.RpcBlockListDeleteResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockListDelete(context.Background(), in).MarshalVT()
	return resp
}

func BlockListMoveToExistingObject(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockListMoveToExistingObjectResponse{Error: &pb.RpcBlockListMoveToExistingObjectResponse_Error{Code: pb.RpcBlockListMoveToExistingObjectResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockListMoveToExistingObjectRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockListMoveToExistingObjectResponse{Error: &pb.RpcBlockListMoveToExistingObjectResponse_Error{Code: pb.RpcBlockListMoveToExistingObjectResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockListMoveToExistingObject(context.Background(), in).MarshalVT()
	return resp
}

func BlockListMoveToNewObject(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockListMoveToNewObjectResponse{Error: &pb.RpcBlockListMoveToNewObjectResponse_Error{Code: pb.RpcBlockListMoveToNewObjectResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockListMoveToNewObjectRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockListMoveToNewObjectResponse{Error: &pb.RpcBlockListMoveToNewObjectResponse_Error{Code: pb.RpcBlockListMoveToNewObjectResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockListMoveToNewObject(context.Background(), in).MarshalVT()
	return resp
}

func BlockListConvertToObjects(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockListConvertToObjectsResponse{Error: &pb.RpcBlockListConvertToObjectsResponse_Error{Code: pb.RpcBlockListConvertToObjectsResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockListConvertToObjectsRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockListConvertToObjectsResponse{Error: &pb.RpcBlockListConvertToObjectsResponse_Error{Code: pb.RpcBlockListConvertToObjectsResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockListConvertToObjects(context.Background(), in).MarshalVT()
	return resp
}

func BlockListSetFields(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockListSetFieldsResponse{Error: &pb.RpcBlockListSetFieldsResponse_Error{Code: pb.RpcBlockListSetFieldsResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockListSetFieldsRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockListSetFieldsResponse{Error: &pb.RpcBlockListSetFieldsResponse_Error{Code: pb.RpcBlockListSetFieldsResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockListSetFields(context.Background(), in).MarshalVT()
	return resp
}

func BlockListDuplicate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockListDuplicateResponse{Error: &pb.RpcBlockListDuplicateResponse_Error{Code: pb.RpcBlockListDuplicateResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockListDuplicateRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockListDuplicateResponse{Error: &pb.RpcBlockListDuplicateResponse_Error{Code: pb.RpcBlockListDuplicateResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockListDuplicate(context.Background(), in).MarshalVT()
	return resp
}

func BlockListSetBackgroundColor(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockListSetBackgroundColorResponse{Error: &pb.RpcBlockListSetBackgroundColorResponse_Error{Code: pb.RpcBlockListSetBackgroundColorResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockListSetBackgroundColorRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockListSetBackgroundColorResponse{Error: &pb.RpcBlockListSetBackgroundColorResponse_Error{Code: pb.RpcBlockListSetBackgroundColorResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockListSetBackgroundColor(context.Background(), in).MarshalVT()
	return resp
}

func BlockListSetAlign(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockListSetAlignResponse{Error: &pb.RpcBlockListSetAlignResponse_Error{Code: pb.RpcBlockListSetAlignResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockListSetAlignRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockListSetAlignResponse{Error: &pb.RpcBlockListSetAlignResponse_Error{Code: pb.RpcBlockListSetAlignResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockListSetAlign(context.Background(), in).MarshalVT()
	return resp
}

func BlockListSetVerticalAlign(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockListSetVerticalAlignResponse{Error: &pb.RpcBlockListSetVerticalAlignResponse_Error{Code: pb.RpcBlockListSetVerticalAlignResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockListSetVerticalAlignRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockListSetVerticalAlignResponse{Error: &pb.RpcBlockListSetVerticalAlignResponse_Error{Code: pb.RpcBlockListSetVerticalAlignResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockListSetVerticalAlign(context.Background(), in).MarshalVT()
	return resp
}

func BlockListTurnInto(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockListTurnIntoResponse{Error: &pb.RpcBlockListTurnIntoResponse_Error{Code: pb.RpcBlockListTurnIntoResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockListTurnIntoRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockListTurnIntoResponse{Error: &pb.RpcBlockListTurnIntoResponse_Error{Code: pb.RpcBlockListTurnIntoResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockListTurnInto(context.Background(), in).MarshalVT()
	return resp
}

func BlockTextSetText(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTextSetTextResponse{Error: &pb.RpcBlockTextSetTextResponse_Error{Code: pb.RpcBlockTextSetTextResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTextSetTextRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockTextSetTextResponse{Error: &pb.RpcBlockTextSetTextResponse_Error{Code: pb.RpcBlockTextSetTextResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTextSetText(context.Background(), in).MarshalVT()
	return resp
}

func BlockTextSetColor(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTextSetColorResponse{Error: &pb.RpcBlockTextSetColorResponse_Error{Code: pb.RpcBlockTextSetColorResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTextSetColorRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockTextSetColorResponse{Error: &pb.RpcBlockTextSetColorResponse_Error{Code: pb.RpcBlockTextSetColorResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTextSetColor(context.Background(), in).MarshalVT()
	return resp
}

func BlockTextSetStyle(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTextSetStyleResponse{Error: &pb.RpcBlockTextSetStyleResponse_Error{Code: pb.RpcBlockTextSetStyleResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTextSetStyleRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockTextSetStyleResponse{Error: &pb.RpcBlockTextSetStyleResponse_Error{Code: pb.RpcBlockTextSetStyleResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTextSetStyle(context.Background(), in).MarshalVT()
	return resp
}

func BlockTextSetChecked(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTextSetCheckedResponse{Error: &pb.RpcBlockTextSetCheckedResponse_Error{Code: pb.RpcBlockTextSetCheckedResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTextSetCheckedRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockTextSetCheckedResponse{Error: &pb.RpcBlockTextSetCheckedResponse_Error{Code: pb.RpcBlockTextSetCheckedResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTextSetChecked(context.Background(), in).MarshalVT()
	return resp
}

func BlockTextSetIcon(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTextSetIconResponse{Error: &pb.RpcBlockTextSetIconResponse_Error{Code: pb.RpcBlockTextSetIconResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTextSetIconRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockTextSetIconResponse{Error: &pb.RpcBlockTextSetIconResponse_Error{Code: pb.RpcBlockTextSetIconResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTextSetIcon(context.Background(), in).MarshalVT()
	return resp
}

func BlockTextListSetColor(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTextListSetColorResponse{Error: &pb.RpcBlockTextListSetColorResponse_Error{Code: pb.RpcBlockTextListSetColorResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTextListSetColorRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockTextListSetColorResponse{Error: &pb.RpcBlockTextListSetColorResponse_Error{Code: pb.RpcBlockTextListSetColorResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTextListSetColor(context.Background(), in).MarshalVT()
	return resp
}

func BlockTextListSetMark(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTextListSetMarkResponse{Error: &pb.RpcBlockTextListSetMarkResponse_Error{Code: pb.RpcBlockTextListSetMarkResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTextListSetMarkRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockTextListSetMarkResponse{Error: &pb.RpcBlockTextListSetMarkResponse_Error{Code: pb.RpcBlockTextListSetMarkResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTextListSetMark(context.Background(), in).MarshalVT()
	return resp
}

func BlockTextListSetStyle(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTextListSetStyleResponse{Error: &pb.RpcBlockTextListSetStyleResponse_Error{Code: pb.RpcBlockTextListSetStyleResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTextListSetStyleRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockTextListSetStyleResponse{Error: &pb.RpcBlockTextListSetStyleResponse_Error{Code: pb.RpcBlockTextListSetStyleResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTextListSetStyle(context.Background(), in).MarshalVT()
	return resp
}

func BlockTextListClearStyle(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTextListClearStyleResponse{Error: &pb.RpcBlockTextListClearStyleResponse_Error{Code: pb.RpcBlockTextListClearStyleResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTextListClearStyleRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockTextListClearStyleResponse{Error: &pb.RpcBlockTextListClearStyleResponse_Error{Code: pb.RpcBlockTextListClearStyleResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTextListClearStyle(context.Background(), in).MarshalVT()
	return resp
}

func BlockTextListClearContent(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTextListClearContentResponse{Error: &pb.RpcBlockTextListClearContentResponse_Error{Code: pb.RpcBlockTextListClearContentResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTextListClearContentRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockTextListClearContentResponse{Error: &pb.RpcBlockTextListClearContentResponse_Error{Code: pb.RpcBlockTextListClearContentResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTextListClearContent(context.Background(), in).MarshalVT()
	return resp
}

func BlockFileSetName(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockFileSetNameResponse{Error: &pb.RpcBlockFileSetNameResponse_Error{Code: pb.RpcBlockFileSetNameResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockFileSetNameRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockFileSetNameResponse{Error: &pb.RpcBlockFileSetNameResponse_Error{Code: pb.RpcBlockFileSetNameResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockFileSetName(context.Background(), in).MarshalVT()
	return resp
}

func BlockFileSetTargetObjectId(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockFileSetTargetObjectIdResponse{Error: &pb.RpcBlockFileSetTargetObjectIdResponse_Error{Code: pb.RpcBlockFileSetTargetObjectIdResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockFileSetTargetObjectIdRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockFileSetTargetObjectIdResponse{Error: &pb.RpcBlockFileSetTargetObjectIdResponse_Error{Code: pb.RpcBlockFileSetTargetObjectIdResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockFileSetTargetObjectId(context.Background(), in).MarshalVT()
	return resp
}

func BlockImageSetName(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockImageSetNameResponse{Error: &pb.RpcBlockImageSetNameResponse_Error{Code: pb.RpcBlockImageSetNameResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockImageSetNameRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockImageSetNameResponse{Error: &pb.RpcBlockImageSetNameResponse_Error{Code: pb.RpcBlockImageSetNameResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockImageSetName(context.Background(), in).MarshalVT()
	return resp
}

func BlockVideoSetName(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockVideoSetNameResponse{Error: &pb.RpcBlockVideoSetNameResponse_Error{Code: pb.RpcBlockVideoSetNameResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockVideoSetNameRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockVideoSetNameResponse{Error: &pb.RpcBlockVideoSetNameResponse_Error{Code: pb.RpcBlockVideoSetNameResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockVideoSetName(context.Background(), in).MarshalVT()
	return resp
}

func BlockFileCreateAndUpload(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockFileCreateAndUploadResponse{Error: &pb.RpcBlockFileCreateAndUploadResponse_Error{Code: pb.RpcBlockFileCreateAndUploadResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockFileCreateAndUploadRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockFileCreateAndUploadResponse{Error: &pb.RpcBlockFileCreateAndUploadResponse_Error{Code: pb.RpcBlockFileCreateAndUploadResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockFileCreateAndUpload(context.Background(), in).MarshalVT()
	return resp
}

func BlockFileListSetStyle(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockFileListSetStyleResponse{Error: &pb.RpcBlockFileListSetStyleResponse_Error{Code: pb.RpcBlockFileListSetStyleResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockFileListSetStyleRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockFileListSetStyleResponse{Error: &pb.RpcBlockFileListSetStyleResponse_Error{Code: pb.RpcBlockFileListSetStyleResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockFileListSetStyle(context.Background(), in).MarshalVT()
	return resp
}

func BlockDataviewViewCreate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewViewCreateResponse{Error: &pb.RpcBlockDataviewViewCreateResponse_Error{Code: pb.RpcBlockDataviewViewCreateResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewViewCreateRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewViewCreateResponse{Error: &pb.RpcBlockDataviewViewCreateResponse_Error{Code: pb.RpcBlockDataviewViewCreateResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewViewCreate(context.Background(), in).MarshalVT()
	return resp
}

func BlockDataviewViewDelete(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewViewDeleteResponse{Error: &pb.RpcBlockDataviewViewDeleteResponse_Error{Code: pb.RpcBlockDataviewViewDeleteResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewViewDeleteRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewViewDeleteResponse{Error: &pb.RpcBlockDataviewViewDeleteResponse_Error{Code: pb.RpcBlockDataviewViewDeleteResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewViewDelete(context.Background(), in).MarshalVT()
	return resp
}

func BlockDataviewViewUpdate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewViewUpdateResponse{Error: &pb.RpcBlockDataviewViewUpdateResponse_Error{Code: pb.RpcBlockDataviewViewUpdateResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewViewUpdateRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewViewUpdateResponse{Error: &pb.RpcBlockDataviewViewUpdateResponse_Error{Code: pb.RpcBlockDataviewViewUpdateResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewViewUpdate(context.Background(), in).MarshalVT()
	return resp
}

func BlockDataviewViewSetActive(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewViewSetActiveResponse{Error: &pb.RpcBlockDataviewViewSetActiveResponse_Error{Code: pb.RpcBlockDataviewViewSetActiveResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewViewSetActiveRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewViewSetActiveResponse{Error: &pb.RpcBlockDataviewViewSetActiveResponse_Error{Code: pb.RpcBlockDataviewViewSetActiveResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewViewSetActive(context.Background(), in).MarshalVT()
	return resp
}

func BlockDataviewViewSetPosition(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewViewSetPositionResponse{Error: &pb.RpcBlockDataviewViewSetPositionResponse_Error{Code: pb.RpcBlockDataviewViewSetPositionResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewViewSetPositionRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewViewSetPositionResponse{Error: &pb.RpcBlockDataviewViewSetPositionResponse_Error{Code: pb.RpcBlockDataviewViewSetPositionResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewViewSetPosition(context.Background(), in).MarshalVT()
	return resp
}

func BlockDataviewSetSource(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewSetSourceResponse{Error: &pb.RpcBlockDataviewSetSourceResponse_Error{Code: pb.RpcBlockDataviewSetSourceResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewSetSourceRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewSetSourceResponse{Error: &pb.RpcBlockDataviewSetSourceResponse_Error{Code: pb.RpcBlockDataviewSetSourceResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewSetSource(context.Background(), in).MarshalVT()
	return resp
}

func BlockDataviewRelationAdd(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewRelationAddResponse{Error: &pb.RpcBlockDataviewRelationAddResponse_Error{Code: pb.RpcBlockDataviewRelationAddResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewRelationAddRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewRelationAddResponse{Error: &pb.RpcBlockDataviewRelationAddResponse_Error{Code: pb.RpcBlockDataviewRelationAddResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewRelationAdd(context.Background(), in).MarshalVT()
	return resp
}

func BlockDataviewRelationDelete(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewRelationDeleteResponse{Error: &pb.RpcBlockDataviewRelationDeleteResponse_Error{Code: pb.RpcBlockDataviewRelationDeleteResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewRelationDeleteRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewRelationDeleteResponse{Error: &pb.RpcBlockDataviewRelationDeleteResponse_Error{Code: pb.RpcBlockDataviewRelationDeleteResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewRelationDelete(context.Background(), in).MarshalVT()
	return resp
}

func BlockDataviewGroupOrderUpdate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewGroupOrderUpdateResponse{Error: &pb.RpcBlockDataviewGroupOrderUpdateResponse_Error{Code: pb.RpcBlockDataviewGroupOrderUpdateResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewGroupOrderUpdateRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewGroupOrderUpdateResponse{Error: &pb.RpcBlockDataviewGroupOrderUpdateResponse_Error{Code: pb.RpcBlockDataviewGroupOrderUpdateResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewGroupOrderUpdate(context.Background(), in).MarshalVT()
	return resp
}

func BlockDataviewObjectOrderUpdate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewObjectOrderUpdateResponse{Error: &pb.RpcBlockDataviewObjectOrderUpdateResponse_Error{Code: pb.RpcBlockDataviewObjectOrderUpdateResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewObjectOrderUpdateRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewObjectOrderUpdateResponse{Error: &pb.RpcBlockDataviewObjectOrderUpdateResponse_Error{Code: pb.RpcBlockDataviewObjectOrderUpdateResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewObjectOrderUpdate(context.Background(), in).MarshalVT()
	return resp
}

func BlockDataviewObjectOrderMove(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewObjectOrderMoveResponse{Error: &pb.RpcBlockDataviewObjectOrderMoveResponse_Error{Code: pb.RpcBlockDataviewObjectOrderMoveResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewObjectOrderMoveRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewObjectOrderMoveResponse{Error: &pb.RpcBlockDataviewObjectOrderMoveResponse_Error{Code: pb.RpcBlockDataviewObjectOrderMoveResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewObjectOrderMove(context.Background(), in).MarshalVT()
	return resp
}

func BlockDataviewCreateFromExistingObject(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewCreateFromExistingObjectResponse{Error: &pb.RpcBlockDataviewCreateFromExistingObjectResponse_Error{Code: pb.RpcBlockDataviewCreateFromExistingObjectResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewCreateFromExistingObjectRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewCreateFromExistingObjectResponse{Error: &pb.RpcBlockDataviewCreateFromExistingObjectResponse_Error{Code: pb.RpcBlockDataviewCreateFromExistingObjectResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewCreateFromExistingObject(context.Background(), in).MarshalVT()
	return resp
}

func BlockDataviewFilterAdd(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewFilterAddResponse{Error: &pb.RpcBlockDataviewFilterAddResponse_Error{Code: pb.RpcBlockDataviewFilterAddResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewFilterAddRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewFilterAddResponse{Error: &pb.RpcBlockDataviewFilterAddResponse_Error{Code: pb.RpcBlockDataviewFilterAddResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewFilterAdd(context.Background(), in).MarshalVT()
	return resp
}

func BlockDataviewFilterRemove(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewFilterRemoveResponse{Error: &pb.RpcBlockDataviewFilterRemoveResponse_Error{Code: pb.RpcBlockDataviewFilterRemoveResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewFilterRemoveRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewFilterRemoveResponse{Error: &pb.RpcBlockDataviewFilterRemoveResponse_Error{Code: pb.RpcBlockDataviewFilterRemoveResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewFilterRemove(context.Background(), in).MarshalVT()
	return resp
}

func BlockDataviewFilterReplace(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewFilterReplaceResponse{Error: &pb.RpcBlockDataviewFilterReplaceResponse_Error{Code: pb.RpcBlockDataviewFilterReplaceResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewFilterReplaceRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewFilterReplaceResponse{Error: &pb.RpcBlockDataviewFilterReplaceResponse_Error{Code: pb.RpcBlockDataviewFilterReplaceResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewFilterReplace(context.Background(), in).MarshalVT()
	return resp
}

func BlockDataviewFilterSort(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewFilterSortResponse{Error: &pb.RpcBlockDataviewFilterSortResponse_Error{Code: pb.RpcBlockDataviewFilterSortResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewFilterSortRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewFilterSortResponse{Error: &pb.RpcBlockDataviewFilterSortResponse_Error{Code: pb.RpcBlockDataviewFilterSortResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewFilterSort(context.Background(), in).MarshalVT()
	return resp
}

func BlockDataviewSortAdd(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewSortAddResponse{Error: &pb.RpcBlockDataviewSortAddResponse_Error{Code: pb.RpcBlockDataviewSortAddResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewSortAddRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewSortAddResponse{Error: &pb.RpcBlockDataviewSortAddResponse_Error{Code: pb.RpcBlockDataviewSortAddResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewSortAdd(context.Background(), in).MarshalVT()
	return resp
}

func BlockDataviewSortRemove(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewSortRemoveResponse{Error: &pb.RpcBlockDataviewSortRemoveResponse_Error{Code: pb.RpcBlockDataviewSortRemoveResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewSortRemoveRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewSortRemoveResponse{Error: &pb.RpcBlockDataviewSortRemoveResponse_Error{Code: pb.RpcBlockDataviewSortRemoveResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewSortRemove(context.Background(), in).MarshalVT()
	return resp
}

func BlockDataviewSortReplace(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewSortReplaceResponse{Error: &pb.RpcBlockDataviewSortReplaceResponse_Error{Code: pb.RpcBlockDataviewSortReplaceResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewSortReplaceRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewSortReplaceResponse{Error: &pb.RpcBlockDataviewSortReplaceResponse_Error{Code: pb.RpcBlockDataviewSortReplaceResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewSortReplace(context.Background(), in).MarshalVT()
	return resp
}

func BlockDataviewSortSort(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewSortSSortResponse{Error: &pb.RpcBlockDataviewSortSSortResponse_Error{Code: pb.RpcBlockDataviewSortSSortResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewSortSSortRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewSortSSortResponse{Error: &pb.RpcBlockDataviewSortSSortResponse_Error{Code: pb.RpcBlockDataviewSortSSortResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewSortSort(context.Background(), in).MarshalVT()
	return resp
}

func BlockDataviewViewRelationAdd(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewViewRelationAddResponse{Error: &pb.RpcBlockDataviewViewRelationAddResponse_Error{Code: pb.RpcBlockDataviewViewRelationAddResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewViewRelationAddRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewViewRelationAddResponse{Error: &pb.RpcBlockDataviewViewRelationAddResponse_Error{Code: pb.RpcBlockDataviewViewRelationAddResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewViewRelationAdd(context.Background(), in).MarshalVT()
	return resp
}

func BlockDataviewViewRelationRemove(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewViewRelationRemoveResponse{Error: &pb.RpcBlockDataviewViewRelationRemoveResponse_Error{Code: pb.RpcBlockDataviewViewRelationRemoveResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewViewRelationRemoveRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewViewRelationRemoveResponse{Error: &pb.RpcBlockDataviewViewRelationRemoveResponse_Error{Code: pb.RpcBlockDataviewViewRelationRemoveResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewViewRelationRemove(context.Background(), in).MarshalVT()
	return resp
}

func BlockDataviewViewRelationReplace(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewViewRelationReplaceResponse{Error: &pb.RpcBlockDataviewViewRelationReplaceResponse_Error{Code: pb.RpcBlockDataviewViewRelationReplaceResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewViewRelationReplaceRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewViewRelationReplaceResponse{Error: &pb.RpcBlockDataviewViewRelationReplaceResponse_Error{Code: pb.RpcBlockDataviewViewRelationReplaceResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewViewRelationReplace(context.Background(), in).MarshalVT()
	return resp
}

func BlockDataviewViewRelationSort(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewViewRelationSortResponse{Error: &pb.RpcBlockDataviewViewRelationSortResponse_Error{Code: pb.RpcBlockDataviewViewRelationSortResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewViewRelationSortRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewViewRelationSortResponse{Error: &pb.RpcBlockDataviewViewRelationSortResponse_Error{Code: pb.RpcBlockDataviewViewRelationSortResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewViewRelationSort(context.Background(), in).MarshalVT()
	return resp
}

func BlockTableCreate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableCreateResponse{Error: &pb.RpcBlockTableCreateResponse_Error{Code: pb.RpcBlockTableCreateResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableCreateRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockTableCreateResponse{Error: &pb.RpcBlockTableCreateResponse_Error{Code: pb.RpcBlockTableCreateResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableCreate(context.Background(), in).MarshalVT()
	return resp
}

func BlockTableExpand(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableExpandResponse{Error: &pb.RpcBlockTableExpandResponse_Error{Code: pb.RpcBlockTableExpandResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableExpandRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockTableExpandResponse{Error: &pb.RpcBlockTableExpandResponse_Error{Code: pb.RpcBlockTableExpandResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableExpand(context.Background(), in).MarshalVT()
	return resp
}

func BlockTableRowCreate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableRowCreateResponse{Error: &pb.RpcBlockTableRowCreateResponse_Error{Code: pb.RpcBlockTableRowCreateResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableRowCreateRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockTableRowCreateResponse{Error: &pb.RpcBlockTableRowCreateResponse_Error{Code: pb.RpcBlockTableRowCreateResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableRowCreate(context.Background(), in).MarshalVT()
	return resp
}

func BlockTableRowDelete(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableRowDeleteResponse{Error: &pb.RpcBlockTableRowDeleteResponse_Error{Code: pb.RpcBlockTableRowDeleteResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableRowDeleteRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockTableRowDeleteResponse{Error: &pb.RpcBlockTableRowDeleteResponse_Error{Code: pb.RpcBlockTableRowDeleteResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableRowDelete(context.Background(), in).MarshalVT()
	return resp
}

func BlockTableRowDuplicate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableRowDuplicateResponse{Error: &pb.RpcBlockTableRowDuplicateResponse_Error{Code: pb.RpcBlockTableRowDuplicateResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableRowDuplicateRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockTableRowDuplicateResponse{Error: &pb.RpcBlockTableRowDuplicateResponse_Error{Code: pb.RpcBlockTableRowDuplicateResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableRowDuplicate(context.Background(), in).MarshalVT()
	return resp
}

func BlockTableRowSetHeader(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableRowSetHeaderResponse{Error: &pb.RpcBlockTableRowSetHeaderResponse_Error{Code: pb.RpcBlockTableRowSetHeaderResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableRowSetHeaderRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockTableRowSetHeaderResponse{Error: &pb.RpcBlockTableRowSetHeaderResponse_Error{Code: pb.RpcBlockTableRowSetHeaderResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableRowSetHeader(context.Background(), in).MarshalVT()
	return resp
}

func BlockTableColumnCreate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableColumnCreateResponse{Error: &pb.RpcBlockTableColumnCreateResponse_Error{Code: pb.RpcBlockTableColumnCreateResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableColumnCreateRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockTableColumnCreateResponse{Error: &pb.RpcBlockTableColumnCreateResponse_Error{Code: pb.RpcBlockTableColumnCreateResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableColumnCreate(context.Background(), in).MarshalVT()
	return resp
}

func BlockTableColumnMove(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableColumnMoveResponse{Error: &pb.RpcBlockTableColumnMoveResponse_Error{Code: pb.RpcBlockTableColumnMoveResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableColumnMoveRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockTableColumnMoveResponse{Error: &pb.RpcBlockTableColumnMoveResponse_Error{Code: pb.RpcBlockTableColumnMoveResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableColumnMove(context.Background(), in).MarshalVT()
	return resp
}

func BlockTableColumnDelete(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableColumnDeleteResponse{Error: &pb.RpcBlockTableColumnDeleteResponse_Error{Code: pb.RpcBlockTableColumnDeleteResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableColumnDeleteRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockTableColumnDeleteResponse{Error: &pb.RpcBlockTableColumnDeleteResponse_Error{Code: pb.RpcBlockTableColumnDeleteResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableColumnDelete(context.Background(), in).MarshalVT()
	return resp
}

func BlockTableColumnDuplicate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableColumnDuplicateResponse{Error: &pb.RpcBlockTableColumnDuplicateResponse_Error{Code: pb.RpcBlockTableColumnDuplicateResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableColumnDuplicateRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockTableColumnDuplicateResponse{Error: &pb.RpcBlockTableColumnDuplicateResponse_Error{Code: pb.RpcBlockTableColumnDuplicateResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableColumnDuplicate(context.Background(), in).MarshalVT()
	return resp
}

func BlockTableRowListFill(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableRowListFillResponse{Error: &pb.RpcBlockTableRowListFillResponse_Error{Code: pb.RpcBlockTableRowListFillResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableRowListFillRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockTableRowListFillResponse{Error: &pb.RpcBlockTableRowListFillResponse_Error{Code: pb.RpcBlockTableRowListFillResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableRowListFill(context.Background(), in).MarshalVT()
	return resp
}

func BlockTableRowListClean(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableRowListCleanResponse{Error: &pb.RpcBlockTableRowListCleanResponse_Error{Code: pb.RpcBlockTableRowListCleanResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableRowListCleanRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockTableRowListCleanResponse{Error: &pb.RpcBlockTableRowListCleanResponse_Error{Code: pb.RpcBlockTableRowListCleanResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableRowListClean(context.Background(), in).MarshalVT()
	return resp
}

func BlockTableColumnListFill(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableColumnListFillResponse{Error: &pb.RpcBlockTableColumnListFillResponse_Error{Code: pb.RpcBlockTableColumnListFillResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableColumnListFillRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockTableColumnListFillResponse{Error: &pb.RpcBlockTableColumnListFillResponse_Error{Code: pb.RpcBlockTableColumnListFillResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableColumnListFill(context.Background(), in).MarshalVT()
	return resp
}

func BlockTableSort(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableSortResponse{Error: &pb.RpcBlockTableSortResponse_Error{Code: pb.RpcBlockTableSortResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableSortRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockTableSortResponse{Error: &pb.RpcBlockTableSortResponse_Error{Code: pb.RpcBlockTableSortResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableSort(context.Background(), in).MarshalVT()
	return resp
}

func BlockCreateWidget(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockCreateWidgetResponse{Error: &pb.RpcBlockCreateWidgetResponse_Error{Code: pb.RpcBlockCreateWidgetResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockCreateWidgetRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockCreateWidgetResponse{Error: &pb.RpcBlockCreateWidgetResponse_Error{Code: pb.RpcBlockCreateWidgetResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockCreateWidget(context.Background(), in).MarshalVT()
	return resp
}

func BlockWidgetSetTargetId(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockWidgetSetTargetIdResponse{Error: &pb.RpcBlockWidgetSetTargetIdResponse_Error{Code: pb.RpcBlockWidgetSetTargetIdResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockWidgetSetTargetIdRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockWidgetSetTargetIdResponse{Error: &pb.RpcBlockWidgetSetTargetIdResponse_Error{Code: pb.RpcBlockWidgetSetTargetIdResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockWidgetSetTargetId(context.Background(), in).MarshalVT()
	return resp
}

func BlockWidgetSetLayout(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockWidgetSetLayoutResponse{Error: &pb.RpcBlockWidgetSetLayoutResponse_Error{Code: pb.RpcBlockWidgetSetLayoutResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockWidgetSetLayoutRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockWidgetSetLayoutResponse{Error: &pb.RpcBlockWidgetSetLayoutResponse_Error{Code: pb.RpcBlockWidgetSetLayoutResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockWidgetSetLayout(context.Background(), in).MarshalVT()
	return resp
}

func BlockWidgetSetLimit(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockWidgetSetLimitResponse{Error: &pb.RpcBlockWidgetSetLimitResponse_Error{Code: pb.RpcBlockWidgetSetLimitResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockWidgetSetLimitRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockWidgetSetLimitResponse{Error: &pb.RpcBlockWidgetSetLimitResponse_Error{Code: pb.RpcBlockWidgetSetLimitResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockWidgetSetLimit(context.Background(), in).MarshalVT()
	return resp
}

func BlockWidgetSetViewId(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockWidgetSetViewIdResponse{Error: &pb.RpcBlockWidgetSetViewIdResponse_Error{Code: pb.RpcBlockWidgetSetViewIdResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockWidgetSetViewIdRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockWidgetSetViewIdResponse{Error: &pb.RpcBlockWidgetSetViewIdResponse_Error{Code: pb.RpcBlockWidgetSetViewIdResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockWidgetSetViewId(context.Background(), in).MarshalVT()
	return resp
}

func BlockLinkCreateWithObject(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockLinkCreateWithObjectResponse{Error: &pb.RpcBlockLinkCreateWithObjectResponse_Error{Code: pb.RpcBlockLinkCreateWithObjectResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockLinkCreateWithObjectRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockLinkCreateWithObjectResponse{Error: &pb.RpcBlockLinkCreateWithObjectResponse_Error{Code: pb.RpcBlockLinkCreateWithObjectResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockLinkCreateWithObject(context.Background(), in).MarshalVT()
	return resp
}

func BlockLinkListSetAppearance(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockLinkListSetAppearanceResponse{Error: &pb.RpcBlockLinkListSetAppearanceResponse_Error{Code: pb.RpcBlockLinkListSetAppearanceResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockLinkListSetAppearanceRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockLinkListSetAppearanceResponse{Error: &pb.RpcBlockLinkListSetAppearanceResponse_Error{Code: pb.RpcBlockLinkListSetAppearanceResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockLinkListSetAppearance(context.Background(), in).MarshalVT()
	return resp
}

func BlockBookmarkFetch(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockBookmarkFetchResponse{Error: &pb.RpcBlockBookmarkFetchResponse_Error{Code: pb.RpcBlockBookmarkFetchResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockBookmarkFetchRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockBookmarkFetchResponse{Error: &pb.RpcBlockBookmarkFetchResponse_Error{Code: pb.RpcBlockBookmarkFetchResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockBookmarkFetch(context.Background(), in).MarshalVT()
	return resp
}

func BlockBookmarkCreateAndFetch(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockBookmarkCreateAndFetchResponse{Error: &pb.RpcBlockBookmarkCreateAndFetchResponse_Error{Code: pb.RpcBlockBookmarkCreateAndFetchResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockBookmarkCreateAndFetchRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockBookmarkCreateAndFetchResponse{Error: &pb.RpcBlockBookmarkCreateAndFetchResponse_Error{Code: pb.RpcBlockBookmarkCreateAndFetchResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockBookmarkCreateAndFetch(context.Background(), in).MarshalVT()
	return resp
}

func BlockRelationSetKey(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockRelationSetKeyResponse{Error: &pb.RpcBlockRelationSetKeyResponse_Error{Code: pb.RpcBlockRelationSetKeyResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockRelationSetKeyRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockRelationSetKeyResponse{Error: &pb.RpcBlockRelationSetKeyResponse_Error{Code: pb.RpcBlockRelationSetKeyResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockRelationSetKey(context.Background(), in).MarshalVT()
	return resp
}

func BlockRelationAdd(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockRelationAddResponse{Error: &pb.RpcBlockRelationAddResponse_Error{Code: pb.RpcBlockRelationAddResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockRelationAddRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockRelationAddResponse{Error: &pb.RpcBlockRelationAddResponse_Error{Code: pb.RpcBlockRelationAddResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockRelationAdd(context.Background(), in).MarshalVT()
	return resp
}

func BlockDivListSetStyle(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDivListSetStyleResponse{Error: &pb.RpcBlockDivListSetStyleResponse_Error{Code: pb.RpcBlockDivListSetStyleResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDivListSetStyleRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockDivListSetStyleResponse{Error: &pb.RpcBlockDivListSetStyleResponse_Error{Code: pb.RpcBlockDivListSetStyleResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDivListSetStyle(context.Background(), in).MarshalVT()
	return resp
}

func BlockLatexSetText(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockLatexSetTextResponse{Error: &pb.RpcBlockLatexSetTextResponse_Error{Code: pb.RpcBlockLatexSetTextResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockLatexSetTextRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBlockLatexSetTextResponse{Error: &pb.RpcBlockLatexSetTextResponse_Error{Code: pb.RpcBlockLatexSetTextResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockLatexSetText(context.Background(), in).MarshalVT()
	return resp
}

func ProcessCancel(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcProcessCancelResponse{Error: &pb.RpcProcessCancelResponse_Error{Code: pb.RpcProcessCancelResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcProcessCancelRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcProcessCancelResponse{Error: &pb.RpcProcessCancelResponse_Error{Code: pb.RpcProcessCancelResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ProcessCancel(context.Background(), in).MarshalVT()
	return resp
}

func ProcessSubscribe(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcProcessSubscribeResponse{Error: &pb.RpcProcessSubscribeResponse_Error{Code: pb.RpcProcessSubscribeResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcProcessSubscribeRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcProcessSubscribeResponse{Error: &pb.RpcProcessSubscribeResponse_Error{Code: pb.RpcProcessSubscribeResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ProcessSubscribe(context.Background(), in).MarshalVT()
	return resp
}

func ProcessUnsubscribe(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcProcessUnsubscribeResponse{Error: &pb.RpcProcessUnsubscribeResponse_Error{Code: pb.RpcProcessUnsubscribeResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcProcessUnsubscribeRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcProcessUnsubscribeResponse{Error: &pb.RpcProcessUnsubscribeResponse_Error{Code: pb.RpcProcessUnsubscribeResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ProcessUnsubscribe(context.Background(), in).MarshalVT()
	return resp
}

func LogSend(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcLogSendResponse{Error: &pb.RpcLogSendResponse_Error{Code: pb.RpcLogSendResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcLogSendRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcLogSendResponse{Error: &pb.RpcLogSendResponse_Error{Code: pb.RpcLogSendResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.LogSend(context.Background(), in).MarshalVT()
	return resp
}

func DebugStat(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDebugStatResponse{Error: &pb.RpcDebugStatResponse_Error{Code: pb.RpcDebugStatResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDebugStatRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcDebugStatResponse{Error: &pb.RpcDebugStatResponse_Error{Code: pb.RpcDebugStatResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.DebugStat(context.Background(), in).MarshalVT()
	return resp
}

func DebugTree(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDebugTreeResponse{Error: &pb.RpcDebugTreeResponse_Error{Code: pb.RpcDebugTreeResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDebugTreeRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcDebugTreeResponse{Error: &pb.RpcDebugTreeResponse_Error{Code: pb.RpcDebugTreeResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.DebugTree(context.Background(), in).MarshalVT()
	return resp
}

func DebugTreeHeads(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDebugTreeHeadsResponse{Error: &pb.RpcDebugTreeHeadsResponse_Error{Code: pb.RpcDebugTreeHeadsResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDebugTreeHeadsRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcDebugTreeHeadsResponse{Error: &pb.RpcDebugTreeHeadsResponse_Error{Code: pb.RpcDebugTreeHeadsResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.DebugTreeHeads(context.Background(), in).MarshalVT()
	return resp
}

func DebugSpaceSummary(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDebugSpaceSummaryResponse{Error: &pb.RpcDebugSpaceSummaryResponse_Error{Code: pb.RpcDebugSpaceSummaryResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDebugSpaceSummaryRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcDebugSpaceSummaryResponse{Error: &pb.RpcDebugSpaceSummaryResponse_Error{Code: pb.RpcDebugSpaceSummaryResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.DebugSpaceSummary(context.Background(), in).MarshalVT()
	return resp
}

func DebugStackGoroutines(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDebugStackGoroutinesResponse{Error: &pb.RpcDebugStackGoroutinesResponse_Error{Code: pb.RpcDebugStackGoroutinesResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDebugStackGoroutinesRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcDebugStackGoroutinesResponse{Error: &pb.RpcDebugStackGoroutinesResponse_Error{Code: pb.RpcDebugStackGoroutinesResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.DebugStackGoroutines(context.Background(), in).MarshalVT()
	return resp
}

func DebugExportLocalstore(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDebugExportLocalstoreResponse{Error: &pb.RpcDebugExportLocalstoreResponse_Error{Code: pb.RpcDebugExportLocalstoreResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDebugExportLocalstoreRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcDebugExportLocalstoreResponse{Error: &pb.RpcDebugExportLocalstoreResponse_Error{Code: pb.RpcDebugExportLocalstoreResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.DebugExportLocalstore(context.Background(), in).MarshalVT()
	return resp
}

func DebugPing(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDebugPingResponse{Error: &pb.RpcDebugPingResponse_Error{Code: pb.RpcDebugPingResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDebugPingRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcDebugPingResponse{Error: &pb.RpcDebugPingResponse_Error{Code: pb.RpcDebugPingResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.DebugPing(context.Background(), in).MarshalVT()
	return resp
}

func DebugSubscriptions(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDebugSubscriptionsResponse{Error: &pb.RpcDebugSubscriptionsResponse_Error{Code: pb.RpcDebugSubscriptionsResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDebugSubscriptionsRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcDebugSubscriptionsResponse{Error: &pb.RpcDebugSubscriptionsResponse_Error{Code: pb.RpcDebugSubscriptionsResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.DebugSubscriptions(context.Background(), in).MarshalVT()
	return resp
}

func DebugOpenedObjects(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDebugOpenedObjectsResponse{Error: &pb.RpcDebugOpenedObjectsResponse_Error{Code: pb.RpcDebugOpenedObjectsResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDebugOpenedObjectsRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcDebugOpenedObjectsResponse{Error: &pb.RpcDebugOpenedObjectsResponse_Error{Code: pb.RpcDebugOpenedObjectsResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.DebugOpenedObjects(context.Background(), in).MarshalVT()
	return resp
}

func DebugRunProfiler(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDebugRunProfilerResponse{Error: &pb.RpcDebugRunProfilerResponse_Error{Code: pb.RpcDebugRunProfilerResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDebugRunProfilerRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcDebugRunProfilerResponse{Error: &pb.RpcDebugRunProfilerResponse_Error{Code: pb.RpcDebugRunProfilerResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.DebugRunProfiler(context.Background(), in).MarshalVT()
	return resp
}

func DebugAccountSelectTrace(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDebugAccountSelectTraceResponse{Error: &pb.RpcDebugAccountSelectTraceResponse_Error{Code: pb.RpcDebugAccountSelectTraceResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDebugAccountSelectTraceRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcDebugAccountSelectTraceResponse{Error: &pb.RpcDebugAccountSelectTraceResponse_Error{Code: pb.RpcDebugAccountSelectTraceResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.DebugAccountSelectTrace(context.Background(), in).MarshalVT()
	return resp
}

func DebugAnystoreObjectChanges(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDebugAnystoreObjectChangesResponse{Error: &pb.RpcDebugAnystoreObjectChangesResponse_Error{Code: pb.RpcDebugAnystoreObjectChangesResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDebugAnystoreObjectChangesRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcDebugAnystoreObjectChangesResponse{Error: &pb.RpcDebugAnystoreObjectChangesResponse_Error{Code: pb.RpcDebugAnystoreObjectChangesResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.DebugAnystoreObjectChanges(context.Background(), in).MarshalVT()
	return resp
}

func DebugNetCheck(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDebugNetCheckResponse{Error: &pb.RpcDebugNetCheckResponse_Error{Code: pb.RpcDebugNetCheckResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDebugNetCheckRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcDebugNetCheckResponse{Error: &pb.RpcDebugNetCheckResponse_Error{Code: pb.RpcDebugNetCheckResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.DebugNetCheck(context.Background(), in).MarshalVT()
	return resp
}

func DebugExportLog(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDebugExportLogResponse{Error: &pb.RpcDebugExportLogResponse_Error{Code: pb.RpcDebugExportLogResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDebugExportLogRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcDebugExportLogResponse{Error: &pb.RpcDebugExportLogResponse_Error{Code: pb.RpcDebugExportLogResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.DebugExportLog(context.Background(), in).MarshalVT()
	return resp
}

func InitialSetParameters(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcInitialSetParametersResponse{Error: &pb.RpcInitialSetParametersResponse_Error{Code: pb.RpcInitialSetParametersResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcInitialSetParametersRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcInitialSetParametersResponse{Error: &pb.RpcInitialSetParametersResponse_Error{Code: pb.RpcInitialSetParametersResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.InitialSetParameters(context.Background(), in).MarshalVT()
	return resp
}

func NotificationList(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcNotificationListResponse{Error: &pb.RpcNotificationListResponse_Error{Code: pb.RpcNotificationListResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcNotificationListRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcNotificationListResponse{Error: &pb.RpcNotificationListResponse_Error{Code: pb.RpcNotificationListResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.NotificationList(context.Background(), in).MarshalVT()
	return resp
}

func NotificationReply(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcNotificationReplyResponse{Error: &pb.RpcNotificationReplyResponse_Error{Code: pb.RpcNotificationReplyResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcNotificationReplyRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcNotificationReplyResponse{Error: &pb.RpcNotificationReplyResponse_Error{Code: pb.RpcNotificationReplyResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.NotificationReply(context.Background(), in).MarshalVT()
	return resp
}

func NotificationTest(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcNotificationTestResponse{Error: &pb.RpcNotificationTestResponse_Error{Code: pb.RpcNotificationTestResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcNotificationTestRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcNotificationTestResponse{Error: &pb.RpcNotificationTestResponse_Error{Code: pb.RpcNotificationTestResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.NotificationTest(context.Background(), in).MarshalVT()
	return resp
}

func MembershipGetStatus(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcMembershipGetStatusResponse{Error: &pb.RpcMembershipGetStatusResponse_Error{Code: pb.RpcMembershipGetStatusResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcMembershipGetStatusRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcMembershipGetStatusResponse{Error: &pb.RpcMembershipGetStatusResponse_Error{Code: pb.RpcMembershipGetStatusResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.MembershipGetStatus(context.Background(), in).MarshalVT()
	return resp
}

func MembershipIsNameValid(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcMembershipIsNameValidResponse{Error: &pb.RpcMembershipIsNameValidResponse_Error{Code: pb.RpcMembershipIsNameValidResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcMembershipIsNameValidRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcMembershipIsNameValidResponse{Error: &pb.RpcMembershipIsNameValidResponse_Error{Code: pb.RpcMembershipIsNameValidResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.MembershipIsNameValid(context.Background(), in).MarshalVT()
	return resp
}

func MembershipRegisterPaymentRequest(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcMembershipRegisterPaymentRequestResponse{Error: &pb.RpcMembershipRegisterPaymentRequestResponse_Error{Code: pb.RpcMembershipRegisterPaymentRequestResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcMembershipRegisterPaymentRequestRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcMembershipRegisterPaymentRequestResponse{Error: &pb.RpcMembershipRegisterPaymentRequestResponse_Error{Code: pb.RpcMembershipRegisterPaymentRequestResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.MembershipRegisterPaymentRequest(context.Background(), in).MarshalVT()
	return resp
}

func MembershipGetPortalLinkUrl(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcMembershipGetPortalLinkUrlResponse{Error: &pb.RpcMembershipGetPortalLinkUrlResponse_Error{Code: pb.RpcMembershipGetPortalLinkUrlResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcMembershipGetPortalLinkUrlRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcMembershipGetPortalLinkUrlResponse{Error: &pb.RpcMembershipGetPortalLinkUrlResponse_Error{Code: pb.RpcMembershipGetPortalLinkUrlResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.MembershipGetPortalLinkUrl(context.Background(), in).MarshalVT()
	return resp
}

func MembershipGetVerificationEmailStatus(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcMembershipGetVerificationEmailStatusResponse{Error: &pb.RpcMembershipGetVerificationEmailStatusResponse_Error{Code: pb.RpcMembershipGetVerificationEmailStatusResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcMembershipGetVerificationEmailStatusRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcMembershipGetVerificationEmailStatusResponse{Error: &pb.RpcMembershipGetVerificationEmailStatusResponse_Error{Code: pb.RpcMembershipGetVerificationEmailStatusResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.MembershipGetVerificationEmailStatus(context.Background(), in).MarshalVT()
	return resp
}

func MembershipGetVerificationEmail(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcMembershipGetVerificationEmailResponse{Error: &pb.RpcMembershipGetVerificationEmailResponse_Error{Code: pb.RpcMembershipGetVerificationEmailResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcMembershipGetVerificationEmailRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcMembershipGetVerificationEmailResponse{Error: &pb.RpcMembershipGetVerificationEmailResponse_Error{Code: pb.RpcMembershipGetVerificationEmailResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.MembershipGetVerificationEmail(context.Background(), in).MarshalVT()
	return resp
}

func MembershipVerifyEmailCode(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcMembershipVerifyEmailCodeResponse{Error: &pb.RpcMembershipVerifyEmailCodeResponse_Error{Code: pb.RpcMembershipVerifyEmailCodeResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcMembershipVerifyEmailCodeRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcMembershipVerifyEmailCodeResponse{Error: &pb.RpcMembershipVerifyEmailCodeResponse_Error{Code: pb.RpcMembershipVerifyEmailCodeResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.MembershipVerifyEmailCode(context.Background(), in).MarshalVT()
	return resp
}

func MembershipFinalize(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcMembershipFinalizeResponse{Error: &pb.RpcMembershipFinalizeResponse_Error{Code: pb.RpcMembershipFinalizeResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcMembershipFinalizeRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcMembershipFinalizeResponse{Error: &pb.RpcMembershipFinalizeResponse_Error{Code: pb.RpcMembershipFinalizeResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.MembershipFinalize(context.Background(), in).MarshalVT()
	return resp
}

func MembershipGetTiers(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcMembershipGetTiersResponse{Error: &pb.RpcMembershipGetTiersResponse_Error{Code: pb.RpcMembershipGetTiersResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcMembershipGetTiersRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcMembershipGetTiersResponse{Error: &pb.RpcMembershipGetTiersResponse_Error{Code: pb.RpcMembershipGetTiersResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.MembershipGetTiers(context.Background(), in).MarshalVT()
	return resp
}

func MembershipVerifyAppStoreReceipt(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcMembershipVerifyAppStoreReceiptResponse{Error: &pb.RpcMembershipVerifyAppStoreReceiptResponse_Error{Code: pb.RpcMembershipVerifyAppStoreReceiptResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcMembershipVerifyAppStoreReceiptRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcMembershipVerifyAppStoreReceiptResponse{Error: &pb.RpcMembershipVerifyAppStoreReceiptResponse_Error{Code: pb.RpcMembershipVerifyAppStoreReceiptResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.MembershipVerifyAppStoreReceipt(context.Background(), in).MarshalVT()
	return resp
}

func NameServiceUserAccountGet(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcNameServiceUserAccountGetResponse{Error: &pb.RpcNameServiceUserAccountGetResponse_Error{Code: pb.RpcNameServiceUserAccountGetResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcNameServiceUserAccountGetRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcNameServiceUserAccountGetResponse{Error: &pb.RpcNameServiceUserAccountGetResponse_Error{Code: pb.RpcNameServiceUserAccountGetResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.NameServiceUserAccountGet(context.Background(), in).MarshalVT()
	return resp
}

func NameServiceResolveName(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcNameServiceResolveNameResponse{Error: &pb.RpcNameServiceResolveNameResponse_Error{Code: pb.RpcNameServiceResolveNameResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcNameServiceResolveNameRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcNameServiceResolveNameResponse{Error: &pb.RpcNameServiceResolveNameResponse_Error{Code: pb.RpcNameServiceResolveNameResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.NameServiceResolveName(context.Background(), in).MarshalVT()
	return resp
}

func NameServiceResolveAnyId(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcNameServiceResolveAnyIdResponse{Error: &pb.RpcNameServiceResolveAnyIdResponse_Error{Code: pb.RpcNameServiceResolveAnyIdResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcNameServiceResolveAnyIdRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcNameServiceResolveAnyIdResponse{Error: &pb.RpcNameServiceResolveAnyIdResponse_Error{Code: pb.RpcNameServiceResolveAnyIdResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.NameServiceResolveAnyId(context.Background(), in).MarshalVT()
	return resp
}

func BroadcastPayloadEvent(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBroadcastPayloadEventResponse{Error: &pb.RpcBroadcastPayloadEventResponse_Error{Code: pb.RpcBroadcastPayloadEventResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBroadcastPayloadEventRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcBroadcastPayloadEventResponse{Error: &pb.RpcBroadcastPayloadEventResponse_Error{Code: pb.RpcBroadcastPayloadEventResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.BroadcastPayloadEvent(context.Background(), in).MarshalVT()
	return resp
}

func DeviceSetName(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDeviceSetNameResponse{Error: &pb.RpcDeviceSetNameResponse_Error{Code: pb.RpcDeviceSetNameResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDeviceSetNameRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcDeviceSetNameResponse{Error: &pb.RpcDeviceSetNameResponse_Error{Code: pb.RpcDeviceSetNameResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.DeviceSetName(context.Background(), in).MarshalVT()
	return resp
}

func DeviceList(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDeviceListResponse{Error: &pb.RpcDeviceListResponse_Error{Code: pb.RpcDeviceListResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDeviceListRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcDeviceListResponse{Error: &pb.RpcDeviceListResponse_Error{Code: pb.RpcDeviceListResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.DeviceList(context.Background(), in).MarshalVT()
	return resp
}

func DeviceNetworkStateSet(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDeviceNetworkStateSetResponse{Error: &pb.RpcDeviceNetworkStateSetResponse_Error{Code: pb.RpcDeviceNetworkStateSetResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDeviceNetworkStateSetRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcDeviceNetworkStateSetResponse{Error: &pb.RpcDeviceNetworkStateSetResponse_Error{Code: pb.RpcDeviceNetworkStateSetResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.DeviceNetworkStateSet(context.Background(), in).MarshalVT()
	return resp
}

func ChatAddMessage(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcChatAddMessageResponse{Error: &pb.RpcChatAddMessageResponse_Error{Code: pb.RpcChatAddMessageResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcChatAddMessageRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcChatAddMessageResponse{Error: &pb.RpcChatAddMessageResponse_Error{Code: pb.RpcChatAddMessageResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ChatAddMessage(context.Background(), in).MarshalVT()
	return resp
}

func ChatEditMessageContent(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcChatEditMessageContentResponse{Error: &pb.RpcChatEditMessageContentResponse_Error{Code: pb.RpcChatEditMessageContentResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcChatEditMessageContentRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcChatEditMessageContentResponse{Error: &pb.RpcChatEditMessageContentResponse_Error{Code: pb.RpcChatEditMessageContentResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ChatEditMessageContent(context.Background(), in).MarshalVT()
	return resp
}

func ChatToggleMessageReaction(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcChatToggleMessageReactionResponse{Error: &pb.RpcChatToggleMessageReactionResponse_Error{Code: pb.RpcChatToggleMessageReactionResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcChatToggleMessageReactionRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcChatToggleMessageReactionResponse{Error: &pb.RpcChatToggleMessageReactionResponse_Error{Code: pb.RpcChatToggleMessageReactionResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ChatToggleMessageReaction(context.Background(), in).MarshalVT()
	return resp
}

func ChatDeleteMessage(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcChatDeleteMessageResponse{Error: &pb.RpcChatDeleteMessageResponse_Error{Code: pb.RpcChatDeleteMessageResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcChatDeleteMessageRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcChatDeleteMessageResponse{Error: &pb.RpcChatDeleteMessageResponse_Error{Code: pb.RpcChatDeleteMessageResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ChatDeleteMessage(context.Background(), in).MarshalVT()
	return resp
}

func ChatGetMessages(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcChatGetMessagesResponse{Error: &pb.RpcChatGetMessagesResponse_Error{Code: pb.RpcChatGetMessagesResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcChatGetMessagesRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcChatGetMessagesResponse{Error: &pb.RpcChatGetMessagesResponse_Error{Code: pb.RpcChatGetMessagesResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ChatGetMessages(context.Background(), in).MarshalVT()
	return resp
}

func ChatGetMessagesByIds(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcChatGetMessagesByIdsResponse{Error: &pb.RpcChatGetMessagesByIdsResponse_Error{Code: pb.RpcChatGetMessagesByIdsResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcChatGetMessagesByIdsRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcChatGetMessagesByIdsResponse{Error: &pb.RpcChatGetMessagesByIdsResponse_Error{Code: pb.RpcChatGetMessagesByIdsResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ChatGetMessagesByIds(context.Background(), in).MarshalVT()
	return resp
}

func ChatSubscribeLastMessages(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcChatSubscribeLastMessagesResponse{Error: &pb.RpcChatSubscribeLastMessagesResponse_Error{Code: pb.RpcChatSubscribeLastMessagesResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcChatSubscribeLastMessagesRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcChatSubscribeLastMessagesResponse{Error: &pb.RpcChatSubscribeLastMessagesResponse_Error{Code: pb.RpcChatSubscribeLastMessagesResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ChatSubscribeLastMessages(context.Background(), in).MarshalVT()
	return resp
}

func ChatUnsubscribe(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcChatUnsubscribeResponse{Error: &pb.RpcChatUnsubscribeResponse_Error{Code: pb.RpcChatUnsubscribeResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcChatUnsubscribeRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcChatUnsubscribeResponse{Error: &pb.RpcChatUnsubscribeResponse_Error{Code: pb.RpcChatUnsubscribeResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ChatUnsubscribe(context.Background(), in).MarshalVT()
	return resp
}

func ChatReadMessages(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcChatReadMessagesResponse{Error: &pb.RpcChatReadMessagesResponse_Error{Code: pb.RpcChatReadMessagesResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcChatReadMessagesRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcChatReadMessagesResponse{Error: &pb.RpcChatReadMessagesResponse_Error{Code: pb.RpcChatReadMessagesResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ChatReadMessages(context.Background(), in).MarshalVT()
	return resp
}

func ChatUnreadMessages(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcChatUnreadResponse{Error: &pb.RpcChatUnreadResponse_Error{Code: pb.RpcChatUnreadResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcChatUnreadRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcChatUnreadResponse{Error: &pb.RpcChatUnreadResponse_Error{Code: pb.RpcChatUnreadResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ChatUnreadMessages(context.Background(), in).MarshalVT()
	return resp
}

func ChatSubscribeToMessagePreviews(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcChatSubscribeToMessagePreviewsResponse{Error: &pb.RpcChatSubscribeToMessagePreviewsResponse_Error{Code: pb.RpcChatSubscribeToMessagePreviewsResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcChatSubscribeToMessagePreviewsRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcChatSubscribeToMessagePreviewsResponse{Error: &pb.RpcChatSubscribeToMessagePreviewsResponse_Error{Code: pb.RpcChatSubscribeToMessagePreviewsResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ChatSubscribeToMessagePreviews(context.Background(), in).MarshalVT()
	return resp
}

func ObjectChatAdd(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectChatAddResponse{Error: &pb.RpcObjectChatAddResponse_Error{Code: pb.RpcObjectChatAddResponse_Error_UNKNOWN_ERROR, Description: "panic recovered"}}).MarshalVT()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectChatAddRequest)
	if err := in.UnmarshalVT(b); err != nil {
		resp, _ = (&pb.RpcObjectChatAddResponse{Error: &pb.RpcObjectChatAddResponse_Error{Code: pb.RpcObjectChatAddResponse_Error_BAD_INPUT, Description: err.Error()}}).MarshalVT()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectChatAdd(context.Background(), in).MarshalVT()
	return resp
}

var PanicHandler func(v interface{})

func CommandAsync(cmd string, data []byte, callback func(data []byte)) {
	go func() {
		var cd []byte
		switch cmd {
		case "AppGetVersion":
			cd = AppGetVersion(data)
		case "AppSetDeviceState":
			cd = AppSetDeviceState(data)
		case "AppShutdown":
			cd = AppShutdown(data)
		case "WalletCreate":
			cd = WalletCreate(data)
		case "WalletRecover":
			cd = WalletRecover(data)
		case "WalletConvert":
			cd = WalletConvert(data)
		case "AccountLocalLinkNewChallenge":
			cd = AccountLocalLinkNewChallenge(data)
		case "AccountLocalLinkSolveChallenge":
			cd = AccountLocalLinkSolveChallenge(data)
		case "WalletCreateSession":
			cd = WalletCreateSession(data)
		case "WalletCloseSession":
			cd = WalletCloseSession(data)
		case "WorkspaceCreate":
			cd = WorkspaceCreate(data)
		case "WorkspaceOpen":
			cd = WorkspaceOpen(data)
		case "WorkspaceObjectAdd":
			cd = WorkspaceObjectAdd(data)
		case "WorkspaceObjectListAdd":
			cd = WorkspaceObjectListAdd(data)
		case "WorkspaceObjectListRemove":
			cd = WorkspaceObjectListRemove(data)
		case "WorkspaceSelect":
			cd = WorkspaceSelect(data)
		case "WorkspaceGetCurrent":
			cd = WorkspaceGetCurrent(data)
		case "WorkspaceGetAll":
			cd = WorkspaceGetAll(data)
		case "WorkspaceSetInfo":
			cd = WorkspaceSetInfo(data)
		case "WorkspaceExport":
			cd = WorkspaceExport(data)
		case "AccountRecover":
			cd = AccountRecover(data)
		case "AccountMigrate":
			cd = AccountMigrate(data)
		case "AccountMigrateCancel":
			cd = AccountMigrateCancel(data)
		case "AccountCreate":
			cd = AccountCreate(data)
		case "AccountDelete":
			cd = AccountDelete(data)
		case "AccountRevertDeletion":
			cd = AccountRevertDeletion(data)
		case "AccountSelect":
			cd = AccountSelect(data)
		case "AccountEnableLocalNetworkSync":
			cd = AccountEnableLocalNetworkSync(data)
		case "AccountChangeJsonApiAddr":
			cd = AccountChangeJsonApiAddr(data)
		case "AccountStop":
			cd = AccountStop(data)
		case "AccountMove":
			cd = AccountMove(data)
		case "AccountConfigUpdate":
			cd = AccountConfigUpdate(data)
		case "AccountRecoverFromLegacyExport":
			cd = AccountRecoverFromLegacyExport(data)
		case "AccountChangeNetworkConfigAndRestart":
			cd = AccountChangeNetworkConfigAndRestart(data)
		case "SpaceDelete":
			cd = SpaceDelete(data)
		case "SpaceInviteGenerate":
			cd = SpaceInviteGenerate(data)
		case "SpaceInviteGetCurrent":
			cd = SpaceInviteGetCurrent(data)
		case "SpaceInviteRevoke":
			cd = SpaceInviteRevoke(data)
		case "SpaceInviteView":
			cd = SpaceInviteView(data)
		case "SpaceJoin":
			cd = SpaceJoin(data)
		case "SpaceJoinCancel":
			cd = SpaceJoinCancel(data)
		case "SpaceStopSharing":
			cd = SpaceStopSharing(data)
		case "SpaceRequestApprove":
			cd = SpaceRequestApprove(data)
		case "SpaceRequestDecline":
			cd = SpaceRequestDecline(data)
		case "SpaceLeaveApprove":
			cd = SpaceLeaveApprove(data)
		case "SpaceMakeShareable":
			cd = SpaceMakeShareable(data)
		case "SpaceParticipantRemove":
			cd = SpaceParticipantRemove(data)
		case "SpaceParticipantPermissionsChange":
			cd = SpaceParticipantPermissionsChange(data)
		case "SpaceSetOrder":
			cd = SpaceSetOrder(data)
		case "SpaceUnsetOrder":
			cd = SpaceUnsetOrder(data)
		case "PublishingCreate":
			cd = PublishingCreate(data)
		case "PublishingRemove":
			cd = PublishingRemove(data)
		case "PublishingList":
			cd = PublishingList(data)
		case "PublishingResolveUri":
			cd = PublishingResolveUri(data)
		case "PublishingGetStatus":
			cd = PublishingGetStatus(data)
		case "ObjectOpen":
			cd = ObjectOpen(data)
		case "ObjectClose":
			cd = ObjectClose(data)
		case "ObjectShow":
			cd = ObjectShow(data)
		case "ObjectCreate":
			cd = ObjectCreate(data)
		case "ObjectCreateBookmark":
			cd = ObjectCreateBookmark(data)
		case "ObjectCreateFromUrl":
			cd = ObjectCreateFromUrl(data)
		case "ObjectCreateSet":
			cd = ObjectCreateSet(data)
		case "ObjectGraph":
			cd = ObjectGraph(data)
		case "ObjectSearch":
			cd = ObjectSearch(data)
		case "ObjectSearchWithMeta":
			cd = ObjectSearchWithMeta(data)
		case "ObjectSearchSubscribe":
			cd = ObjectSearchSubscribe(data)
		case "ObjectCrossSpaceSearchSubscribe":
			cd = ObjectCrossSpaceSearchSubscribe(data)
		case "ObjectCrossSpaceSearchUnsubscribe":
			cd = ObjectCrossSpaceSearchUnsubscribe(data)
		case "ObjectSubscribeIds":
			cd = ObjectSubscribeIds(data)
		case "ObjectGroupsSubscribe":
			cd = ObjectGroupsSubscribe(data)
		case "ObjectSearchUnsubscribe":
			cd = ObjectSearchUnsubscribe(data)
		case "ObjectSetDetails":
			cd = ObjectSetDetails(data)
		case "ObjectDuplicate":
			cd = ObjectDuplicate(data)
		case "ObjectSetObjectType":
			cd = ObjectSetObjectType(data)
		case "ObjectSetLayout":
			cd = ObjectSetLayout(data)
		case "ObjectSetInternalFlags":
			cd = ObjectSetInternalFlags(data)
		case "ObjectSetIsFavorite":
			cd = ObjectSetIsFavorite(data)
		case "ObjectSetIsArchived":
			cd = ObjectSetIsArchived(data)
		case "ObjectSetSource":
			cd = ObjectSetSource(data)
		case "ObjectWorkspaceSetDashboard":
			cd = ObjectWorkspaceSetDashboard(data)
		case "ObjectListDuplicate":
			cd = ObjectListDuplicate(data)
		case "ObjectListDelete":
			cd = ObjectListDelete(data)
		case "ObjectListSetIsArchived":
			cd = ObjectListSetIsArchived(data)
		case "ObjectListSetIsFavorite":
			cd = ObjectListSetIsFavorite(data)
		case "ObjectListSetObjectType":
			cd = ObjectListSetObjectType(data)
		case "ObjectListSetDetails":
			cd = ObjectListSetDetails(data)
		case "ObjectListModifyDetailValues":
			cd = ObjectListModifyDetailValues(data)
		case "ObjectApplyTemplate":
			cd = ObjectApplyTemplate(data)
		case "ObjectToSet":
			cd = ObjectToSet(data)
		case "ObjectToCollection":
			cd = ObjectToCollection(data)
		case "ObjectShareByLink":
			cd = ObjectShareByLink(data)
		case "ObjectUndo":
			cd = ObjectUndo(data)
		case "ObjectRedo":
			cd = ObjectRedo(data)
		case "ObjectListExport":
			cd = ObjectListExport(data)
		case "ObjectBookmarkFetch":
			cd = ObjectBookmarkFetch(data)
		case "ObjectToBookmark":
			cd = ObjectToBookmark(data)
		case "ObjectImport":
			cd = ObjectImport(data)
		case "ObjectImportList":
			cd = ObjectImportList(data)
		case "ObjectImportNotionValidateToken":
			cd = ObjectImportNotionValidateToken(data)
		case "ObjectImportUseCase":
			cd = ObjectImportUseCase(data)
		case "ObjectImportExperience":
			cd = ObjectImportExperience(data)
		case "ObjectDateByTimestamp":
			cd = ObjectDateByTimestamp(data)
		case "ObjectCollectionAdd":
			cd = ObjectCollectionAdd(data)
		case "ObjectCollectionRemove":
			cd = ObjectCollectionRemove(data)
		case "ObjectCollectionSort":
			cd = ObjectCollectionSort(data)
		case "ObjectCreateRelation":
			cd = ObjectCreateRelation(data)
		case "ObjectCreateRelationOption":
			cd = ObjectCreateRelationOption(data)
		case "RelationListRemoveOption":
			cd = RelationListRemoveOption(data)
		case "RelationOptions":
			cd = RelationOptions(data)
		case "RelationListWithValue":
			cd = RelationListWithValue(data)
		case "ObjectRelationAdd":
			cd = ObjectRelationAdd(data)
		case "ObjectRelationDelete":
			cd = ObjectRelationDelete(data)
		case "ObjectRelationAddFeatured":
			cd = ObjectRelationAddFeatured(data)
		case "ObjectRelationRemoveFeatured":
			cd = ObjectRelationRemoveFeatured(data)
		case "ObjectRelationListAvailable":
			cd = ObjectRelationListAvailable(data)
		case "ObjectCreateObjectType":
			cd = ObjectCreateObjectType(data)
		case "ObjectTypeRelationAdd":
			cd = ObjectTypeRelationAdd(data)
		case "ObjectTypeRelationRemove":
			cd = ObjectTypeRelationRemove(data)
		case "ObjectTypeRecommendedRelationsSet":
			cd = ObjectTypeRecommendedRelationsSet(data)
		case "ObjectTypeRecommendedFeaturedRelationsSet":
			cd = ObjectTypeRecommendedFeaturedRelationsSet(data)
		case "ObjectTypeListConflictingRelations":
			cd = ObjectTypeListConflictingRelations(data)
		case "HistoryShowVersion":
			cd = HistoryShowVersion(data)
		case "HistoryGetVersions":
			cd = HistoryGetVersions(data)
		case "HistorySetVersion":
			cd = HistorySetVersion(data)
		case "HistoryDiffVersions":
			cd = HistoryDiffVersions(data)
		case "FileSpaceOffload":
			cd = FileSpaceOffload(data)
		case "FileReconcile":
			cd = FileReconcile(data)
		case "FileListOffload":
			cd = FileListOffload(data)
		case "FileUpload":
			cd = FileUpload(data)
		case "FileDownload":
			cd = FileDownload(data)
		case "FileDrop":
			cd = FileDrop(data)
		case "FileSpaceUsage":
			cd = FileSpaceUsage(data)
		case "FileNodeUsage":
			cd = FileNodeUsage(data)
		case "NavigationListObjects":
			cd = NavigationListObjects(data)
		case "NavigationGetObjectInfoWithLinks":
			cd = NavigationGetObjectInfoWithLinks(data)
		case "TemplateCreateFromObject":
			cd = TemplateCreateFromObject(data)
		case "TemplateClone":
			cd = TemplateClone(data)
		case "TemplateExportAll":
			cd = TemplateExportAll(data)
		case "LinkPreview":
			cd = LinkPreview(data)
		case "UnsplashSearch":
			cd = UnsplashSearch(data)
		case "UnsplashDownload":
			cd = UnsplashDownload(data)
		case "GalleryDownloadManifest":
			cd = GalleryDownloadManifest(data)
		case "GalleryDownloadIndex":
			cd = GalleryDownloadIndex(data)
		case "BlockUpload":
			cd = BlockUpload(data)
		case "BlockReplace":
			cd = BlockReplace(data)
		case "BlockCreate":
			cd = BlockCreate(data)
		case "BlockSplit":
			cd = BlockSplit(data)
		case "BlockMerge":
			cd = BlockMerge(data)
		case "BlockCopy":
			cd = BlockCopy(data)
		case "BlockPaste":
			cd = BlockPaste(data)
		case "BlockCut":
			cd = BlockCut(data)
		case "BlockSetFields":
			cd = BlockSetFields(data)
		case "BlockExport":
			cd = BlockExport(data)
		case "BlockSetCarriage":
			cd = BlockSetCarriage(data)
		case "BlockPreview":
			cd = BlockPreview(data)
		case "BlockListDelete":
			cd = BlockListDelete(data)
		case "BlockListMoveToExistingObject":
			cd = BlockListMoveToExistingObject(data)
		case "BlockListMoveToNewObject":
			cd = BlockListMoveToNewObject(data)
		case "BlockListConvertToObjects":
			cd = BlockListConvertToObjects(data)
		case "BlockListSetFields":
			cd = BlockListSetFields(data)
		case "BlockListDuplicate":
			cd = BlockListDuplicate(data)
		case "BlockListSetBackgroundColor":
			cd = BlockListSetBackgroundColor(data)
		case "BlockListSetAlign":
			cd = BlockListSetAlign(data)
		case "BlockListSetVerticalAlign":
			cd = BlockListSetVerticalAlign(data)
		case "BlockListTurnInto":
			cd = BlockListTurnInto(data)
		case "BlockTextSetText":
			cd = BlockTextSetText(data)
		case "BlockTextSetColor":
			cd = BlockTextSetColor(data)
		case "BlockTextSetStyle":
			cd = BlockTextSetStyle(data)
		case "BlockTextSetChecked":
			cd = BlockTextSetChecked(data)
		case "BlockTextSetIcon":
			cd = BlockTextSetIcon(data)
		case "BlockTextListSetColor":
			cd = BlockTextListSetColor(data)
		case "BlockTextListSetMark":
			cd = BlockTextListSetMark(data)
		case "BlockTextListSetStyle":
			cd = BlockTextListSetStyle(data)
		case "BlockTextListClearStyle":
			cd = BlockTextListClearStyle(data)
		case "BlockTextListClearContent":
			cd = BlockTextListClearContent(data)
		case "BlockFileSetName":
			cd = BlockFileSetName(data)
		case "BlockFileSetTargetObjectId":
			cd = BlockFileSetTargetObjectId(data)
		case "BlockImageSetName":
			cd = BlockImageSetName(data)
		case "BlockVideoSetName":
			cd = BlockVideoSetName(data)
		case "BlockFileCreateAndUpload":
			cd = BlockFileCreateAndUpload(data)
		case "BlockFileListSetStyle":
			cd = BlockFileListSetStyle(data)
		case "BlockDataviewViewCreate":
			cd = BlockDataviewViewCreate(data)
		case "BlockDataviewViewDelete":
			cd = BlockDataviewViewDelete(data)
		case "BlockDataviewViewUpdate":
			cd = BlockDataviewViewUpdate(data)
		case "BlockDataviewViewSetActive":
			cd = BlockDataviewViewSetActive(data)
		case "BlockDataviewViewSetPosition":
			cd = BlockDataviewViewSetPosition(data)
		case "BlockDataviewSetSource":
			cd = BlockDataviewSetSource(data)
		case "BlockDataviewRelationAdd":
			cd = BlockDataviewRelationAdd(data)
		case "BlockDataviewRelationDelete":
			cd = BlockDataviewRelationDelete(data)
		case "BlockDataviewGroupOrderUpdate":
			cd = BlockDataviewGroupOrderUpdate(data)
		case "BlockDataviewObjectOrderUpdate":
			cd = BlockDataviewObjectOrderUpdate(data)
		case "BlockDataviewObjectOrderMove":
			cd = BlockDataviewObjectOrderMove(data)
		case "BlockDataviewCreateFromExistingObject":
			cd = BlockDataviewCreateFromExistingObject(data)
		case "BlockDataviewFilterAdd":
			cd = BlockDataviewFilterAdd(data)
		case "BlockDataviewFilterRemove":
			cd = BlockDataviewFilterRemove(data)
		case "BlockDataviewFilterReplace":
			cd = BlockDataviewFilterReplace(data)
		case "BlockDataviewFilterSort":
			cd = BlockDataviewFilterSort(data)
		case "BlockDataviewSortAdd":
			cd = BlockDataviewSortAdd(data)
		case "BlockDataviewSortRemove":
			cd = BlockDataviewSortRemove(data)
		case "BlockDataviewSortReplace":
			cd = BlockDataviewSortReplace(data)
		case "BlockDataviewSortSort":
			cd = BlockDataviewSortSort(data)
		case "BlockDataviewViewRelationAdd":
			cd = BlockDataviewViewRelationAdd(data)
		case "BlockDataviewViewRelationRemove":
			cd = BlockDataviewViewRelationRemove(data)
		case "BlockDataviewViewRelationReplace":
			cd = BlockDataviewViewRelationReplace(data)
		case "BlockDataviewViewRelationSort":
			cd = BlockDataviewViewRelationSort(data)
		case "BlockTableCreate":
			cd = BlockTableCreate(data)
		case "BlockTableExpand":
			cd = BlockTableExpand(data)
		case "BlockTableRowCreate":
			cd = BlockTableRowCreate(data)
		case "BlockTableRowDelete":
			cd = BlockTableRowDelete(data)
		case "BlockTableRowDuplicate":
			cd = BlockTableRowDuplicate(data)
		case "BlockTableRowSetHeader":
			cd = BlockTableRowSetHeader(data)
		case "BlockTableColumnCreate":
			cd = BlockTableColumnCreate(data)
		case "BlockTableColumnMove":
			cd = BlockTableColumnMove(data)
		case "BlockTableColumnDelete":
			cd = BlockTableColumnDelete(data)
		case "BlockTableColumnDuplicate":
			cd = BlockTableColumnDuplicate(data)
		case "BlockTableRowListFill":
			cd = BlockTableRowListFill(data)
		case "BlockTableRowListClean":
			cd = BlockTableRowListClean(data)
		case "BlockTableColumnListFill":
			cd = BlockTableColumnListFill(data)
		case "BlockTableSort":
			cd = BlockTableSort(data)
		case "BlockCreateWidget":
			cd = BlockCreateWidget(data)
		case "BlockWidgetSetTargetId":
			cd = BlockWidgetSetTargetId(data)
		case "BlockWidgetSetLayout":
			cd = BlockWidgetSetLayout(data)
		case "BlockWidgetSetLimit":
			cd = BlockWidgetSetLimit(data)
		case "BlockWidgetSetViewId":
			cd = BlockWidgetSetViewId(data)
		case "BlockLinkCreateWithObject":
			cd = BlockLinkCreateWithObject(data)
		case "BlockLinkListSetAppearance":
			cd = BlockLinkListSetAppearance(data)
		case "BlockBookmarkFetch":
			cd = BlockBookmarkFetch(data)
		case "BlockBookmarkCreateAndFetch":
			cd = BlockBookmarkCreateAndFetch(data)
		case "BlockRelationSetKey":
			cd = BlockRelationSetKey(data)
		case "BlockRelationAdd":
			cd = BlockRelationAdd(data)
		case "BlockDivListSetStyle":
			cd = BlockDivListSetStyle(data)
		case "BlockLatexSetText":
			cd = BlockLatexSetText(data)
		case "ProcessCancel":
			cd = ProcessCancel(data)
		case "ProcessSubscribe":
			cd = ProcessSubscribe(data)
		case "ProcessUnsubscribe":
			cd = ProcessUnsubscribe(data)
		case "LogSend":
			cd = LogSend(data)
		case "DebugStat":
			cd = DebugStat(data)
		case "DebugTree":
			cd = DebugTree(data)
		case "DebugTreeHeads":
			cd = DebugTreeHeads(data)
		case "DebugSpaceSummary":
			cd = DebugSpaceSummary(data)
		case "DebugStackGoroutines":
			cd = DebugStackGoroutines(data)
		case "DebugExportLocalstore":
			cd = DebugExportLocalstore(data)
		case "DebugPing":
			cd = DebugPing(data)
		case "DebugSubscriptions":
			cd = DebugSubscriptions(data)
		case "DebugOpenedObjects":
			cd = DebugOpenedObjects(data)
		case "DebugRunProfiler":
			cd = DebugRunProfiler(data)
		case "DebugAccountSelectTrace":
			cd = DebugAccountSelectTrace(data)
		case "DebugAnystoreObjectChanges":
			cd = DebugAnystoreObjectChanges(data)
		case "DebugNetCheck":
			cd = DebugNetCheck(data)
		case "DebugExportLog":
			cd = DebugExportLog(data)
		case "InitialSetParameters":
			cd = InitialSetParameters(data)
		case "NotificationList":
			cd = NotificationList(data)
		case "NotificationReply":
			cd = NotificationReply(data)
		case "NotificationTest":
			cd = NotificationTest(data)
		case "MembershipGetStatus":
			cd = MembershipGetStatus(data)
		case "MembershipIsNameValid":
			cd = MembershipIsNameValid(data)
		case "MembershipRegisterPaymentRequest":
			cd = MembershipRegisterPaymentRequest(data)
		case "MembershipGetPortalLinkUrl":
			cd = MembershipGetPortalLinkUrl(data)
		case "MembershipGetVerificationEmailStatus":
			cd = MembershipGetVerificationEmailStatus(data)
		case "MembershipGetVerificationEmail":
			cd = MembershipGetVerificationEmail(data)
		case "MembershipVerifyEmailCode":
			cd = MembershipVerifyEmailCode(data)
		case "MembershipFinalize":
			cd = MembershipFinalize(data)
		case "MembershipGetTiers":
			cd = MembershipGetTiers(data)
		case "MembershipVerifyAppStoreReceipt":
			cd = MembershipVerifyAppStoreReceipt(data)
		case "NameServiceUserAccountGet":
			cd = NameServiceUserAccountGet(data)
		case "NameServiceResolveName":
			cd = NameServiceResolveName(data)
		case "NameServiceResolveAnyId":
			cd = NameServiceResolveAnyId(data)
		case "BroadcastPayloadEvent":
			cd = BroadcastPayloadEvent(data)
		case "DeviceSetName":
			cd = DeviceSetName(data)
		case "DeviceList":
			cd = DeviceList(data)
		case "DeviceNetworkStateSet":
			cd = DeviceNetworkStateSet(data)
		case "ChatAddMessage":
			cd = ChatAddMessage(data)
		case "ChatEditMessageContent":
			cd = ChatEditMessageContent(data)
		case "ChatToggleMessageReaction":
			cd = ChatToggleMessageReaction(data)
		case "ChatDeleteMessage":
			cd = ChatDeleteMessage(data)
		case "ChatGetMessages":
			cd = ChatGetMessages(data)
		case "ChatGetMessagesByIds":
			cd = ChatGetMessagesByIds(data)
		case "ChatSubscribeLastMessages":
			cd = ChatSubscribeLastMessages(data)
		case "ChatUnsubscribe":
			cd = ChatUnsubscribe(data)
		case "ChatReadMessages":
			cd = ChatReadMessages(data)
		case "ChatUnreadMessages":
			cd = ChatUnreadMessages(data)
		case "ChatSubscribeToMessagePreviews":
			cd = ChatSubscribeToMessagePreviews(data)
		case "ObjectChatAdd":
			cd = ObjectChatAdd(data)
		default:
			log.Errorf("unknown command type: %s\n", cmd)
		}
		if callback != nil {
			callback(cd)
		}
	}()
}

type MessageHandler interface {
	Handle(b []byte)
}

func CommandMobile(cmd string, data []byte, callback MessageHandler) {
	CommandAsync(cmd, data, callback.Handle)
}

type ClientCommandsHandlerProxy struct {
	client       ClientCommandsHandler
	interceptors []func(ctx context.Context, req any, methodName string, actualCall func(ctx context.Context, req any) (any, error)) (any, error)
}

func (h *ClientCommandsHandlerProxy) AppGetVersion(ctx context.Context, req *pb.RpcAppGetVersionRequest) *pb.RpcAppGetVersionResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AppGetVersion(ctx, req.(*pb.RpcAppGetVersionRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AppGetVersion", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAppGetVersionResponse)
}
func (h *ClientCommandsHandlerProxy) AppSetDeviceState(ctx context.Context, req *pb.RpcAppSetDeviceStateRequest) *pb.RpcAppSetDeviceStateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AppSetDeviceState(ctx, req.(*pb.RpcAppSetDeviceStateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AppSetDeviceState", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAppSetDeviceStateResponse)
}
func (h *ClientCommandsHandlerProxy) AppShutdown(ctx context.Context, req *pb.RpcAppShutdownRequest) *pb.RpcAppShutdownResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AppShutdown(ctx, req.(*pb.RpcAppShutdownRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AppShutdown", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAppShutdownResponse)
}
func (h *ClientCommandsHandlerProxy) WalletCreate(ctx context.Context, req *pb.RpcWalletCreateRequest) *pb.RpcWalletCreateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.WalletCreate(ctx, req.(*pb.RpcWalletCreateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "WalletCreate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcWalletCreateResponse)
}
func (h *ClientCommandsHandlerProxy) WalletRecover(ctx context.Context, req *pb.RpcWalletRecoverRequest) *pb.RpcWalletRecoverResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.WalletRecover(ctx, req.(*pb.RpcWalletRecoverRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "WalletRecover", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcWalletRecoverResponse)
}
func (h *ClientCommandsHandlerProxy) WalletConvert(ctx context.Context, req *pb.RpcWalletConvertRequest) *pb.RpcWalletConvertResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.WalletConvert(ctx, req.(*pb.RpcWalletConvertRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "WalletConvert", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcWalletConvertResponse)
}
func (h *ClientCommandsHandlerProxy) AccountLocalLinkNewChallenge(ctx context.Context, req *pb.RpcAccountLocalLinkNewChallengeRequest) *pb.RpcAccountLocalLinkNewChallengeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AccountLocalLinkNewChallenge(ctx, req.(*pb.RpcAccountLocalLinkNewChallengeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AccountLocalLinkNewChallenge", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAccountLocalLinkNewChallengeResponse)
}
func (h *ClientCommandsHandlerProxy) AccountLocalLinkSolveChallenge(ctx context.Context, req *pb.RpcAccountLocalLinkSolveChallengeRequest) *pb.RpcAccountLocalLinkSolveChallengeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AccountLocalLinkSolveChallenge(ctx, req.(*pb.RpcAccountLocalLinkSolveChallengeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AccountLocalLinkSolveChallenge", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAccountLocalLinkSolveChallengeResponse)
}
func (h *ClientCommandsHandlerProxy) WalletCreateSession(ctx context.Context, req *pb.RpcWalletCreateSessionRequest) *pb.RpcWalletCreateSessionResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.WalletCreateSession(ctx, req.(*pb.RpcWalletCreateSessionRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "WalletCreateSession", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcWalletCreateSessionResponse)
}
func (h *ClientCommandsHandlerProxy) WalletCloseSession(ctx context.Context, req *pb.RpcWalletCloseSessionRequest) *pb.RpcWalletCloseSessionResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.WalletCloseSession(ctx, req.(*pb.RpcWalletCloseSessionRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "WalletCloseSession", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcWalletCloseSessionResponse)
}
func (h *ClientCommandsHandlerProxy) WorkspaceCreate(ctx context.Context, req *pb.RpcWorkspaceCreateRequest) *pb.RpcWorkspaceCreateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.WorkspaceCreate(ctx, req.(*pb.RpcWorkspaceCreateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "WorkspaceCreate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcWorkspaceCreateResponse)
}
func (h *ClientCommandsHandlerProxy) WorkspaceOpen(ctx context.Context, req *pb.RpcWorkspaceOpenRequest) *pb.RpcWorkspaceOpenResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.WorkspaceOpen(ctx, req.(*pb.RpcWorkspaceOpenRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "WorkspaceOpen", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcWorkspaceOpenResponse)
}
func (h *ClientCommandsHandlerProxy) WorkspaceObjectAdd(ctx context.Context, req *pb.RpcWorkspaceObjectAddRequest) *pb.RpcWorkspaceObjectAddResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.WorkspaceObjectAdd(ctx, req.(*pb.RpcWorkspaceObjectAddRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "WorkspaceObjectAdd", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcWorkspaceObjectAddResponse)
}
func (h *ClientCommandsHandlerProxy) WorkspaceObjectListAdd(ctx context.Context, req *pb.RpcWorkspaceObjectListAddRequest) *pb.RpcWorkspaceObjectListAddResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.WorkspaceObjectListAdd(ctx, req.(*pb.RpcWorkspaceObjectListAddRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "WorkspaceObjectListAdd", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcWorkspaceObjectListAddResponse)
}
func (h *ClientCommandsHandlerProxy) WorkspaceObjectListRemove(ctx context.Context, req *pb.RpcWorkspaceObjectListRemoveRequest) *pb.RpcWorkspaceObjectListRemoveResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.WorkspaceObjectListRemove(ctx, req.(*pb.RpcWorkspaceObjectListRemoveRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "WorkspaceObjectListRemove", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcWorkspaceObjectListRemoveResponse)
}
func (h *ClientCommandsHandlerProxy) WorkspaceSelect(ctx context.Context, req *pb.RpcWorkspaceSelectRequest) *pb.RpcWorkspaceSelectResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.WorkspaceSelect(ctx, req.(*pb.RpcWorkspaceSelectRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "WorkspaceSelect", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcWorkspaceSelectResponse)
}
func (h *ClientCommandsHandlerProxy) WorkspaceGetCurrent(ctx context.Context, req *pb.RpcWorkspaceGetCurrentRequest) *pb.RpcWorkspaceGetCurrentResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.WorkspaceGetCurrent(ctx, req.(*pb.RpcWorkspaceGetCurrentRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "WorkspaceGetCurrent", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcWorkspaceGetCurrentResponse)
}
func (h *ClientCommandsHandlerProxy) WorkspaceGetAll(ctx context.Context, req *pb.RpcWorkspaceGetAllRequest) *pb.RpcWorkspaceGetAllResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.WorkspaceGetAll(ctx, req.(*pb.RpcWorkspaceGetAllRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "WorkspaceGetAll", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcWorkspaceGetAllResponse)
}
func (h *ClientCommandsHandlerProxy) WorkspaceSetInfo(ctx context.Context, req *pb.RpcWorkspaceSetInfoRequest) *pb.RpcWorkspaceSetInfoResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.WorkspaceSetInfo(ctx, req.(*pb.RpcWorkspaceSetInfoRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "WorkspaceSetInfo", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcWorkspaceSetInfoResponse)
}
func (h *ClientCommandsHandlerProxy) WorkspaceExport(ctx context.Context, req *pb.RpcWorkspaceExportRequest) *pb.RpcWorkspaceExportResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.WorkspaceExport(ctx, req.(*pb.RpcWorkspaceExportRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "WorkspaceExport", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcWorkspaceExportResponse)
}
func (h *ClientCommandsHandlerProxy) AccountRecover(ctx context.Context, req *pb.RpcAccountRecoverRequest) *pb.RpcAccountRecoverResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AccountRecover(ctx, req.(*pb.RpcAccountRecoverRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AccountRecover", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAccountRecoverResponse)
}
func (h *ClientCommandsHandlerProxy) AccountMigrate(ctx context.Context, req *pb.RpcAccountMigrateRequest) *pb.RpcAccountMigrateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AccountMigrate(ctx, req.(*pb.RpcAccountMigrateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AccountMigrate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAccountMigrateResponse)
}
func (h *ClientCommandsHandlerProxy) AccountMigrateCancel(ctx context.Context, req *pb.RpcAccountMigrateCancelRequest) *pb.RpcAccountMigrateCancelResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AccountMigrateCancel(ctx, req.(*pb.RpcAccountMigrateCancelRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AccountMigrateCancel", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAccountMigrateCancelResponse)
}
func (h *ClientCommandsHandlerProxy) AccountCreate(ctx context.Context, req *pb.RpcAccountCreateRequest) *pb.RpcAccountCreateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AccountCreate(ctx, req.(*pb.RpcAccountCreateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AccountCreate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAccountCreateResponse)
}
func (h *ClientCommandsHandlerProxy) AccountDelete(ctx context.Context, req *pb.RpcAccountDeleteRequest) *pb.RpcAccountDeleteResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AccountDelete(ctx, req.(*pb.RpcAccountDeleteRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AccountDelete", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAccountDeleteResponse)
}
func (h *ClientCommandsHandlerProxy) AccountRevertDeletion(ctx context.Context, req *pb.RpcAccountRevertDeletionRequest) *pb.RpcAccountRevertDeletionResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AccountRevertDeletion(ctx, req.(*pb.RpcAccountRevertDeletionRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AccountRevertDeletion", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAccountRevertDeletionResponse)
}
func (h *ClientCommandsHandlerProxy) AccountSelect(ctx context.Context, req *pb.RpcAccountSelectRequest) *pb.RpcAccountSelectResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AccountSelect(ctx, req.(*pb.RpcAccountSelectRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AccountSelect", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAccountSelectResponse)
}
func (h *ClientCommandsHandlerProxy) AccountEnableLocalNetworkSync(ctx context.Context, req *pb.RpcAccountEnableLocalNetworkSyncRequest) *pb.RpcAccountEnableLocalNetworkSyncResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AccountEnableLocalNetworkSync(ctx, req.(*pb.RpcAccountEnableLocalNetworkSyncRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AccountEnableLocalNetworkSync", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAccountEnableLocalNetworkSyncResponse)
}
func (h *ClientCommandsHandlerProxy) AccountChangeJsonApiAddr(ctx context.Context, req *pb.RpcAccountChangeJsonApiAddrRequest) *pb.RpcAccountChangeJsonApiAddrResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AccountChangeJsonApiAddr(ctx, req.(*pb.RpcAccountChangeJsonApiAddrRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AccountChangeJsonApiAddr", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAccountChangeJsonApiAddrResponse)
}
func (h *ClientCommandsHandlerProxy) AccountStop(ctx context.Context, req *pb.RpcAccountStopRequest) *pb.RpcAccountStopResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AccountStop(ctx, req.(*pb.RpcAccountStopRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AccountStop", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAccountStopResponse)
}
func (h *ClientCommandsHandlerProxy) AccountMove(ctx context.Context, req *pb.RpcAccountMoveRequest) *pb.RpcAccountMoveResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AccountMove(ctx, req.(*pb.RpcAccountMoveRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AccountMove", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAccountMoveResponse)
}
func (h *ClientCommandsHandlerProxy) AccountConfigUpdate(ctx context.Context, req *pb.RpcAccountConfigUpdateRequest) *pb.RpcAccountConfigUpdateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AccountConfigUpdate(ctx, req.(*pb.RpcAccountConfigUpdateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AccountConfigUpdate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAccountConfigUpdateResponse)
}
func (h *ClientCommandsHandlerProxy) AccountRecoverFromLegacyExport(ctx context.Context, req *pb.RpcAccountRecoverFromLegacyExportRequest) *pb.RpcAccountRecoverFromLegacyExportResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AccountRecoverFromLegacyExport(ctx, req.(*pb.RpcAccountRecoverFromLegacyExportRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AccountRecoverFromLegacyExport", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAccountRecoverFromLegacyExportResponse)
}
func (h *ClientCommandsHandlerProxy) AccountChangeNetworkConfigAndRestart(ctx context.Context, req *pb.RpcAccountChangeNetworkConfigAndRestartRequest) *pb.RpcAccountChangeNetworkConfigAndRestartResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AccountChangeNetworkConfigAndRestart(ctx, req.(*pb.RpcAccountChangeNetworkConfigAndRestartRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AccountChangeNetworkConfigAndRestart", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAccountChangeNetworkConfigAndRestartResponse)
}
func (h *ClientCommandsHandlerProxy) SpaceDelete(ctx context.Context, req *pb.RpcSpaceDeleteRequest) *pb.RpcSpaceDeleteResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.SpaceDelete(ctx, req.(*pb.RpcSpaceDeleteRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "SpaceDelete", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcSpaceDeleteResponse)
}
func (h *ClientCommandsHandlerProxy) SpaceInviteGenerate(ctx context.Context, req *pb.RpcSpaceInviteGenerateRequest) *pb.RpcSpaceInviteGenerateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.SpaceInviteGenerate(ctx, req.(*pb.RpcSpaceInviteGenerateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "SpaceInviteGenerate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcSpaceInviteGenerateResponse)
}
func (h *ClientCommandsHandlerProxy) SpaceInviteGetCurrent(ctx context.Context, req *pb.RpcSpaceInviteGetCurrentRequest) *pb.RpcSpaceInviteGetCurrentResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.SpaceInviteGetCurrent(ctx, req.(*pb.RpcSpaceInviteGetCurrentRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "SpaceInviteGetCurrent", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcSpaceInviteGetCurrentResponse)
}
func (h *ClientCommandsHandlerProxy) SpaceInviteRevoke(ctx context.Context, req *pb.RpcSpaceInviteRevokeRequest) *pb.RpcSpaceInviteRevokeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.SpaceInviteRevoke(ctx, req.(*pb.RpcSpaceInviteRevokeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "SpaceInviteRevoke", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcSpaceInviteRevokeResponse)
}
func (h *ClientCommandsHandlerProxy) SpaceInviteView(ctx context.Context, req *pb.RpcSpaceInviteViewRequest) *pb.RpcSpaceInviteViewResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.SpaceInviteView(ctx, req.(*pb.RpcSpaceInviteViewRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "SpaceInviteView", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcSpaceInviteViewResponse)
}
func (h *ClientCommandsHandlerProxy) SpaceJoin(ctx context.Context, req *pb.RpcSpaceJoinRequest) *pb.RpcSpaceJoinResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.SpaceJoin(ctx, req.(*pb.RpcSpaceJoinRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "SpaceJoin", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcSpaceJoinResponse)
}
func (h *ClientCommandsHandlerProxy) SpaceJoinCancel(ctx context.Context, req *pb.RpcSpaceJoinCancelRequest) *pb.RpcSpaceJoinCancelResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.SpaceJoinCancel(ctx, req.(*pb.RpcSpaceJoinCancelRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "SpaceJoinCancel", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcSpaceJoinCancelResponse)
}
func (h *ClientCommandsHandlerProxy) SpaceStopSharing(ctx context.Context, req *pb.RpcSpaceStopSharingRequest) *pb.RpcSpaceStopSharingResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.SpaceStopSharing(ctx, req.(*pb.RpcSpaceStopSharingRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "SpaceStopSharing", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcSpaceStopSharingResponse)
}
func (h *ClientCommandsHandlerProxy) SpaceRequestApprove(ctx context.Context, req *pb.RpcSpaceRequestApproveRequest) *pb.RpcSpaceRequestApproveResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.SpaceRequestApprove(ctx, req.(*pb.RpcSpaceRequestApproveRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "SpaceRequestApprove", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcSpaceRequestApproveResponse)
}
func (h *ClientCommandsHandlerProxy) SpaceRequestDecline(ctx context.Context, req *pb.RpcSpaceRequestDeclineRequest) *pb.RpcSpaceRequestDeclineResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.SpaceRequestDecline(ctx, req.(*pb.RpcSpaceRequestDeclineRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "SpaceRequestDecline", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcSpaceRequestDeclineResponse)
}
func (h *ClientCommandsHandlerProxy) SpaceLeaveApprove(ctx context.Context, req *pb.RpcSpaceLeaveApproveRequest) *pb.RpcSpaceLeaveApproveResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.SpaceLeaveApprove(ctx, req.(*pb.RpcSpaceLeaveApproveRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "SpaceLeaveApprove", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcSpaceLeaveApproveResponse)
}
func (h *ClientCommandsHandlerProxy) SpaceMakeShareable(ctx context.Context, req *pb.RpcSpaceMakeShareableRequest) *pb.RpcSpaceMakeShareableResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.SpaceMakeShareable(ctx, req.(*pb.RpcSpaceMakeShareableRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "SpaceMakeShareable", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcSpaceMakeShareableResponse)
}
func (h *ClientCommandsHandlerProxy) SpaceParticipantRemove(ctx context.Context, req *pb.RpcSpaceParticipantRemoveRequest) *pb.RpcSpaceParticipantRemoveResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.SpaceParticipantRemove(ctx, req.(*pb.RpcSpaceParticipantRemoveRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "SpaceParticipantRemove", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcSpaceParticipantRemoveResponse)
}
func (h *ClientCommandsHandlerProxy) SpaceParticipantPermissionsChange(ctx context.Context, req *pb.RpcSpaceParticipantPermissionsChangeRequest) *pb.RpcSpaceParticipantPermissionsChangeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.SpaceParticipantPermissionsChange(ctx, req.(*pb.RpcSpaceParticipantPermissionsChangeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "SpaceParticipantPermissionsChange", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcSpaceParticipantPermissionsChangeResponse)
}
func (h *ClientCommandsHandlerProxy) SpaceSetOrder(ctx context.Context, req *pb.RpcSpaceSetOrderRequest) *pb.RpcSpaceSetOrderResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.SpaceSetOrder(ctx, req.(*pb.RpcSpaceSetOrderRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "SpaceSetOrder", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcSpaceSetOrderResponse)
}
func (h *ClientCommandsHandlerProxy) SpaceUnsetOrder(ctx context.Context, req *pb.RpcSpaceUnsetOrderRequest) *pb.RpcSpaceUnsetOrderResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.SpaceUnsetOrder(ctx, req.(*pb.RpcSpaceUnsetOrderRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "SpaceUnsetOrder", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcSpaceUnsetOrderResponse)
}
func (h *ClientCommandsHandlerProxy) PublishingCreate(ctx context.Context, req *pb.RpcPublishingCreateRequest) *pb.RpcPublishingCreateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.PublishingCreate(ctx, req.(*pb.RpcPublishingCreateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "PublishingCreate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcPublishingCreateResponse)
}
func (h *ClientCommandsHandlerProxy) PublishingRemove(ctx context.Context, req *pb.RpcPublishingRemoveRequest) *pb.RpcPublishingRemoveResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.PublishingRemove(ctx, req.(*pb.RpcPublishingRemoveRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "PublishingRemove", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcPublishingRemoveResponse)
}
func (h *ClientCommandsHandlerProxy) PublishingList(ctx context.Context, req *pb.RpcPublishingListRequest) *pb.RpcPublishingListResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.PublishingList(ctx, req.(*pb.RpcPublishingListRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "PublishingList", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcPublishingListResponse)
}
func (h *ClientCommandsHandlerProxy) PublishingResolveUri(ctx context.Context, req *pb.RpcPublishingResolveUriRequest) *pb.RpcPublishingResolveUriResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.PublishingResolveUri(ctx, req.(*pb.RpcPublishingResolveUriRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "PublishingResolveUri", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcPublishingResolveUriResponse)
}
func (h *ClientCommandsHandlerProxy) PublishingGetStatus(ctx context.Context, req *pb.RpcPublishingGetStatusRequest) *pb.RpcPublishingGetStatusResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.PublishingGetStatus(ctx, req.(*pb.RpcPublishingGetStatusRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "PublishingGetStatus", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcPublishingGetStatusResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectOpen(ctx context.Context, req *pb.RpcObjectOpenRequest) *pb.RpcObjectOpenResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectOpen(ctx, req.(*pb.RpcObjectOpenRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectOpen", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectOpenResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectClose(ctx context.Context, req *pb.RpcObjectCloseRequest) *pb.RpcObjectCloseResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectClose(ctx, req.(*pb.RpcObjectCloseRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectClose", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectCloseResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectShow(ctx context.Context, req *pb.RpcObjectShowRequest) *pb.RpcObjectShowResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectShow(ctx, req.(*pb.RpcObjectShowRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectShow", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectShowResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectCreate(ctx context.Context, req *pb.RpcObjectCreateRequest) *pb.RpcObjectCreateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectCreate(ctx, req.(*pb.RpcObjectCreateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectCreate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectCreateResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectCreateBookmark(ctx context.Context, req *pb.RpcObjectCreateBookmarkRequest) *pb.RpcObjectCreateBookmarkResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectCreateBookmark(ctx, req.(*pb.RpcObjectCreateBookmarkRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectCreateBookmark", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectCreateBookmarkResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectCreateFromUrl(ctx context.Context, req *pb.RpcObjectCreateFromUrlRequest) *pb.RpcObjectCreateFromUrlResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectCreateFromUrl(ctx, req.(*pb.RpcObjectCreateFromUrlRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectCreateFromUrl", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectCreateFromUrlResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectCreateSet(ctx context.Context, req *pb.RpcObjectCreateSetRequest) *pb.RpcObjectCreateSetResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectCreateSet(ctx, req.(*pb.RpcObjectCreateSetRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectCreateSet", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectCreateSetResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectGraph(ctx context.Context, req *pb.RpcObjectGraphRequest) *pb.RpcObjectGraphResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectGraph(ctx, req.(*pb.RpcObjectGraphRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectGraph", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectGraphResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectSearch(ctx context.Context, req *pb.RpcObjectSearchRequest) *pb.RpcObjectSearchResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectSearch(ctx, req.(*pb.RpcObjectSearchRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectSearch", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectSearchResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectSearchWithMeta(ctx context.Context, req *pb.RpcObjectSearchWithMetaRequest) *pb.RpcObjectSearchWithMetaResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectSearchWithMeta(ctx, req.(*pb.RpcObjectSearchWithMetaRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectSearchWithMeta", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectSearchWithMetaResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectSearchSubscribe(ctx context.Context, req *pb.RpcObjectSearchSubscribeRequest) *pb.RpcObjectSearchSubscribeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectSearchSubscribe(ctx, req.(*pb.RpcObjectSearchSubscribeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectSearchSubscribe", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectSearchSubscribeResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectCrossSpaceSearchSubscribe(ctx context.Context, req *pb.RpcObjectCrossSpaceSearchSubscribeRequest) *pb.RpcObjectCrossSpaceSearchSubscribeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectCrossSpaceSearchSubscribe(ctx, req.(*pb.RpcObjectCrossSpaceSearchSubscribeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectCrossSpaceSearchSubscribe", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectCrossSpaceSearchSubscribeResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectCrossSpaceSearchUnsubscribe(ctx context.Context, req *pb.RpcObjectCrossSpaceSearchUnsubscribeRequest) *pb.RpcObjectCrossSpaceSearchUnsubscribeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectCrossSpaceSearchUnsubscribe(ctx, req.(*pb.RpcObjectCrossSpaceSearchUnsubscribeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectCrossSpaceSearchUnsubscribe", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectCrossSpaceSearchUnsubscribeResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectSubscribeIds(ctx context.Context, req *pb.RpcObjectSubscribeIdsRequest) *pb.RpcObjectSubscribeIdsResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectSubscribeIds(ctx, req.(*pb.RpcObjectSubscribeIdsRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectSubscribeIds", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectSubscribeIdsResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectGroupsSubscribe(ctx context.Context, req *pb.RpcObjectGroupsSubscribeRequest) *pb.RpcObjectGroupsSubscribeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectGroupsSubscribe(ctx, req.(*pb.RpcObjectGroupsSubscribeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectGroupsSubscribe", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectGroupsSubscribeResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectSearchUnsubscribe(ctx context.Context, req *pb.RpcObjectSearchUnsubscribeRequest) *pb.RpcObjectSearchUnsubscribeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectSearchUnsubscribe(ctx, req.(*pb.RpcObjectSearchUnsubscribeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectSearchUnsubscribe", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectSearchUnsubscribeResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectSetDetails(ctx context.Context, req *pb.RpcObjectSetDetailsRequest) *pb.RpcObjectSetDetailsResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectSetDetails(ctx, req.(*pb.RpcObjectSetDetailsRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectSetDetails", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectSetDetailsResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectDuplicate(ctx context.Context, req *pb.RpcObjectDuplicateRequest) *pb.RpcObjectDuplicateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectDuplicate(ctx, req.(*pb.RpcObjectDuplicateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectDuplicate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectDuplicateResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectSetObjectType(ctx context.Context, req *pb.RpcObjectSetObjectTypeRequest) *pb.RpcObjectSetObjectTypeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectSetObjectType(ctx, req.(*pb.RpcObjectSetObjectTypeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectSetObjectType", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectSetObjectTypeResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectSetLayout(ctx context.Context, req *pb.RpcObjectSetLayoutRequest) *pb.RpcObjectSetLayoutResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectSetLayout(ctx, req.(*pb.RpcObjectSetLayoutRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectSetLayout", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectSetLayoutResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectSetInternalFlags(ctx context.Context, req *pb.RpcObjectSetInternalFlagsRequest) *pb.RpcObjectSetInternalFlagsResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectSetInternalFlags(ctx, req.(*pb.RpcObjectSetInternalFlagsRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectSetInternalFlags", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectSetInternalFlagsResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectSetIsFavorite(ctx context.Context, req *pb.RpcObjectSetIsFavoriteRequest) *pb.RpcObjectSetIsFavoriteResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectSetIsFavorite(ctx, req.(*pb.RpcObjectSetIsFavoriteRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectSetIsFavorite", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectSetIsFavoriteResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectSetIsArchived(ctx context.Context, req *pb.RpcObjectSetIsArchivedRequest) *pb.RpcObjectSetIsArchivedResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectSetIsArchived(ctx, req.(*pb.RpcObjectSetIsArchivedRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectSetIsArchived", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectSetIsArchivedResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectSetSource(ctx context.Context, req *pb.RpcObjectSetSourceRequest) *pb.RpcObjectSetSourceResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectSetSource(ctx, req.(*pb.RpcObjectSetSourceRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectSetSource", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectSetSourceResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectWorkspaceSetDashboard(ctx context.Context, req *pb.RpcObjectWorkspaceSetDashboardRequest) *pb.RpcObjectWorkspaceSetDashboardResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectWorkspaceSetDashboard(ctx, req.(*pb.RpcObjectWorkspaceSetDashboardRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectWorkspaceSetDashboard", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectWorkspaceSetDashboardResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectListDuplicate(ctx context.Context, req *pb.RpcObjectListDuplicateRequest) *pb.RpcObjectListDuplicateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectListDuplicate(ctx, req.(*pb.RpcObjectListDuplicateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectListDuplicate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectListDuplicateResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectListDelete(ctx context.Context, req *pb.RpcObjectListDeleteRequest) *pb.RpcObjectListDeleteResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectListDelete(ctx, req.(*pb.RpcObjectListDeleteRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectListDelete", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectListDeleteResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectListSetIsArchived(ctx context.Context, req *pb.RpcObjectListSetIsArchivedRequest) *pb.RpcObjectListSetIsArchivedResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectListSetIsArchived(ctx, req.(*pb.RpcObjectListSetIsArchivedRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectListSetIsArchived", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectListSetIsArchivedResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectListSetIsFavorite(ctx context.Context, req *pb.RpcObjectListSetIsFavoriteRequest) *pb.RpcObjectListSetIsFavoriteResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectListSetIsFavorite(ctx, req.(*pb.RpcObjectListSetIsFavoriteRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectListSetIsFavorite", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectListSetIsFavoriteResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectListSetObjectType(ctx context.Context, req *pb.RpcObjectListSetObjectTypeRequest) *pb.RpcObjectListSetObjectTypeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectListSetObjectType(ctx, req.(*pb.RpcObjectListSetObjectTypeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectListSetObjectType", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectListSetObjectTypeResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectListSetDetails(ctx context.Context, req *pb.RpcObjectListSetDetailsRequest) *pb.RpcObjectListSetDetailsResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectListSetDetails(ctx, req.(*pb.RpcObjectListSetDetailsRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectListSetDetails", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectListSetDetailsResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectListModifyDetailValues(ctx context.Context, req *pb.RpcObjectListModifyDetailValuesRequest) *pb.RpcObjectListModifyDetailValuesResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectListModifyDetailValues(ctx, req.(*pb.RpcObjectListModifyDetailValuesRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectListModifyDetailValues", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectListModifyDetailValuesResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectApplyTemplate(ctx context.Context, req *pb.RpcObjectApplyTemplateRequest) *pb.RpcObjectApplyTemplateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectApplyTemplate(ctx, req.(*pb.RpcObjectApplyTemplateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectApplyTemplate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectApplyTemplateResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectToSet(ctx context.Context, req *pb.RpcObjectToSetRequest) *pb.RpcObjectToSetResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectToSet(ctx, req.(*pb.RpcObjectToSetRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectToSet", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectToSetResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectToCollection(ctx context.Context, req *pb.RpcObjectToCollectionRequest) *pb.RpcObjectToCollectionResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectToCollection(ctx, req.(*pb.RpcObjectToCollectionRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectToCollection", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectToCollectionResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectShareByLink(ctx context.Context, req *pb.RpcObjectShareByLinkRequest) *pb.RpcObjectShareByLinkResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectShareByLink(ctx, req.(*pb.RpcObjectShareByLinkRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectShareByLink", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectShareByLinkResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectUndo(ctx context.Context, req *pb.RpcObjectUndoRequest) *pb.RpcObjectUndoResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectUndo(ctx, req.(*pb.RpcObjectUndoRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectUndo", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectUndoResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectRedo(ctx context.Context, req *pb.RpcObjectRedoRequest) *pb.RpcObjectRedoResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectRedo(ctx, req.(*pb.RpcObjectRedoRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectRedo", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectRedoResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectListExport(ctx context.Context, req *pb.RpcObjectListExportRequest) *pb.RpcObjectListExportResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectListExport(ctx, req.(*pb.RpcObjectListExportRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectListExport", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectListExportResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectBookmarkFetch(ctx context.Context, req *pb.RpcObjectBookmarkFetchRequest) *pb.RpcObjectBookmarkFetchResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectBookmarkFetch(ctx, req.(*pb.RpcObjectBookmarkFetchRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectBookmarkFetch", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectBookmarkFetchResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectToBookmark(ctx context.Context, req *pb.RpcObjectToBookmarkRequest) *pb.RpcObjectToBookmarkResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectToBookmark(ctx, req.(*pb.RpcObjectToBookmarkRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectToBookmark", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectToBookmarkResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectImport(ctx context.Context, req *pb.RpcObjectImportRequest) *pb.RpcObjectImportResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectImport(ctx, req.(*pb.RpcObjectImportRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectImport", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectImportResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectImportList(ctx context.Context, req *pb.RpcObjectImportListRequest) *pb.RpcObjectImportListResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectImportList(ctx, req.(*pb.RpcObjectImportListRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectImportList", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectImportListResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectImportNotionValidateToken(ctx context.Context, req *pb.RpcObjectImportNotionValidateTokenRequest) *pb.RpcObjectImportNotionValidateTokenResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectImportNotionValidateToken(ctx, req.(*pb.RpcObjectImportNotionValidateTokenRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectImportNotionValidateToken", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectImportNotionValidateTokenResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectImportUseCase(ctx context.Context, req *pb.RpcObjectImportUseCaseRequest) *pb.RpcObjectImportUseCaseResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectImportUseCase(ctx, req.(*pb.RpcObjectImportUseCaseRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectImportUseCase", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectImportUseCaseResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectImportExperience(ctx context.Context, req *pb.RpcObjectImportExperienceRequest) *pb.RpcObjectImportExperienceResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectImportExperience(ctx, req.(*pb.RpcObjectImportExperienceRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectImportExperience", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectImportExperienceResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectDateByTimestamp(ctx context.Context, req *pb.RpcObjectDateByTimestampRequest) *pb.RpcObjectDateByTimestampResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectDateByTimestamp(ctx, req.(*pb.RpcObjectDateByTimestampRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectDateByTimestamp", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectDateByTimestampResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectCollectionAdd(ctx context.Context, req *pb.RpcObjectCollectionAddRequest) *pb.RpcObjectCollectionAddResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectCollectionAdd(ctx, req.(*pb.RpcObjectCollectionAddRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectCollectionAdd", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectCollectionAddResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectCollectionRemove(ctx context.Context, req *pb.RpcObjectCollectionRemoveRequest) *pb.RpcObjectCollectionRemoveResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectCollectionRemove(ctx, req.(*pb.RpcObjectCollectionRemoveRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectCollectionRemove", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectCollectionRemoveResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectCollectionSort(ctx context.Context, req *pb.RpcObjectCollectionSortRequest) *pb.RpcObjectCollectionSortResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectCollectionSort(ctx, req.(*pb.RpcObjectCollectionSortRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectCollectionSort", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectCollectionSortResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectCreateRelation(ctx context.Context, req *pb.RpcObjectCreateRelationRequest) *pb.RpcObjectCreateRelationResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectCreateRelation(ctx, req.(*pb.RpcObjectCreateRelationRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectCreateRelation", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectCreateRelationResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectCreateRelationOption(ctx context.Context, req *pb.RpcObjectCreateRelationOptionRequest) *pb.RpcObjectCreateRelationOptionResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectCreateRelationOption(ctx, req.(*pb.RpcObjectCreateRelationOptionRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectCreateRelationOption", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectCreateRelationOptionResponse)
}
func (h *ClientCommandsHandlerProxy) RelationListRemoveOption(ctx context.Context, req *pb.RpcRelationListRemoveOptionRequest) *pb.RpcRelationListRemoveOptionResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.RelationListRemoveOption(ctx, req.(*pb.RpcRelationListRemoveOptionRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "RelationListRemoveOption", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcRelationListRemoveOptionResponse)
}
func (h *ClientCommandsHandlerProxy) RelationOptions(ctx context.Context, req *pb.RpcRelationOptionsRequest) *pb.RpcRelationOptionsResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.RelationOptions(ctx, req.(*pb.RpcRelationOptionsRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "RelationOptions", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcRelationOptionsResponse)
}
func (h *ClientCommandsHandlerProxy) RelationListWithValue(ctx context.Context, req *pb.RpcRelationListWithValueRequest) *pb.RpcRelationListWithValueResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.RelationListWithValue(ctx, req.(*pb.RpcRelationListWithValueRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "RelationListWithValue", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcRelationListWithValueResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectRelationAdd(ctx context.Context, req *pb.RpcObjectRelationAddRequest) *pb.RpcObjectRelationAddResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectRelationAdd(ctx, req.(*pb.RpcObjectRelationAddRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectRelationAdd", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectRelationAddResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectRelationDelete(ctx context.Context, req *pb.RpcObjectRelationDeleteRequest) *pb.RpcObjectRelationDeleteResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectRelationDelete(ctx, req.(*pb.RpcObjectRelationDeleteRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectRelationDelete", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectRelationDeleteResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectRelationAddFeatured(ctx context.Context, req *pb.RpcObjectRelationAddFeaturedRequest) *pb.RpcObjectRelationAddFeaturedResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectRelationAddFeatured(ctx, req.(*pb.RpcObjectRelationAddFeaturedRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectRelationAddFeatured", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectRelationAddFeaturedResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectRelationRemoveFeatured(ctx context.Context, req *pb.RpcObjectRelationRemoveFeaturedRequest) *pb.RpcObjectRelationRemoveFeaturedResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectRelationRemoveFeatured(ctx, req.(*pb.RpcObjectRelationRemoveFeaturedRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectRelationRemoveFeatured", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectRelationRemoveFeaturedResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectRelationListAvailable(ctx context.Context, req *pb.RpcObjectRelationListAvailableRequest) *pb.RpcObjectRelationListAvailableResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectRelationListAvailable(ctx, req.(*pb.RpcObjectRelationListAvailableRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectRelationListAvailable", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectRelationListAvailableResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectCreateObjectType(ctx context.Context, req *pb.RpcObjectCreateObjectTypeRequest) *pb.RpcObjectCreateObjectTypeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectCreateObjectType(ctx, req.(*pb.RpcObjectCreateObjectTypeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectCreateObjectType", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectCreateObjectTypeResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectTypeRelationAdd(ctx context.Context, req *pb.RpcObjectTypeRelationAddRequest) *pb.RpcObjectTypeRelationAddResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectTypeRelationAdd(ctx, req.(*pb.RpcObjectTypeRelationAddRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectTypeRelationAdd", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectTypeRelationAddResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectTypeRelationRemove(ctx context.Context, req *pb.RpcObjectTypeRelationRemoveRequest) *pb.RpcObjectTypeRelationRemoveResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectTypeRelationRemove(ctx, req.(*pb.RpcObjectTypeRelationRemoveRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectTypeRelationRemove", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectTypeRelationRemoveResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectTypeRecommendedRelationsSet(ctx context.Context, req *pb.RpcObjectTypeRecommendedRelationsSetRequest) *pb.RpcObjectTypeRecommendedRelationsSetResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectTypeRecommendedRelationsSet(ctx, req.(*pb.RpcObjectTypeRecommendedRelationsSetRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectTypeRecommendedRelationsSet", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectTypeRecommendedRelationsSetResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectTypeRecommendedFeaturedRelationsSet(ctx context.Context, req *pb.RpcObjectTypeRecommendedFeaturedRelationsSetRequest) *pb.RpcObjectTypeRecommendedFeaturedRelationsSetResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectTypeRecommendedFeaturedRelationsSet(ctx, req.(*pb.RpcObjectTypeRecommendedFeaturedRelationsSetRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectTypeRecommendedFeaturedRelationsSet", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectTypeRecommendedFeaturedRelationsSetResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectTypeListConflictingRelations(ctx context.Context, req *pb.RpcObjectTypeListConflictingRelationsRequest) *pb.RpcObjectTypeListConflictingRelationsResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectTypeListConflictingRelations(ctx, req.(*pb.RpcObjectTypeListConflictingRelationsRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectTypeListConflictingRelations", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectTypeListConflictingRelationsResponse)
}
func (h *ClientCommandsHandlerProxy) HistoryShowVersion(ctx context.Context, req *pb.RpcHistoryShowVersionRequest) *pb.RpcHistoryShowVersionResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.HistoryShowVersion(ctx, req.(*pb.RpcHistoryShowVersionRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "HistoryShowVersion", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcHistoryShowVersionResponse)
}
func (h *ClientCommandsHandlerProxy) HistoryGetVersions(ctx context.Context, req *pb.RpcHistoryGetVersionsRequest) *pb.RpcHistoryGetVersionsResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.HistoryGetVersions(ctx, req.(*pb.RpcHistoryGetVersionsRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "HistoryGetVersions", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcHistoryGetVersionsResponse)
}
func (h *ClientCommandsHandlerProxy) HistorySetVersion(ctx context.Context, req *pb.RpcHistorySetVersionRequest) *pb.RpcHistorySetVersionResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.HistorySetVersion(ctx, req.(*pb.RpcHistorySetVersionRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "HistorySetVersion", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcHistorySetVersionResponse)
}
func (h *ClientCommandsHandlerProxy) HistoryDiffVersions(ctx context.Context, req *pb.RpcHistoryDiffVersionsRequest) *pb.RpcHistoryDiffVersionsResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.HistoryDiffVersions(ctx, req.(*pb.RpcHistoryDiffVersionsRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "HistoryDiffVersions", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcHistoryDiffVersionsResponse)
}
func (h *ClientCommandsHandlerProxy) FileSpaceOffload(ctx context.Context, req *pb.RpcFileSpaceOffloadRequest) *pb.RpcFileSpaceOffloadResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.FileSpaceOffload(ctx, req.(*pb.RpcFileSpaceOffloadRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "FileSpaceOffload", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcFileSpaceOffloadResponse)
}
func (h *ClientCommandsHandlerProxy) FileReconcile(ctx context.Context, req *pb.RpcFileReconcileRequest) *pb.RpcFileReconcileResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.FileReconcile(ctx, req.(*pb.RpcFileReconcileRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "FileReconcile", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcFileReconcileResponse)
}
func (h *ClientCommandsHandlerProxy) FileListOffload(ctx context.Context, req *pb.RpcFileListOffloadRequest) *pb.RpcFileListOffloadResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.FileListOffload(ctx, req.(*pb.RpcFileListOffloadRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "FileListOffload", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcFileListOffloadResponse)
}
func (h *ClientCommandsHandlerProxy) FileUpload(ctx context.Context, req *pb.RpcFileUploadRequest) *pb.RpcFileUploadResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.FileUpload(ctx, req.(*pb.RpcFileUploadRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "FileUpload", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcFileUploadResponse)
}
func (h *ClientCommandsHandlerProxy) FileDownload(ctx context.Context, req *pb.RpcFileDownloadRequest) *pb.RpcFileDownloadResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.FileDownload(ctx, req.(*pb.RpcFileDownloadRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "FileDownload", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcFileDownloadResponse)
}
func (h *ClientCommandsHandlerProxy) FileDrop(ctx context.Context, req *pb.RpcFileDropRequest) *pb.RpcFileDropResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.FileDrop(ctx, req.(*pb.RpcFileDropRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "FileDrop", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcFileDropResponse)
}
func (h *ClientCommandsHandlerProxy) FileSpaceUsage(ctx context.Context, req *pb.RpcFileSpaceUsageRequest) *pb.RpcFileSpaceUsageResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.FileSpaceUsage(ctx, req.(*pb.RpcFileSpaceUsageRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "FileSpaceUsage", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcFileSpaceUsageResponse)
}
func (h *ClientCommandsHandlerProxy) FileNodeUsage(ctx context.Context, req *pb.RpcFileNodeUsageRequest) *pb.RpcFileNodeUsageResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.FileNodeUsage(ctx, req.(*pb.RpcFileNodeUsageRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "FileNodeUsage", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcFileNodeUsageResponse)
}
func (h *ClientCommandsHandlerProxy) NavigationListObjects(ctx context.Context, req *pb.RpcNavigationListObjectsRequest) *pb.RpcNavigationListObjectsResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.NavigationListObjects(ctx, req.(*pb.RpcNavigationListObjectsRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "NavigationListObjects", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcNavigationListObjectsResponse)
}
func (h *ClientCommandsHandlerProxy) NavigationGetObjectInfoWithLinks(ctx context.Context, req *pb.RpcNavigationGetObjectInfoWithLinksRequest) *pb.RpcNavigationGetObjectInfoWithLinksResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.NavigationGetObjectInfoWithLinks(ctx, req.(*pb.RpcNavigationGetObjectInfoWithLinksRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "NavigationGetObjectInfoWithLinks", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcNavigationGetObjectInfoWithLinksResponse)
}
func (h *ClientCommandsHandlerProxy) TemplateCreateFromObject(ctx context.Context, req *pb.RpcTemplateCreateFromObjectRequest) *pb.RpcTemplateCreateFromObjectResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.TemplateCreateFromObject(ctx, req.(*pb.RpcTemplateCreateFromObjectRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "TemplateCreateFromObject", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcTemplateCreateFromObjectResponse)
}
func (h *ClientCommandsHandlerProxy) TemplateClone(ctx context.Context, req *pb.RpcTemplateCloneRequest) *pb.RpcTemplateCloneResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.TemplateClone(ctx, req.(*pb.RpcTemplateCloneRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "TemplateClone", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcTemplateCloneResponse)
}
func (h *ClientCommandsHandlerProxy) TemplateExportAll(ctx context.Context, req *pb.RpcTemplateExportAllRequest) *pb.RpcTemplateExportAllResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.TemplateExportAll(ctx, req.(*pb.RpcTemplateExportAllRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "TemplateExportAll", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcTemplateExportAllResponse)
}
func (h *ClientCommandsHandlerProxy) LinkPreview(ctx context.Context, req *pb.RpcLinkPreviewRequest) *pb.RpcLinkPreviewResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.LinkPreview(ctx, req.(*pb.RpcLinkPreviewRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "LinkPreview", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcLinkPreviewResponse)
}
func (h *ClientCommandsHandlerProxy) UnsplashSearch(ctx context.Context, req *pb.RpcUnsplashSearchRequest) *pb.RpcUnsplashSearchResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.UnsplashSearch(ctx, req.(*pb.RpcUnsplashSearchRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "UnsplashSearch", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcUnsplashSearchResponse)
}
func (h *ClientCommandsHandlerProxy) UnsplashDownload(ctx context.Context, req *pb.RpcUnsplashDownloadRequest) *pb.RpcUnsplashDownloadResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.UnsplashDownload(ctx, req.(*pb.RpcUnsplashDownloadRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "UnsplashDownload", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcUnsplashDownloadResponse)
}
func (h *ClientCommandsHandlerProxy) GalleryDownloadManifest(ctx context.Context, req *pb.RpcGalleryDownloadManifestRequest) *pb.RpcGalleryDownloadManifestResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.GalleryDownloadManifest(ctx, req.(*pb.RpcGalleryDownloadManifestRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "GalleryDownloadManifest", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcGalleryDownloadManifestResponse)
}
func (h *ClientCommandsHandlerProxy) GalleryDownloadIndex(ctx context.Context, req *pb.RpcGalleryDownloadIndexRequest) *pb.RpcGalleryDownloadIndexResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.GalleryDownloadIndex(ctx, req.(*pb.RpcGalleryDownloadIndexRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "GalleryDownloadIndex", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcGalleryDownloadIndexResponse)
}
func (h *ClientCommandsHandlerProxy) BlockUpload(ctx context.Context, req *pb.RpcBlockUploadRequest) *pb.RpcBlockUploadResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockUpload(ctx, req.(*pb.RpcBlockUploadRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockUpload", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockUploadResponse)
}
func (h *ClientCommandsHandlerProxy) BlockReplace(ctx context.Context, req *pb.RpcBlockReplaceRequest) *pb.RpcBlockReplaceResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockReplace(ctx, req.(*pb.RpcBlockReplaceRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockReplace", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockReplaceResponse)
}
func (h *ClientCommandsHandlerProxy) BlockCreate(ctx context.Context, req *pb.RpcBlockCreateRequest) *pb.RpcBlockCreateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockCreate(ctx, req.(*pb.RpcBlockCreateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockCreate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockCreateResponse)
}
func (h *ClientCommandsHandlerProxy) BlockSplit(ctx context.Context, req *pb.RpcBlockSplitRequest) *pb.RpcBlockSplitResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockSplit(ctx, req.(*pb.RpcBlockSplitRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockSplit", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockSplitResponse)
}
func (h *ClientCommandsHandlerProxy) BlockMerge(ctx context.Context, req *pb.RpcBlockMergeRequest) *pb.RpcBlockMergeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockMerge(ctx, req.(*pb.RpcBlockMergeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockMerge", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockMergeResponse)
}
func (h *ClientCommandsHandlerProxy) BlockCopy(ctx context.Context, req *pb.RpcBlockCopyRequest) *pb.RpcBlockCopyResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockCopy(ctx, req.(*pb.RpcBlockCopyRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockCopy", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockCopyResponse)
}
func (h *ClientCommandsHandlerProxy) BlockPaste(ctx context.Context, req *pb.RpcBlockPasteRequest) *pb.RpcBlockPasteResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockPaste(ctx, req.(*pb.RpcBlockPasteRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockPaste", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockPasteResponse)
}
func (h *ClientCommandsHandlerProxy) BlockCut(ctx context.Context, req *pb.RpcBlockCutRequest) *pb.RpcBlockCutResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockCut(ctx, req.(*pb.RpcBlockCutRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockCut", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockCutResponse)
}
func (h *ClientCommandsHandlerProxy) BlockSetFields(ctx context.Context, req *pb.RpcBlockSetFieldsRequest) *pb.RpcBlockSetFieldsResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockSetFields(ctx, req.(*pb.RpcBlockSetFieldsRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockSetFields", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockSetFieldsResponse)
}
func (h *ClientCommandsHandlerProxy) BlockExport(ctx context.Context, req *pb.RpcBlockExportRequest) *pb.RpcBlockExportResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockExport(ctx, req.(*pb.RpcBlockExportRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockExport", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockExportResponse)
}
func (h *ClientCommandsHandlerProxy) BlockSetCarriage(ctx context.Context, req *pb.RpcBlockSetCarriageRequest) *pb.RpcBlockSetCarriageResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockSetCarriage(ctx, req.(*pb.RpcBlockSetCarriageRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockSetCarriage", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockSetCarriageResponse)
}
func (h *ClientCommandsHandlerProxy) BlockPreview(ctx context.Context, req *pb.RpcBlockPreviewRequest) *pb.RpcBlockPreviewResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockPreview(ctx, req.(*pb.RpcBlockPreviewRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockPreview", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockPreviewResponse)
}
func (h *ClientCommandsHandlerProxy) BlockListDelete(ctx context.Context, req *pb.RpcBlockListDeleteRequest) *pb.RpcBlockListDeleteResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockListDelete(ctx, req.(*pb.RpcBlockListDeleteRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockListDelete", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockListDeleteResponse)
}
func (h *ClientCommandsHandlerProxy) BlockListMoveToExistingObject(ctx context.Context, req *pb.RpcBlockListMoveToExistingObjectRequest) *pb.RpcBlockListMoveToExistingObjectResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockListMoveToExistingObject(ctx, req.(*pb.RpcBlockListMoveToExistingObjectRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockListMoveToExistingObject", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockListMoveToExistingObjectResponse)
}
func (h *ClientCommandsHandlerProxy) BlockListMoveToNewObject(ctx context.Context, req *pb.RpcBlockListMoveToNewObjectRequest) *pb.RpcBlockListMoveToNewObjectResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockListMoveToNewObject(ctx, req.(*pb.RpcBlockListMoveToNewObjectRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockListMoveToNewObject", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockListMoveToNewObjectResponse)
}
func (h *ClientCommandsHandlerProxy) BlockListConvertToObjects(ctx context.Context, req *pb.RpcBlockListConvertToObjectsRequest) *pb.RpcBlockListConvertToObjectsResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockListConvertToObjects(ctx, req.(*pb.RpcBlockListConvertToObjectsRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockListConvertToObjects", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockListConvertToObjectsResponse)
}
func (h *ClientCommandsHandlerProxy) BlockListSetFields(ctx context.Context, req *pb.RpcBlockListSetFieldsRequest) *pb.RpcBlockListSetFieldsResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockListSetFields(ctx, req.(*pb.RpcBlockListSetFieldsRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockListSetFields", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockListSetFieldsResponse)
}
func (h *ClientCommandsHandlerProxy) BlockListDuplicate(ctx context.Context, req *pb.RpcBlockListDuplicateRequest) *pb.RpcBlockListDuplicateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockListDuplicate(ctx, req.(*pb.RpcBlockListDuplicateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockListDuplicate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockListDuplicateResponse)
}
func (h *ClientCommandsHandlerProxy) BlockListSetBackgroundColor(ctx context.Context, req *pb.RpcBlockListSetBackgroundColorRequest) *pb.RpcBlockListSetBackgroundColorResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockListSetBackgroundColor(ctx, req.(*pb.RpcBlockListSetBackgroundColorRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockListSetBackgroundColor", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockListSetBackgroundColorResponse)
}
func (h *ClientCommandsHandlerProxy) BlockListSetAlign(ctx context.Context, req *pb.RpcBlockListSetAlignRequest) *pb.RpcBlockListSetAlignResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockListSetAlign(ctx, req.(*pb.RpcBlockListSetAlignRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockListSetAlign", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockListSetAlignResponse)
}
func (h *ClientCommandsHandlerProxy) BlockListSetVerticalAlign(ctx context.Context, req *pb.RpcBlockListSetVerticalAlignRequest) *pb.RpcBlockListSetVerticalAlignResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockListSetVerticalAlign(ctx, req.(*pb.RpcBlockListSetVerticalAlignRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockListSetVerticalAlign", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockListSetVerticalAlignResponse)
}
func (h *ClientCommandsHandlerProxy) BlockListTurnInto(ctx context.Context, req *pb.RpcBlockListTurnIntoRequest) *pb.RpcBlockListTurnIntoResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockListTurnInto(ctx, req.(*pb.RpcBlockListTurnIntoRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockListTurnInto", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockListTurnIntoResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTextSetText(ctx context.Context, req *pb.RpcBlockTextSetTextRequest) *pb.RpcBlockTextSetTextResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTextSetText(ctx, req.(*pb.RpcBlockTextSetTextRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTextSetText", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTextSetTextResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTextSetColor(ctx context.Context, req *pb.RpcBlockTextSetColorRequest) *pb.RpcBlockTextSetColorResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTextSetColor(ctx, req.(*pb.RpcBlockTextSetColorRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTextSetColor", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTextSetColorResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTextSetStyle(ctx context.Context, req *pb.RpcBlockTextSetStyleRequest) *pb.RpcBlockTextSetStyleResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTextSetStyle(ctx, req.(*pb.RpcBlockTextSetStyleRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTextSetStyle", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTextSetStyleResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTextSetChecked(ctx context.Context, req *pb.RpcBlockTextSetCheckedRequest) *pb.RpcBlockTextSetCheckedResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTextSetChecked(ctx, req.(*pb.RpcBlockTextSetCheckedRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTextSetChecked", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTextSetCheckedResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTextSetIcon(ctx context.Context, req *pb.RpcBlockTextSetIconRequest) *pb.RpcBlockTextSetIconResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTextSetIcon(ctx, req.(*pb.RpcBlockTextSetIconRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTextSetIcon", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTextSetIconResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTextListSetColor(ctx context.Context, req *pb.RpcBlockTextListSetColorRequest) *pb.RpcBlockTextListSetColorResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTextListSetColor(ctx, req.(*pb.RpcBlockTextListSetColorRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTextListSetColor", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTextListSetColorResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTextListSetMark(ctx context.Context, req *pb.RpcBlockTextListSetMarkRequest) *pb.RpcBlockTextListSetMarkResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTextListSetMark(ctx, req.(*pb.RpcBlockTextListSetMarkRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTextListSetMark", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTextListSetMarkResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTextListSetStyle(ctx context.Context, req *pb.RpcBlockTextListSetStyleRequest) *pb.RpcBlockTextListSetStyleResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTextListSetStyle(ctx, req.(*pb.RpcBlockTextListSetStyleRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTextListSetStyle", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTextListSetStyleResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTextListClearStyle(ctx context.Context, req *pb.RpcBlockTextListClearStyleRequest) *pb.RpcBlockTextListClearStyleResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTextListClearStyle(ctx, req.(*pb.RpcBlockTextListClearStyleRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTextListClearStyle", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTextListClearStyleResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTextListClearContent(ctx context.Context, req *pb.RpcBlockTextListClearContentRequest) *pb.RpcBlockTextListClearContentResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTextListClearContent(ctx, req.(*pb.RpcBlockTextListClearContentRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTextListClearContent", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTextListClearContentResponse)
}
func (h *ClientCommandsHandlerProxy) BlockFileSetName(ctx context.Context, req *pb.RpcBlockFileSetNameRequest) *pb.RpcBlockFileSetNameResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockFileSetName(ctx, req.(*pb.RpcBlockFileSetNameRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockFileSetName", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockFileSetNameResponse)
}
func (h *ClientCommandsHandlerProxy) BlockFileSetTargetObjectId(ctx context.Context, req *pb.RpcBlockFileSetTargetObjectIdRequest) *pb.RpcBlockFileSetTargetObjectIdResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockFileSetTargetObjectId(ctx, req.(*pb.RpcBlockFileSetTargetObjectIdRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockFileSetTargetObjectId", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockFileSetTargetObjectIdResponse)
}
func (h *ClientCommandsHandlerProxy) BlockImageSetName(ctx context.Context, req *pb.RpcBlockImageSetNameRequest) *pb.RpcBlockImageSetNameResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockImageSetName(ctx, req.(*pb.RpcBlockImageSetNameRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockImageSetName", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockImageSetNameResponse)
}
func (h *ClientCommandsHandlerProxy) BlockVideoSetName(ctx context.Context, req *pb.RpcBlockVideoSetNameRequest) *pb.RpcBlockVideoSetNameResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockVideoSetName(ctx, req.(*pb.RpcBlockVideoSetNameRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockVideoSetName", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockVideoSetNameResponse)
}
func (h *ClientCommandsHandlerProxy) BlockFileCreateAndUpload(ctx context.Context, req *pb.RpcBlockFileCreateAndUploadRequest) *pb.RpcBlockFileCreateAndUploadResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockFileCreateAndUpload(ctx, req.(*pb.RpcBlockFileCreateAndUploadRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockFileCreateAndUpload", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockFileCreateAndUploadResponse)
}
func (h *ClientCommandsHandlerProxy) BlockFileListSetStyle(ctx context.Context, req *pb.RpcBlockFileListSetStyleRequest) *pb.RpcBlockFileListSetStyleResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockFileListSetStyle(ctx, req.(*pb.RpcBlockFileListSetStyleRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockFileListSetStyle", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockFileListSetStyleResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewViewCreate(ctx context.Context, req *pb.RpcBlockDataviewViewCreateRequest) *pb.RpcBlockDataviewViewCreateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewViewCreate(ctx, req.(*pb.RpcBlockDataviewViewCreateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewViewCreate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewViewCreateResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewViewDelete(ctx context.Context, req *pb.RpcBlockDataviewViewDeleteRequest) *pb.RpcBlockDataviewViewDeleteResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewViewDelete(ctx, req.(*pb.RpcBlockDataviewViewDeleteRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewViewDelete", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewViewDeleteResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewViewUpdate(ctx context.Context, req *pb.RpcBlockDataviewViewUpdateRequest) *pb.RpcBlockDataviewViewUpdateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewViewUpdate(ctx, req.(*pb.RpcBlockDataviewViewUpdateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewViewUpdate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewViewUpdateResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewViewSetActive(ctx context.Context, req *pb.RpcBlockDataviewViewSetActiveRequest) *pb.RpcBlockDataviewViewSetActiveResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewViewSetActive(ctx, req.(*pb.RpcBlockDataviewViewSetActiveRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewViewSetActive", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewViewSetActiveResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewViewSetPosition(ctx context.Context, req *pb.RpcBlockDataviewViewSetPositionRequest) *pb.RpcBlockDataviewViewSetPositionResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewViewSetPosition(ctx, req.(*pb.RpcBlockDataviewViewSetPositionRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewViewSetPosition", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewViewSetPositionResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewSetSource(ctx context.Context, req *pb.RpcBlockDataviewSetSourceRequest) *pb.RpcBlockDataviewSetSourceResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewSetSource(ctx, req.(*pb.RpcBlockDataviewSetSourceRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewSetSource", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewSetSourceResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewRelationAdd(ctx context.Context, req *pb.RpcBlockDataviewRelationAddRequest) *pb.RpcBlockDataviewRelationAddResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewRelationAdd(ctx, req.(*pb.RpcBlockDataviewRelationAddRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewRelationAdd", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewRelationAddResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewRelationDelete(ctx context.Context, req *pb.RpcBlockDataviewRelationDeleteRequest) *pb.RpcBlockDataviewRelationDeleteResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewRelationDelete(ctx, req.(*pb.RpcBlockDataviewRelationDeleteRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewRelationDelete", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewRelationDeleteResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewGroupOrderUpdate(ctx context.Context, req *pb.RpcBlockDataviewGroupOrderUpdateRequest) *pb.RpcBlockDataviewGroupOrderUpdateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewGroupOrderUpdate(ctx, req.(*pb.RpcBlockDataviewGroupOrderUpdateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewGroupOrderUpdate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewGroupOrderUpdateResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewObjectOrderUpdate(ctx context.Context, req *pb.RpcBlockDataviewObjectOrderUpdateRequest) *pb.RpcBlockDataviewObjectOrderUpdateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewObjectOrderUpdate(ctx, req.(*pb.RpcBlockDataviewObjectOrderUpdateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewObjectOrderUpdate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewObjectOrderUpdateResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewObjectOrderMove(ctx context.Context, req *pb.RpcBlockDataviewObjectOrderMoveRequest) *pb.RpcBlockDataviewObjectOrderMoveResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewObjectOrderMove(ctx, req.(*pb.RpcBlockDataviewObjectOrderMoveRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewObjectOrderMove", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewObjectOrderMoveResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewCreateFromExistingObject(ctx context.Context, req *pb.RpcBlockDataviewCreateFromExistingObjectRequest) *pb.RpcBlockDataviewCreateFromExistingObjectResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewCreateFromExistingObject(ctx, req.(*pb.RpcBlockDataviewCreateFromExistingObjectRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewCreateFromExistingObject", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewCreateFromExistingObjectResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewFilterAdd(ctx context.Context, req *pb.RpcBlockDataviewFilterAddRequest) *pb.RpcBlockDataviewFilterAddResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewFilterAdd(ctx, req.(*pb.RpcBlockDataviewFilterAddRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewFilterAdd", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewFilterAddResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewFilterRemove(ctx context.Context, req *pb.RpcBlockDataviewFilterRemoveRequest) *pb.RpcBlockDataviewFilterRemoveResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewFilterRemove(ctx, req.(*pb.RpcBlockDataviewFilterRemoveRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewFilterRemove", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewFilterRemoveResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewFilterReplace(ctx context.Context, req *pb.RpcBlockDataviewFilterReplaceRequest) *pb.RpcBlockDataviewFilterReplaceResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewFilterReplace(ctx, req.(*pb.RpcBlockDataviewFilterReplaceRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewFilterReplace", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewFilterReplaceResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewFilterSort(ctx context.Context, req *pb.RpcBlockDataviewFilterSortRequest) *pb.RpcBlockDataviewFilterSortResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewFilterSort(ctx, req.(*pb.RpcBlockDataviewFilterSortRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewFilterSort", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewFilterSortResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewSortAdd(ctx context.Context, req *pb.RpcBlockDataviewSortAddRequest) *pb.RpcBlockDataviewSortAddResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewSortAdd(ctx, req.(*pb.RpcBlockDataviewSortAddRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewSortAdd", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewSortAddResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewSortRemove(ctx context.Context, req *pb.RpcBlockDataviewSortRemoveRequest) *pb.RpcBlockDataviewSortRemoveResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewSortRemove(ctx, req.(*pb.RpcBlockDataviewSortRemoveRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewSortRemove", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewSortRemoveResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewSortReplace(ctx context.Context, req *pb.RpcBlockDataviewSortReplaceRequest) *pb.RpcBlockDataviewSortReplaceResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewSortReplace(ctx, req.(*pb.RpcBlockDataviewSortReplaceRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewSortReplace", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewSortReplaceResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewSortSort(ctx context.Context, req *pb.RpcBlockDataviewSortSSortRequest) *pb.RpcBlockDataviewSortSSortResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewSortSort(ctx, req.(*pb.RpcBlockDataviewSortSSortRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewSortSort", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewSortSSortResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewViewRelationAdd(ctx context.Context, req *pb.RpcBlockDataviewViewRelationAddRequest) *pb.RpcBlockDataviewViewRelationAddResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewViewRelationAdd(ctx, req.(*pb.RpcBlockDataviewViewRelationAddRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewViewRelationAdd", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewViewRelationAddResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewViewRelationRemove(ctx context.Context, req *pb.RpcBlockDataviewViewRelationRemoveRequest) *pb.RpcBlockDataviewViewRelationRemoveResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewViewRelationRemove(ctx, req.(*pb.RpcBlockDataviewViewRelationRemoveRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewViewRelationRemove", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewViewRelationRemoveResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewViewRelationReplace(ctx context.Context, req *pb.RpcBlockDataviewViewRelationReplaceRequest) *pb.RpcBlockDataviewViewRelationReplaceResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewViewRelationReplace(ctx, req.(*pb.RpcBlockDataviewViewRelationReplaceRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewViewRelationReplace", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewViewRelationReplaceResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewViewRelationSort(ctx context.Context, req *pb.RpcBlockDataviewViewRelationSortRequest) *pb.RpcBlockDataviewViewRelationSortResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewViewRelationSort(ctx, req.(*pb.RpcBlockDataviewViewRelationSortRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewViewRelationSort", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewViewRelationSortResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTableCreate(ctx context.Context, req *pb.RpcBlockTableCreateRequest) *pb.RpcBlockTableCreateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTableCreate(ctx, req.(*pb.RpcBlockTableCreateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTableCreate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTableCreateResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTableExpand(ctx context.Context, req *pb.RpcBlockTableExpandRequest) *pb.RpcBlockTableExpandResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTableExpand(ctx, req.(*pb.RpcBlockTableExpandRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTableExpand", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTableExpandResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTableRowCreate(ctx context.Context, req *pb.RpcBlockTableRowCreateRequest) *pb.RpcBlockTableRowCreateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTableRowCreate(ctx, req.(*pb.RpcBlockTableRowCreateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTableRowCreate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTableRowCreateResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTableRowDelete(ctx context.Context, req *pb.RpcBlockTableRowDeleteRequest) *pb.RpcBlockTableRowDeleteResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTableRowDelete(ctx, req.(*pb.RpcBlockTableRowDeleteRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTableRowDelete", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTableRowDeleteResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTableRowDuplicate(ctx context.Context, req *pb.RpcBlockTableRowDuplicateRequest) *pb.RpcBlockTableRowDuplicateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTableRowDuplicate(ctx, req.(*pb.RpcBlockTableRowDuplicateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTableRowDuplicate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTableRowDuplicateResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTableRowSetHeader(ctx context.Context, req *pb.RpcBlockTableRowSetHeaderRequest) *pb.RpcBlockTableRowSetHeaderResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTableRowSetHeader(ctx, req.(*pb.RpcBlockTableRowSetHeaderRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTableRowSetHeader", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTableRowSetHeaderResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTableColumnCreate(ctx context.Context, req *pb.RpcBlockTableColumnCreateRequest) *pb.RpcBlockTableColumnCreateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTableColumnCreate(ctx, req.(*pb.RpcBlockTableColumnCreateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTableColumnCreate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTableColumnCreateResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTableColumnMove(ctx context.Context, req *pb.RpcBlockTableColumnMoveRequest) *pb.RpcBlockTableColumnMoveResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTableColumnMove(ctx, req.(*pb.RpcBlockTableColumnMoveRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTableColumnMove", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTableColumnMoveResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTableColumnDelete(ctx context.Context, req *pb.RpcBlockTableColumnDeleteRequest) *pb.RpcBlockTableColumnDeleteResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTableColumnDelete(ctx, req.(*pb.RpcBlockTableColumnDeleteRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTableColumnDelete", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTableColumnDeleteResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTableColumnDuplicate(ctx context.Context, req *pb.RpcBlockTableColumnDuplicateRequest) *pb.RpcBlockTableColumnDuplicateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTableColumnDuplicate(ctx, req.(*pb.RpcBlockTableColumnDuplicateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTableColumnDuplicate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTableColumnDuplicateResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTableRowListFill(ctx context.Context, req *pb.RpcBlockTableRowListFillRequest) *pb.RpcBlockTableRowListFillResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTableRowListFill(ctx, req.(*pb.RpcBlockTableRowListFillRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTableRowListFill", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTableRowListFillResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTableRowListClean(ctx context.Context, req *pb.RpcBlockTableRowListCleanRequest) *pb.RpcBlockTableRowListCleanResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTableRowListClean(ctx, req.(*pb.RpcBlockTableRowListCleanRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTableRowListClean", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTableRowListCleanResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTableColumnListFill(ctx context.Context, req *pb.RpcBlockTableColumnListFillRequest) *pb.RpcBlockTableColumnListFillResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTableColumnListFill(ctx, req.(*pb.RpcBlockTableColumnListFillRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTableColumnListFill", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTableColumnListFillResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTableSort(ctx context.Context, req *pb.RpcBlockTableSortRequest) *pb.RpcBlockTableSortResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTableSort(ctx, req.(*pb.RpcBlockTableSortRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTableSort", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTableSortResponse)
}
func (h *ClientCommandsHandlerProxy) BlockCreateWidget(ctx context.Context, req *pb.RpcBlockCreateWidgetRequest) *pb.RpcBlockCreateWidgetResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockCreateWidget(ctx, req.(*pb.RpcBlockCreateWidgetRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockCreateWidget", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockCreateWidgetResponse)
}
func (h *ClientCommandsHandlerProxy) BlockWidgetSetTargetId(ctx context.Context, req *pb.RpcBlockWidgetSetTargetIdRequest) *pb.RpcBlockWidgetSetTargetIdResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockWidgetSetTargetId(ctx, req.(*pb.RpcBlockWidgetSetTargetIdRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockWidgetSetTargetId", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockWidgetSetTargetIdResponse)
}
func (h *ClientCommandsHandlerProxy) BlockWidgetSetLayout(ctx context.Context, req *pb.RpcBlockWidgetSetLayoutRequest) *pb.RpcBlockWidgetSetLayoutResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockWidgetSetLayout(ctx, req.(*pb.RpcBlockWidgetSetLayoutRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockWidgetSetLayout", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockWidgetSetLayoutResponse)
}
func (h *ClientCommandsHandlerProxy) BlockWidgetSetLimit(ctx context.Context, req *pb.RpcBlockWidgetSetLimitRequest) *pb.RpcBlockWidgetSetLimitResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockWidgetSetLimit(ctx, req.(*pb.RpcBlockWidgetSetLimitRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockWidgetSetLimit", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockWidgetSetLimitResponse)
}
func (h *ClientCommandsHandlerProxy) BlockWidgetSetViewId(ctx context.Context, req *pb.RpcBlockWidgetSetViewIdRequest) *pb.RpcBlockWidgetSetViewIdResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockWidgetSetViewId(ctx, req.(*pb.RpcBlockWidgetSetViewIdRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockWidgetSetViewId", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockWidgetSetViewIdResponse)
}
func (h *ClientCommandsHandlerProxy) BlockLinkCreateWithObject(ctx context.Context, req *pb.RpcBlockLinkCreateWithObjectRequest) *pb.RpcBlockLinkCreateWithObjectResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockLinkCreateWithObject(ctx, req.(*pb.RpcBlockLinkCreateWithObjectRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockLinkCreateWithObject", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockLinkCreateWithObjectResponse)
}
func (h *ClientCommandsHandlerProxy) BlockLinkListSetAppearance(ctx context.Context, req *pb.RpcBlockLinkListSetAppearanceRequest) *pb.RpcBlockLinkListSetAppearanceResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockLinkListSetAppearance(ctx, req.(*pb.RpcBlockLinkListSetAppearanceRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockLinkListSetAppearance", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockLinkListSetAppearanceResponse)
}
func (h *ClientCommandsHandlerProxy) BlockBookmarkFetch(ctx context.Context, req *pb.RpcBlockBookmarkFetchRequest) *pb.RpcBlockBookmarkFetchResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockBookmarkFetch(ctx, req.(*pb.RpcBlockBookmarkFetchRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockBookmarkFetch", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockBookmarkFetchResponse)
}
func (h *ClientCommandsHandlerProxy) BlockBookmarkCreateAndFetch(ctx context.Context, req *pb.RpcBlockBookmarkCreateAndFetchRequest) *pb.RpcBlockBookmarkCreateAndFetchResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockBookmarkCreateAndFetch(ctx, req.(*pb.RpcBlockBookmarkCreateAndFetchRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockBookmarkCreateAndFetch", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockBookmarkCreateAndFetchResponse)
}
func (h *ClientCommandsHandlerProxy) BlockRelationSetKey(ctx context.Context, req *pb.RpcBlockRelationSetKeyRequest) *pb.RpcBlockRelationSetKeyResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockRelationSetKey(ctx, req.(*pb.RpcBlockRelationSetKeyRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockRelationSetKey", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockRelationSetKeyResponse)
}
func (h *ClientCommandsHandlerProxy) BlockRelationAdd(ctx context.Context, req *pb.RpcBlockRelationAddRequest) *pb.RpcBlockRelationAddResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockRelationAdd(ctx, req.(*pb.RpcBlockRelationAddRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockRelationAdd", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockRelationAddResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDivListSetStyle(ctx context.Context, req *pb.RpcBlockDivListSetStyleRequest) *pb.RpcBlockDivListSetStyleResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDivListSetStyle(ctx, req.(*pb.RpcBlockDivListSetStyleRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDivListSetStyle", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDivListSetStyleResponse)
}
func (h *ClientCommandsHandlerProxy) BlockLatexSetText(ctx context.Context, req *pb.RpcBlockLatexSetTextRequest) *pb.RpcBlockLatexSetTextResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockLatexSetText(ctx, req.(*pb.RpcBlockLatexSetTextRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockLatexSetText", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockLatexSetTextResponse)
}
func (h *ClientCommandsHandlerProxy) ProcessCancel(ctx context.Context, req *pb.RpcProcessCancelRequest) *pb.RpcProcessCancelResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ProcessCancel(ctx, req.(*pb.RpcProcessCancelRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ProcessCancel", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcProcessCancelResponse)
}
func (h *ClientCommandsHandlerProxy) ProcessSubscribe(ctx context.Context, req *pb.RpcProcessSubscribeRequest) *pb.RpcProcessSubscribeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ProcessSubscribe(ctx, req.(*pb.RpcProcessSubscribeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ProcessSubscribe", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcProcessSubscribeResponse)
}
func (h *ClientCommandsHandlerProxy) ProcessUnsubscribe(ctx context.Context, req *pb.RpcProcessUnsubscribeRequest) *pb.RpcProcessUnsubscribeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ProcessUnsubscribe(ctx, req.(*pb.RpcProcessUnsubscribeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ProcessUnsubscribe", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcProcessUnsubscribeResponse)
}
func (h *ClientCommandsHandlerProxy) LogSend(ctx context.Context, req *pb.RpcLogSendRequest) *pb.RpcLogSendResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.LogSend(ctx, req.(*pb.RpcLogSendRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "LogSend", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcLogSendResponse)
}
func (h *ClientCommandsHandlerProxy) DebugStat(ctx context.Context, req *pb.RpcDebugStatRequest) *pb.RpcDebugStatResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.DebugStat(ctx, req.(*pb.RpcDebugStatRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "DebugStat", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcDebugStatResponse)
}
func (h *ClientCommandsHandlerProxy) DebugTree(ctx context.Context, req *pb.RpcDebugTreeRequest) *pb.RpcDebugTreeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.DebugTree(ctx, req.(*pb.RpcDebugTreeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "DebugTree", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcDebugTreeResponse)
}
func (h *ClientCommandsHandlerProxy) DebugTreeHeads(ctx context.Context, req *pb.RpcDebugTreeHeadsRequest) *pb.RpcDebugTreeHeadsResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.DebugTreeHeads(ctx, req.(*pb.RpcDebugTreeHeadsRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "DebugTreeHeads", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcDebugTreeHeadsResponse)
}
func (h *ClientCommandsHandlerProxy) DebugSpaceSummary(ctx context.Context, req *pb.RpcDebugSpaceSummaryRequest) *pb.RpcDebugSpaceSummaryResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.DebugSpaceSummary(ctx, req.(*pb.RpcDebugSpaceSummaryRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "DebugSpaceSummary", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcDebugSpaceSummaryResponse)
}
func (h *ClientCommandsHandlerProxy) DebugStackGoroutines(ctx context.Context, req *pb.RpcDebugStackGoroutinesRequest) *pb.RpcDebugStackGoroutinesResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.DebugStackGoroutines(ctx, req.(*pb.RpcDebugStackGoroutinesRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "DebugStackGoroutines", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcDebugStackGoroutinesResponse)
}
func (h *ClientCommandsHandlerProxy) DebugExportLocalstore(ctx context.Context, req *pb.RpcDebugExportLocalstoreRequest) *pb.RpcDebugExportLocalstoreResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.DebugExportLocalstore(ctx, req.(*pb.RpcDebugExportLocalstoreRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "DebugExportLocalstore", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcDebugExportLocalstoreResponse)
}
func (h *ClientCommandsHandlerProxy) DebugPing(ctx context.Context, req *pb.RpcDebugPingRequest) *pb.RpcDebugPingResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.DebugPing(ctx, req.(*pb.RpcDebugPingRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "DebugPing", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcDebugPingResponse)
}
func (h *ClientCommandsHandlerProxy) DebugSubscriptions(ctx context.Context, req *pb.RpcDebugSubscriptionsRequest) *pb.RpcDebugSubscriptionsResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.DebugSubscriptions(ctx, req.(*pb.RpcDebugSubscriptionsRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "DebugSubscriptions", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcDebugSubscriptionsResponse)
}
func (h *ClientCommandsHandlerProxy) DebugOpenedObjects(ctx context.Context, req *pb.RpcDebugOpenedObjectsRequest) *pb.RpcDebugOpenedObjectsResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.DebugOpenedObjects(ctx, req.(*pb.RpcDebugOpenedObjectsRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "DebugOpenedObjects", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcDebugOpenedObjectsResponse)
}
func (h *ClientCommandsHandlerProxy) DebugRunProfiler(ctx context.Context, req *pb.RpcDebugRunProfilerRequest) *pb.RpcDebugRunProfilerResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.DebugRunProfiler(ctx, req.(*pb.RpcDebugRunProfilerRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "DebugRunProfiler", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcDebugRunProfilerResponse)
}
func (h *ClientCommandsHandlerProxy) DebugAccountSelectTrace(ctx context.Context, req *pb.RpcDebugAccountSelectTraceRequest) *pb.RpcDebugAccountSelectTraceResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.DebugAccountSelectTrace(ctx, req.(*pb.RpcDebugAccountSelectTraceRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "DebugAccountSelectTrace", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcDebugAccountSelectTraceResponse)
}
func (h *ClientCommandsHandlerProxy) DebugAnystoreObjectChanges(ctx context.Context, req *pb.RpcDebugAnystoreObjectChangesRequest) *pb.RpcDebugAnystoreObjectChangesResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.DebugAnystoreObjectChanges(ctx, req.(*pb.RpcDebugAnystoreObjectChangesRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "DebugAnystoreObjectChanges", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcDebugAnystoreObjectChangesResponse)
}
func (h *ClientCommandsHandlerProxy) DebugNetCheck(ctx context.Context, req *pb.RpcDebugNetCheckRequest) *pb.RpcDebugNetCheckResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.DebugNetCheck(ctx, req.(*pb.RpcDebugNetCheckRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "DebugNetCheck", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcDebugNetCheckResponse)
}
func (h *ClientCommandsHandlerProxy) DebugExportLog(ctx context.Context, req *pb.RpcDebugExportLogRequest) *pb.RpcDebugExportLogResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.DebugExportLog(ctx, req.(*pb.RpcDebugExportLogRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "DebugExportLog", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcDebugExportLogResponse)
}
func (h *ClientCommandsHandlerProxy) InitialSetParameters(ctx context.Context, req *pb.RpcInitialSetParametersRequest) *pb.RpcInitialSetParametersResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.InitialSetParameters(ctx, req.(*pb.RpcInitialSetParametersRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "InitialSetParameters", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcInitialSetParametersResponse)
}
func (h *ClientCommandsHandlerProxy) NotificationList(ctx context.Context, req *pb.RpcNotificationListRequest) *pb.RpcNotificationListResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.NotificationList(ctx, req.(*pb.RpcNotificationListRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "NotificationList", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcNotificationListResponse)
}
func (h *ClientCommandsHandlerProxy) NotificationReply(ctx context.Context, req *pb.RpcNotificationReplyRequest) *pb.RpcNotificationReplyResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.NotificationReply(ctx, req.(*pb.RpcNotificationReplyRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "NotificationReply", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcNotificationReplyResponse)
}
func (h *ClientCommandsHandlerProxy) NotificationTest(ctx context.Context, req *pb.RpcNotificationTestRequest) *pb.RpcNotificationTestResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.NotificationTest(ctx, req.(*pb.RpcNotificationTestRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "NotificationTest", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcNotificationTestResponse)
}
func (h *ClientCommandsHandlerProxy) MembershipGetStatus(ctx context.Context, req *pb.RpcMembershipGetStatusRequest) *pb.RpcMembershipGetStatusResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.MembershipGetStatus(ctx, req.(*pb.RpcMembershipGetStatusRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "MembershipGetStatus", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcMembershipGetStatusResponse)
}
func (h *ClientCommandsHandlerProxy) MembershipIsNameValid(ctx context.Context, req *pb.RpcMembershipIsNameValidRequest) *pb.RpcMembershipIsNameValidResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.MembershipIsNameValid(ctx, req.(*pb.RpcMembershipIsNameValidRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "MembershipIsNameValid", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcMembershipIsNameValidResponse)
}
func (h *ClientCommandsHandlerProxy) MembershipRegisterPaymentRequest(ctx context.Context, req *pb.RpcMembershipRegisterPaymentRequestRequest) *pb.RpcMembershipRegisterPaymentRequestResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.MembershipRegisterPaymentRequest(ctx, req.(*pb.RpcMembershipRegisterPaymentRequestRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "MembershipRegisterPaymentRequest", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcMembershipRegisterPaymentRequestResponse)
}
func (h *ClientCommandsHandlerProxy) MembershipGetPortalLinkUrl(ctx context.Context, req *pb.RpcMembershipGetPortalLinkUrlRequest) *pb.RpcMembershipGetPortalLinkUrlResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.MembershipGetPortalLinkUrl(ctx, req.(*pb.RpcMembershipGetPortalLinkUrlRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "MembershipGetPortalLinkUrl", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcMembershipGetPortalLinkUrlResponse)
}
func (h *ClientCommandsHandlerProxy) MembershipGetVerificationEmailStatus(ctx context.Context, req *pb.RpcMembershipGetVerificationEmailStatusRequest) *pb.RpcMembershipGetVerificationEmailStatusResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.MembershipGetVerificationEmailStatus(ctx, req.(*pb.RpcMembershipGetVerificationEmailStatusRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "MembershipGetVerificationEmailStatus", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcMembershipGetVerificationEmailStatusResponse)
}
func (h *ClientCommandsHandlerProxy) MembershipGetVerificationEmail(ctx context.Context, req *pb.RpcMembershipGetVerificationEmailRequest) *pb.RpcMembershipGetVerificationEmailResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.MembershipGetVerificationEmail(ctx, req.(*pb.RpcMembershipGetVerificationEmailRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "MembershipGetVerificationEmail", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcMembershipGetVerificationEmailResponse)
}
func (h *ClientCommandsHandlerProxy) MembershipVerifyEmailCode(ctx context.Context, req *pb.RpcMembershipVerifyEmailCodeRequest) *pb.RpcMembershipVerifyEmailCodeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.MembershipVerifyEmailCode(ctx, req.(*pb.RpcMembershipVerifyEmailCodeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "MembershipVerifyEmailCode", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcMembershipVerifyEmailCodeResponse)
}
func (h *ClientCommandsHandlerProxy) MembershipFinalize(ctx context.Context, req *pb.RpcMembershipFinalizeRequest) *pb.RpcMembershipFinalizeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.MembershipFinalize(ctx, req.(*pb.RpcMembershipFinalizeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "MembershipFinalize", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcMembershipFinalizeResponse)
}
func (h *ClientCommandsHandlerProxy) MembershipGetTiers(ctx context.Context, req *pb.RpcMembershipGetTiersRequest) *pb.RpcMembershipGetTiersResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.MembershipGetTiers(ctx, req.(*pb.RpcMembershipGetTiersRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "MembershipGetTiers", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcMembershipGetTiersResponse)
}
func (h *ClientCommandsHandlerProxy) MembershipVerifyAppStoreReceipt(ctx context.Context, req *pb.RpcMembershipVerifyAppStoreReceiptRequest) *pb.RpcMembershipVerifyAppStoreReceiptResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.MembershipVerifyAppStoreReceipt(ctx, req.(*pb.RpcMembershipVerifyAppStoreReceiptRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "MembershipVerifyAppStoreReceipt", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcMembershipVerifyAppStoreReceiptResponse)
}
func (h *ClientCommandsHandlerProxy) NameServiceUserAccountGet(ctx context.Context, req *pb.RpcNameServiceUserAccountGetRequest) *pb.RpcNameServiceUserAccountGetResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.NameServiceUserAccountGet(ctx, req.(*pb.RpcNameServiceUserAccountGetRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "NameServiceUserAccountGet", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcNameServiceUserAccountGetResponse)
}
func (h *ClientCommandsHandlerProxy) NameServiceResolveName(ctx context.Context, req *pb.RpcNameServiceResolveNameRequest) *pb.RpcNameServiceResolveNameResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.NameServiceResolveName(ctx, req.(*pb.RpcNameServiceResolveNameRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "NameServiceResolveName", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcNameServiceResolveNameResponse)
}
func (h *ClientCommandsHandlerProxy) NameServiceResolveAnyId(ctx context.Context, req *pb.RpcNameServiceResolveAnyIdRequest) *pb.RpcNameServiceResolveAnyIdResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.NameServiceResolveAnyId(ctx, req.(*pb.RpcNameServiceResolveAnyIdRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "NameServiceResolveAnyId", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcNameServiceResolveAnyIdResponse)
}
func (h *ClientCommandsHandlerProxy) BroadcastPayloadEvent(ctx context.Context, req *pb.RpcBroadcastPayloadEventRequest) *pb.RpcBroadcastPayloadEventResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BroadcastPayloadEvent(ctx, req.(*pb.RpcBroadcastPayloadEventRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BroadcastPayloadEvent", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBroadcastPayloadEventResponse)
}
func (h *ClientCommandsHandlerProxy) DeviceSetName(ctx context.Context, req *pb.RpcDeviceSetNameRequest) *pb.RpcDeviceSetNameResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.DeviceSetName(ctx, req.(*pb.RpcDeviceSetNameRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "DeviceSetName", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcDeviceSetNameResponse)
}
func (h *ClientCommandsHandlerProxy) DeviceList(ctx context.Context, req *pb.RpcDeviceListRequest) *pb.RpcDeviceListResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.DeviceList(ctx, req.(*pb.RpcDeviceListRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "DeviceList", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcDeviceListResponse)
}
func (h *ClientCommandsHandlerProxy) DeviceNetworkStateSet(ctx context.Context, req *pb.RpcDeviceNetworkStateSetRequest) *pb.RpcDeviceNetworkStateSetResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.DeviceNetworkStateSet(ctx, req.(*pb.RpcDeviceNetworkStateSetRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "DeviceNetworkStateSet", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcDeviceNetworkStateSetResponse)
}
func (h *ClientCommandsHandlerProxy) ChatAddMessage(ctx context.Context, req *pb.RpcChatAddMessageRequest) *pb.RpcChatAddMessageResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ChatAddMessage(ctx, req.(*pb.RpcChatAddMessageRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ChatAddMessage", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcChatAddMessageResponse)
}
func (h *ClientCommandsHandlerProxy) ChatEditMessageContent(ctx context.Context, req *pb.RpcChatEditMessageContentRequest) *pb.RpcChatEditMessageContentResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ChatEditMessageContent(ctx, req.(*pb.RpcChatEditMessageContentRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ChatEditMessageContent", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcChatEditMessageContentResponse)
}
func (h *ClientCommandsHandlerProxy) ChatToggleMessageReaction(ctx context.Context, req *pb.RpcChatToggleMessageReactionRequest) *pb.RpcChatToggleMessageReactionResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ChatToggleMessageReaction(ctx, req.(*pb.RpcChatToggleMessageReactionRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ChatToggleMessageReaction", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcChatToggleMessageReactionResponse)
}
func (h *ClientCommandsHandlerProxy) ChatDeleteMessage(ctx context.Context, req *pb.RpcChatDeleteMessageRequest) *pb.RpcChatDeleteMessageResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ChatDeleteMessage(ctx, req.(*pb.RpcChatDeleteMessageRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ChatDeleteMessage", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcChatDeleteMessageResponse)
}
func (h *ClientCommandsHandlerProxy) ChatGetMessages(ctx context.Context, req *pb.RpcChatGetMessagesRequest) *pb.RpcChatGetMessagesResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ChatGetMessages(ctx, req.(*pb.RpcChatGetMessagesRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ChatGetMessages", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcChatGetMessagesResponse)
}
func (h *ClientCommandsHandlerProxy) ChatGetMessagesByIds(ctx context.Context, req *pb.RpcChatGetMessagesByIdsRequest) *pb.RpcChatGetMessagesByIdsResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ChatGetMessagesByIds(ctx, req.(*pb.RpcChatGetMessagesByIdsRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ChatGetMessagesByIds", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcChatGetMessagesByIdsResponse)
}
func (h *ClientCommandsHandlerProxy) ChatSubscribeLastMessages(ctx context.Context, req *pb.RpcChatSubscribeLastMessagesRequest) *pb.RpcChatSubscribeLastMessagesResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ChatSubscribeLastMessages(ctx, req.(*pb.RpcChatSubscribeLastMessagesRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ChatSubscribeLastMessages", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcChatSubscribeLastMessagesResponse)
}
func (h *ClientCommandsHandlerProxy) ChatUnsubscribe(ctx context.Context, req *pb.RpcChatUnsubscribeRequest) *pb.RpcChatUnsubscribeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ChatUnsubscribe(ctx, req.(*pb.RpcChatUnsubscribeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ChatUnsubscribe", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcChatUnsubscribeResponse)
}
func (h *ClientCommandsHandlerProxy) ChatReadMessages(ctx context.Context, req *pb.RpcChatReadMessagesRequest) *pb.RpcChatReadMessagesResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ChatReadMessages(ctx, req.(*pb.RpcChatReadMessagesRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ChatReadMessages", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcChatReadMessagesResponse)
}
func (h *ClientCommandsHandlerProxy) ChatUnreadMessages(ctx context.Context, req *pb.RpcChatUnreadRequest) *pb.RpcChatUnreadResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ChatUnreadMessages(ctx, req.(*pb.RpcChatUnreadRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ChatUnreadMessages", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcChatUnreadResponse)
}
func (h *ClientCommandsHandlerProxy) ChatSubscribeToMessagePreviews(ctx context.Context, req *pb.RpcChatSubscribeToMessagePreviewsRequest) *pb.RpcChatSubscribeToMessagePreviewsResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ChatSubscribeToMessagePreviews(ctx, req.(*pb.RpcChatSubscribeToMessagePreviewsRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ChatSubscribeToMessagePreviews", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcChatSubscribeToMessagePreviewsResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectChatAdd(ctx context.Context, req *pb.RpcObjectChatAddRequest) *pb.RpcObjectChatAddResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectChatAdd(ctx, req.(*pb.RpcObjectChatAddRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectChatAdd", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectChatAddResponse)
}
