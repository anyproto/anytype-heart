// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/protos/service/service.proto

package service

import (
	"context"
	fmt "fmt"
	pb "github.com/anyproto/anytype-heart/pb"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("pb/protos/service/service.proto", fileDescriptor_93a29dc403579097) }

var fileDescriptor_93a29dc403579097 = []byte{
	// 4410 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x9d, 0xdd, 0x6f, 0x1d, 0x49,
	0x56, 0xc0, 0xe7, 0xbe, 0x30, 0xd0, 0xcb, 0x0e, 0x70, 0x17, 0x86, 0xd9, 0xb0, 0xeb, 0x64, 0x32,
	0x89, 0x9d, 0xc4, 0xf1, 0x75, 0x26, 0x99, 0x8f, 0x65, 0x17, 0x09, 0x39, 0x76, 0xec, 0x31, 0x9b,
	0x38, 0xc6, 0xd7, 0x49, 0xa4, 0x91, 0x90, 0x68, 0xf7, 0xad, 0x5c, 0x37, 0x6e, 0x77, 0xf5, 0x76,
	0xd7, 0xf5, 0x07, 0x08, 0x04, 0x02, 0x81, 0x40, 0x20, 0x10, 0x5f, 0x2f, 0x3c, 0x20, 0xf1, 0xa7,
	0xf0, 0xc4, 0xe3, 0x3c, 0x22, 0xf1, 0x82, 0x66, 0xfe, 0x91, 0x55, 0x57, 0x9f, 0xae, 0x8f, 0xd3,
	0xe7, 0x54, 0xf7, 0x9d, 0xa7, 0x19, 0xf9, 0xfc, 0xce, 0x47, 0x75, 0x9d, 0xaa, 0x3a, 0x55, 0xd5,
	0xb7, 0x13, 0xdd, 0x2c, 0x4e, 0x36, 0x8b, 0x52, 0x2a, 0x59, 0x6d, 0x56, 0xa2, 0xbc, 0x48, 0x13,
	0xd1, 0xfe, 0x77, 0xa2, 0xff, 0x3c, 0x7e, 0x37, 0xce, 0xaf, 0xd5, 0x75, 0x21, 0x6e, 0x7c, 0x60,
	0xc9, 0x44, 0x9e, 0x9f, 0xc7, 0xf9, 0xac, 0x6a, 0x90, 0x1b, 0xef, 0x5b, 0x89, 0xb8, 0x10, 0xb9,
	0x82, 0xbf, 0x3f, 0xfe, 0xbf, 0xff, 0x1e, 0x45, 0xef, 0x6d, 0x67, 0xa9, 0xc8, 0xd5, 0x36, 0x68,
	0x8c, 0xbf, 0x8c, 0xbe, 0xbb, 0x55, 0x14, 0x7b, 0x42, 0xbd, 0x16, 0x65, 0x95, 0xca, 0x7c, 0xfc,
	0xd1, 0x04, 0x1c, 0x4c, 0x8e, 0x8a, 0x64, 0xb2, 0x55, 0x14, 0x13, 0x2b, 0x9c, 0x1c, 0x89, 0x9f,
	0x2d, 0x44, 0xa5, 0x6e, 0xdc, 0x09, 0x43, 0x55, 0x21, 0xf3, 0x4a, 0x8c, 0xdf, 0x46, 0xbf, 0xb6,
	0x55, 0x14, 0x53, 0xa1, 0x76, 0x44, 0xdd, 0x80, 0xa9, 0x8a, 0x95, 0x18, 0xaf, 0x75, 0x54, 0x7d,
	0xc0, 0xf8, 0xb8, 0xd7, 0x0f, 0x82, 0x9f, 0xe3, 0xe8, 0x3b, 0xb5, 0x9f, 0xd3, 0x85, 0x9a, 0xc9,
	0xcb, 0x7c, 0xfc, 0x61, 0x57, 0x11, 0x44, 0xc6, 0xf6, 0xed, 0x10, 0x02, 0x56, 0xdf, 0x44, 0xbf,
	0xfc, 0x26, 0xce, 0x32, 0xa1, 0xb6, 0x4b, 0x51, 0x07, 0xee, 0xeb, 0x34, 0xa2, 0x49, 0x23, 0x33,
	0x76, 0x3f, 0x0a, 0x32, 0x60, 0xf8, 0xcb, 0xe8, 0xbb, 0x8d, 0xe4, 0x48, 0x24, 0xf2, 0x42, 0x94,
	0x63, 0x52, 0x0b, 0x84, 0xcc, 0x23, 0xef, 0x40, 0xd8, 0xf6, 0xb6, 0xcc, 0x2f, 0x44, 0xa9, 0x68,
	0xdb, 0x20, 0x0c, 0xdb, 0xb6, 0x10, 0xd8, 0xfe, 0xdb, 0x51, 0xf4, 0x83, 0xad, 0x24, 0x91, 0x8b,
	0x5c, 0x3d, 0x97, 0x49, 0x9c, 0x3d, 0x4f, 0xf3, 0xb3, 0x03, 0x71, 0xb9, 0x7d, 0x5a, 0xf3, 0xf9,
	0x5c, 0x8c, 0x9f, 0xf8, 0x4f, 0xb5, 0x41, 0x27, 0x86, 0x9d, 0xb8, 0xb0, 0xf1, 0xfd, 0xc9, 0x72,
	0x4a, 0x10, 0xcb, 0x3f, 0x8e, 0xa2, 0x15, 0x1c, 0xcb, 0x54, 0x66, 0x17, 0xc2, 0x46, 0xf3, 0x69,
	0x8f, 0x61, 0x1f, 0x37, 0xf1, 0x7c, 0xb6, 0xac, 0x1a, 0x44, 0x94, 0x45, 0xdf, 0x73, 0xd3, 0x65,
	0x2a, 0x2a, 0x3d, 0x9c, 0xee, 0xf3, 0x19, 0x01, 0x88, 0xf1, 0xfc, 0x60, 0x08, 0x0a, 0xde, 0xd2,
	0x68, 0x0c, 0xde, 0x32, 0x59, 0x19, 0x67, 0xf7, 0x48, 0x0b, 0x0e, 0x61, 0x7c, 0xdd, 0x1f, 0x40,
	0x82, 0xab, 0x3f, 0x8c, 0x7e, 0xe5, 0x8d, 0x2c, 0xcf, 0xaa, 0x22, 0x4e, 0x04, 0x0c, 0x85, 0xbb,
	0xbe, 0x76, 0x2b, 0xc5, 0xa3, 0x61, 0xb5, 0x0f, 0x73, 0x92, 0xb6, 0x15, 0xbe, 0x2c, 0x04, 0x9e,
	0x83, 0xac, 0x62, 0x2d, 0xe4, 0x92, 0x16, 0x43, 0x60, 0xfb, 0x2c, 0x1a, 0x5b, 0xdb, 0x27, 0x7f,
	0x24, 0x12, 0xb5, 0x35, 0x9b, 0xe1, 0x5e, 0xb1, 0xba, 0x9a, 0x98, 0x6c, 0xcd, 0x66, 0x5c, 0xaf,
	0xd0, 0x28, 0x38, 0xbb, 0x8c, 0xde, 0x47, 0xce, 0x9e, 0xa7, 0x95, 0x76, 0xb8, 0x11, 0xb6, 0x02,
	0x98, 0x71, 0x3a, 0x19, 0x8a, 0x83, 0xe3, 0x3f, 0x1f, 0x45, 0xdf, 0x27, 0x3c, 0x1f, 0x89, 0x73,
	0x79, 0x21, 0xc6, 0x8f, 0xfa, 0xad, 0x35, 0xa4, 0xf1, 0xff, 0xf1, 0x12, 0x1a, 0x44, 0x9a, 0x4c,
	0x45, 0x26, 0x12, 0xc5, 0xa6, 0x49, 0x23, 0xee, 0x4d, 0x13, 0x83, 0x39, 0x23, 0xac, 0x15, 0xee,
	0x09, 0xb5, 0xbd, 0x28, 0x4b, 0x91, 0x2b, 0xb6, 0x2f, 0x2d, 0xd2, 0xdb, 0x97, 0x1e, 0x4a, 0xb4,
	0x67, 0x4f, 0xa8, 0xad, 0x2c, 0x63, 0xdb, 0xd3, 0x88, 0x7b, 0xdb, 0x63, 0x30, 0xf0, 0x90, 0x44,
	0xbf, 0xea, 0x3c, 0x31, 0xb5, 0x9f, 0xbf, 0x95, 0x63, 0xfe, 0x59, 0x68, 0xb9, 0xf1, 0xb1, 0xd6,
	0xcb, 0x11, 0xcd, 0x78, 0x76, 0x55, 0xc8, 0x92, 0xef, 0x96, 0x46, 0xdc, 0xdb, 0x0c, 0x83, 0x81,
	0x87, 0x3f, 0x88, 0xde, 0x83, 0x59, 0xb2, 0x5d, 0xcf, 0xee, 0x90, 0x53, 0x28, 0x5e, 0xd0, 0xee,
	0xf6, 0x50, 0x76, 0x72, 0x00, 0x19, 0x4c, 0x3e, 0x1f, 0x91, 0x7a, 0x68, 0xea, 0xb9, 0x13, 0x86,
	0x3a, 0xb6, 0x77, 0x44, 0x26, 0x58, 0xdb, 0x8d, 0xb0, 0xc7, 0xb6, 0x81, 0xc0, 0x76, 0x19, 0xfd,
	0x86, 0x79, 0x2c, 0xf5, 0x3a, 0xaa, 0xe5, 0xf5, 0x24, 0xbd, 0xce, 0xb4, 0xdb, 0x85, 0x8c, 0xaf,
	0x87, 0xc3, 0xe0, 0x4e, 0x7b, 0x60, 0x04, 0xd2, 0xed, 0x41, 0xe3, 0xef, 0x4e, 0x18, 0x02, 0xdb,
	0x7f, 0x37, 0x8a, 0x7e, 0x08, 0xb2, 0x67, 0x79, 0x7c, 0x92, 0x09, 0xbd, 0x24, 0x1e, 0x08, 0x75,
	0x29, 0xcb, 0xb3, 0xe9, 0x75, 0x9e, 0x30, 0xcb, 0x3f, 0x0d, 0xf7, 0x2c, 0xff, 0xac, 0x92, 0x53,
	0xf1, 0x41, 0x43, 0x95, 0x2c, 0x70, 0xc5, 0xd7, 0xb6, 0x40, 0xc9, 0x82, 0xab, 0xf8, 0x7c, 0xa4,
	0x63, 0xf5, 0x45, 0x3d, 0x6d, 0xd2, 0x56, 0x5f, 0xb8, 0xf3, 0xe4, 0xed, 0x10, 0x62, 0xa7, 0xad,
	0x36, 0x81, 0x65, 0xfe, 0x36, 0x9d, 0xbf, 0x2a, 0x66, 0x75, 0x1a, 0xdf, 0xa7, 0x33, 0xd4, 0x41,
	0x98, 0x69, 0x8b, 0x41, 0xc1, 0xdb, 0x3f, 0xd8, 0xc2, 0x08, 0x86, 0xd2, 0x6e, 0x29, 0xcf, 0x9f,
	0x8b, 0x79, 0x9c, 0x5c, 0xc3, 0xf8, 0xff, 0x24, 0x34, 0xf0, 0x30, 0x6d, 0x82, 0xf8, 0x74, 0x49,
	0x2d, 0x88, 0xe7, 0x3f, 0x47, 0xd1, 0x9d, 0xb6, 0xf9, 0xa7, 0x71, 0x3e, 0x17, 0xd0, 0x9f, 0x4d,
	0xf4, 0x5b, 0xf9, 0xec, 0x48, 0x54, 0x2a, 0x2e, 0xd5, 0xf8, 0xc7, 0x74, 0x23, 0x43, 0x3a, 0x26,
	0xb6, 0x9f, 0x7c, 0x2b, 0x5d, 0xdb, 0xeb, 0xd3, 0x7a, 0x62, 0x83, 0x29, 0xc0, 0xef, 0x75, 0x2d,
	0xc1, 0x13, 0xc0, 0xed, 0x10, 0x62, 0x7b, 0x5d, 0x0b, 0xf6, 0xf3, 0x8b, 0x54, 0x89, 0x3d, 0x91,
	0x8b, 0xb2, 0xdb, 0xeb, 0x8d, 0xaa, 0x8f, 0x30, 0xbd, 0xce, 0xa0, 0x76, 0xb2, 0xf1, 0xbc, 0x99,
	0xc5, 0x71, 0x3d, 0x60, 0xa4, 0xb3, 0x3c, 0x3e, 0x1c, 0x06, 0xdb, 0xdd, 0x9d, 0xe3, 0xf3, 0x48,
	0x5c, 0xc8, 0x33, 0xbc, 0xbb, 0x73, 0x4d, 0x34, 0x00, 0xb3, 0xbb, 0x23, 0x41, 0xbb, 0x82, 0x39,
	0x7e, 0x5e, 0xa7, 0xe2, 0x12, 0xad, 0x60, 0xae, 0x72, 0x2d, 0x66, 0x56, 0x30, 0x02, 0x03, 0x0f,
	0x07, 0xd1, 0x2f, 0x69, 0xe1, 0xef, 0xc9, 0x34, 0x1f, 0xdf, 0x24, 0x94, 0x6a, 0x81, 0xb1, 0x7a,
	0x8b, 0x07, 0x50, 0xc4, 0xf5, 0x5f, 0xb7, 0xe3, 0x3c, 0x11, 0x19, 0x19, 0xb1, 0x15, 0x07, 0x23,
	0xf6, 0x30, 0x14, 0xf1, 0xb3, 0xab, 0x54, 0x91, 0x11, 0xd7, 0x82, 0x60, 0xc4, 0x00, 0xd8, 0x52,
	0x44, 0xff, 0xb9, 0x9e, 0x0f, 0xa7, 0xa7, 0x71, 0x99, 0xe6, 0xf3, 0x31, 0x15, 0x8b, 0x23, 0x67,
	0x4a, 0x11, 0x8a, 0x43, 0x43, 0x02, 0x14, 0xb7, 0x8a, 0xa2, 0xac, 0xa7, 0x59, 0x6a, 0x48, 0xf8,
	0x48, 0x70, 0x48, 0x74, 0x50, 0xda, 0xdb, 0x8e, 0x48, 0xb2, 0x34, 0x0f, 0x7a, 0x03, 0x64, 0x88,
	0x37, 0x8b, 0x82, 0xb7, 0x45, 0xf4, 0xbe, 0x06, 0x0e, 0xe3, 0x52, 0xa5, 0x49, 0x5a, 0xc4, 0x79,
	0x5b, 0x7c, 0x53, 0x83, 0xaa, 0x43, 0x19, 0x9f, 0x1b, 0x03, 0x69, 0x70, 0xfb, 0xef, 0xa3, 0xe8,
	0x43, 0xec, 0xf7, 0x50, 0x94, 0xe7, 0xa9, 0xde, 0xc3, 0x55, 0xcd, 0x0c, 0x38, 0xfe, 0x3c, 0x6c,
	0xb4, 0xa3, 0x60, 0xa2, 0xf9, 0xd1, 0xf2, 0x8a, 0x10, 0xd8, 0xef, 0x47, 0x51, 0xb3, 0x57, 0xd0,
	0xfb, 0x39, 0x3f, 0x01, 0x61, 0x13, 0xe1, 0x6d, 0xe6, 0x3e, 0x0c, 0x10, 0x76, 0x9e, 0x6e, 0xfe,
	0xae, 0xb7, 0xa9, 0x63, 0x52, 0x43, 0x8b, 0x98, 0x79, 0x1a, 0x21, 0x38, 0xd0, 0xe9, 0xa9, 0xbc,
	0xa4, 0x03, 0xad, 0x25, 0xe1, 0x40, 0x81, 0xb0, 0x07, 0x47, 0x10, 0x28, 0x75, 0x70, 0xd4, 0x86,
	0x11, 0x3a, 0x38, 0xc2, 0x0c, 0x18, 0x96, 0xd1, 0xaf, 0xbb, 0x86, 0x9f, 0x4a, 0x79, 0x76, 0x1e,
	0x97, 0x67, 0xe3, 0x07, 0xbc, 0x72, 0xcb, 0x18, 0x47, 0xeb, 0x83, 0x58, 0x3b, 0x86, 0x5c, 0x87,
	0xf5, 0x2a, 0xff, 0xaa, 0xcc, 0xd0, 0x18, 0xf2, 0x6c, 0x00, 0xc2, 0x8c, 0x21, 0x06, 0xb5, 0xd3,
	0xa6, 0xeb, 0x6d, 0x2a, 0xf0, 0x56, 0xc5, 0x53, 0x9f, 0x0a, 0x6e, 0xab, 0x42, 0x60, 0x38, 0x85,
	0xf6, 0xca, 0xb8, 0x38, 0xa5, 0x53, 0x48, 0x8b, 0xc2, 0x29, 0xd4, 0x22, 0xb8, 0xbf, 0xa7, 0x22,
	0x2e, 0x93, 0x53, 0xba, 0xbf, 0x1b, 0x59, 0xb8, 0xbf, 0x0d, 0x63, 0x57, 0x75, 0xd7, 0xf0, 0x74,
	0x71, 0x52, 0x25, 0x65, 0x7a, 0x22, 0xc6, 0xeb, 0xbc, 0xb6, 0x81, 0x98, 0x55, 0x9d, 0x85, 0xed,
	0xc1, 0x12, 0xf8, 0x6c, 0x65, 0xfb, 0xb3, 0x0a, 0x1d, 0x2c, 0xb5, 0x36, 0x1c, 0x82, 0x39, 0x58,
	0xa2, 0x49, 0xdc, 0xbc, 0xbd, 0x52, 0x2e, 0x8a, 0xaa, 0xa7, 0x79, 0x08, 0x0a, 0x37, 0xaf, 0x0b,
	0x83, 0xcf, 0xab, 0xe8, 0x37, 0xdd, 0x47, 0xfa, 0x2a, 0xaf, 0x8c, 0xd7, 0x0d, 0xfe, 0x39, 0x39,
	0x18, 0x73, 0x44, 0x13, 0xc0, 0xed, 0x12, 0xdb, 0x7a, 0x56, 0x3b, 0x42, 0xc5, 0x69, 0x56, 0x8d,
	0x57, 0x69, 0x1b, 0xad, 0x9c, 0x59, 0x62, 0x29, 0x0e, 0x0f, 0xa1, 0x9d, 0x45, 0x91, 0xa5, 0x49,
	0xf7, 0xac, 0x0e, 0x74, 0x8d, 0x38, 0x3c, 0x84, 0x5c, 0x0c, 0x4f, 0x09, 0x53, 0xa1, 0x9a, 0xff,
	0x39, 0xbe, 0x2e, 0x04, 0x3d, 0x25, 0x78, 0x48, 0x78, 0x4a, 0xc0, 0x28, 0x6e, 0xcf, 0x54, 0xa8,
	0xe7, 0xf1, 0xb5, 0x5c, 0x30, 0x53, 0x82, 0x11, 0x87, 0xdb, 0xe3, 0x62, 0x76, 0xe1, 0x36, 0x1e,
	0xf6, 0x73, 0x25, 0xca, 0x3c, 0xce, 0x76, 0xb3, 0x78, 0x5e, 0x8d, 0x99, 0x71, 0xe3, 0x53, 0xcc,
	0xc2, 0xcd, 0xd3, 0xc4, 0x63, 0xdc, 0xaf, 0x76, 0xe3, 0x0b, 0x59, 0xa6, 0x8a, 0x7f, 0x8c, 0x16,
	0xe9, 0x7d, 0x8c, 0x1e, 0x4a, 0x7a, 0xdb, 0x2a, 0x93, 0xd3, 0xf4, 0x42, 0xcc, 0x02, 0xde, 0x5a,
	0x64, 0x80, 0x37, 0x07, 0x25, 0x3a, 0x6d, 0x2a, 0x17, 0x65, 0x22, 0xd8, 0x4e, 0x6b, 0xc4, 0xbd,
	0x9d, 0x66, 0x30, 0xf0, 0xf0, 0x57, 0xa3, 0xe8, 0xb7, 0x1a, 0xa9, 0x7b, 0x80, 0xb6, 0x13, 0x57,
	0xa7, 0x27, 0x32, 0x2e, 0x67, 0xe3, 0x8f, 0x29, 0x3b, 0x24, 0x6a, 0x5c, 0x3f, 0x5e, 0x46, 0x05,
	0x3f, 0xd6, 0xe7, 0x69, 0xe5, 0x8c, 0x38, 0xf2, 0xb1, 0x7a, 0x48, 0xf8, 0xb1, 0x62, 0x14, 0x4f,
	0x20, 0x5a, 0xde, 0x6c, 0x56, 0x57, 0x59, 0x7d, 0x7f, 0xc7, 0xba, 0xd6, 0xcb, 0xe1, 0xf9, 0xb1,
	0x16, 0xfa, 0xd9, 0xb2, 0xc1, 0xd9, 0xa0, 0x33, 0x66, 0x32, 0x14, 0x67, 0x3d, 0x9b, 0x51, 0x11,
	0xf6, 0xdc, 0x19, 0x19, 0x93, 0xa1, 0x38, 0xe3, 0xd9, 0x99, 0xd6, 0x42, 0x9e, 0x89, 0xa9, 0x6d,
	0x32, 0x14, 0xc7, 0x09, 0xb4, 0x55, 0x14, 0xd9, 0xf5, 0xb1, 0x38, 0x2f, 0x32, 0x36, 0x81, 0x3c,
	0x24, 0x9c, 0x40, 0x18, 0xc5, 0xd5, 0xcf, 0xb1, 0xac, 0x6b, 0x2b, 0xb2, 0xfa, 0xd1, 0xa2, 0x70,
	0xf5, 0xd3, 0x22, 0xb8, 0x60, 0x38, 0x96, 0xdb, 0x32, 0xcb, 0x44, 0xa2, 0xba, 0x37, 0x51, 0x46,
	0xd3, 0x12, 0xe1, 0x82, 0x01, 0x91, 0xf6, 0xc4, 0xa1, 0xad, 0xd5, 0xe3, 0x52, 0x3c, 0xbd, 0x7e,
	0x9e, 0xe6, 0x67, 0x63, 0x7a, 0x6d, 0xb4, 0x00, 0x73, 0xe2, 0x40, 0x82, 0x78, 0x4f, 0xf0, 0x2a,
	0x9f, 0x49, 0x7a, 0x4f, 0x50, 0x4b, 0xc2, 0x7b, 0x02, 0x20, 0xb0, 0xc9, 0x23, 0xc1, 0x99, 0xac,
	0x25, 0x61, 0x93, 0x40, 0x50, 0xf3, 0x01, 0x1c, 0xed, 0xb1, 0xf3, 0x01, 0x3a, 0xcc, 0x5b, 0xeb,
	0xe5, 0x70, 0x86, 0xb6, 0x9b, 0x83, 0x5d, 0xa1, 0x92, 0x53, 0x3a, 0x43, 0x3d, 0x24, 0x9c, 0xa1,
	0x18, 0xc5, 0x4d, 0x3a, 0x96, 0x66, 0x73, 0xb3, 0x4a, 0xe7, 0x47, 0x67, 0x63, 0xb3, 0xd6, 0xcb,
	0xe1, 0x72, 0x7d, 0xff, 0x5c, 0x3f, 0x33, 0x32, 0xc9, 0x1b, 0x59, 0xb8, 0x5c, 0x37, 0x0c, 0x8e,
	0xbe, 0x11, 0xd4, 0x8f, 0x93, 0x8e, 0xde, 0xca, 0xc3, 0xd1, 0x7b, 0x1c, 0x38, 0xf9, 0xd7, 0x51,
	0x74, 0xd3, 0xf5, 0x72, 0x20, 0xeb, 0x31, 0xf2, 0x3a, 0xce, 0xd2, 0x59, 0xac, 0xc4, 0xb1, 0x3c,
	0x13, 0x39, 0xda, 0xef, 0xfb, 0xd1, 0x36, 0xfc, 0xc4, 0x53, 0x60, 0xf6, 0xfb, 0x83, 0x14, 0x71,
	0x9e, 0x34, 0xf4, 0xab, 0x4a, 0x6c, 0xc7, 0x15, 0x33, 0x93, 0x79, 0x48, 0x38, 0x4f, 0x30, 0x8a,
	0x8b, 0xb6, 0x46, 0xfe, 0xec, 0xaa, 0x10, 0x65, 0x2a, 0xf2, 0x44, 0xd0, 0x45, 0x1b, 0xa6, 0xc2,
	0x45, 0x1b, 0x41, 0x77, 0xb6, 0xc3, 0x66, 0x72, 0xea, 0x5e, 0x26, 0x63, 0x22, 0x70, 0x99, 0xcc,
	0xa0, 0xb8, 0x91, 0x16, 0x20, 0x8f, 0x94, 0x3a, 0x56, 0x82, 0x47, 0x4a, 0x3c, 0xdd, 0x39, 0x64,
	0x30, 0xcc, 0xb4, 0x1e, 0x26, 0x3d, 0xa1, 0x4f, 0xdd, 0xe1, 0xb2, 0x3e, 0x88, 0xa5, 0x4f, 0x35,
	0x8e, 0x44, 0x16, 0xeb, 0x25, 0x24, 0x70, 0x74, 0xd0, 0x32, 0x43, 0x4e, 0x35, 0x1c, 0x16, 0x1c,
	0xfe, 0xc5, 0x28, 0xba, 0x41, 0x79, 0x7c, 0x59, 0x68, 0xbf, 0x8f, 0xfa, 0x6d, 0x35, 0x24, 0x73,
	0x5b, 0x1e, 0xd6, 0x80, 0x18, 0xfe, 0x24, 0xfa, 0xa0, 0x15, 0xd9, 0xcb, 0x74, 0x08, 0xc0, 0xaf,
	0x22, 0x4c, 0xfc, 0x98, 0x33, 0xee, 0x37, 0x07, 0xf3, 0xb6, 0x40, 0xf7, 0xe3, 0xaa, 0x50, 0x81,
	0x6e, 0x6c, 0x80, 0x98, 0x29, 0xd0, 0x09, 0x0c, 0xaf, 0xd4, 0x2d, 0x52, 0x8f, 0x13, 0x6a, 0x8e,
	0x33, 0x26, 0xdc, 0x51, 0x72, 0xaf, 0x1f, 0xc4, 0xb9, 0xd3, 0x8a, 0xa1, 0x2e, 0x7e, 0x10, 0xb2,
	0x80, 0x6a, 0xe3, 0xf5, 0x41, 0x2c, 0x38, 0xfc, 0xb3, 0xe8, 0xfb, 0x9d, 0x86, 0xed, 0x8a, 0x58,
	0x2d, 0x4a, 0x31, 0x1b, 0x6f, 0xf6, 0xc4, 0xdd, 0x82, 0xc6, 0xf5, 0xa3, 0xe1, 0x0a, 0xe0, 0xff,
	0x6f, 0x46, 0xd1, 0x0f, 0x7c, 0xae, 0xe9, 0x62, 0x13, 0xc3, 0xe3, 0x90, 0x49, 0x9f, 0x35, 0x61,
	0x3c, 0x59, 0x4a, 0xa7, 0xb3, 0x07, 0x73, 0x13, 0x79, 0xeb, 0x22, 0x4e, 0xb3, 0xf8, 0x24, 0x13,
	0xe4, 0x1e, 0xcc, 0xcb, 0x4d, 0x83, 0x06, 0xf7, 0x60, 0xac, 0x4a, 0x67, 0x96, 0xd4, 0xe3, 0xcd,
	0xa9, 0xdd, 0x1f, 0xf2, 0xa3, 0x92, 0x28, 0xdd, 0x37, 0x06, 0xd2, 0xe0, 0x56, 0xb5, 0x67, 0x57,
	0xf5, 0x9f, 0xdd, 0x24, 0xa7, 0xbc, 0x82, 0x2a, 0x91, 0xe9, 0x1b, 0x03, 0x69, 0xf0, 0xfa, 0xa7,
	0xd1, 0x07, 0x5d, 0xaf, 0xb0, 0x28, 0x6c, 0xf6, 0x9a, 0x42, 0xeb, 0xc2, 0xa3, 0xe1, 0x0a, 0xb6,
	0xd4, 0xff, 0x22, 0xad, 0x94, 0x2c, 0xaf, 0xa7, 0xa7, 0xf2, 0xb2, 0x7d, 0x61, 0xd4, 0x1f, 0xad,
	0x00, 0x4c, 0x1c, 0x82, 0x29, 0xf5, 0x69, 0xb2, 0xe3, 0xca, 0xbe, 0x58, 0x5a, 0x31, 0xae, 0x1c,
	0xa2, 0xc7, 0x95, 0x4f, 0xda, 0xb9, 0xaa, 0x6d, 0x95, 0x7d, 0x0b, 0x76, 0x8d, 0x0e, 0xb5, 0xfb,
	0x26, 0xec, 0xbd, 0x7e, 0xd0, 0x6e, 0xbf, 0x76, 0xd3, 0x4c, 0xbc, 0x7c, 0xfb, 0x36, 0x93, 0xf1,
	0x0c, 0x6d, 0xbf, 0x6a, 0xc9, 0x04, 0x44, 0xcc, 0xf6, 0x0b, 0x21, 0xb6, 0xe8, 0xac, 0x05, 0xfa,
	0x6e, 0xa6, 0x35, 0xbd, 0xda, 0xd5, 0x73, 0xe5, 0x4c, 0xd1, 0x49, 0x71, 0x76, 0xc1, 0xa8, 0xa5,
	0xf5, 0x10, 0x6c, 0x7d, 0xdc, 0xed, 0xea, 0x3a, 0x62, 0x66, 0xc1, 0x20, 0x30, 0xbb, 0x3f, 0xaa,
	0x85, 0xaf, 0x0a, 0x6d, 0xfc, 0x56, 0x57, 0xab, 0x91, 0x30, 0xfb, 0x23, 0x9f, 0xb0, 0x75, 0x7e,
	0xfd, 0xf7, 0x1d, 0x79, 0x99, 0x6b, 0xa3, 0xc4, 0xd3, 0x6c, 0x65, 0x4c, 0x9d, 0x8f, 0x19, 0x30,
	0xfc, 0xd3, 0xe8, 0x17, 0xb5, 0xe1, 0x52, 0x16, 0xe3, 0x15, 0x42, 0xa1, 0x74, 0x5e, 0x3b, 0xb9,
	0xc9, 0xca, 0xed, 0xdb, 0x53, 0xa6, 0xff, 0x5e, 0x55, 0xf1, 0x5c, 0xa0, 0xb7, 0xa7, 0x6c, 0xaf,
	0x68, 0x29, 0xf3, 0xf6, 0x54, 0x97, 0xb2, 0x6f, 0x04, 0xd5, 0xb2, 0x03, 0x39, 0x03, 0xeb, 0x44,
	0x0b, 0x8d, 0x90, 0x79, 0x23, 0xa8, 0x03, 0xd9, 0xf3, 0xfb, 0x83, 0xf8, 0x22, 0x9d, 0x9b, 0xc9,
	0xbf, 0x99, 0x43, 0x2a, 0x74, 0x7e, 0x6f, 0x99, 0x89, 0x03, 0x31, 0xe7, 0xf7, 0x2c, 0x0c, 0x3e,
	0xff, 0x65, 0x14, 0xdd, 0xb2, 0xcc, 0x5e, 0x7b, 0xac, 0xb2, 0x9f, 0xbf, 0x95, 0x6f, 0x52, 0x75,
	0x5a, 0xef, 0xe3, 0xab, 0xf1, 0x67, 0x9c, 0x49, 0x9a, 0x37, 0xa1, 0x7c, 0xbe, 0xb4, 0x9e, 0xad,
	0xe6, 0xda, 0xe3, 0x16, 0x7b, 0xb7, 0xd5, 0x68, 0xa0, 0x6a, 0xce, 0x9c, 0xca, 0x60, 0x8e, 0xa9,
	0xe6, 0x42, 0xbc, 0xed, 0x62, 0xe3, 0x3c, 0x93, 0x39, 0xee, 0x62, 0x6b, 0xa1, 0x16, 0x32, 0x5d,
	0xdc, 0x81, 0xec, 0xdc, 0xd8, 0x8a, 0x9a, 0x93, 0x81, 0xad, 0x2c, 0x43, 0x73, 0xa3, 0x51, 0x35,
	0x00, 0x33, 0x37, 0x92, 0x20, 0xf8, 0x39, 0x8a, 0xbe, 0x53, 0x3f, 0xd2, 0xc3, 0x52, 0x5c, 0xa4,
	0x02, 0x5f, 0xc3, 0x3a, 0x12, 0x66, 0xfc, 0xfb, 0x84, 0x1d, 0x59, 0xaf, 0xf2, 0xaa, 0xc8, 0xe2,
	0xea, 0x14, 0x2e, 0xe6, 0xfc, 0x36, 0xb7, 0x42, 0x7c, 0x35, 0x77, 0xb7, 0x87, 0xb2, 0x13, 0x6f,
	0x2b, 0x33, 0x53, 0xcc, 0x2a, 0xad, 0xda, 0x99, 0x66, 0xd6, 0x7a, 0x39, 0x7b, 0x34, 0xb9, 0x17,
	0x67, 0x99, 0x28, 0xaf, 0x5b, 0xd9, 0x8b, 0x38, 0x4f, 0xdf, 0x8a, 0x4a, 0xa1, 0xa3, 0x49, 0xa0,
	0x26, 0x18, 0x63, 0x8e, 0x26, 0x03, 0xb8, 0xad, 0xac, 0x91, 0xe7, 0xfd, 0x7c, 0x26, 0xae, 0x50,
	0x65, 0x8d, 0xed, 0x68, 0x86, 0xa9, 0xac, 0x39, 0xd6, 0x2e, 0x8f, 0x4f, 0x33, 0x99, 0x9c, 0xc1,
	0x12, 0xe0, 0x77, 0xb0, 0x96, 0xe0, 0x35, 0xe0, 0x76, 0x08, 0xb1, 0x8b, 0x80, 0x16, 0x1c, 0x89,
	0x22, 0x8b, 0x13, 0x7c, 0x17, 0xdf, 0xe8, 0x80, 0x8c, 0x59, 0x04, 0x30, 0x83, 0xc2, 0x85, 0x3b,
	0x7e, 0x2a, 0x5c, 0x74, 0xc5, 0x7f, 0x3b, 0x84, 0xd8, 0x65, 0x50, 0x0b, 0xa6, 0x45, 0x96, 0x2a,
	0x34, 0x0c, 0x1a, 0x0d, 0x2d, 0x61, 0x86, 0x81, 0x4f, 0x20, 0x93, 0x2f, 0x44, 0x39, 0x17, 0xa4,
	0x49, 0x2d, 0x09, 0x9a, 0x6c, 0x09, 0xfb, 0xf6, 0x51, 0xd3, 0x76, 0x59, 0x5c, 0xa3, 0xb7, 0x8f,
	0xa0, 0x59, 0xb2, 0xb8, 0x66, 0xde, 0x3e, 0xf2, 0x00, 0x14, 0xe2, 0x61, 0x5c, 0x29, 0x3a, 0x44,
	0x2d, 0x09, 0x86, 0xd8, 0x12, 0x76, 0x8d, 0x6e, 0x42, 0x5c, 0x28, 0xb4, 0x46, 0x43, 0x00, 0xce,
	0x55, 0xe1, 0x4d, 0x56, 0x6e, 0x67, 0x92, 0xa6, 0x57, 0x84, 0xda, 0x4d, 0x45, 0x36, 0xab, 0xd0,
	0x4c, 0x02, 0xcf, 0xbd, 0x95, 0x32, 0x33, 0x49, 0x97, 0x42, 0xa9, 0x04, 0x67, 0xb8, 0x54, 0xeb,
	0xd0, 0xf1, 0xed, 0xed, 0x10, 0x62, 0xe7, 0xa7, 0x36, 0xe8, 0xed, 0xb8, 0x2c, 0xd3, 0x7a, 0xf1,
	0x5f, 0xa5, 0x03, 0x6a, 0xe5, 0xcc, 0xfc, 0x44, 0x71, 0x68, 0x78, 0xb5, 0x13, 0x37, 0x15, 0x18,
	0x9e, 0xba, 0x3f, 0x0a, 0x32, 0xb6, 0xe2, 0xd4, 0x12, 0xe7, 0xae, 0x8b, 0x7a, 0x9a, 0xc4, 0x55,
	0xd7, 0x6a, 0x1f, 0xe6, 0xbc, 0xcf, 0x6c, 0x5c, 0xbc, 0x90, 0x17, 0xe2, 0x58, 0x3e, 0xbb, 0x4a,
	0x2b, 0x95, 0xe6, 0x73, 0x58, 0xb9, 0x9f, 0x30, 0x96, 0x28, 0x98, 0x79, 0x9f, 0xb9, 0x57, 0xc9,
	0x16, 0x10, 0x28, 0x96, 0x03, 0x71, 0x49, 0x16, 0x10, 0xd8, 0xa2, 0xe1, 0x98, 0x02, 0x22, 0xc4,
	0xdb, 0x33, 0x0d, 0xe3, 0x1c, 0x7e, 0xf4, 0x75, 0x2c, 0xdb, 0x5a, 0x8e, 0xb3, 0x86, 0x41, 0x66,
	0x5b, 0x19, 0x54, 0xb0, 0x7b, 0x3d, 0xe3, 0xdf, 0x0e, 0xb1, 0x7b, 0x8c, 0x9d, 0xee, 0x30, 0xbb,
	0x3f, 0x80, 0x24, 0x5c, 0xd9, 0x0b, 0x5b, 0xce, 0x55, 0xf7, 0xbe, 0xf6, 0xfe, 0x00, 0xd2, 0x39,
	0x1f, 0x71, 0x9b, 0xf5, 0x34, 0x4e, 0xce, 0xe6, 0xa5, 0x5c, 0xe4, 0xb3, 0x6d, 0x99, 0xc9, 0x12,
	0x9d, 0x8f, 0x78, 0x51, 0x23, 0x94, 0x39, 0x1f, 0xe9, 0x51, 0xb1, 0x15, 0x9c, 0x1b, 0xc5, 0x56,
	0x96, 0xce, 0xf1, 0xee, 0xd6, 0x33, 0xa4, 0x01, 0xa6, 0x82, 0x23, 0x41, 0x22, 0x89, 0x9a, 0xdd,
	0xaf, 0x4a, 0x93, 0x38, 0x6b, 0xfc, 0x6d, 0xf2, 0x66, 0x3c, 0xb0, 0x37, 0x89, 0x08, 0x05, 0xa2,
	0x9d, 0xc7, 0x8b, 0x32, 0xdf, 0xcf, 0x95, 0x64, 0xdb, 0xd9, 0x02, 0xbd, 0xed, 0x74, 0x40, 0x34,
	0xad, 0x1e, 0x8b, 0xab, 0x3a, 0x9a, 0xfa, 0x3f, 0xd4, 0xb4, 0x5a, 0xff, 0x7d, 0x02, 0xf2, 0xd0,
	0xb4, 0x8a, 0x38, 0xd4, 0x18, 0x70, 0xd2, 0x24, 0x4c, 0x40, 0xdb, 0x4f, 0x93, 0x7b, 0xfd, 0x20,
	0xed, 0x67, 0xaa, 0xae, 0x33, 0x11, 0xf2, 0xa3, 0x81, 0x21, 0x7e, 0x5a, 0xd0, 0x5e, 0x9c, 0x78,
	0xed, 0x39, 0x15, 0xc9, 0x59, 0xe7, 0xfd, 0x13, 0x3f, 0xd0, 0x06, 0x61, 0x2e, 0x4e, 0x18, 0x94,
	0xee, 0xa2, 0xfd, 0x44, 0xe6, 0xa1, 0x2e, 0xaa, 0xe5, 0x43, 0xba, 0x08, 0x38, 0xbb, 0xf9, 0x35,
	0x52, 0xc8, 0xcc, 0xa6, 0x9b, 0xd6, 0x19, 0x0b, 0x2e, 0xc4, 0x6c, 0x7e, 0x59, 0xd8, 0xd6, 0xe4,
	0xd8, 0xe7, 0x8b, 0xee, 0xfb, 0x9f, 0x1d, 0x2b, 0x2f, 0xf8, 0xf7, 0x3f, 0x39, 0x96, 0x6f, 0x64,
	0x93, 0x23, 0x3d, 0x56, 0xfc, 0x3c, 0x79, 0x38, 0x0c, 0xb6, 0x5b, 0x1e, 0xcf, 0xe7, 0x76, 0x26,
	0xe2, 0xb2, 0xf1, 0xba, 0x11, 0x30, 0x64, 0x31, 0x66, 0xcb, 0x13, 0xc0, 0xd1, 0x14, 0xe6, 0x79,
	0xde, 0x96, 0xb9, 0x12, 0xb9, 0xa2, 0xa6, 0x30, 0xdf, 0x18, 0x80, 0xa1, 0x29, 0x8c, 0x53, 0x40,
	0x79, 0xab, 0xcf, 0x83, 0x84, 0x3a, 0x88, 0xcf, 0xc9, 0x8a, 0xad, 0x39, 0xeb, 0x69, 0xe4, 0xa1,
	0xbc, 0x45, 0x1c, 0x1a, 0xf2, 0xfb, 0xe7, 0xf1, 0xdc, 0x78, 0x21, 0xb4, 0xb5, 0xbc, 0xe3, 0xe6,
	0x5e, 0x3f, 0x88, 0xfc, 0xbc, 0x4e, 0x67, 0x42, 0x06, 0xfc, 0x68, 0xf9, 0x10, 0x3f, 0x18, 0x44,
	0x95, 0x53, 0xdd, 0xda, 0x66, 0x37, 0xb5, 0x95, 0xcf, 0x60, 0x0f, 0x39, 0x61, 0x1e, 0x0a, 0xe2,
	0x42, 0x95, 0x13, 0xc3, 0xa3, 0xf1, 0xd1, 0x1e, 0x8e, 0x86, 0xc6, 0x87, 0x39, 0xfb, 0x1c, 0x32,
	0x3e, 0x28, 0x18, 0x7c, 0xfe, 0x31, 0x8c, 0x8f, 0x9d, 0x58, 0xc5, 0x75, 0xcd, 0xfc, 0x3a, 0x15,
	0x97, 0xb0, 0x09, 0x25, 0xda, 0xdb, 0x52, 0x13, 0xfd, 0x8b, 0x17, 0xb4, 0x23, 0xdd, 0x1c, 0xcc,
	0x07, 0x7c, 0x43, 0x75, 0xde, 0xeb, 0x1b, 0x95, 0xe9, 0x9b, 0x83, 0xf9, 0x80, 0x6f, 0xf8, 0x29,
	0x5d, 0xaf, 0x6f, 0xf4, 0x7b, 0xba, 0xcd, 0xc1, 0x3c, 0xf8, 0xfe, 0xcb, 0x51, 0x74, 0xa3, 0xe3,
	0xbc, 0xae, 0x81, 0x12, 0x95, 0x5e, 0x08, 0xaa, 0x94, 0xf3, 0xed, 0x19, 0x34, 0x54, 0xca, 0xf1,
	0x2a, 0xce, 0xf7, 0x17, 0xa8, 0x28, 0x0e, 0x65, 0x95, 0xea, 0x8b, 0xe3, 0x27, 0x03, 0x8c, 0xb6,
	0x70, 0x68, 0xc3, 0x12, 0x52, 0xb2, 0xd7, 0x6e, 0x1e, 0x6a, 0x5f, 0xf5, 0x7c, 0x18, 0xb0, 0xd7,
	0x7d, 0xe3, 0x73, 0x63, 0x20, 0x6d, 0x2f, 0xc0, 0x3c, 0xc6, 0xbd, 0x79, 0x0b, 0xf5, 0x2a, 0x79,
	0xf9, 0xf6, 0x68, 0xb8, 0x02, 0xb8, 0xff, 0xeb, 0xb6, 0xa6, 0xc7, 0xfe, 0x61, 0x10, 0x3c, 0x1e,
	0x62, 0x11, 0x0d, 0x84, 0x27, 0x4b, 0xe9, 0x40, 0x20, 0xff, 0x31, 0x8a, 0x6e, 0x93, 0x81, 0xf8,
	0x77, 0xb0, 0xbf, 0x3d, 0xc4, 0x36, 0x7d, 0x17, 0xfb, 0xe3, 0x6f, 0xa3, 0x0a, 0xd1, 0xfd, 0x7d,
	0xbb, 0xb5, 0x6e, 0x35, 0xf4, 0xeb, 0xf8, 0x2f, 0xcb, 0x99, 0x28, 0x61, 0xc4, 0x86, 0x92, 0xce,
	0xc2, 0x78, 0xdc, 0x7e, 0xba, 0xa4, 0x96, 0xf3, 0xad, 0x10, 0x0f, 0x86, 0x5f, 0x26, 0x39, 0xf1,
	0x84, 0x2c, 0x3b, 0x34, 0x0e, 0xe8, 0xb3, 0x65, 0xd5, 0xb8, 0x91, 0xec, 0xc0, 0xfa, 0xa7, 0xc7,
	0x4f, 0x06, 0x1a, 0xf6, 0x7e, 0x8c, 0xfc, 0xc9, 0x72, 0x4a, 0x10, 0xcb, 0x7f, 0x8d, 0xa2, 0xbb,
	0x1e, 0x6b, 0x6f, 0x1a, 0xd0, 0x79, 0xc8, 0x4f, 0x02, 0xf6, 0x39, 0x25, 0x13, 0xdc, 0xef, 0x7c,
	0x3b, 0x65, 0xfb, 0x61, 0x0d, 0x4f, 0x65, 0x37, 0xcd, 0x94, 0x28, 0xbb, 0x1f, 0xd6, 0xf0, 0xed,
	0x36, 0xd4, 0x84, 0xff, 0xb0, 0x46, 0x00, 0x77, 0x3e, 0xac, 0x41, 0x78, 0x26, 0x3f, 0xac, 0x41,
	0x5a, 0x0b, 0x7e, 0x58, 0x23, 0xac, 0xc1, 0x2d, 0x3e, 0x6d, 0x08, 0xcd, 0x89, 0xf6, 0x20, 0x8b,
	0xfe, 0x01, 0xf7, 0xe3, 0x65, 0x54, 0x98, 0xe5, 0xb7, 0xe1, 0xf4, 0x9b, 0x61, 0x03, 0x9e, 0xa9,
	0xf7, 0x76, 0xd8, 0xe6, 0x60, 0x1e, 0x7c, 0xff, 0x0c, 0xf6, 0x3d, 0x66, 0xb1, 0x91, 0xa5, 0xfe,
	0xa8, 0xca, 0x7a, 0x68, 0xf1, 0xa8, 0x2d, 0xb8, 0x3d, 0xff, 0x70, 0x18, 0xcc, 0x34, 0xb7, 0x26,
	0xa0, 0xd3, 0x27, 0x7d, 0x86, 0x50, 0x97, 0x6f, 0x0e, 0xe6, 0x99, 0x45, 0xae, 0xf1, 0xdd, 0xf4,
	0xf6, 0x00, 0x63, 0x7e, 0x5f, 0x3f, 0x1a, 0xae, 0x60, 0x5f, 0x6d, 0xe9, 0xb8, 0xd7, 0xfd, 0xdc,
	0xfb, 0x04, 0xbd, 0x5e, 0xde, 0x18, 0x48, 0x87, 0x8a, 0x1b, 0x77, 0x79, 0xef, 0x2b, 0x6e, 0xc8,
	0x25, 0xfe, 0x93, 0xe5, 0x94, 0x20, 0x96, 0x7f, 0x1e, 0x45, 0x37, 0xd9, 0x58, 0x20, 0x0b, 0x3e,
	0x1b, 0x6a, 0x19, 0x65, 0xc3, 0xe7, 0x4b, 0xeb, 0x41, 0x50, 0xff, 0x36, 0x8a, 0x6e, 0x05, 0x82,
	0x6a, 0xd2, 0x63, 0x09, 0xeb, 0x7e, 0x9a, 0xfc, 0x68, 0x79, 0x45, 0x6e, 0xb1, 0x77, 0xf1, 0x69,
	0xf7, 0x7b, 0x13, 0x01, 0xdb, 0x53, 0xfe, 0x7b, 0x13, 0xfd, 0x5a, 0xf8, 0xf0, 0xa7, 0x2e, 0x49,
	0x60, 0x5f, 0x44, 0x1d, 0xfe, 0xe8, 0x8a, 0x05, 0xed, 0x87, 0xd6, 0x7a, 0x39, 0xca, 0xc9, 0xb3,
	0xab, 0x22, 0xce, 0x67, 0xbc, 0x93, 0x46, 0xde, 0xef, 0xc4, 0x70, 0xf8, 0xd0, 0xac, 0x96, 0x1e,
	0xc9, 0x76, 0x93, 0x77, 0x9f, 0xd3, 0x37, 0x48, 0xf0, 0xd0, 0xac, 0x83, 0x32, 0xde, 0xa0, 0xa2,
	0x0d, 0x79, 0x43, 0x85, 0xec, 0x83, 0x21, 0x28, 0xda, 0x3e, 0x18, 0x6f, 0xe6, 0x2c, 0xfe, 0x61,
	0xc8, 0x4a, 0xe7, 0x3c, 0x7e, 0x63, 0x20, 0xcd, 0xb8, 0x9d, 0x0a, 0xf5, 0x85, 0x88, 0x67, 0xa2,
	0x0c, 0xba, 0x35, 0xd4, 0x20, 0xb7, 0x2e, 0x4d, 0xb9, 0xdd, 0x96, 0xd9, 0xe2, 0x3c, 0x87, 0xce,
	0x64, 0xdd, 0xba, 0x54, 0xbf, 0x5b, 0x44, 0xe3, 0xe3, 0x42, 0xeb, 0x56, 0x17, 0x97, 0x0f, 0xc2,
	0x66, 0xbc, 0x9a, 0x72, 0x7d, 0x10, 0xcb, 0xb7, 0x13, 0xd2, 0xa8, 0xa7, 0x9d, 0x28, 0x93, 0x36,
	0x06, 0xd2, 0xf8, 0xdc, 0xce, 0x71, 0x6b, 0xf2, 0x69, 0xb3, 0xc7, 0x56, 0x27, 0xa5, 0x1e, 0x0d,
	0x57, 0xc0, 0xa7, 0xa4, 0x90, 0x55, 0xf5, 0xae, 0x68, 0x37, 0xcd, 0xb2, 0xf1, 0x7a, 0x20, 0x4d,
	0x5a, 0x28, 0x78, 0x4a, 0x4a, 0xc0, 0x4c, 0x26, 0xb7, 0xa7, 0x8a, 0xf9, 0xb8, 0xcf, 0x8e, 0xa6,
	0x06, 0x65, 0xb2, 0x4b, 0xa3, 0xd3, 0x36, 0xe7, 0x51, 0x9b, 0xd6, 0x4e, 0xc2, 0x0f, 0xae, 0xd3,
	0xe0, 0xcd, 0xc1, 0x3c, 0xba, 0x86, 0xd7, 0x94, 0x5e, 0x59, 0xee, 0x70, 0x26, 0xbc, 0x95, 0xe4,
	0x6e, 0x0f, 0x85, 0x4e, 0x2c, 0x9b, 0x61, 0xf4, 0x26, 0x9d, 0xcd, 0x85, 0x22, 0x6f, 0x90, 0x5c,
	0x20, 0x78, 0x83, 0x84, 0x40, 0xd4, 0x75, 0xcd, 0xdf, 0xa7, 0x42, 0x1d, 0xc7, 0xe5, 0x5c, 0xa8,
	0xfd, 0x19, 0xd5, 0x75, 0xa0, 0xec, 0x50, 0xa1, 0xae, 0x23, 0x69, 0x34, 0x1b, 0x18, 0xb7, 0xf0,
	0x7b, 0xea, 0x07, 0x21, 0x33, 0xe8, 0x47, 0xd5, 0xeb, 0x83, 0x58, 0xb4, 0xa2, 0x58, 0x87, 0xe9,
	0x79, 0xaa, 0xa8, 0x15, 0xc5, 0xb1, 0x51, 0x23, 0xa1, 0x15, 0xa5, 0x8b, 0x72, 0xcd, 0xab, 0x6b,
	0x84, 0xfd, 0x59, 0xb8, 0x79, 0x0d, 0x33, 0xac, 0x79, 0x86, 0xed, 0x5c, 0x78, 0xe6, 0x26, 0x65,
	0xd4, 0x29, 0x6c, 0x95, 0x89, 0xdc, 0xd6, 0x3f, 0x31, 0xc4, 0x60, 0x68, 0xd6, 0xe1, 0x14, 0x9c,
	0x5f, 0xb1, 0x18, 0xae, 0xbd, 0x93, 0x2d, 0x0a, 0x11, 0x97, 0x71, 0x9e, 0x90, 0x5b, 0x53, 0x6d,
	0xb0, 0x43, 0x86, 0xb6, 0xa6, 0xac, 0x06, 0xba, 0x4e, 0xf7, 0x7f, 0x1c, 0x48, 0x0c, 0x05, 0xf3,
	0x2b, 0x3c, 0xff, 0xb7, 0x81, 0xf7, 0x07, 0x90, 0xf8, 0x3a, 0xbd, 0x05, 0xcc, 0xa1, 0x7c, 0xe3,
	0xf4, 0xe3, 0x80, 0x29, 0x1f, 0x0d, 0x6d, 0x83, 0x79, 0x15, 0x94, 0xd4, 0xa6, 0xc0, 0x15, 0xea,
	0xa7, 0xe2, 0x9a, 0x4a, 0x6a, 0x5b, 0x9f, 0x6a, 0x24, 0x94, 0xd4, 0x5d, 0x14, 0xd5, 0x99, 0xee,
	0x3e, 0x68, 0x35, 0xa0, 0xef, 0x6e, 0x7d, 0xd6, 0x7a, 0x39, 0x34, 0x72, 0x76, 0xd2, 0x0b, 0xef,
	0x0e, 0x83, 0x08, 0x74, 0x27, 0xbd, 0xa0, 0xaf, 0x30, 0xd6, 0x07, 0xb1, 0xf8, 0xaa, 0x3e, 0x56,
	0xe2, 0xaa, 0xbd, 0x43, 0x27, 0xc2, 0xd5, 0xf2, 0xce, 0x25, 0xfa, 0xbd, 0x7e, 0xd0, 0xbe, 0x18,
	0x7b, 0x58, 0xca, 0x44, 0x54, 0x15, 0x7c, 0x84, 0xcb, 0x7f, 0xf3, 0x08, 0x64, 0x13, 0xf4, 0x09,
	0xae, 0x3b, 0x61, 0x08, 0x6c, 0x7f, 0x11, 0xbd, 0xfb, 0x5c, 0xce, 0xa7, 0x22, 0x9f, 0x8d, 0x7f,
	0xe8, 0xbf, 0x8a, 0x2a, 0xe7, 0x93, 0xfa, 0xcf, 0xc6, 0xde, 0x0a, 0x27, 0xb6, 0x2f, 0xd3, 0xed,
	0x88, 0x93, 0xc5, 0x7c, 0xaa, 0x62, 0xfc, 0x29, 0x2f, 0xfd, 0xf7, 0x49, 0x2d, 0x60, 0x5e, 0xa6,
	0xf3, 0x00, 0x64, 0xef, 0xb8, 0x14, 0x82, 0xb4, 0x57, 0x0b, 0x82, 0xf6, 0x00, 0xb0, 0xab, 0xae,
	0xb1, 0x57, 0x17, 0xb6, 0xf8, 0xe5, 0x37, 0xab, 0xa3, 0xa5, 0xcc, 0xaa, 0xdb, 0xa5, 0x6c, 0x32,
	0x34, 0xcd, 0xd7, 0x9f, 0x59, 0x58, 0x9c, 0x9f, 0xc7, 0xe5, 0x35, 0x4a, 0x06, 0x68, 0xa5, 0x03,
	0x30, 0xc9, 0x40, 0x82, 0x36, 0xcb, 0xdb, 0xc7, 0x9c, 0x9c, 0xed, 0xc9, 0x52, 0x2e, 0x54, 0x9a,
	0x8b, 0x0a, 0x65, 0xb9, 0x79, 0xa0, 0x2e, 0xc3, 0x64, 0x39, 0xc7, 0xda, 0xaa, 0x50, 0x13, 0xcd,
	0x7b, 0x79, 0xfa, 0x53, 0x96, 0x95, 0x92, 0x25, 0xbe, 0x1b, 0x6c, 0xac, 0x60, 0x88, 0xa9, 0x0a,
	0x59, 0x18, 0xf5, 0xfd, 0x61, 0x9a, 0xcf, 0xc9, 0xbe, 0x3f, 0x74, 0x3f, 0xdc, 0x76, 0x8b, 0x07,
	0xec, 0xfc, 0xde, 0x3c, 0xb4, 0xe6, 0x73, 0x36, 0xf0, 0x5b, 0x41, 0xf2, 0xa1, 0xbb, 0x04, 0x33,
	0xbf, 0xd3, 0x24, 0x72, 0xf5, 0xb2, 0x10, 0xb9, 0x98, 0xb5, 0x6f, 0x9f, 0x51, 0xae, 0x3c, 0x22,
	0xe8, 0x0a, 0x93, 0x36, 0x15, 0x5e, 0x08, 0x55, 0xa6, 0x49, 0x35, 0x15, 0xea, 0x30, 0x2e, 0xe3,
	0x73, 0xa1, 0x44, 0x89, 0x53, 0x01, 0x90, 0x89, 0xc7, 0x30, 0xa9, 0xc0, 0xb1, 0xe0, 0xf0, 0x77,
	0xa3, 0xef, 0xd5, 0x33, 0xa1, 0xc8, 0xe1, 0xdb, 0xda, 0xcf, 0xf4, 0x47, 0xf9, 0xc7, 0xef, 0x1b,
	0x1b, 0x53, 0x55, 0x8a, 0xf8, 0xbc, 0xb5, 0xfd, 0x9e, 0xf9, 0xbb, 0x06, 0x1f, 0x8d, 0xea, 0x75,
	0xe0, 0x40, 0xaa, 0xf4, 0x6d, 0xbd, 0xf1, 0x80, 0x4b, 0x1e, 0xb4, 0x0e, 0xb8, 0xe2, 0x49, 0xe0,
	0x97, 0xe5, 0x14, 0x67, 0x47, 0xa2, 0x2b, 0x3d, 0x12, 0x45, 0x86, 0x47, 0xa2, 0xa7, 0xad, 0x01,
	0x66, 0x24, 0x92, 0xa0, 0x5d, 0xd4, 0x5c, 0xf1, 0xb1, 0x08, 0x37, 0xe6, 0x58, 0x0c, 0x6b, 0xcc,
	0xb1, 0xf7, 0xfa, 0x7a, 0xbd, 0x27, 0x2b, 0x65, 0x3c, 0x4b, 0xe2, 0x4a, 0x1d, 0xc6, 0xd7, 0x99,
	0x8c, 0x67, 0xfa, 0x61, 0xe2, 0x3d, 0x59, 0xcb, 0x4c, 0x5c, 0x88, 0xdb, 0x93, 0x71, 0x70, 0xe3,
	0xf3, 0xe9, 0x87, 0xff, 0xf3, 0xf5, 0xca, 0xe8, 0xab, 0xaf, 0x57, 0x46, 0xff, 0xff, 0xf5, 0xca,
	0xe8, 0x9f, 0xbe, 0x59, 0x79, 0xe7, 0xab, 0x6f, 0x56, 0xde, 0xf9, 0xdf, 0x6f, 0x56, 0xde, 0xf9,
	0xf2, 0x5d, 0xf8, 0x27, 0x1c, 0x4e, 0x7e, 0x41, 0xff, 0x43, 0x0c, 0x4f, 0x7e, 0x1e, 0x00, 0x00,
	0xff, 0xff, 0xad, 0xa3, 0x91, 0xda, 0xe6, 0x61, 0x00, 0x00,
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the gomobile package it is being compiled against.

// ClientCommandsHandler is the handler API for ClientCommands service.
var clientCommandsHandler ClientCommandsHandler

type ClientCommandsHandler interface {
	AppGetVersion(context.Context, *pb.RpcAppGetVersionRequest) *pb.RpcAppGetVersionResponse
	AppSetDeviceState(context.Context, *pb.RpcAppSetDeviceStateRequest) *pb.RpcAppSetDeviceStateResponse
	AppShutdown(context.Context, *pb.RpcAppShutdownRequest) *pb.RpcAppShutdownResponse
	// Wallet
	// ***
	WalletCreate(context.Context, *pb.RpcWalletCreateRequest) *pb.RpcWalletCreateResponse
	WalletRecover(context.Context, *pb.RpcWalletRecoverRequest) *pb.RpcWalletRecoverResponse
	WalletConvert(context.Context, *pb.RpcWalletConvertRequest) *pb.RpcWalletConvertResponse
	AccountLocalLinkNewChallenge(context.Context, *pb.RpcAccountLocalLinkNewChallengeRequest) *pb.RpcAccountLocalLinkNewChallengeResponse
	AccountLocalLinkSolveChallenge(context.Context, *pb.RpcAccountLocalLinkSolveChallengeRequest) *pb.RpcAccountLocalLinkSolveChallengeResponse
	WalletCreateSession(context.Context, *pb.RpcWalletCreateSessionRequest) *pb.RpcWalletCreateSessionResponse
	WalletCloseSession(context.Context, *pb.RpcWalletCloseSessionRequest) *pb.RpcWalletCloseSessionResponse
	// Workspace
	// ***
	WorkspaceCreate(context.Context, *pb.RpcWorkspaceCreateRequest) *pb.RpcWorkspaceCreateResponse
	WorkspaceOpen(context.Context, *pb.RpcWorkspaceOpenRequest) *pb.RpcWorkspaceOpenResponse
	WorkspaceObjectAdd(context.Context, *pb.RpcWorkspaceObjectAddRequest) *pb.RpcWorkspaceObjectAddResponse
	WorkspaceObjectListAdd(context.Context, *pb.RpcWorkspaceObjectListAddRequest) *pb.RpcWorkspaceObjectListAddResponse
	WorkspaceObjectListRemove(context.Context, *pb.RpcWorkspaceObjectListRemoveRequest) *pb.RpcWorkspaceObjectListRemoveResponse
	WorkspaceSelect(context.Context, *pb.RpcWorkspaceSelectRequest) *pb.RpcWorkspaceSelectResponse
	WorkspaceGetCurrent(context.Context, *pb.RpcWorkspaceGetCurrentRequest) *pb.RpcWorkspaceGetCurrentResponse
	WorkspaceGetAll(context.Context, *pb.RpcWorkspaceGetAllRequest) *pb.RpcWorkspaceGetAllResponse
	WorkspaceSetInfo(context.Context, *pb.RpcWorkspaceSetInfoRequest) *pb.RpcWorkspaceSetInfoResponse
	WorkspaceExport(context.Context, *pb.RpcWorkspaceExportRequest) *pb.RpcWorkspaceExportResponse
	// Account
	// ***
	AccountRecover(context.Context, *pb.RpcAccountRecoverRequest) *pb.RpcAccountRecoverResponse
	AccountCreate(context.Context, *pb.RpcAccountCreateRequest) *pb.RpcAccountCreateResponse
	AccountDelete(context.Context, *pb.RpcAccountDeleteRequest) *pb.RpcAccountDeleteResponse
	AccountRevertDeletion(context.Context, *pb.RpcAccountRevertDeletionRequest) *pb.RpcAccountRevertDeletionResponse
	AccountSelect(context.Context, *pb.RpcAccountSelectRequest) *pb.RpcAccountSelectResponse
	AccountEnableLocalNetworkSync(context.Context, *pb.RpcAccountEnableLocalNetworkSyncRequest) *pb.RpcAccountEnableLocalNetworkSyncResponse
	AccountStop(context.Context, *pb.RpcAccountStopRequest) *pb.RpcAccountStopResponse
	AccountMove(context.Context, *pb.RpcAccountMoveRequest) *pb.RpcAccountMoveResponse
	AccountConfigUpdate(context.Context, *pb.RpcAccountConfigUpdateRequest) *pb.RpcAccountConfigUpdateResponse
	AccountRecoverFromLegacyExport(context.Context, *pb.RpcAccountRecoverFromLegacyExportRequest) *pb.RpcAccountRecoverFromLegacyExportResponse
	AccountChangeNetworkConfigAndRestart(context.Context, *pb.RpcAccountChangeNetworkConfigAndRestartRequest) *pb.RpcAccountChangeNetworkConfigAndRestartResponse
	// Space
	// ***
	SpaceDelete(context.Context, *pb.RpcSpaceDeleteRequest) *pb.RpcSpaceDeleteResponse
	SpaceInviteGenerate(context.Context, *pb.RpcSpaceInviteGenerateRequest) *pb.RpcSpaceInviteGenerateResponse
	SpaceInviteGetCurrent(context.Context, *pb.RpcSpaceInviteGetCurrentRequest) *pb.RpcSpaceInviteGetCurrentResponse
	SpaceInviteRevoke(context.Context, *pb.RpcSpaceInviteRevokeRequest) *pb.RpcSpaceInviteRevokeResponse
	SpaceInviteView(context.Context, *pb.RpcSpaceInviteViewRequest) *pb.RpcSpaceInviteViewResponse
	SpaceJoin(context.Context, *pb.RpcSpaceJoinRequest) *pb.RpcSpaceJoinResponse
	SpaceJoinCancel(context.Context, *pb.RpcSpaceJoinCancelRequest) *pb.RpcSpaceJoinCancelResponse
	SpaceExit(context.Context, *pb.RpcSpaceExitRequest) *pb.RpcSpaceExitResponse
	SpaceStopSharing(context.Context, *pb.RpcSpaceStopSharingRequest) *pb.RpcSpaceStopSharingResponse
	SpaceRequestApprove(context.Context, *pb.RpcSpaceRequestApproveRequest) *pb.RpcSpaceRequestApproveResponse
	SpaceRequestDecline(context.Context, *pb.RpcSpaceRequestDeclineRequest) *pb.RpcSpaceRequestDeclineResponse
	SpaceParticipantRemove(context.Context, *pb.RpcSpaceParticipantRemoveRequest) *pb.RpcSpaceParticipantRemoveResponse
	SpaceParticipantPermissionsChange(context.Context, *pb.RpcSpaceParticipantPermissionsChangeRequest) *pb.RpcSpaceParticipantPermissionsChangeResponse
	// Object
	// ***
	ObjectOpen(context.Context, *pb.RpcObjectOpenRequest) *pb.RpcObjectOpenResponse
	ObjectClose(context.Context, *pb.RpcObjectCloseRequest) *pb.RpcObjectCloseResponse
	ObjectShow(context.Context, *pb.RpcObjectShowRequest) *pb.RpcObjectShowResponse
	// ObjectCreate just creates the new page, without adding the link to it from some other page
	ObjectCreate(context.Context, *pb.RpcObjectCreateRequest) *pb.RpcObjectCreateResponse
	ObjectCreateBookmark(context.Context, *pb.RpcObjectCreateBookmarkRequest) *pb.RpcObjectCreateBookmarkResponse
	ObjectCreateFromUrl(context.Context, *pb.RpcObjectCreateFromUrlRequest) *pb.RpcObjectCreateFromUrlResponse
	// ObjectCreateSet just creates the new set, without adding the link to it from some other page
	ObjectCreateSet(context.Context, *pb.RpcObjectCreateSetRequest) *pb.RpcObjectCreateSetResponse
	ObjectGraph(context.Context, *pb.RpcObjectGraphRequest) *pb.RpcObjectGraphResponse
	ObjectSearch(context.Context, *pb.RpcObjectSearchRequest) *pb.RpcObjectSearchResponse
	ObjectSearchSubscribe(context.Context, *pb.RpcObjectSearchSubscribeRequest) *pb.RpcObjectSearchSubscribeResponse
	ObjectSubscribeIds(context.Context, *pb.RpcObjectSubscribeIdsRequest) *pb.RpcObjectSubscribeIdsResponse
	ObjectGroupsSubscribe(context.Context, *pb.RpcObjectGroupsSubscribeRequest) *pb.RpcObjectGroupsSubscribeResponse
	ObjectSearchUnsubscribe(context.Context, *pb.RpcObjectSearchUnsubscribeRequest) *pb.RpcObjectSearchUnsubscribeResponse
	ObjectSetDetails(context.Context, *pb.RpcObjectSetDetailsRequest) *pb.RpcObjectSetDetailsResponse
	ObjectDuplicate(context.Context, *pb.RpcObjectDuplicateRequest) *pb.RpcObjectDuplicateResponse
	// ObjectSetObjectType sets an existing object type to the object so it will appear in sets and suggests relations from this type
	ObjectSetObjectType(context.Context, *pb.RpcObjectSetObjectTypeRequest) *pb.RpcObjectSetObjectTypeResponse
	ObjectSetLayout(context.Context, *pb.RpcObjectSetLayoutRequest) *pb.RpcObjectSetLayoutResponse
	ObjectSetInternalFlags(context.Context, *pb.RpcObjectSetInternalFlagsRequest) *pb.RpcObjectSetInternalFlagsResponse
	ObjectSetIsFavorite(context.Context, *pb.RpcObjectSetIsFavoriteRequest) *pb.RpcObjectSetIsFavoriteResponse
	ObjectSetIsArchived(context.Context, *pb.RpcObjectSetIsArchivedRequest) *pb.RpcObjectSetIsArchivedResponse
	ObjectSetSource(context.Context, *pb.RpcObjectSetSourceRequest) *pb.RpcObjectSetSourceResponse
	ObjectWorkspaceSetDashboard(context.Context, *pb.RpcObjectWorkspaceSetDashboardRequest) *pb.RpcObjectWorkspaceSetDashboardResponse
	ObjectListDuplicate(context.Context, *pb.RpcObjectListDuplicateRequest) *pb.RpcObjectListDuplicateResponse
	ObjectListDelete(context.Context, *pb.RpcObjectListDeleteRequest) *pb.RpcObjectListDeleteResponse
	ObjectListSetIsArchived(context.Context, *pb.RpcObjectListSetIsArchivedRequest) *pb.RpcObjectListSetIsArchivedResponse
	ObjectListSetIsFavorite(context.Context, *pb.RpcObjectListSetIsFavoriteRequest) *pb.RpcObjectListSetIsFavoriteResponse
	ObjectListSetObjectType(context.Context, *pb.RpcObjectListSetObjectTypeRequest) *pb.RpcObjectListSetObjectTypeResponse
	ObjectApplyTemplate(context.Context, *pb.RpcObjectApplyTemplateRequest) *pb.RpcObjectApplyTemplateResponse
	// ObjectToSet creates new set from given object and removes object
	ObjectToSet(context.Context, *pb.RpcObjectToSetRequest) *pb.RpcObjectToSetResponse
	ObjectToCollection(context.Context, *pb.RpcObjectToCollectionRequest) *pb.RpcObjectToCollectionResponse
	ObjectShareByLink(context.Context, *pb.RpcObjectShareByLinkRequest) *pb.RpcObjectShareByLinkResponse
	ObjectUndo(context.Context, *pb.RpcObjectUndoRequest) *pb.RpcObjectUndoResponse
	ObjectRedo(context.Context, *pb.RpcObjectRedoRequest) *pb.RpcObjectRedoResponse
	ObjectListExport(context.Context, *pb.RpcObjectListExportRequest) *pb.RpcObjectListExportResponse
	ObjectBookmarkFetch(context.Context, *pb.RpcObjectBookmarkFetchRequest) *pb.RpcObjectBookmarkFetchResponse
	ObjectToBookmark(context.Context, *pb.RpcObjectToBookmarkRequest) *pb.RpcObjectToBookmarkResponse
	ObjectImport(context.Context, *pb.RpcObjectImportRequest) *pb.RpcObjectImportResponse
	ObjectImportList(context.Context, *pb.RpcObjectImportListRequest) *pb.RpcObjectImportListResponse
	ObjectImportNotionValidateToken(context.Context, *pb.RpcObjectImportNotionValidateTokenRequest) *pb.RpcObjectImportNotionValidateTokenResponse
	ObjectImportUseCase(context.Context, *pb.RpcObjectImportUseCaseRequest) *pb.RpcObjectImportUseCaseResponse
	ObjectImportExperience(context.Context, *pb.RpcObjectImportExperienceRequest) *pb.RpcObjectImportExperienceResponse
	// Collections
	// ***
	ObjectCollectionAdd(context.Context, *pb.RpcObjectCollectionAddRequest) *pb.RpcObjectCollectionAddResponse
	ObjectCollectionRemove(context.Context, *pb.RpcObjectCollectionRemoveRequest) *pb.RpcObjectCollectionRemoveResponse
	ObjectCollectionSort(context.Context, *pb.RpcObjectCollectionSortRequest) *pb.RpcObjectCollectionSortResponse
	// Relations
	// ***
	ObjectCreateRelation(context.Context, *pb.RpcObjectCreateRelationRequest) *pb.RpcObjectCreateRelationResponse
	ObjectCreateRelationOption(context.Context, *pb.RpcObjectCreateRelationOptionRequest) *pb.RpcObjectCreateRelationOptionResponse
	RelationListRemoveOption(context.Context, *pb.RpcRelationListRemoveOptionRequest) *pb.RpcRelationListRemoveOptionResponse
	RelationOptions(context.Context, *pb.RpcRelationOptionsRequest) *pb.RpcRelationOptionsResponse
	// Object Relations
	// ***
	ObjectRelationAdd(context.Context, *pb.RpcObjectRelationAddRequest) *pb.RpcObjectRelationAddResponse
	ObjectRelationDelete(context.Context, *pb.RpcObjectRelationDeleteRequest) *pb.RpcObjectRelationDeleteResponse
	ObjectRelationAddFeatured(context.Context, *pb.RpcObjectRelationAddFeaturedRequest) *pb.RpcObjectRelationAddFeaturedResponse
	ObjectRelationRemoveFeatured(context.Context, *pb.RpcObjectRelationRemoveFeaturedRequest) *pb.RpcObjectRelationRemoveFeaturedResponse
	ObjectRelationListAvailable(context.Context, *pb.RpcObjectRelationListAvailableRequest) *pb.RpcObjectRelationListAvailableResponse
	// ObjectType commands
	// ***
	ObjectCreateObjectType(context.Context, *pb.RpcObjectCreateObjectTypeRequest) *pb.RpcObjectCreateObjectTypeResponse
	ObjectTypeRelationAdd(context.Context, *pb.RpcObjectTypeRelationAddRequest) *pb.RpcObjectTypeRelationAddResponse
	ObjectTypeRelationRemove(context.Context, *pb.RpcObjectTypeRelationRemoveRequest) *pb.RpcObjectTypeRelationRemoveResponse
	HistoryShowVersion(context.Context, *pb.RpcHistoryShowVersionRequest) *pb.RpcHistoryShowVersionResponse
	HistoryGetVersions(context.Context, *pb.RpcHistoryGetVersionsRequest) *pb.RpcHistoryGetVersionsResponse
	HistorySetVersion(context.Context, *pb.RpcHistorySetVersionRequest) *pb.RpcHistorySetVersionResponse
	// Files
	// ***
	FileOffload(context.Context, *pb.RpcFileOffloadRequest) *pb.RpcFileOffloadResponse
	FileSpaceOffload(context.Context, *pb.RpcFileSpaceOffloadRequest) *pb.RpcFileSpaceOffloadResponse
	FileListOffload(context.Context, *pb.RpcFileListOffloadRequest) *pb.RpcFileListOffloadResponse
	FileUpload(context.Context, *pb.RpcFileUploadRequest) *pb.RpcFileUploadResponse
	FileDownload(context.Context, *pb.RpcFileDownloadRequest) *pb.RpcFileDownloadResponse
	FileDrop(context.Context, *pb.RpcFileDropRequest) *pb.RpcFileDropResponse
	FileSpaceUsage(context.Context, *pb.RpcFileSpaceUsageRequest) *pb.RpcFileSpaceUsageResponse
	FileNodeUsage(context.Context, *pb.RpcFileNodeUsageRequest) *pb.RpcFileNodeUsageResponse
	NavigationListObjects(context.Context, *pb.RpcNavigationListObjectsRequest) *pb.RpcNavigationListObjectsResponse
	NavigationGetObjectInfoWithLinks(context.Context, *pb.RpcNavigationGetObjectInfoWithLinksRequest) *pb.RpcNavigationGetObjectInfoWithLinksResponse
	TemplateCreateFromObject(context.Context, *pb.RpcTemplateCreateFromObjectRequest) *pb.RpcTemplateCreateFromObjectResponse
	TemplateClone(context.Context, *pb.RpcTemplateCloneRequest) *pb.RpcTemplateCloneResponse
	TemplateExportAll(context.Context, *pb.RpcTemplateExportAllRequest) *pb.RpcTemplateExportAllResponse
	LinkPreview(context.Context, *pb.RpcLinkPreviewRequest) *pb.RpcLinkPreviewResponse
	UnsplashSearch(context.Context, *pb.RpcUnsplashSearchRequest) *pb.RpcUnsplashSearchResponse
	// UnsplashDownload downloads picture from unsplash by ID, put it to the IPFS and returns the hash.
	// The artist info is available in the object details
	UnsplashDownload(context.Context, *pb.RpcUnsplashDownloadRequest) *pb.RpcUnsplashDownloadResponse
	GalleryDownloadManifest(context.Context, *pb.RpcGalleryDownloadManifestRequest) *pb.RpcGalleryDownloadManifestResponse
	GalleryDownloadIndex(context.Context, *pb.RpcGalleryDownloadIndexRequest) *pb.RpcGalleryDownloadIndexResponse
	// General Block commands
	// ***
	BlockUpload(context.Context, *pb.RpcBlockUploadRequest) *pb.RpcBlockUploadResponse
	BlockReplace(context.Context, *pb.RpcBlockReplaceRequest) *pb.RpcBlockReplaceResponse
	BlockCreate(context.Context, *pb.RpcBlockCreateRequest) *pb.RpcBlockCreateResponse
	BlockSplit(context.Context, *pb.RpcBlockSplitRequest) *pb.RpcBlockSplitResponse
	BlockMerge(context.Context, *pb.RpcBlockMergeRequest) *pb.RpcBlockMergeResponse
	BlockCopy(context.Context, *pb.RpcBlockCopyRequest) *pb.RpcBlockCopyResponse
	BlockPaste(context.Context, *pb.RpcBlockPasteRequest) *pb.RpcBlockPasteResponse
	BlockCut(context.Context, *pb.RpcBlockCutRequest) *pb.RpcBlockCutResponse
	BlockSetFields(context.Context, *pb.RpcBlockSetFieldsRequest) *pb.RpcBlockSetFieldsResponse
	BlockExport(context.Context, *pb.RpcBlockExportRequest) *pb.RpcBlockExportResponse
	BlockSetCarriage(context.Context, *pb.RpcBlockSetCarriageRequest) *pb.RpcBlockSetCarriageResponse
	BlockPreview(context.Context, *pb.RpcBlockPreviewRequest) *pb.RpcBlockPreviewResponse
	BlockListDelete(context.Context, *pb.RpcBlockListDeleteRequest) *pb.RpcBlockListDeleteResponse
	BlockListMoveToExistingObject(context.Context, *pb.RpcBlockListMoveToExistingObjectRequest) *pb.RpcBlockListMoveToExistingObjectResponse
	BlockListMoveToNewObject(context.Context, *pb.RpcBlockListMoveToNewObjectRequest) *pb.RpcBlockListMoveToNewObjectResponse
	BlockListConvertToObjects(context.Context, *pb.RpcBlockListConvertToObjectsRequest) *pb.RpcBlockListConvertToObjectsResponse
	BlockListSetFields(context.Context, *pb.RpcBlockListSetFieldsRequest) *pb.RpcBlockListSetFieldsResponse
	BlockListDuplicate(context.Context, *pb.RpcBlockListDuplicateRequest) *pb.RpcBlockListDuplicateResponse
	BlockListSetBackgroundColor(context.Context, *pb.RpcBlockListSetBackgroundColorRequest) *pb.RpcBlockListSetBackgroundColorResponse
	BlockListSetAlign(context.Context, *pb.RpcBlockListSetAlignRequest) *pb.RpcBlockListSetAlignResponse
	BlockListSetVerticalAlign(context.Context, *pb.RpcBlockListSetVerticalAlignRequest) *pb.RpcBlockListSetVerticalAlignResponse
	BlockListTurnInto(context.Context, *pb.RpcBlockListTurnIntoRequest) *pb.RpcBlockListTurnIntoResponse
	// Text Block commands
	// ***
	BlockTextSetText(context.Context, *pb.RpcBlockTextSetTextRequest) *pb.RpcBlockTextSetTextResponse
	BlockTextSetColor(context.Context, *pb.RpcBlockTextSetColorRequest) *pb.RpcBlockTextSetColorResponse
	BlockTextSetStyle(context.Context, *pb.RpcBlockTextSetStyleRequest) *pb.RpcBlockTextSetStyleResponse
	BlockTextSetChecked(context.Context, *pb.RpcBlockTextSetCheckedRequest) *pb.RpcBlockTextSetCheckedResponse
	BlockTextSetIcon(context.Context, *pb.RpcBlockTextSetIconRequest) *pb.RpcBlockTextSetIconResponse
	BlockTextListSetColor(context.Context, *pb.RpcBlockTextListSetColorRequest) *pb.RpcBlockTextListSetColorResponse
	BlockTextListSetMark(context.Context, *pb.RpcBlockTextListSetMarkRequest) *pb.RpcBlockTextListSetMarkResponse
	BlockTextListSetStyle(context.Context, *pb.RpcBlockTextListSetStyleRequest) *pb.RpcBlockTextListSetStyleResponse
	BlockTextListClearStyle(context.Context, *pb.RpcBlockTextListClearStyleRequest) *pb.RpcBlockTextListClearStyleResponse
	BlockTextListClearContent(context.Context, *pb.RpcBlockTextListClearContentRequest) *pb.RpcBlockTextListClearContentResponse
	// File block commands
	// ***
	BlockFileSetName(context.Context, *pb.RpcBlockFileSetNameRequest) *pb.RpcBlockFileSetNameResponse
	BlockImageSetName(context.Context, *pb.RpcBlockImageSetNameRequest) *pb.RpcBlockImageSetNameResponse
	BlockVideoSetName(context.Context, *pb.RpcBlockVideoSetNameRequest) *pb.RpcBlockVideoSetNameResponse
	BlockFileCreateAndUpload(context.Context, *pb.RpcBlockFileCreateAndUploadRequest) *pb.RpcBlockFileCreateAndUploadResponse
	BlockFileListSetStyle(context.Context, *pb.RpcBlockFileListSetStyleRequest) *pb.RpcBlockFileListSetStyleResponse
	// Dataview block commands
	// ***
	BlockDataviewViewCreate(context.Context, *pb.RpcBlockDataviewViewCreateRequest) *pb.RpcBlockDataviewViewCreateResponse
	BlockDataviewViewDelete(context.Context, *pb.RpcBlockDataviewViewDeleteRequest) *pb.RpcBlockDataviewViewDeleteResponse
	BlockDataviewViewUpdate(context.Context, *pb.RpcBlockDataviewViewUpdateRequest) *pb.RpcBlockDataviewViewUpdateResponse
	BlockDataviewViewSetActive(context.Context, *pb.RpcBlockDataviewViewSetActiveRequest) *pb.RpcBlockDataviewViewSetActiveResponse
	BlockDataviewViewSetPosition(context.Context, *pb.RpcBlockDataviewViewSetPositionRequest) *pb.RpcBlockDataviewViewSetPositionResponse
	BlockDataviewSetSource(context.Context, *pb.RpcBlockDataviewSetSourceRequest) *pb.RpcBlockDataviewSetSourceResponse
	BlockDataviewRelationAdd(context.Context, *pb.RpcBlockDataviewRelationAddRequest) *pb.RpcBlockDataviewRelationAddResponse
	BlockDataviewRelationDelete(context.Context, *pb.RpcBlockDataviewRelationDeleteRequest) *pb.RpcBlockDataviewRelationDeleteResponse
	BlockDataviewRelationListAvailable(context.Context, *pb.RpcBlockDataviewRelationListAvailableRequest) *pb.RpcBlockDataviewRelationListAvailableResponse
	BlockDataviewGroupOrderUpdate(context.Context, *pb.RpcBlockDataviewGroupOrderUpdateRequest) *pb.RpcBlockDataviewGroupOrderUpdateResponse
	BlockDataviewObjectOrderUpdate(context.Context, *pb.RpcBlockDataviewObjectOrderUpdateRequest) *pb.RpcBlockDataviewObjectOrderUpdateResponse
	BlockDataviewObjectOrderMove(context.Context, *pb.RpcBlockDataviewObjectOrderMoveRequest) *pb.RpcBlockDataviewObjectOrderMoveResponse
	BlockDataviewCreateFromExistingObject(context.Context, *pb.RpcBlockDataviewCreateFromExistingObjectRequest) *pb.RpcBlockDataviewCreateFromExistingObjectResponse
	BlockDataviewFilterAdd(context.Context, *pb.RpcBlockDataviewFilterAddRequest) *pb.RpcBlockDataviewFilterAddResponse
	BlockDataviewFilterRemove(context.Context, *pb.RpcBlockDataviewFilterRemoveRequest) *pb.RpcBlockDataviewFilterRemoveResponse
	BlockDataviewFilterReplace(context.Context, *pb.RpcBlockDataviewFilterReplaceRequest) *pb.RpcBlockDataviewFilterReplaceResponse
	BlockDataviewFilterSort(context.Context, *pb.RpcBlockDataviewFilterSortRequest) *pb.RpcBlockDataviewFilterSortResponse
	BlockDataviewSortAdd(context.Context, *pb.RpcBlockDataviewSortAddRequest) *pb.RpcBlockDataviewSortAddResponse
	BlockDataviewSortRemove(context.Context, *pb.RpcBlockDataviewSortRemoveRequest) *pb.RpcBlockDataviewSortRemoveResponse
	BlockDataviewSortReplace(context.Context, *pb.RpcBlockDataviewSortReplaceRequest) *pb.RpcBlockDataviewSortReplaceResponse
	BlockDataviewSortSort(context.Context, *pb.RpcBlockDataviewSortSortRequest) *pb.RpcBlockDataviewSortSortResponse
	BlockDataviewViewRelationAdd(context.Context, *pb.RpcBlockDataviewViewRelationAddRequest) *pb.RpcBlockDataviewViewRelationAddResponse
	BlockDataviewViewRelationRemove(context.Context, *pb.RpcBlockDataviewViewRelationRemoveRequest) *pb.RpcBlockDataviewViewRelationRemoveResponse
	BlockDataviewViewRelationReplace(context.Context, *pb.RpcBlockDataviewViewRelationReplaceRequest) *pb.RpcBlockDataviewViewRelationReplaceResponse
	BlockDataviewViewRelationSort(context.Context, *pb.RpcBlockDataviewViewRelationSortRequest) *pb.RpcBlockDataviewViewRelationSortResponse
	// Simple table block commands
	// ***
	BlockTableCreate(context.Context, *pb.RpcBlockTableCreateRequest) *pb.RpcBlockTableCreateResponse
	BlockTableExpand(context.Context, *pb.RpcBlockTableExpandRequest) *pb.RpcBlockTableExpandResponse
	BlockTableRowCreate(context.Context, *pb.RpcBlockTableRowCreateRequest) *pb.RpcBlockTableRowCreateResponse
	BlockTableRowDelete(context.Context, *pb.RpcBlockTableRowDeleteRequest) *pb.RpcBlockTableRowDeleteResponse
	BlockTableRowDuplicate(context.Context, *pb.RpcBlockTableRowDuplicateRequest) *pb.RpcBlockTableRowDuplicateResponse
	BlockTableRowSetHeader(context.Context, *pb.RpcBlockTableRowSetHeaderRequest) *pb.RpcBlockTableRowSetHeaderResponse
	BlockTableColumnCreate(context.Context, *pb.RpcBlockTableColumnCreateRequest) *pb.RpcBlockTableColumnCreateResponse
	BlockTableColumnMove(context.Context, *pb.RpcBlockTableColumnMoveRequest) *pb.RpcBlockTableColumnMoveResponse
	BlockTableColumnDelete(context.Context, *pb.RpcBlockTableColumnDeleteRequest) *pb.RpcBlockTableColumnDeleteResponse
	BlockTableColumnDuplicate(context.Context, *pb.RpcBlockTableColumnDuplicateRequest) *pb.RpcBlockTableColumnDuplicateResponse
	BlockTableRowListFill(context.Context, *pb.RpcBlockTableRowListFillRequest) *pb.RpcBlockTableRowListFillResponse
	BlockTableRowListClean(context.Context, *pb.RpcBlockTableRowListCleanRequest) *pb.RpcBlockTableRowListCleanResponse
	BlockTableColumnListFill(context.Context, *pb.RpcBlockTableColumnListFillRequest) *pb.RpcBlockTableColumnListFillResponse
	BlockTableSort(context.Context, *pb.RpcBlockTableSortRequest) *pb.RpcBlockTableSortResponse
	// Widget commands
	// ***
	BlockCreateWidget(context.Context, *pb.RpcBlockCreateWidgetRequest) *pb.RpcBlockCreateWidgetResponse
	BlockWidgetSetTargetId(context.Context, *pb.RpcBlockWidgetSetTargetIdRequest) *pb.RpcBlockWidgetSetTargetIdResponse
	BlockWidgetSetLayout(context.Context, *pb.RpcBlockWidgetSetLayoutRequest) *pb.RpcBlockWidgetSetLayoutResponse
	BlockWidgetSetLimit(context.Context, *pb.RpcBlockWidgetSetLimitRequest) *pb.RpcBlockWidgetSetLimitResponse
	BlockWidgetSetViewId(context.Context, *pb.RpcBlockWidgetSetViewIdRequest) *pb.RpcBlockWidgetSetViewIdResponse
	// Other specific block commands
	// ***
	BlockLinkCreateWithObject(context.Context, *pb.RpcBlockLinkCreateWithObjectRequest) *pb.RpcBlockLinkCreateWithObjectResponse
	BlockLinkListSetAppearance(context.Context, *pb.RpcBlockLinkListSetAppearanceRequest) *pb.RpcBlockLinkListSetAppearanceResponse
	BlockBookmarkFetch(context.Context, *pb.RpcBlockBookmarkFetchRequest) *pb.RpcBlockBookmarkFetchResponse
	BlockBookmarkCreateAndFetch(context.Context, *pb.RpcBlockBookmarkCreateAndFetchRequest) *pb.RpcBlockBookmarkCreateAndFetchResponse
	BlockRelationSetKey(context.Context, *pb.RpcBlockRelationSetKeyRequest) *pb.RpcBlockRelationSetKeyResponse
	BlockRelationAdd(context.Context, *pb.RpcBlockRelationAddRequest) *pb.RpcBlockRelationAddResponse
	BlockDivListSetStyle(context.Context, *pb.RpcBlockDivListSetStyleRequest) *pb.RpcBlockDivListSetStyleResponse
	BlockLatexSetText(context.Context, *pb.RpcBlockLatexSetTextRequest) *pb.RpcBlockLatexSetTextResponse
	ProcessCancel(context.Context, *pb.RpcProcessCancelRequest) *pb.RpcProcessCancelResponse
	LogSend(context.Context, *pb.RpcLogSendRequest) *pb.RpcLogSendResponse
	DebugStat(context.Context, *pb.RpcDebugStatRequest) *pb.RpcDebugStatResponse
	DebugTree(context.Context, *pb.RpcDebugTreeRequest) *pb.RpcDebugTreeResponse
	DebugTreeHeads(context.Context, *pb.RpcDebugTreeHeadsRequest) *pb.RpcDebugTreeHeadsResponse
	DebugSpaceSummary(context.Context, *pb.RpcDebugSpaceSummaryRequest) *pb.RpcDebugSpaceSummaryResponse
	DebugStackGoroutines(context.Context, *pb.RpcDebugStackGoroutinesRequest) *pb.RpcDebugStackGoroutinesResponse
	DebugExportLocalstore(context.Context, *pb.RpcDebugExportLocalstoreRequest) *pb.RpcDebugExportLocalstoreResponse
	DebugPing(context.Context, *pb.RpcDebugPingRequest) *pb.RpcDebugPingResponse
	DebugSubscriptions(context.Context, *pb.RpcDebugSubscriptionsRequest) *pb.RpcDebugSubscriptionsResponse
	DebugOpenedObjects(context.Context, *pb.RpcDebugOpenedObjectsRequest) *pb.RpcDebugOpenedObjectsResponse
	MetricsSetParameters(context.Context, *pb.RpcMetricsSetParametersRequest) *pb.RpcMetricsSetParametersResponse
	// used only for lib-server via grpc
	// Streams not supported ### ListenSessionEvents(context.Context, *pb.StreamRequest)
	NotificationList(context.Context, *pb.RpcNotificationListRequest) *pb.RpcNotificationListResponse
	NotificationReply(context.Context, *pb.RpcNotificationReplyRequest) *pb.RpcNotificationReplyResponse
	NotificationTest(context.Context, *pb.RpcNotificationTestRequest) *pb.RpcNotificationTestResponse
	BroadcastPayloadEvent(context.Context, *pb.RpcBroadcastPayloadEventRequest) *pb.RpcBroadcastPayloadEventResponse
}

func registerClientCommandsHandler(srv ClientCommandsHandler) {
	clientCommandsHandler = srv
}

func AppGetVersion(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAppGetVersionResponse{Error: &pb.RpcAppGetVersionResponseError{Code: pb.RpcAppGetVersionResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAppGetVersionRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcAppGetVersionResponse{Error: &pb.RpcAppGetVersionResponseError{Code: pb.RpcAppGetVersionResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.AppGetVersion(context.Background(), in).Marshal()
	return resp
}

func AppSetDeviceState(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAppSetDeviceStateResponse{Error: &pb.RpcAppSetDeviceStateResponseError{Code: pb.RpcAppSetDeviceStateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAppSetDeviceStateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcAppSetDeviceStateResponse{Error: &pb.RpcAppSetDeviceStateResponseError{Code: pb.RpcAppSetDeviceStateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.AppSetDeviceState(context.Background(), in).Marshal()
	return resp
}

func AppShutdown(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAppShutdownResponse{Error: &pb.RpcAppShutdownResponseError{Code: pb.RpcAppShutdownResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAppShutdownRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcAppShutdownResponse{Error: &pb.RpcAppShutdownResponseError{Code: pb.RpcAppShutdownResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.AppShutdown(context.Background(), in).Marshal()
	return resp
}

func WalletCreate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWalletCreateResponse{Error: &pb.RpcWalletCreateResponseError{Code: pb.RpcWalletCreateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWalletCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcWalletCreateResponse{Error: &pb.RpcWalletCreateResponseError{Code: pb.RpcWalletCreateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.WalletCreate(context.Background(), in).Marshal()
	return resp
}

func WalletRecover(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWalletRecoverResponse{Error: &pb.RpcWalletRecoverResponseError{Code: pb.RpcWalletRecoverResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWalletRecoverRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcWalletRecoverResponse{Error: &pb.RpcWalletRecoverResponseError{Code: pb.RpcWalletRecoverResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.WalletRecover(context.Background(), in).Marshal()
	return resp
}

func WalletConvert(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWalletConvertResponse{Error: &pb.RpcWalletConvertResponseError{Code: pb.RpcWalletConvertResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWalletConvertRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcWalletConvertResponse{Error: &pb.RpcWalletConvertResponseError{Code: pb.RpcWalletConvertResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.WalletConvert(context.Background(), in).Marshal()
	return resp
}

func AccountLocalLinkNewChallenge(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountLocalLinkNewChallengeResponse{Error: &pb.RpcAccountLocalLinkNewChallengeResponseError{Code: pb.RpcAccountLocalLinkNewChallengeResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountLocalLinkNewChallengeRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcAccountLocalLinkNewChallengeResponse{Error: &pb.RpcAccountLocalLinkNewChallengeResponseError{Code: pb.RpcAccountLocalLinkNewChallengeResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountLocalLinkNewChallenge(context.Background(), in).Marshal()
	return resp
}

func AccountLocalLinkSolveChallenge(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountLocalLinkSolveChallengeResponse{Error: &pb.RpcAccountLocalLinkSolveChallengeResponseError{Code: pb.RpcAccountLocalLinkSolveChallengeResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountLocalLinkSolveChallengeRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcAccountLocalLinkSolveChallengeResponse{Error: &pb.RpcAccountLocalLinkSolveChallengeResponseError{Code: pb.RpcAccountLocalLinkSolveChallengeResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountLocalLinkSolveChallenge(context.Background(), in).Marshal()
	return resp
}

func WalletCreateSession(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWalletCreateSessionResponse{Error: &pb.RpcWalletCreateSessionResponseError{Code: pb.RpcWalletCreateSessionResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWalletCreateSessionRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcWalletCreateSessionResponse{Error: &pb.RpcWalletCreateSessionResponseError{Code: pb.RpcWalletCreateSessionResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.WalletCreateSession(context.Background(), in).Marshal()
	return resp
}

func WalletCloseSession(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWalletCloseSessionResponse{Error: &pb.RpcWalletCloseSessionResponseError{Code: pb.RpcWalletCloseSessionResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWalletCloseSessionRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcWalletCloseSessionResponse{Error: &pb.RpcWalletCloseSessionResponseError{Code: pb.RpcWalletCloseSessionResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.WalletCloseSession(context.Background(), in).Marshal()
	return resp
}

func WorkspaceCreate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWorkspaceCreateResponse{Error: &pb.RpcWorkspaceCreateResponseError{Code: pb.RpcWorkspaceCreateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWorkspaceCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcWorkspaceCreateResponse{Error: &pb.RpcWorkspaceCreateResponseError{Code: pb.RpcWorkspaceCreateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.WorkspaceCreate(context.Background(), in).Marshal()
	return resp
}

func WorkspaceOpen(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWorkspaceOpenResponse{Error: &pb.RpcWorkspaceOpenResponseError{Code: pb.RpcWorkspaceOpenResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWorkspaceOpenRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcWorkspaceOpenResponse{Error: &pb.RpcWorkspaceOpenResponseError{Code: pb.RpcWorkspaceOpenResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.WorkspaceOpen(context.Background(), in).Marshal()
	return resp
}

func WorkspaceObjectAdd(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWorkspaceObjectAddResponse{Error: &pb.RpcWorkspaceObjectAddResponseError{Code: pb.RpcWorkspaceObjectAddResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWorkspaceObjectAddRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcWorkspaceObjectAddResponse{Error: &pb.RpcWorkspaceObjectAddResponseError{Code: pb.RpcWorkspaceObjectAddResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.WorkspaceObjectAdd(context.Background(), in).Marshal()
	return resp
}

func WorkspaceObjectListAdd(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWorkspaceObjectListAddResponse{Error: &pb.RpcWorkspaceObjectListAddResponseError{Code: pb.RpcWorkspaceObjectListAddResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWorkspaceObjectListAddRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcWorkspaceObjectListAddResponse{Error: &pb.RpcWorkspaceObjectListAddResponseError{Code: pb.RpcWorkspaceObjectListAddResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.WorkspaceObjectListAdd(context.Background(), in).Marshal()
	return resp
}

func WorkspaceObjectListRemove(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWorkspaceObjectListRemoveResponse{Error: &pb.RpcWorkspaceObjectListRemoveResponseError{Code: pb.RpcWorkspaceObjectListRemoveResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWorkspaceObjectListRemoveRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcWorkspaceObjectListRemoveResponse{Error: &pb.RpcWorkspaceObjectListRemoveResponseError{Code: pb.RpcWorkspaceObjectListRemoveResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.WorkspaceObjectListRemove(context.Background(), in).Marshal()
	return resp
}

func WorkspaceSelect(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWorkspaceSelectResponse{Error: &pb.RpcWorkspaceSelectResponseError{Code: pb.RpcWorkspaceSelectResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWorkspaceSelectRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcWorkspaceSelectResponse{Error: &pb.RpcWorkspaceSelectResponseError{Code: pb.RpcWorkspaceSelectResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.WorkspaceSelect(context.Background(), in).Marshal()
	return resp
}

func WorkspaceGetCurrent(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWorkspaceGetCurrentResponse{Error: &pb.RpcWorkspaceGetCurrentResponseError{Code: pb.RpcWorkspaceGetCurrentResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWorkspaceGetCurrentRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcWorkspaceGetCurrentResponse{Error: &pb.RpcWorkspaceGetCurrentResponseError{Code: pb.RpcWorkspaceGetCurrentResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.WorkspaceGetCurrent(context.Background(), in).Marshal()
	return resp
}

func WorkspaceGetAll(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWorkspaceGetAllResponse{Error: &pb.RpcWorkspaceGetAllResponseError{Code: pb.RpcWorkspaceGetAllResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWorkspaceGetAllRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcWorkspaceGetAllResponse{Error: &pb.RpcWorkspaceGetAllResponseError{Code: pb.RpcWorkspaceGetAllResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.WorkspaceGetAll(context.Background(), in).Marshal()
	return resp
}

func WorkspaceSetInfo(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWorkspaceSetInfoResponse{Error: &pb.RpcWorkspaceSetInfoResponseError{Code: pb.RpcWorkspaceSetInfoResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWorkspaceSetInfoRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcWorkspaceSetInfoResponse{Error: &pb.RpcWorkspaceSetInfoResponseError{Code: pb.RpcWorkspaceSetInfoResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.WorkspaceSetInfo(context.Background(), in).Marshal()
	return resp
}

func WorkspaceExport(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcWorkspaceExportResponse{Error: &pb.RpcWorkspaceExportResponseError{Code: pb.RpcWorkspaceExportResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcWorkspaceExportRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcWorkspaceExportResponse{Error: &pb.RpcWorkspaceExportResponseError{Code: pb.RpcWorkspaceExportResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.WorkspaceExport(context.Background(), in).Marshal()
	return resp
}

func AccountRecover(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountRecoverResponse{Error: &pb.RpcAccountRecoverResponseError{Code: pb.RpcAccountRecoverResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountRecoverRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcAccountRecoverResponse{Error: &pb.RpcAccountRecoverResponseError{Code: pb.RpcAccountRecoverResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountRecover(context.Background(), in).Marshal()
	return resp
}

func AccountCreate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountCreateResponse{Error: &pb.RpcAccountCreateResponseError{Code: pb.RpcAccountCreateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcAccountCreateResponse{Error: &pb.RpcAccountCreateResponseError{Code: pb.RpcAccountCreateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountCreate(context.Background(), in).Marshal()
	return resp
}

func AccountDelete(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountDeleteResponse{Error: &pb.RpcAccountDeleteResponseError{Code: pb.RpcAccountDeleteResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountDeleteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcAccountDeleteResponse{Error: &pb.RpcAccountDeleteResponseError{Code: pb.RpcAccountDeleteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountDelete(context.Background(), in).Marshal()
	return resp
}

func AccountRevertDeletion(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountRevertDeletionResponse{Error: &pb.RpcAccountRevertDeletionResponseError{Code: pb.RpcAccountRevertDeletionResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountRevertDeletionRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcAccountRevertDeletionResponse{Error: &pb.RpcAccountRevertDeletionResponseError{Code: pb.RpcAccountRevertDeletionResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountRevertDeletion(context.Background(), in).Marshal()
	return resp
}

func AccountSelect(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountSelectResponse{Error: &pb.RpcAccountSelectResponseError{Code: pb.RpcAccountSelectResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountSelectRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcAccountSelectResponse{Error: &pb.RpcAccountSelectResponseError{Code: pb.RpcAccountSelectResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountSelect(context.Background(), in).Marshal()
	return resp
}

func AccountEnableLocalNetworkSync(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountEnableLocalNetworkSyncResponse{Error: &pb.RpcAccountEnableLocalNetworkSyncResponseError{Code: pb.RpcAccountEnableLocalNetworkSyncResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountEnableLocalNetworkSyncRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcAccountEnableLocalNetworkSyncResponse{Error: &pb.RpcAccountEnableLocalNetworkSyncResponseError{Code: pb.RpcAccountEnableLocalNetworkSyncResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountEnableLocalNetworkSync(context.Background(), in).Marshal()
	return resp
}

func AccountStop(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountStopResponse{Error: &pb.RpcAccountStopResponseError{Code: pb.RpcAccountStopResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountStopRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcAccountStopResponse{Error: &pb.RpcAccountStopResponseError{Code: pb.RpcAccountStopResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountStop(context.Background(), in).Marshal()
	return resp
}

func AccountMove(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountMoveResponse{Error: &pb.RpcAccountMoveResponseError{Code: pb.RpcAccountMoveResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountMoveRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcAccountMoveResponse{Error: &pb.RpcAccountMoveResponseError{Code: pb.RpcAccountMoveResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountMove(context.Background(), in).Marshal()
	return resp
}

func AccountConfigUpdate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountConfigUpdateResponse{Error: &pb.RpcAccountConfigUpdateResponseError{Code: pb.RpcAccountConfigUpdateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountConfigUpdateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcAccountConfigUpdateResponse{Error: &pb.RpcAccountConfigUpdateResponseError{Code: pb.RpcAccountConfigUpdateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountConfigUpdate(context.Background(), in).Marshal()
	return resp
}

func AccountRecoverFromLegacyExport(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountRecoverFromLegacyExportResponse{Error: &pb.RpcAccountRecoverFromLegacyExportResponseError{Code: pb.RpcAccountRecoverFromLegacyExportResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountRecoverFromLegacyExportRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcAccountRecoverFromLegacyExportResponse{Error: &pb.RpcAccountRecoverFromLegacyExportResponseError{Code: pb.RpcAccountRecoverFromLegacyExportResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountRecoverFromLegacyExport(context.Background(), in).Marshal()
	return resp
}

func AccountChangeNetworkConfigAndRestart(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcAccountChangeNetworkConfigAndRestartResponse{Error: &pb.RpcAccountChangeNetworkConfigAndRestartResponseError{Code: pb.RpcAccountChangeNetworkConfigAndRestartResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcAccountChangeNetworkConfigAndRestartRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcAccountChangeNetworkConfigAndRestartResponse{Error: &pb.RpcAccountChangeNetworkConfigAndRestartResponseError{Code: pb.RpcAccountChangeNetworkConfigAndRestartResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.AccountChangeNetworkConfigAndRestart(context.Background(), in).Marshal()
	return resp
}

func SpaceDelete(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcSpaceDeleteResponse{Error: &pb.RpcSpaceDeleteResponseError{Code: pb.RpcSpaceDeleteResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcSpaceDeleteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcSpaceDeleteResponse{Error: &pb.RpcSpaceDeleteResponseError{Code: pb.RpcSpaceDeleteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.SpaceDelete(context.Background(), in).Marshal()
	return resp
}

func SpaceInviteGenerate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcSpaceInviteGenerateResponse{Error: &pb.RpcSpaceInviteGenerateResponseError{Code: pb.RpcSpaceInviteGenerateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcSpaceInviteGenerateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcSpaceInviteGenerateResponse{Error: &pb.RpcSpaceInviteGenerateResponseError{Code: pb.RpcSpaceInviteGenerateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.SpaceInviteGenerate(context.Background(), in).Marshal()
	return resp
}

func SpaceInviteGetCurrent(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcSpaceInviteGetCurrentResponse{Error: &pb.RpcSpaceInviteGetCurrentResponseError{Code: pb.RpcSpaceInviteGetCurrentResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcSpaceInviteGetCurrentRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcSpaceInviteGetCurrentResponse{Error: &pb.RpcSpaceInviteGetCurrentResponseError{Code: pb.RpcSpaceInviteGetCurrentResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.SpaceInviteGetCurrent(context.Background(), in).Marshal()
	return resp
}

func SpaceInviteRevoke(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcSpaceInviteRevokeResponse{Error: &pb.RpcSpaceInviteRevokeResponseError{Code: pb.RpcSpaceInviteRevokeResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcSpaceInviteRevokeRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcSpaceInviteRevokeResponse{Error: &pb.RpcSpaceInviteRevokeResponseError{Code: pb.RpcSpaceInviteRevokeResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.SpaceInviteRevoke(context.Background(), in).Marshal()
	return resp
}

func SpaceInviteView(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcSpaceInviteViewResponse{Error: &pb.RpcSpaceInviteViewResponseError{Code: pb.RpcSpaceInviteViewResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcSpaceInviteViewRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcSpaceInviteViewResponse{Error: &pb.RpcSpaceInviteViewResponseError{Code: pb.RpcSpaceInviteViewResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.SpaceInviteView(context.Background(), in).Marshal()
	return resp
}

func SpaceJoin(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcSpaceJoinResponse{Error: &pb.RpcSpaceJoinResponseError{Code: pb.RpcSpaceJoinResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcSpaceJoinRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcSpaceJoinResponse{Error: &pb.RpcSpaceJoinResponseError{Code: pb.RpcSpaceJoinResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.SpaceJoin(context.Background(), in).Marshal()
	return resp
}

func SpaceJoinCancel(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcSpaceJoinCancelResponse{Error: &pb.RpcSpaceJoinCancelResponseError{Code: pb.RpcSpaceJoinCancelResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcSpaceJoinCancelRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcSpaceJoinCancelResponse{Error: &pb.RpcSpaceJoinCancelResponseError{Code: pb.RpcSpaceJoinCancelResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.SpaceJoinCancel(context.Background(), in).Marshal()
	return resp
}

func SpaceExit(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcSpaceExitResponse{Error: &pb.RpcSpaceExitResponseError{Code: pb.RpcSpaceExitResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcSpaceExitRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcSpaceExitResponse{Error: &pb.RpcSpaceExitResponseError{Code: pb.RpcSpaceExitResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.SpaceExit(context.Background(), in).Marshal()
	return resp
}

func SpaceStopSharing(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcSpaceStopSharingResponse{Error: &pb.RpcSpaceStopSharingResponseError{Code: pb.RpcSpaceStopSharingResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcSpaceStopSharingRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcSpaceStopSharingResponse{Error: &pb.RpcSpaceStopSharingResponseError{Code: pb.RpcSpaceStopSharingResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.SpaceStopSharing(context.Background(), in).Marshal()
	return resp
}

func SpaceRequestApprove(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcSpaceRequestApproveResponse{Error: &pb.RpcSpaceRequestApproveResponseError{Code: pb.RpcSpaceRequestApproveResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcSpaceRequestApproveRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcSpaceRequestApproveResponse{Error: &pb.RpcSpaceRequestApproveResponseError{Code: pb.RpcSpaceRequestApproveResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.SpaceRequestApprove(context.Background(), in).Marshal()
	return resp
}

func SpaceRequestDecline(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcSpaceRequestDeclineResponse{Error: &pb.RpcSpaceRequestDeclineResponseError{Code: pb.RpcSpaceRequestDeclineResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcSpaceRequestDeclineRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcSpaceRequestDeclineResponse{Error: &pb.RpcSpaceRequestDeclineResponseError{Code: pb.RpcSpaceRequestDeclineResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.SpaceRequestDecline(context.Background(), in).Marshal()
	return resp
}

func SpaceParticipantRemove(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcSpaceParticipantRemoveResponse{Error: &pb.RpcSpaceParticipantRemoveResponseError{Code: pb.RpcSpaceParticipantRemoveResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcSpaceParticipantRemoveRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcSpaceParticipantRemoveResponse{Error: &pb.RpcSpaceParticipantRemoveResponseError{Code: pb.RpcSpaceParticipantRemoveResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.SpaceParticipantRemove(context.Background(), in).Marshal()
	return resp
}

func SpaceParticipantPermissionsChange(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcSpaceParticipantPermissionsChangeResponse{Error: &pb.RpcSpaceParticipantPermissionsChangeResponseError{Code: pb.RpcSpaceParticipantPermissionsChangeResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcSpaceParticipantPermissionsChangeRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcSpaceParticipantPermissionsChangeResponse{Error: &pb.RpcSpaceParticipantPermissionsChangeResponseError{Code: pb.RpcSpaceParticipantPermissionsChangeResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.SpaceParticipantPermissionsChange(context.Background(), in).Marshal()
	return resp
}

func ObjectOpen(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectOpenResponse{Error: &pb.RpcObjectOpenResponseError{Code: pb.RpcObjectOpenResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectOpenRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectOpenResponse{Error: &pb.RpcObjectOpenResponseError{Code: pb.RpcObjectOpenResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectOpen(context.Background(), in).Marshal()
	return resp
}

func ObjectClose(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectCloseResponse{Error: &pb.RpcObjectCloseResponseError{Code: pb.RpcObjectCloseResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectCloseRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectCloseResponse{Error: &pb.RpcObjectCloseResponseError{Code: pb.RpcObjectCloseResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectClose(context.Background(), in).Marshal()
	return resp
}

func ObjectShow(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectShowResponse{Error: &pb.RpcObjectShowResponseError{Code: pb.RpcObjectShowResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectShowRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectShowResponse{Error: &pb.RpcObjectShowResponseError{Code: pb.RpcObjectShowResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectShow(context.Background(), in).Marshal()
	return resp
}

func ObjectCreate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectCreateResponse{Error: &pb.RpcObjectCreateResponseError{Code: pb.RpcObjectCreateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectCreateResponse{Error: &pb.RpcObjectCreateResponseError{Code: pb.RpcObjectCreateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectCreate(context.Background(), in).Marshal()
	return resp
}

func ObjectCreateBookmark(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectCreateBookmarkResponse{Error: &pb.RpcObjectCreateBookmarkResponseError{Code: pb.RpcObjectCreateBookmarkResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectCreateBookmarkRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectCreateBookmarkResponse{Error: &pb.RpcObjectCreateBookmarkResponseError{Code: pb.RpcObjectCreateBookmarkResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectCreateBookmark(context.Background(), in).Marshal()
	return resp
}

func ObjectCreateFromUrl(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectCreateFromUrlResponse{Error: &pb.RpcObjectCreateFromUrlResponseError{Code: pb.RpcObjectCreateFromUrlResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectCreateFromUrlRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectCreateFromUrlResponse{Error: &pb.RpcObjectCreateFromUrlResponseError{Code: pb.RpcObjectCreateFromUrlResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectCreateFromUrl(context.Background(), in).Marshal()
	return resp
}

func ObjectCreateSet(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectCreateSetResponse{Error: &pb.RpcObjectCreateSetResponseError{Code: pb.RpcObjectCreateSetResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectCreateSetRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectCreateSetResponse{Error: &pb.RpcObjectCreateSetResponseError{Code: pb.RpcObjectCreateSetResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectCreateSet(context.Background(), in).Marshal()
	return resp
}

func ObjectGraph(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectGraphResponse{Error: &pb.RpcObjectGraphResponseError{Code: pb.RpcObjectGraphResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectGraphRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectGraphResponse{Error: &pb.RpcObjectGraphResponseError{Code: pb.RpcObjectGraphResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectGraph(context.Background(), in).Marshal()
	return resp
}

func ObjectSearch(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSearchResponse{Error: &pb.RpcObjectSearchResponseError{Code: pb.RpcObjectSearchResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSearchRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectSearchResponse{Error: &pb.RpcObjectSearchResponseError{Code: pb.RpcObjectSearchResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSearch(context.Background(), in).Marshal()
	return resp
}

func ObjectSearchSubscribe(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSearchSubscribeResponse{Error: &pb.RpcObjectSearchSubscribeResponseError{Code: pb.RpcObjectSearchSubscribeResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSearchSubscribeRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectSearchSubscribeResponse{Error: &pb.RpcObjectSearchSubscribeResponseError{Code: pb.RpcObjectSearchSubscribeResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSearchSubscribe(context.Background(), in).Marshal()
	return resp
}

func ObjectSubscribeIds(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSubscribeIdsResponse{Error: &pb.RpcObjectSubscribeIdsResponseError{Code: pb.RpcObjectSubscribeIdsResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSubscribeIdsRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectSubscribeIdsResponse{Error: &pb.RpcObjectSubscribeIdsResponseError{Code: pb.RpcObjectSubscribeIdsResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSubscribeIds(context.Background(), in).Marshal()
	return resp
}

func ObjectGroupsSubscribe(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectGroupsSubscribeResponse{Error: &pb.RpcObjectGroupsSubscribeResponseError{Code: pb.RpcObjectGroupsSubscribeResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectGroupsSubscribeRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectGroupsSubscribeResponse{Error: &pb.RpcObjectGroupsSubscribeResponseError{Code: pb.RpcObjectGroupsSubscribeResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectGroupsSubscribe(context.Background(), in).Marshal()
	return resp
}

func ObjectSearchUnsubscribe(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSearchUnsubscribeResponse{Error: &pb.RpcObjectSearchUnsubscribeResponseError{Code: pb.RpcObjectSearchUnsubscribeResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSearchUnsubscribeRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectSearchUnsubscribeResponse{Error: &pb.RpcObjectSearchUnsubscribeResponseError{Code: pb.RpcObjectSearchUnsubscribeResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSearchUnsubscribe(context.Background(), in).Marshal()
	return resp
}

func ObjectSetDetails(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSetDetailsResponse{Error: &pb.RpcObjectSetDetailsResponseError{Code: pb.RpcObjectSetDetailsResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSetDetailsRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectSetDetailsResponse{Error: &pb.RpcObjectSetDetailsResponseError{Code: pb.RpcObjectSetDetailsResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSetDetails(context.Background(), in).Marshal()
	return resp
}

func ObjectDuplicate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectDuplicateResponse{Error: &pb.RpcObjectDuplicateResponseError{Code: pb.RpcObjectDuplicateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectDuplicateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectDuplicateResponse{Error: &pb.RpcObjectDuplicateResponseError{Code: pb.RpcObjectDuplicateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectDuplicate(context.Background(), in).Marshal()
	return resp
}

func ObjectSetObjectType(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSetObjectTypeResponse{Error: &pb.RpcObjectSetObjectTypeResponseError{Code: pb.RpcObjectSetObjectTypeResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSetObjectTypeRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectSetObjectTypeResponse{Error: &pb.RpcObjectSetObjectTypeResponseError{Code: pb.RpcObjectSetObjectTypeResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSetObjectType(context.Background(), in).Marshal()
	return resp
}

func ObjectSetLayout(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSetLayoutResponse{Error: &pb.RpcObjectSetLayoutResponseError{Code: pb.RpcObjectSetLayoutResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSetLayoutRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectSetLayoutResponse{Error: &pb.RpcObjectSetLayoutResponseError{Code: pb.RpcObjectSetLayoutResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSetLayout(context.Background(), in).Marshal()
	return resp
}

func ObjectSetInternalFlags(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSetInternalFlagsResponse{Error: &pb.RpcObjectSetInternalFlagsResponseError{Code: pb.RpcObjectSetInternalFlagsResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSetInternalFlagsRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectSetInternalFlagsResponse{Error: &pb.RpcObjectSetInternalFlagsResponseError{Code: pb.RpcObjectSetInternalFlagsResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSetInternalFlags(context.Background(), in).Marshal()
	return resp
}

func ObjectSetIsFavorite(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSetIsFavoriteResponse{Error: &pb.RpcObjectSetIsFavoriteResponseError{Code: pb.RpcObjectSetIsFavoriteResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSetIsFavoriteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectSetIsFavoriteResponse{Error: &pb.RpcObjectSetIsFavoriteResponseError{Code: pb.RpcObjectSetIsFavoriteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSetIsFavorite(context.Background(), in).Marshal()
	return resp
}

func ObjectSetIsArchived(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSetIsArchivedResponse{Error: &pb.RpcObjectSetIsArchivedResponseError{Code: pb.RpcObjectSetIsArchivedResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSetIsArchivedRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectSetIsArchivedResponse{Error: &pb.RpcObjectSetIsArchivedResponseError{Code: pb.RpcObjectSetIsArchivedResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSetIsArchived(context.Background(), in).Marshal()
	return resp
}

func ObjectSetSource(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectSetSourceResponse{Error: &pb.RpcObjectSetSourceResponseError{Code: pb.RpcObjectSetSourceResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectSetSourceRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectSetSourceResponse{Error: &pb.RpcObjectSetSourceResponseError{Code: pb.RpcObjectSetSourceResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectSetSource(context.Background(), in).Marshal()
	return resp
}

func ObjectWorkspaceSetDashboard(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectWorkspaceSetDashboardResponse{Error: &pb.RpcObjectWorkspaceSetDashboardResponseError{Code: pb.RpcObjectWorkspaceSetDashboardResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectWorkspaceSetDashboardRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectWorkspaceSetDashboardResponse{Error: &pb.RpcObjectWorkspaceSetDashboardResponseError{Code: pb.RpcObjectWorkspaceSetDashboardResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectWorkspaceSetDashboard(context.Background(), in).Marshal()
	return resp
}

func ObjectListDuplicate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectListDuplicateResponse{Error: &pb.RpcObjectListDuplicateResponseError{Code: pb.RpcObjectListDuplicateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectListDuplicateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectListDuplicateResponse{Error: &pb.RpcObjectListDuplicateResponseError{Code: pb.RpcObjectListDuplicateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectListDuplicate(context.Background(), in).Marshal()
	return resp
}

func ObjectListDelete(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectListDeleteResponse{Error: &pb.RpcObjectListDeleteResponseError{Code: pb.RpcObjectListDeleteResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectListDeleteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectListDeleteResponse{Error: &pb.RpcObjectListDeleteResponseError{Code: pb.RpcObjectListDeleteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectListDelete(context.Background(), in).Marshal()
	return resp
}

func ObjectListSetIsArchived(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectListSetIsArchivedResponse{Error: &pb.RpcObjectListSetIsArchivedResponseError{Code: pb.RpcObjectListSetIsArchivedResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectListSetIsArchivedRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectListSetIsArchivedResponse{Error: &pb.RpcObjectListSetIsArchivedResponseError{Code: pb.RpcObjectListSetIsArchivedResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectListSetIsArchived(context.Background(), in).Marshal()
	return resp
}

func ObjectListSetIsFavorite(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectListSetIsFavoriteResponse{Error: &pb.RpcObjectListSetIsFavoriteResponseError{Code: pb.RpcObjectListSetIsFavoriteResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectListSetIsFavoriteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectListSetIsFavoriteResponse{Error: &pb.RpcObjectListSetIsFavoriteResponseError{Code: pb.RpcObjectListSetIsFavoriteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectListSetIsFavorite(context.Background(), in).Marshal()
	return resp
}

func ObjectListSetObjectType(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectListSetObjectTypeResponse{Error: &pb.RpcObjectListSetObjectTypeResponseError{Code: pb.RpcObjectListSetObjectTypeResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectListSetObjectTypeRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectListSetObjectTypeResponse{Error: &pb.RpcObjectListSetObjectTypeResponseError{Code: pb.RpcObjectListSetObjectTypeResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectListSetObjectType(context.Background(), in).Marshal()
	return resp
}

func ObjectApplyTemplate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectApplyTemplateResponse{Error: &pb.RpcObjectApplyTemplateResponseError{Code: pb.RpcObjectApplyTemplateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectApplyTemplateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectApplyTemplateResponse{Error: &pb.RpcObjectApplyTemplateResponseError{Code: pb.RpcObjectApplyTemplateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectApplyTemplate(context.Background(), in).Marshal()
	return resp
}

func ObjectToSet(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectToSetResponse{Error: &pb.RpcObjectToSetResponseError{Code: pb.RpcObjectToSetResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectToSetRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectToSetResponse{Error: &pb.RpcObjectToSetResponseError{Code: pb.RpcObjectToSetResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectToSet(context.Background(), in).Marshal()
	return resp
}

func ObjectToCollection(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectToCollectionResponse{Error: &pb.RpcObjectToCollectionResponseError{Code: pb.RpcObjectToCollectionResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectToCollectionRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectToCollectionResponse{Error: &pb.RpcObjectToCollectionResponseError{Code: pb.RpcObjectToCollectionResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectToCollection(context.Background(), in).Marshal()
	return resp
}

func ObjectShareByLink(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectShareByLinkResponse{Error: &pb.RpcObjectShareByLinkResponseError{Code: pb.RpcObjectShareByLinkResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectShareByLinkRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectShareByLinkResponse{Error: &pb.RpcObjectShareByLinkResponseError{Code: pb.RpcObjectShareByLinkResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectShareByLink(context.Background(), in).Marshal()
	return resp
}

func ObjectUndo(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectUndoResponse{Error: &pb.RpcObjectUndoResponseError{Code: pb.RpcObjectUndoResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectUndoRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectUndoResponse{Error: &pb.RpcObjectUndoResponseError{Code: pb.RpcObjectUndoResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectUndo(context.Background(), in).Marshal()
	return resp
}

func ObjectRedo(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectRedoResponse{Error: &pb.RpcObjectRedoResponseError{Code: pb.RpcObjectRedoResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectRedoRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectRedoResponse{Error: &pb.RpcObjectRedoResponseError{Code: pb.RpcObjectRedoResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectRedo(context.Background(), in).Marshal()
	return resp
}

func ObjectListExport(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectListExportResponse{Error: &pb.RpcObjectListExportResponseError{Code: pb.RpcObjectListExportResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectListExportRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectListExportResponse{Error: &pb.RpcObjectListExportResponseError{Code: pb.RpcObjectListExportResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectListExport(context.Background(), in).Marshal()
	return resp
}

func ObjectBookmarkFetch(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectBookmarkFetchResponse{Error: &pb.RpcObjectBookmarkFetchResponseError{Code: pb.RpcObjectBookmarkFetchResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectBookmarkFetchRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectBookmarkFetchResponse{Error: &pb.RpcObjectBookmarkFetchResponseError{Code: pb.RpcObjectBookmarkFetchResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectBookmarkFetch(context.Background(), in).Marshal()
	return resp
}

func ObjectToBookmark(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectToBookmarkResponse{Error: &pb.RpcObjectToBookmarkResponseError{Code: pb.RpcObjectToBookmarkResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectToBookmarkRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectToBookmarkResponse{Error: &pb.RpcObjectToBookmarkResponseError{Code: pb.RpcObjectToBookmarkResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectToBookmark(context.Background(), in).Marshal()
	return resp
}

func ObjectImport(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectImportResponse{Error: &pb.RpcObjectImportResponseError{Code: pb.RpcObjectImportResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectImportRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectImportResponse{Error: &pb.RpcObjectImportResponseError{Code: pb.RpcObjectImportResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectImport(context.Background(), in).Marshal()
	return resp
}

func ObjectImportList(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectImportListResponse{Error: &pb.RpcObjectImportListResponseError{Code: pb.RpcObjectImportListResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectImportListRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectImportListResponse{Error: &pb.RpcObjectImportListResponseError{Code: pb.RpcObjectImportListResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectImportList(context.Background(), in).Marshal()
	return resp
}

func ObjectImportNotionValidateToken(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectImportNotionValidateTokenResponse{Error: &pb.RpcObjectImportNotionValidateTokenResponseError{Code: pb.RpcObjectImportNotionValidateTokenResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectImportNotionValidateTokenRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectImportNotionValidateTokenResponse{Error: &pb.RpcObjectImportNotionValidateTokenResponseError{Code: pb.RpcObjectImportNotionValidateTokenResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectImportNotionValidateToken(context.Background(), in).Marshal()
	return resp
}

func ObjectImportUseCase(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectImportUseCaseResponse{Error: &pb.RpcObjectImportUseCaseResponseError{Code: pb.RpcObjectImportUseCaseResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectImportUseCaseRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectImportUseCaseResponse{Error: &pb.RpcObjectImportUseCaseResponseError{Code: pb.RpcObjectImportUseCaseResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectImportUseCase(context.Background(), in).Marshal()
	return resp
}

func ObjectImportExperience(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectImportExperienceResponse{Error: &pb.RpcObjectImportExperienceResponseError{Code: pb.RpcObjectImportExperienceResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectImportExperienceRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectImportExperienceResponse{Error: &pb.RpcObjectImportExperienceResponseError{Code: pb.RpcObjectImportExperienceResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectImportExperience(context.Background(), in).Marshal()
	return resp
}

func ObjectCollectionAdd(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectCollectionAddResponse{Error: &pb.RpcObjectCollectionAddResponseError{Code: pb.RpcObjectCollectionAddResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectCollectionAddRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectCollectionAddResponse{Error: &pb.RpcObjectCollectionAddResponseError{Code: pb.RpcObjectCollectionAddResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectCollectionAdd(context.Background(), in).Marshal()
	return resp
}

func ObjectCollectionRemove(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectCollectionRemoveResponse{Error: &pb.RpcObjectCollectionRemoveResponseError{Code: pb.RpcObjectCollectionRemoveResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectCollectionRemoveRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectCollectionRemoveResponse{Error: &pb.RpcObjectCollectionRemoveResponseError{Code: pb.RpcObjectCollectionRemoveResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectCollectionRemove(context.Background(), in).Marshal()
	return resp
}

func ObjectCollectionSort(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectCollectionSortResponse{Error: &pb.RpcObjectCollectionSortResponseError{Code: pb.RpcObjectCollectionSortResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectCollectionSortRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectCollectionSortResponse{Error: &pb.RpcObjectCollectionSortResponseError{Code: pb.RpcObjectCollectionSortResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectCollectionSort(context.Background(), in).Marshal()
	return resp
}

func ObjectCreateRelation(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectCreateRelationResponse{Error: &pb.RpcObjectCreateRelationResponseError{Code: pb.RpcObjectCreateRelationResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectCreateRelationRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectCreateRelationResponse{Error: &pb.RpcObjectCreateRelationResponseError{Code: pb.RpcObjectCreateRelationResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectCreateRelation(context.Background(), in).Marshal()
	return resp
}

func ObjectCreateRelationOption(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectCreateRelationOptionResponse{Error: &pb.RpcObjectCreateRelationOptionResponseError{Code: pb.RpcObjectCreateRelationOptionResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectCreateRelationOptionRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectCreateRelationOptionResponse{Error: &pb.RpcObjectCreateRelationOptionResponseError{Code: pb.RpcObjectCreateRelationOptionResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectCreateRelationOption(context.Background(), in).Marshal()
	return resp
}

func RelationListRemoveOption(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcRelationListRemoveOptionResponse{Error: &pb.RpcRelationListRemoveOptionResponseError{Code: pb.RpcRelationListRemoveOptionResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcRelationListRemoveOptionRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcRelationListRemoveOptionResponse{Error: &pb.RpcRelationListRemoveOptionResponseError{Code: pb.RpcRelationListRemoveOptionResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.RelationListRemoveOption(context.Background(), in).Marshal()
	return resp
}

func RelationOptions(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcRelationOptionsResponse{Error: &pb.RpcRelationOptionsResponseError{Code: pb.RpcRelationOptionsResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcRelationOptionsRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcRelationOptionsResponse{Error: &pb.RpcRelationOptionsResponseError{Code: pb.RpcRelationOptionsResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.RelationOptions(context.Background(), in).Marshal()
	return resp
}

func ObjectRelationAdd(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectRelationAddResponse{Error: &pb.RpcObjectRelationAddResponseError{Code: pb.RpcObjectRelationAddResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectRelationAddRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectRelationAddResponse{Error: &pb.RpcObjectRelationAddResponseError{Code: pb.RpcObjectRelationAddResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectRelationAdd(context.Background(), in).Marshal()
	return resp
}

func ObjectRelationDelete(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectRelationDeleteResponse{Error: &pb.RpcObjectRelationDeleteResponseError{Code: pb.RpcObjectRelationDeleteResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectRelationDeleteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectRelationDeleteResponse{Error: &pb.RpcObjectRelationDeleteResponseError{Code: pb.RpcObjectRelationDeleteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectRelationDelete(context.Background(), in).Marshal()
	return resp
}

func ObjectRelationAddFeatured(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectRelationAddFeaturedResponse{Error: &pb.RpcObjectRelationAddFeaturedResponseError{Code: pb.RpcObjectRelationAddFeaturedResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectRelationAddFeaturedRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectRelationAddFeaturedResponse{Error: &pb.RpcObjectRelationAddFeaturedResponseError{Code: pb.RpcObjectRelationAddFeaturedResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectRelationAddFeatured(context.Background(), in).Marshal()
	return resp
}

func ObjectRelationRemoveFeatured(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectRelationRemoveFeaturedResponse{Error: &pb.RpcObjectRelationRemoveFeaturedResponseError{Code: pb.RpcObjectRelationRemoveFeaturedResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectRelationRemoveFeaturedRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectRelationRemoveFeaturedResponse{Error: &pb.RpcObjectRelationRemoveFeaturedResponseError{Code: pb.RpcObjectRelationRemoveFeaturedResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectRelationRemoveFeatured(context.Background(), in).Marshal()
	return resp
}

func ObjectRelationListAvailable(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectRelationListAvailableResponse{Error: &pb.RpcObjectRelationListAvailableResponseError{Code: pb.RpcObjectRelationListAvailableResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectRelationListAvailableRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectRelationListAvailableResponse{Error: &pb.RpcObjectRelationListAvailableResponseError{Code: pb.RpcObjectRelationListAvailableResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectRelationListAvailable(context.Background(), in).Marshal()
	return resp
}

func ObjectCreateObjectType(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectCreateObjectTypeResponse{Error: &pb.RpcObjectCreateObjectTypeResponseError{Code: pb.RpcObjectCreateObjectTypeResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectCreateObjectTypeRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectCreateObjectTypeResponse{Error: &pb.RpcObjectCreateObjectTypeResponseError{Code: pb.RpcObjectCreateObjectTypeResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectCreateObjectType(context.Background(), in).Marshal()
	return resp
}

func ObjectTypeRelationAdd(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectTypeRelationAddResponse{Error: &pb.RpcObjectTypeRelationAddResponseError{Code: pb.RpcObjectTypeRelationAddResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectTypeRelationAddRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectTypeRelationAddResponse{Error: &pb.RpcObjectTypeRelationAddResponseError{Code: pb.RpcObjectTypeRelationAddResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectTypeRelationAdd(context.Background(), in).Marshal()
	return resp
}

func ObjectTypeRelationRemove(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcObjectTypeRelationRemoveResponse{Error: &pb.RpcObjectTypeRelationRemoveResponseError{Code: pb.RpcObjectTypeRelationRemoveResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcObjectTypeRelationRemoveRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcObjectTypeRelationRemoveResponse{Error: &pb.RpcObjectTypeRelationRemoveResponseError{Code: pb.RpcObjectTypeRelationRemoveResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ObjectTypeRelationRemove(context.Background(), in).Marshal()
	return resp
}

func HistoryShowVersion(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcHistoryShowVersionResponse{Error: &pb.RpcHistoryShowVersionResponseError{Code: pb.RpcHistoryShowVersionResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcHistoryShowVersionRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcHistoryShowVersionResponse{Error: &pb.RpcHistoryShowVersionResponseError{Code: pb.RpcHistoryShowVersionResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.HistoryShowVersion(context.Background(), in).Marshal()
	return resp
}

func HistoryGetVersions(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcHistoryGetVersionsResponse{Error: &pb.RpcHistoryGetVersionsResponseError{Code: pb.RpcHistoryGetVersionsResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcHistoryGetVersionsRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcHistoryGetVersionsResponse{Error: &pb.RpcHistoryGetVersionsResponseError{Code: pb.RpcHistoryGetVersionsResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.HistoryGetVersions(context.Background(), in).Marshal()
	return resp
}

func HistorySetVersion(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcHistorySetVersionResponse{Error: &pb.RpcHistorySetVersionResponseError{Code: pb.RpcHistorySetVersionResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcHistorySetVersionRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcHistorySetVersionResponse{Error: &pb.RpcHistorySetVersionResponseError{Code: pb.RpcHistorySetVersionResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.HistorySetVersion(context.Background(), in).Marshal()
	return resp
}

func FileOffload(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcFileOffloadResponse{Error: &pb.RpcFileOffloadResponseError{Code: pb.RpcFileOffloadResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcFileOffloadRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcFileOffloadResponse{Error: &pb.RpcFileOffloadResponseError{Code: pb.RpcFileOffloadResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.FileOffload(context.Background(), in).Marshal()
	return resp
}

func FileSpaceOffload(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcFileSpaceOffloadResponse{Error: &pb.RpcFileSpaceOffloadResponseError{Code: pb.RpcFileSpaceOffloadResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcFileSpaceOffloadRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcFileSpaceOffloadResponse{Error: &pb.RpcFileSpaceOffloadResponseError{Code: pb.RpcFileSpaceOffloadResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.FileSpaceOffload(context.Background(), in).Marshal()
	return resp
}

func FileListOffload(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcFileListOffloadResponse{Error: &pb.RpcFileListOffloadResponseError{Code: pb.RpcFileListOffloadResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcFileListOffloadRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcFileListOffloadResponse{Error: &pb.RpcFileListOffloadResponseError{Code: pb.RpcFileListOffloadResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.FileListOffload(context.Background(), in).Marshal()
	return resp
}

func FileUpload(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcFileUploadResponse{Error: &pb.RpcFileUploadResponseError{Code: pb.RpcFileUploadResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcFileUploadRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcFileUploadResponse{Error: &pb.RpcFileUploadResponseError{Code: pb.RpcFileUploadResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.FileUpload(context.Background(), in).Marshal()
	return resp
}

func FileDownload(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcFileDownloadResponse{Error: &pb.RpcFileDownloadResponseError{Code: pb.RpcFileDownloadResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcFileDownloadRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcFileDownloadResponse{Error: &pb.RpcFileDownloadResponseError{Code: pb.RpcFileDownloadResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.FileDownload(context.Background(), in).Marshal()
	return resp
}

func FileDrop(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcFileDropResponse{Error: &pb.RpcFileDropResponseError{Code: pb.RpcFileDropResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcFileDropRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcFileDropResponse{Error: &pb.RpcFileDropResponseError{Code: pb.RpcFileDropResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.FileDrop(context.Background(), in).Marshal()
	return resp
}

func FileSpaceUsage(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcFileSpaceUsageResponse{Error: &pb.RpcFileSpaceUsageResponseError{Code: pb.RpcFileSpaceUsageResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcFileSpaceUsageRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcFileSpaceUsageResponse{Error: &pb.RpcFileSpaceUsageResponseError{Code: pb.RpcFileSpaceUsageResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.FileSpaceUsage(context.Background(), in).Marshal()
	return resp
}

func FileNodeUsage(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcFileNodeUsageResponse{Error: &pb.RpcFileNodeUsageResponseError{Code: pb.RpcFileNodeUsageResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcFileNodeUsageRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcFileNodeUsageResponse{Error: &pb.RpcFileNodeUsageResponseError{Code: pb.RpcFileNodeUsageResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.FileNodeUsage(context.Background(), in).Marshal()
	return resp
}

func NavigationListObjects(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcNavigationListObjectsResponse{Error: &pb.RpcNavigationListObjectsResponseError{Code: pb.RpcNavigationListObjectsResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcNavigationListObjectsRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcNavigationListObjectsResponse{Error: &pb.RpcNavigationListObjectsResponseError{Code: pb.RpcNavigationListObjectsResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.NavigationListObjects(context.Background(), in).Marshal()
	return resp
}

func NavigationGetObjectInfoWithLinks(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcNavigationGetObjectInfoWithLinksResponse{Error: &pb.RpcNavigationGetObjectInfoWithLinksResponseError{Code: pb.RpcNavigationGetObjectInfoWithLinksResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcNavigationGetObjectInfoWithLinksRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcNavigationGetObjectInfoWithLinksResponse{Error: &pb.RpcNavigationGetObjectInfoWithLinksResponseError{Code: pb.RpcNavigationGetObjectInfoWithLinksResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.NavigationGetObjectInfoWithLinks(context.Background(), in).Marshal()
	return resp
}

func TemplateCreateFromObject(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcTemplateCreateFromObjectResponse{Error: &pb.RpcTemplateCreateFromObjectResponseError{Code: pb.RpcTemplateCreateFromObjectResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcTemplateCreateFromObjectRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcTemplateCreateFromObjectResponse{Error: &pb.RpcTemplateCreateFromObjectResponseError{Code: pb.RpcTemplateCreateFromObjectResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.TemplateCreateFromObject(context.Background(), in).Marshal()
	return resp
}

func TemplateClone(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcTemplateCloneResponse{Error: &pb.RpcTemplateCloneResponseError{Code: pb.RpcTemplateCloneResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcTemplateCloneRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcTemplateCloneResponse{Error: &pb.RpcTemplateCloneResponseError{Code: pb.RpcTemplateCloneResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.TemplateClone(context.Background(), in).Marshal()
	return resp
}

func TemplateExportAll(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcTemplateExportAllResponse{Error: &pb.RpcTemplateExportAllResponseError{Code: pb.RpcTemplateExportAllResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcTemplateExportAllRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcTemplateExportAllResponse{Error: &pb.RpcTemplateExportAllResponseError{Code: pb.RpcTemplateExportAllResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.TemplateExportAll(context.Background(), in).Marshal()
	return resp
}

func LinkPreview(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcLinkPreviewResponse{Error: &pb.RpcLinkPreviewResponseError{Code: pb.RpcLinkPreviewResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcLinkPreviewRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcLinkPreviewResponse{Error: &pb.RpcLinkPreviewResponseError{Code: pb.RpcLinkPreviewResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.LinkPreview(context.Background(), in).Marshal()
	return resp
}

func UnsplashSearch(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcUnsplashSearchResponse{Error: &pb.RpcUnsplashSearchResponseError{Code: pb.RpcUnsplashSearchResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcUnsplashSearchRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcUnsplashSearchResponse{Error: &pb.RpcUnsplashSearchResponseError{Code: pb.RpcUnsplashSearchResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.UnsplashSearch(context.Background(), in).Marshal()
	return resp
}

func UnsplashDownload(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcUnsplashDownloadResponse{Error: &pb.RpcUnsplashDownloadResponseError{Code: pb.RpcUnsplashDownloadResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcUnsplashDownloadRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcUnsplashDownloadResponse{Error: &pb.RpcUnsplashDownloadResponseError{Code: pb.RpcUnsplashDownloadResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.UnsplashDownload(context.Background(), in).Marshal()
	return resp
}

func GalleryDownloadManifest(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcGalleryDownloadManifestResponse{Error: &pb.RpcGalleryDownloadManifestResponseError{Code: pb.RpcGalleryDownloadManifestResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcGalleryDownloadManifestRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcGalleryDownloadManifestResponse{Error: &pb.RpcGalleryDownloadManifestResponseError{Code: pb.RpcGalleryDownloadManifestResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.GalleryDownloadManifest(context.Background(), in).Marshal()
	return resp
}

func GalleryDownloadIndex(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcGalleryDownloadIndexResponse{Error: &pb.RpcGalleryDownloadIndexResponseError{Code: pb.RpcGalleryDownloadIndexResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcGalleryDownloadIndexRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcGalleryDownloadIndexResponse{Error: &pb.RpcGalleryDownloadIndexResponseError{Code: pb.RpcGalleryDownloadIndexResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.GalleryDownloadIndex(context.Background(), in).Marshal()
	return resp
}

func BlockUpload(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockUploadResponse{Error: &pb.RpcBlockUploadResponseError{Code: pb.RpcBlockUploadResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockUploadRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockUploadResponse{Error: &pb.RpcBlockUploadResponseError{Code: pb.RpcBlockUploadResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockUpload(context.Background(), in).Marshal()
	return resp
}

func BlockReplace(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockReplaceResponse{Error: &pb.RpcBlockReplaceResponseError{Code: pb.RpcBlockReplaceResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockReplaceRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockReplaceResponse{Error: &pb.RpcBlockReplaceResponseError{Code: pb.RpcBlockReplaceResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockReplace(context.Background(), in).Marshal()
	return resp
}

func BlockCreate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockCreateResponse{Error: &pb.RpcBlockCreateResponseError{Code: pb.RpcBlockCreateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockCreateResponse{Error: &pb.RpcBlockCreateResponseError{Code: pb.RpcBlockCreateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockCreate(context.Background(), in).Marshal()
	return resp
}

func BlockSplit(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockSplitResponse{Error: &pb.RpcBlockSplitResponseError{Code: pb.RpcBlockSplitResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockSplitRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockSplitResponse{Error: &pb.RpcBlockSplitResponseError{Code: pb.RpcBlockSplitResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockSplit(context.Background(), in).Marshal()
	return resp
}

func BlockMerge(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockMergeResponse{Error: &pb.RpcBlockMergeResponseError{Code: pb.RpcBlockMergeResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockMergeRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockMergeResponse{Error: &pb.RpcBlockMergeResponseError{Code: pb.RpcBlockMergeResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockMerge(context.Background(), in).Marshal()
	return resp
}

func BlockCopy(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockCopyResponse{Error: &pb.RpcBlockCopyResponseError{Code: pb.RpcBlockCopyResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockCopyRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockCopyResponse{Error: &pb.RpcBlockCopyResponseError{Code: pb.RpcBlockCopyResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockCopy(context.Background(), in).Marshal()
	return resp
}

func BlockPaste(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockPasteResponse{Error: &pb.RpcBlockPasteResponseError{Code: pb.RpcBlockPasteResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockPasteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockPasteResponse{Error: &pb.RpcBlockPasteResponseError{Code: pb.RpcBlockPasteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockPaste(context.Background(), in).Marshal()
	return resp
}

func BlockCut(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockCutResponse{Error: &pb.RpcBlockCutResponseError{Code: pb.RpcBlockCutResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockCutRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockCutResponse{Error: &pb.RpcBlockCutResponseError{Code: pb.RpcBlockCutResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockCut(context.Background(), in).Marshal()
	return resp
}

func BlockSetFields(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockSetFieldsResponse{Error: &pb.RpcBlockSetFieldsResponseError{Code: pb.RpcBlockSetFieldsResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockSetFieldsRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockSetFieldsResponse{Error: &pb.RpcBlockSetFieldsResponseError{Code: pb.RpcBlockSetFieldsResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockSetFields(context.Background(), in).Marshal()
	return resp
}

func BlockExport(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockExportResponse{Error: &pb.RpcBlockExportResponseError{Code: pb.RpcBlockExportResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockExportRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockExportResponse{Error: &pb.RpcBlockExportResponseError{Code: pb.RpcBlockExportResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockExport(context.Background(), in).Marshal()
	return resp
}

func BlockSetCarriage(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockSetCarriageResponse{Error: &pb.RpcBlockSetCarriageResponseError{Code: pb.RpcBlockSetCarriageResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockSetCarriageRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockSetCarriageResponse{Error: &pb.RpcBlockSetCarriageResponseError{Code: pb.RpcBlockSetCarriageResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockSetCarriage(context.Background(), in).Marshal()
	return resp
}

func BlockPreview(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockPreviewResponse{Error: &pb.RpcBlockPreviewResponseError{Code: pb.RpcBlockPreviewResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockPreviewRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockPreviewResponse{Error: &pb.RpcBlockPreviewResponseError{Code: pb.RpcBlockPreviewResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockPreview(context.Background(), in).Marshal()
	return resp
}

func BlockListDelete(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockListDeleteResponse{Error: &pb.RpcBlockListDeleteResponseError{Code: pb.RpcBlockListDeleteResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockListDeleteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockListDeleteResponse{Error: &pb.RpcBlockListDeleteResponseError{Code: pb.RpcBlockListDeleteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockListDelete(context.Background(), in).Marshal()
	return resp
}

func BlockListMoveToExistingObject(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockListMoveToExistingObjectResponse{Error: &pb.RpcBlockListMoveToExistingObjectResponseError{Code: pb.RpcBlockListMoveToExistingObjectResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockListMoveToExistingObjectRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockListMoveToExistingObjectResponse{Error: &pb.RpcBlockListMoveToExistingObjectResponseError{Code: pb.RpcBlockListMoveToExistingObjectResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockListMoveToExistingObject(context.Background(), in).Marshal()
	return resp
}

func BlockListMoveToNewObject(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockListMoveToNewObjectResponse{Error: &pb.RpcBlockListMoveToNewObjectResponseError{Code: pb.RpcBlockListMoveToNewObjectResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockListMoveToNewObjectRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockListMoveToNewObjectResponse{Error: &pb.RpcBlockListMoveToNewObjectResponseError{Code: pb.RpcBlockListMoveToNewObjectResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockListMoveToNewObject(context.Background(), in).Marshal()
	return resp
}

func BlockListConvertToObjects(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockListConvertToObjectsResponse{Error: &pb.RpcBlockListConvertToObjectsResponseError{Code: pb.RpcBlockListConvertToObjectsResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockListConvertToObjectsRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockListConvertToObjectsResponse{Error: &pb.RpcBlockListConvertToObjectsResponseError{Code: pb.RpcBlockListConvertToObjectsResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockListConvertToObjects(context.Background(), in).Marshal()
	return resp
}

func BlockListSetFields(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockListSetFieldsResponse{Error: &pb.RpcBlockListSetFieldsResponseError{Code: pb.RpcBlockListSetFieldsResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockListSetFieldsRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockListSetFieldsResponse{Error: &pb.RpcBlockListSetFieldsResponseError{Code: pb.RpcBlockListSetFieldsResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockListSetFields(context.Background(), in).Marshal()
	return resp
}

func BlockListDuplicate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockListDuplicateResponse{Error: &pb.RpcBlockListDuplicateResponseError{Code: pb.RpcBlockListDuplicateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockListDuplicateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockListDuplicateResponse{Error: &pb.RpcBlockListDuplicateResponseError{Code: pb.RpcBlockListDuplicateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockListDuplicate(context.Background(), in).Marshal()
	return resp
}

func BlockListSetBackgroundColor(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockListSetBackgroundColorResponse{Error: &pb.RpcBlockListSetBackgroundColorResponseError{Code: pb.RpcBlockListSetBackgroundColorResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockListSetBackgroundColorRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockListSetBackgroundColorResponse{Error: &pb.RpcBlockListSetBackgroundColorResponseError{Code: pb.RpcBlockListSetBackgroundColorResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockListSetBackgroundColor(context.Background(), in).Marshal()
	return resp
}

func BlockListSetAlign(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockListSetAlignResponse{Error: &pb.RpcBlockListSetAlignResponseError{Code: pb.RpcBlockListSetAlignResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockListSetAlignRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockListSetAlignResponse{Error: &pb.RpcBlockListSetAlignResponseError{Code: pb.RpcBlockListSetAlignResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockListSetAlign(context.Background(), in).Marshal()
	return resp
}

func BlockListSetVerticalAlign(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockListSetVerticalAlignResponse{Error: &pb.RpcBlockListSetVerticalAlignResponseError{Code: pb.RpcBlockListSetVerticalAlignResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockListSetVerticalAlignRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockListSetVerticalAlignResponse{Error: &pb.RpcBlockListSetVerticalAlignResponseError{Code: pb.RpcBlockListSetVerticalAlignResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockListSetVerticalAlign(context.Background(), in).Marshal()
	return resp
}

func BlockListTurnInto(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockListTurnIntoResponse{Error: &pb.RpcBlockListTurnIntoResponseError{Code: pb.RpcBlockListTurnIntoResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockListTurnIntoRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockListTurnIntoResponse{Error: &pb.RpcBlockListTurnIntoResponseError{Code: pb.RpcBlockListTurnIntoResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockListTurnInto(context.Background(), in).Marshal()
	return resp
}

func BlockTextSetText(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTextSetTextResponse{Error: &pb.RpcBlockTextSetTextResponseError{Code: pb.RpcBlockTextSetTextResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTextSetTextRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTextSetTextResponse{Error: &pb.RpcBlockTextSetTextResponseError{Code: pb.RpcBlockTextSetTextResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTextSetText(context.Background(), in).Marshal()
	return resp
}

func BlockTextSetColor(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTextSetColorResponse{Error: &pb.RpcBlockTextSetColorResponseError{Code: pb.RpcBlockTextSetColorResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTextSetColorRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTextSetColorResponse{Error: &pb.RpcBlockTextSetColorResponseError{Code: pb.RpcBlockTextSetColorResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTextSetColor(context.Background(), in).Marshal()
	return resp
}

func BlockTextSetStyle(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTextSetStyleResponse{Error: &pb.RpcBlockTextSetStyleResponseError{Code: pb.RpcBlockTextSetStyleResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTextSetStyleRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTextSetStyleResponse{Error: &pb.RpcBlockTextSetStyleResponseError{Code: pb.RpcBlockTextSetStyleResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTextSetStyle(context.Background(), in).Marshal()
	return resp
}

func BlockTextSetChecked(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTextSetCheckedResponse{Error: &pb.RpcBlockTextSetCheckedResponseError{Code: pb.RpcBlockTextSetCheckedResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTextSetCheckedRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTextSetCheckedResponse{Error: &pb.RpcBlockTextSetCheckedResponseError{Code: pb.RpcBlockTextSetCheckedResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTextSetChecked(context.Background(), in).Marshal()
	return resp
}

func BlockTextSetIcon(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTextSetIconResponse{Error: &pb.RpcBlockTextSetIconResponseError{Code: pb.RpcBlockTextSetIconResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTextSetIconRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTextSetIconResponse{Error: &pb.RpcBlockTextSetIconResponseError{Code: pb.RpcBlockTextSetIconResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTextSetIcon(context.Background(), in).Marshal()
	return resp
}

func BlockTextListSetColor(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTextListSetColorResponse{Error: &pb.RpcBlockTextListSetColorResponseError{Code: pb.RpcBlockTextListSetColorResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTextListSetColorRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTextListSetColorResponse{Error: &pb.RpcBlockTextListSetColorResponseError{Code: pb.RpcBlockTextListSetColorResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTextListSetColor(context.Background(), in).Marshal()
	return resp
}

func BlockTextListSetMark(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTextListSetMarkResponse{Error: &pb.RpcBlockTextListSetMarkResponseError{Code: pb.RpcBlockTextListSetMarkResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTextListSetMarkRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTextListSetMarkResponse{Error: &pb.RpcBlockTextListSetMarkResponseError{Code: pb.RpcBlockTextListSetMarkResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTextListSetMark(context.Background(), in).Marshal()
	return resp
}

func BlockTextListSetStyle(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTextListSetStyleResponse{Error: &pb.RpcBlockTextListSetStyleResponseError{Code: pb.RpcBlockTextListSetStyleResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTextListSetStyleRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTextListSetStyleResponse{Error: &pb.RpcBlockTextListSetStyleResponseError{Code: pb.RpcBlockTextListSetStyleResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTextListSetStyle(context.Background(), in).Marshal()
	return resp
}

func BlockTextListClearStyle(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTextListClearStyleResponse{Error: &pb.RpcBlockTextListClearStyleResponseError{Code: pb.RpcBlockTextListClearStyleResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTextListClearStyleRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTextListClearStyleResponse{Error: &pb.RpcBlockTextListClearStyleResponseError{Code: pb.RpcBlockTextListClearStyleResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTextListClearStyle(context.Background(), in).Marshal()
	return resp
}

func BlockTextListClearContent(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTextListClearContentResponse{Error: &pb.RpcBlockTextListClearContentResponseError{Code: pb.RpcBlockTextListClearContentResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTextListClearContentRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTextListClearContentResponse{Error: &pb.RpcBlockTextListClearContentResponseError{Code: pb.RpcBlockTextListClearContentResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTextListClearContent(context.Background(), in).Marshal()
	return resp
}

func BlockFileSetName(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockFileSetNameResponse{Error: &pb.RpcBlockFileSetNameResponseError{Code: pb.RpcBlockFileSetNameResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockFileSetNameRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockFileSetNameResponse{Error: &pb.RpcBlockFileSetNameResponseError{Code: pb.RpcBlockFileSetNameResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockFileSetName(context.Background(), in).Marshal()
	return resp
}

func BlockImageSetName(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockImageSetNameResponse{Error: &pb.RpcBlockImageSetNameResponseError{Code: pb.RpcBlockImageSetNameResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockImageSetNameRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockImageSetNameResponse{Error: &pb.RpcBlockImageSetNameResponseError{Code: pb.RpcBlockImageSetNameResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockImageSetName(context.Background(), in).Marshal()
	return resp
}

func BlockVideoSetName(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockVideoSetNameResponse{Error: &pb.RpcBlockVideoSetNameResponseError{Code: pb.RpcBlockVideoSetNameResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockVideoSetNameRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockVideoSetNameResponse{Error: &pb.RpcBlockVideoSetNameResponseError{Code: pb.RpcBlockVideoSetNameResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockVideoSetName(context.Background(), in).Marshal()
	return resp
}

func BlockFileCreateAndUpload(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockFileCreateAndUploadResponse{Error: &pb.RpcBlockFileCreateAndUploadResponseError{Code: pb.RpcBlockFileCreateAndUploadResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockFileCreateAndUploadRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockFileCreateAndUploadResponse{Error: &pb.RpcBlockFileCreateAndUploadResponseError{Code: pb.RpcBlockFileCreateAndUploadResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockFileCreateAndUpload(context.Background(), in).Marshal()
	return resp
}

func BlockFileListSetStyle(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockFileListSetStyleResponse{Error: &pb.RpcBlockFileListSetStyleResponseError{Code: pb.RpcBlockFileListSetStyleResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockFileListSetStyleRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockFileListSetStyleResponse{Error: &pb.RpcBlockFileListSetStyleResponseError{Code: pb.RpcBlockFileListSetStyleResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockFileListSetStyle(context.Background(), in).Marshal()
	return resp
}

func BlockDataviewViewCreate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewViewCreateResponse{Error: &pb.RpcBlockDataviewViewCreateResponseError{Code: pb.RpcBlockDataviewViewCreateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewViewCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewViewCreateResponse{Error: &pb.RpcBlockDataviewViewCreateResponseError{Code: pb.RpcBlockDataviewViewCreateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewViewCreate(context.Background(), in).Marshal()
	return resp
}

func BlockDataviewViewDelete(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewViewDeleteResponse{Error: &pb.RpcBlockDataviewViewDeleteResponseError{Code: pb.RpcBlockDataviewViewDeleteResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewViewDeleteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewViewDeleteResponse{Error: &pb.RpcBlockDataviewViewDeleteResponseError{Code: pb.RpcBlockDataviewViewDeleteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewViewDelete(context.Background(), in).Marshal()
	return resp
}

func BlockDataviewViewUpdate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewViewUpdateResponse{Error: &pb.RpcBlockDataviewViewUpdateResponseError{Code: pb.RpcBlockDataviewViewUpdateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewViewUpdateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewViewUpdateResponse{Error: &pb.RpcBlockDataviewViewUpdateResponseError{Code: pb.RpcBlockDataviewViewUpdateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewViewUpdate(context.Background(), in).Marshal()
	return resp
}

func BlockDataviewViewSetActive(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewViewSetActiveResponse{Error: &pb.RpcBlockDataviewViewSetActiveResponseError{Code: pb.RpcBlockDataviewViewSetActiveResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewViewSetActiveRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewViewSetActiveResponse{Error: &pb.RpcBlockDataviewViewSetActiveResponseError{Code: pb.RpcBlockDataviewViewSetActiveResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewViewSetActive(context.Background(), in).Marshal()
	return resp
}

func BlockDataviewViewSetPosition(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewViewSetPositionResponse{Error: &pb.RpcBlockDataviewViewSetPositionResponseError{Code: pb.RpcBlockDataviewViewSetPositionResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewViewSetPositionRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewViewSetPositionResponse{Error: &pb.RpcBlockDataviewViewSetPositionResponseError{Code: pb.RpcBlockDataviewViewSetPositionResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewViewSetPosition(context.Background(), in).Marshal()
	return resp
}

func BlockDataviewSetSource(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewSetSourceResponse{Error: &pb.RpcBlockDataviewSetSourceResponseError{Code: pb.RpcBlockDataviewSetSourceResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewSetSourceRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewSetSourceResponse{Error: &pb.RpcBlockDataviewSetSourceResponseError{Code: pb.RpcBlockDataviewSetSourceResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewSetSource(context.Background(), in).Marshal()
	return resp
}

func BlockDataviewRelationAdd(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewRelationAddResponse{Error: &pb.RpcBlockDataviewRelationAddResponseError{Code: pb.RpcBlockDataviewRelationAddResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewRelationAddRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewRelationAddResponse{Error: &pb.RpcBlockDataviewRelationAddResponseError{Code: pb.RpcBlockDataviewRelationAddResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewRelationAdd(context.Background(), in).Marshal()
	return resp
}

func BlockDataviewRelationDelete(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewRelationDeleteResponse{Error: &pb.RpcBlockDataviewRelationDeleteResponseError{Code: pb.RpcBlockDataviewRelationDeleteResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewRelationDeleteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewRelationDeleteResponse{Error: &pb.RpcBlockDataviewRelationDeleteResponseError{Code: pb.RpcBlockDataviewRelationDeleteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewRelationDelete(context.Background(), in).Marshal()
	return resp
}

func BlockDataviewRelationListAvailable(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewRelationListAvailableResponse{Error: &pb.RpcBlockDataviewRelationListAvailableResponseError{Code: pb.RpcBlockDataviewRelationListAvailableResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewRelationListAvailableRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewRelationListAvailableResponse{Error: &pb.RpcBlockDataviewRelationListAvailableResponseError{Code: pb.RpcBlockDataviewRelationListAvailableResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewRelationListAvailable(context.Background(), in).Marshal()
	return resp
}

func BlockDataviewGroupOrderUpdate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewGroupOrderUpdateResponse{Error: &pb.RpcBlockDataviewGroupOrderUpdateResponseError{Code: pb.RpcBlockDataviewGroupOrderUpdateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewGroupOrderUpdateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewGroupOrderUpdateResponse{Error: &pb.RpcBlockDataviewGroupOrderUpdateResponseError{Code: pb.RpcBlockDataviewGroupOrderUpdateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewGroupOrderUpdate(context.Background(), in).Marshal()
	return resp
}

func BlockDataviewObjectOrderUpdate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewObjectOrderUpdateResponse{Error: &pb.RpcBlockDataviewObjectOrderUpdateResponseError{Code: pb.RpcBlockDataviewObjectOrderUpdateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewObjectOrderUpdateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewObjectOrderUpdateResponse{Error: &pb.RpcBlockDataviewObjectOrderUpdateResponseError{Code: pb.RpcBlockDataviewObjectOrderUpdateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewObjectOrderUpdate(context.Background(), in).Marshal()
	return resp
}

func BlockDataviewObjectOrderMove(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewObjectOrderMoveResponse{Error: &pb.RpcBlockDataviewObjectOrderMoveResponseError{Code: pb.RpcBlockDataviewObjectOrderMoveResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewObjectOrderMoveRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewObjectOrderMoveResponse{Error: &pb.RpcBlockDataviewObjectOrderMoveResponseError{Code: pb.RpcBlockDataviewObjectOrderMoveResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewObjectOrderMove(context.Background(), in).Marshal()
	return resp
}

func BlockDataviewCreateFromExistingObject(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewCreateFromExistingObjectResponse{Error: &pb.RpcBlockDataviewCreateFromExistingObjectResponseError{Code: pb.RpcBlockDataviewCreateFromExistingObjectResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewCreateFromExistingObjectRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewCreateFromExistingObjectResponse{Error: &pb.RpcBlockDataviewCreateFromExistingObjectResponseError{Code: pb.RpcBlockDataviewCreateFromExistingObjectResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewCreateFromExistingObject(context.Background(), in).Marshal()
	return resp
}

func BlockDataviewFilterAdd(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewFilterAddResponse{Error: &pb.RpcBlockDataviewFilterAddResponseError{Code: pb.RpcBlockDataviewFilterAddResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewFilterAddRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewFilterAddResponse{Error: &pb.RpcBlockDataviewFilterAddResponseError{Code: pb.RpcBlockDataviewFilterAddResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewFilterAdd(context.Background(), in).Marshal()
	return resp
}

func BlockDataviewFilterRemove(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewFilterRemoveResponse{Error: &pb.RpcBlockDataviewFilterRemoveResponseError{Code: pb.RpcBlockDataviewFilterRemoveResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewFilterRemoveRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewFilterRemoveResponse{Error: &pb.RpcBlockDataviewFilterRemoveResponseError{Code: pb.RpcBlockDataviewFilterRemoveResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewFilterRemove(context.Background(), in).Marshal()
	return resp
}

func BlockDataviewFilterReplace(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewFilterReplaceResponse{Error: &pb.RpcBlockDataviewFilterReplaceResponseError{Code: pb.RpcBlockDataviewFilterReplaceResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewFilterReplaceRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewFilterReplaceResponse{Error: &pb.RpcBlockDataviewFilterReplaceResponseError{Code: pb.RpcBlockDataviewFilterReplaceResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewFilterReplace(context.Background(), in).Marshal()
	return resp
}

func BlockDataviewFilterSort(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewFilterSortResponse{Error: &pb.RpcBlockDataviewFilterSortResponseError{Code: pb.RpcBlockDataviewFilterSortResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewFilterSortRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewFilterSortResponse{Error: &pb.RpcBlockDataviewFilterSortResponseError{Code: pb.RpcBlockDataviewFilterSortResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewFilterSort(context.Background(), in).Marshal()
	return resp
}

func BlockDataviewSortAdd(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewSortAddResponse{Error: &pb.RpcBlockDataviewSortAddResponseError{Code: pb.RpcBlockDataviewSortAddResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewSortAddRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewSortAddResponse{Error: &pb.RpcBlockDataviewSortAddResponseError{Code: pb.RpcBlockDataviewSortAddResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewSortAdd(context.Background(), in).Marshal()
	return resp
}

func BlockDataviewSortRemove(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewSortRemoveResponse{Error: &pb.RpcBlockDataviewSortRemoveResponseError{Code: pb.RpcBlockDataviewSortRemoveResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewSortRemoveRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewSortRemoveResponse{Error: &pb.RpcBlockDataviewSortRemoveResponseError{Code: pb.RpcBlockDataviewSortRemoveResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewSortRemove(context.Background(), in).Marshal()
	return resp
}

func BlockDataviewSortReplace(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewSortReplaceResponse{Error: &pb.RpcBlockDataviewSortReplaceResponseError{Code: pb.RpcBlockDataviewSortReplaceResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewSortReplaceRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewSortReplaceResponse{Error: &pb.RpcBlockDataviewSortReplaceResponseError{Code: pb.RpcBlockDataviewSortReplaceResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewSortReplace(context.Background(), in).Marshal()
	return resp
}

func BlockDataviewSortSort(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewSortSortResponse{Error: &pb.RpcBlockDataviewSortSortResponseError{Code: pb.RpcBlockDataviewSortSortResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewSortSortRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewSortSortResponse{Error: &pb.RpcBlockDataviewSortSortResponseError{Code: pb.RpcBlockDataviewSortSortResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewSortSort(context.Background(), in).Marshal()
	return resp
}

func BlockDataviewViewRelationAdd(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewViewRelationAddResponse{Error: &pb.RpcBlockDataviewViewRelationAddResponseError{Code: pb.RpcBlockDataviewViewRelationAddResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewViewRelationAddRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewViewRelationAddResponse{Error: &pb.RpcBlockDataviewViewRelationAddResponseError{Code: pb.RpcBlockDataviewViewRelationAddResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewViewRelationAdd(context.Background(), in).Marshal()
	return resp
}

func BlockDataviewViewRelationRemove(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewViewRelationRemoveResponse{Error: &pb.RpcBlockDataviewViewRelationRemoveResponseError{Code: pb.RpcBlockDataviewViewRelationRemoveResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewViewRelationRemoveRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewViewRelationRemoveResponse{Error: &pb.RpcBlockDataviewViewRelationRemoveResponseError{Code: pb.RpcBlockDataviewViewRelationRemoveResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewViewRelationRemove(context.Background(), in).Marshal()
	return resp
}

func BlockDataviewViewRelationReplace(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewViewRelationReplaceResponse{Error: &pb.RpcBlockDataviewViewRelationReplaceResponseError{Code: pb.RpcBlockDataviewViewRelationReplaceResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewViewRelationReplaceRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewViewRelationReplaceResponse{Error: &pb.RpcBlockDataviewViewRelationReplaceResponseError{Code: pb.RpcBlockDataviewViewRelationReplaceResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewViewRelationReplace(context.Background(), in).Marshal()
	return resp
}

func BlockDataviewViewRelationSort(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDataviewViewRelationSortResponse{Error: &pb.RpcBlockDataviewViewRelationSortResponseError{Code: pb.RpcBlockDataviewViewRelationSortResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDataviewViewRelationSortRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDataviewViewRelationSortResponse{Error: &pb.RpcBlockDataviewViewRelationSortResponseError{Code: pb.RpcBlockDataviewViewRelationSortResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDataviewViewRelationSort(context.Background(), in).Marshal()
	return resp
}

func BlockTableCreate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableCreateResponse{Error: &pb.RpcBlockTableCreateResponseError{Code: pb.RpcBlockTableCreateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTableCreateResponse{Error: &pb.RpcBlockTableCreateResponseError{Code: pb.RpcBlockTableCreateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableCreate(context.Background(), in).Marshal()
	return resp
}

func BlockTableExpand(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableExpandResponse{Error: &pb.RpcBlockTableExpandResponseError{Code: pb.RpcBlockTableExpandResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableExpandRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTableExpandResponse{Error: &pb.RpcBlockTableExpandResponseError{Code: pb.RpcBlockTableExpandResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableExpand(context.Background(), in).Marshal()
	return resp
}

func BlockTableRowCreate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableRowCreateResponse{Error: &pb.RpcBlockTableRowCreateResponseError{Code: pb.RpcBlockTableRowCreateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableRowCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTableRowCreateResponse{Error: &pb.RpcBlockTableRowCreateResponseError{Code: pb.RpcBlockTableRowCreateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableRowCreate(context.Background(), in).Marshal()
	return resp
}

func BlockTableRowDelete(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableRowDeleteResponse{Error: &pb.RpcBlockTableRowDeleteResponseError{Code: pb.RpcBlockTableRowDeleteResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableRowDeleteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTableRowDeleteResponse{Error: &pb.RpcBlockTableRowDeleteResponseError{Code: pb.RpcBlockTableRowDeleteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableRowDelete(context.Background(), in).Marshal()
	return resp
}

func BlockTableRowDuplicate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableRowDuplicateResponse{Error: &pb.RpcBlockTableRowDuplicateResponseError{Code: pb.RpcBlockTableRowDuplicateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableRowDuplicateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTableRowDuplicateResponse{Error: &pb.RpcBlockTableRowDuplicateResponseError{Code: pb.RpcBlockTableRowDuplicateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableRowDuplicate(context.Background(), in).Marshal()
	return resp
}

func BlockTableRowSetHeader(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableRowSetHeaderResponse{Error: &pb.RpcBlockTableRowSetHeaderResponseError{Code: pb.RpcBlockTableRowSetHeaderResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableRowSetHeaderRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTableRowSetHeaderResponse{Error: &pb.RpcBlockTableRowSetHeaderResponseError{Code: pb.RpcBlockTableRowSetHeaderResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableRowSetHeader(context.Background(), in).Marshal()
	return resp
}

func BlockTableColumnCreate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableColumnCreateResponse{Error: &pb.RpcBlockTableColumnCreateResponseError{Code: pb.RpcBlockTableColumnCreateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableColumnCreateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTableColumnCreateResponse{Error: &pb.RpcBlockTableColumnCreateResponseError{Code: pb.RpcBlockTableColumnCreateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableColumnCreate(context.Background(), in).Marshal()
	return resp
}

func BlockTableColumnMove(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableColumnMoveResponse{Error: &pb.RpcBlockTableColumnMoveResponseError{Code: pb.RpcBlockTableColumnMoveResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableColumnMoveRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTableColumnMoveResponse{Error: &pb.RpcBlockTableColumnMoveResponseError{Code: pb.RpcBlockTableColumnMoveResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableColumnMove(context.Background(), in).Marshal()
	return resp
}

func BlockTableColumnDelete(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableColumnDeleteResponse{Error: &pb.RpcBlockTableColumnDeleteResponseError{Code: pb.RpcBlockTableColumnDeleteResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableColumnDeleteRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTableColumnDeleteResponse{Error: &pb.RpcBlockTableColumnDeleteResponseError{Code: pb.RpcBlockTableColumnDeleteResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableColumnDelete(context.Background(), in).Marshal()
	return resp
}

func BlockTableColumnDuplicate(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableColumnDuplicateResponse{Error: &pb.RpcBlockTableColumnDuplicateResponseError{Code: pb.RpcBlockTableColumnDuplicateResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableColumnDuplicateRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTableColumnDuplicateResponse{Error: &pb.RpcBlockTableColumnDuplicateResponseError{Code: pb.RpcBlockTableColumnDuplicateResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableColumnDuplicate(context.Background(), in).Marshal()
	return resp
}

func BlockTableRowListFill(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableRowListFillResponse{Error: &pb.RpcBlockTableRowListFillResponseError{Code: pb.RpcBlockTableRowListFillResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableRowListFillRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTableRowListFillResponse{Error: &pb.RpcBlockTableRowListFillResponseError{Code: pb.RpcBlockTableRowListFillResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableRowListFill(context.Background(), in).Marshal()
	return resp
}

func BlockTableRowListClean(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableRowListCleanResponse{Error: &pb.RpcBlockTableRowListCleanResponseError{Code: pb.RpcBlockTableRowListCleanResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableRowListCleanRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTableRowListCleanResponse{Error: &pb.RpcBlockTableRowListCleanResponseError{Code: pb.RpcBlockTableRowListCleanResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableRowListClean(context.Background(), in).Marshal()
	return resp
}

func BlockTableColumnListFill(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableColumnListFillResponse{Error: &pb.RpcBlockTableColumnListFillResponseError{Code: pb.RpcBlockTableColumnListFillResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableColumnListFillRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTableColumnListFillResponse{Error: &pb.RpcBlockTableColumnListFillResponseError{Code: pb.RpcBlockTableColumnListFillResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableColumnListFill(context.Background(), in).Marshal()
	return resp
}

func BlockTableSort(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockTableSortResponse{Error: &pb.RpcBlockTableSortResponseError{Code: pb.RpcBlockTableSortResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockTableSortRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockTableSortResponse{Error: &pb.RpcBlockTableSortResponseError{Code: pb.RpcBlockTableSortResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockTableSort(context.Background(), in).Marshal()
	return resp
}

func BlockCreateWidget(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockCreateWidgetResponse{Error: &pb.RpcBlockCreateWidgetResponseError{Code: pb.RpcBlockCreateWidgetResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockCreateWidgetRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockCreateWidgetResponse{Error: &pb.RpcBlockCreateWidgetResponseError{Code: pb.RpcBlockCreateWidgetResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockCreateWidget(context.Background(), in).Marshal()
	return resp
}

func BlockWidgetSetTargetId(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockWidgetSetTargetIdResponse{Error: &pb.RpcBlockWidgetSetTargetIdResponseError{Code: pb.RpcBlockWidgetSetTargetIdResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockWidgetSetTargetIdRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockWidgetSetTargetIdResponse{Error: &pb.RpcBlockWidgetSetTargetIdResponseError{Code: pb.RpcBlockWidgetSetTargetIdResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockWidgetSetTargetId(context.Background(), in).Marshal()
	return resp
}

func BlockWidgetSetLayout(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockWidgetSetLayoutResponse{Error: &pb.RpcBlockWidgetSetLayoutResponseError{Code: pb.RpcBlockWidgetSetLayoutResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockWidgetSetLayoutRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockWidgetSetLayoutResponse{Error: &pb.RpcBlockWidgetSetLayoutResponseError{Code: pb.RpcBlockWidgetSetLayoutResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockWidgetSetLayout(context.Background(), in).Marshal()
	return resp
}

func BlockWidgetSetLimit(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockWidgetSetLimitResponse{Error: &pb.RpcBlockWidgetSetLimitResponseError{Code: pb.RpcBlockWidgetSetLimitResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockWidgetSetLimitRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockWidgetSetLimitResponse{Error: &pb.RpcBlockWidgetSetLimitResponseError{Code: pb.RpcBlockWidgetSetLimitResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockWidgetSetLimit(context.Background(), in).Marshal()
	return resp
}

func BlockWidgetSetViewId(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockWidgetSetViewIdResponse{Error: &pb.RpcBlockWidgetSetViewIdResponseError{Code: pb.RpcBlockWidgetSetViewIdResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockWidgetSetViewIdRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockWidgetSetViewIdResponse{Error: &pb.RpcBlockWidgetSetViewIdResponseError{Code: pb.RpcBlockWidgetSetViewIdResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockWidgetSetViewId(context.Background(), in).Marshal()
	return resp
}

func BlockLinkCreateWithObject(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockLinkCreateWithObjectResponse{Error: &pb.RpcBlockLinkCreateWithObjectResponseError{Code: pb.RpcBlockLinkCreateWithObjectResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockLinkCreateWithObjectRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockLinkCreateWithObjectResponse{Error: &pb.RpcBlockLinkCreateWithObjectResponseError{Code: pb.RpcBlockLinkCreateWithObjectResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockLinkCreateWithObject(context.Background(), in).Marshal()
	return resp
}

func BlockLinkListSetAppearance(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockLinkListSetAppearanceResponse{Error: &pb.RpcBlockLinkListSetAppearanceResponseError{Code: pb.RpcBlockLinkListSetAppearanceResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockLinkListSetAppearanceRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockLinkListSetAppearanceResponse{Error: &pb.RpcBlockLinkListSetAppearanceResponseError{Code: pb.RpcBlockLinkListSetAppearanceResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockLinkListSetAppearance(context.Background(), in).Marshal()
	return resp
}

func BlockBookmarkFetch(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockBookmarkFetchResponse{Error: &pb.RpcBlockBookmarkFetchResponseError{Code: pb.RpcBlockBookmarkFetchResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockBookmarkFetchRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockBookmarkFetchResponse{Error: &pb.RpcBlockBookmarkFetchResponseError{Code: pb.RpcBlockBookmarkFetchResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockBookmarkFetch(context.Background(), in).Marshal()
	return resp
}

func BlockBookmarkCreateAndFetch(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockBookmarkCreateAndFetchResponse{Error: &pb.RpcBlockBookmarkCreateAndFetchResponseError{Code: pb.RpcBlockBookmarkCreateAndFetchResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockBookmarkCreateAndFetchRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockBookmarkCreateAndFetchResponse{Error: &pb.RpcBlockBookmarkCreateAndFetchResponseError{Code: pb.RpcBlockBookmarkCreateAndFetchResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockBookmarkCreateAndFetch(context.Background(), in).Marshal()
	return resp
}

func BlockRelationSetKey(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockRelationSetKeyResponse{Error: &pb.RpcBlockRelationSetKeyResponseError{Code: pb.RpcBlockRelationSetKeyResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockRelationSetKeyRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockRelationSetKeyResponse{Error: &pb.RpcBlockRelationSetKeyResponseError{Code: pb.RpcBlockRelationSetKeyResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockRelationSetKey(context.Background(), in).Marshal()
	return resp
}

func BlockRelationAdd(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockRelationAddResponse{Error: &pb.RpcBlockRelationAddResponseError{Code: pb.RpcBlockRelationAddResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockRelationAddRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockRelationAddResponse{Error: &pb.RpcBlockRelationAddResponseError{Code: pb.RpcBlockRelationAddResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockRelationAdd(context.Background(), in).Marshal()
	return resp
}

func BlockDivListSetStyle(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockDivListSetStyleResponse{Error: &pb.RpcBlockDivListSetStyleResponseError{Code: pb.RpcBlockDivListSetStyleResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockDivListSetStyleRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockDivListSetStyleResponse{Error: &pb.RpcBlockDivListSetStyleResponseError{Code: pb.RpcBlockDivListSetStyleResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockDivListSetStyle(context.Background(), in).Marshal()
	return resp
}

func BlockLatexSetText(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBlockLatexSetTextResponse{Error: &pb.RpcBlockLatexSetTextResponseError{Code: pb.RpcBlockLatexSetTextResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBlockLatexSetTextRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBlockLatexSetTextResponse{Error: &pb.RpcBlockLatexSetTextResponseError{Code: pb.RpcBlockLatexSetTextResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BlockLatexSetText(context.Background(), in).Marshal()
	return resp
}

func ProcessCancel(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcProcessCancelResponse{Error: &pb.RpcProcessCancelResponseError{Code: pb.RpcProcessCancelResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcProcessCancelRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcProcessCancelResponse{Error: &pb.RpcProcessCancelResponseError{Code: pb.RpcProcessCancelResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.ProcessCancel(context.Background(), in).Marshal()
	return resp
}

func LogSend(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcLogSendResponse{Error: &pb.RpcLogSendResponseError{Code: pb.RpcLogSendResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcLogSendRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcLogSendResponse{Error: &pb.RpcLogSendResponseError{Code: pb.RpcLogSendResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.LogSend(context.Background(), in).Marshal()
	return resp
}

func DebugStat(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDebugStatResponse{Error: &pb.RpcDebugStatResponseError{Code: pb.RpcDebugStatResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDebugStatRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcDebugStatResponse{Error: &pb.RpcDebugStatResponseError{Code: pb.RpcDebugStatResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.DebugStat(context.Background(), in).Marshal()
	return resp
}

func DebugTree(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDebugTreeResponse{Error: &pb.RpcDebugTreeResponseError{Code: pb.RpcDebugTreeResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDebugTreeRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcDebugTreeResponse{Error: &pb.RpcDebugTreeResponseError{Code: pb.RpcDebugTreeResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.DebugTree(context.Background(), in).Marshal()
	return resp
}

func DebugTreeHeads(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDebugTreeHeadsResponse{Error: &pb.RpcDebugTreeHeadsResponseError{Code: pb.RpcDebugTreeHeadsResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDebugTreeHeadsRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcDebugTreeHeadsResponse{Error: &pb.RpcDebugTreeHeadsResponseError{Code: pb.RpcDebugTreeHeadsResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.DebugTreeHeads(context.Background(), in).Marshal()
	return resp
}

func DebugSpaceSummary(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDebugSpaceSummaryResponse{Error: &pb.RpcDebugSpaceSummaryResponseError{Code: pb.RpcDebugSpaceSummaryResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDebugSpaceSummaryRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcDebugSpaceSummaryResponse{Error: &pb.RpcDebugSpaceSummaryResponseError{Code: pb.RpcDebugSpaceSummaryResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.DebugSpaceSummary(context.Background(), in).Marshal()
	return resp
}

func DebugStackGoroutines(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDebugStackGoroutinesResponse{Error: &pb.RpcDebugStackGoroutinesResponseError{Code: pb.RpcDebugStackGoroutinesResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDebugStackGoroutinesRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcDebugStackGoroutinesResponse{Error: &pb.RpcDebugStackGoroutinesResponseError{Code: pb.RpcDebugStackGoroutinesResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.DebugStackGoroutines(context.Background(), in).Marshal()
	return resp
}

func DebugExportLocalstore(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDebugExportLocalstoreResponse{Error: &pb.RpcDebugExportLocalstoreResponseError{Code: pb.RpcDebugExportLocalstoreResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDebugExportLocalstoreRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcDebugExportLocalstoreResponse{Error: &pb.RpcDebugExportLocalstoreResponseError{Code: pb.RpcDebugExportLocalstoreResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.DebugExportLocalstore(context.Background(), in).Marshal()
	return resp
}

func DebugPing(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDebugPingResponse{Error: &pb.RpcDebugPingResponseError{Code: pb.RpcDebugPingResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDebugPingRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcDebugPingResponse{Error: &pb.RpcDebugPingResponseError{Code: pb.RpcDebugPingResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.DebugPing(context.Background(), in).Marshal()
	return resp
}

func DebugSubscriptions(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDebugSubscriptionsResponse{Error: &pb.RpcDebugSubscriptionsResponseError{Code: pb.RpcDebugSubscriptionsResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDebugSubscriptionsRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcDebugSubscriptionsResponse{Error: &pb.RpcDebugSubscriptionsResponseError{Code: pb.RpcDebugSubscriptionsResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.DebugSubscriptions(context.Background(), in).Marshal()
	return resp
}

func DebugOpenedObjects(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcDebugOpenedObjectsResponse{Error: &pb.RpcDebugOpenedObjectsResponseError{Code: pb.RpcDebugOpenedObjectsResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcDebugOpenedObjectsRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcDebugOpenedObjectsResponse{Error: &pb.RpcDebugOpenedObjectsResponseError{Code: pb.RpcDebugOpenedObjectsResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.DebugOpenedObjects(context.Background(), in).Marshal()
	return resp
}

func MetricsSetParameters(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcMetricsSetParametersResponse{Error: &pb.RpcMetricsSetParametersResponseError{Code: pb.RpcMetricsSetParametersResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcMetricsSetParametersRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcMetricsSetParametersResponse{Error: &pb.RpcMetricsSetParametersResponseError{Code: pb.RpcMetricsSetParametersResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.MetricsSetParameters(context.Background(), in).Marshal()
	return resp
}

func NotificationList(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcNotificationListResponse{Error: &pb.RpcNotificationListResponseError{Code: pb.RpcNotificationListResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcNotificationListRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcNotificationListResponse{Error: &pb.RpcNotificationListResponseError{Code: pb.RpcNotificationListResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.NotificationList(context.Background(), in).Marshal()
	return resp
}

func NotificationReply(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcNotificationReplyResponse{Error: &pb.RpcNotificationReplyResponseError{Code: pb.RpcNotificationReplyResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcNotificationReplyRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcNotificationReplyResponse{Error: &pb.RpcNotificationReplyResponseError{Code: pb.RpcNotificationReplyResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.NotificationReply(context.Background(), in).Marshal()
	return resp
}

func NotificationTest(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcNotificationTestResponse{Error: &pb.RpcNotificationTestResponseError{Code: pb.RpcNotificationTestResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcNotificationTestRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcNotificationTestResponse{Error: &pb.RpcNotificationTestResponseError{Code: pb.RpcNotificationTestResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.NotificationTest(context.Background(), in).Marshal()
	return resp
}

func BroadcastPayloadEvent(b []byte) (resp []byte) {
	defer func() {
		if PanicHandler != nil {
			if r := recover(); r != nil {
				resp, _ = (&pb.RpcBroadcastPayloadEventResponse{Error: &pb.RpcBroadcastPayloadEventResponseError{Code: pb.RpcBroadcastPayloadEventResponseError_UNKNOWN_ERROR, Description: "panic recovered"}}).Marshal()
				PanicHandler(r)
			}
		}
	}()

	in := new(pb.RpcBroadcastPayloadEventRequest)
	if err := in.Unmarshal(b); err != nil {
		resp, _ = (&pb.RpcBroadcastPayloadEventResponse{Error: &pb.RpcBroadcastPayloadEventResponseError{Code: pb.RpcBroadcastPayloadEventResponseError_BAD_INPUT, Description: err.Error()}}).Marshal()
		return resp
	}

	resp, _ = clientCommandsHandler.BroadcastPayloadEvent(context.Background(), in).Marshal()
	return resp
}

var PanicHandler func(v interface{})

func CommandAsync(cmd string, data []byte, callback func(data []byte)) {
	go func() {
		var cd []byte
		switch cmd {
		case "AppGetVersion":
			cd = AppGetVersion(data)
		case "AppSetDeviceState":
			cd = AppSetDeviceState(data)
		case "AppShutdown":
			cd = AppShutdown(data)
		case "WalletCreate":
			cd = WalletCreate(data)
		case "WalletRecover":
			cd = WalletRecover(data)
		case "WalletConvert":
			cd = WalletConvert(data)
		case "AccountLocalLinkNewChallenge":
			cd = AccountLocalLinkNewChallenge(data)
		case "AccountLocalLinkSolveChallenge":
			cd = AccountLocalLinkSolveChallenge(data)
		case "WalletCreateSession":
			cd = WalletCreateSession(data)
		case "WalletCloseSession":
			cd = WalletCloseSession(data)
		case "WorkspaceCreate":
			cd = WorkspaceCreate(data)
		case "WorkspaceOpen":
			cd = WorkspaceOpen(data)
		case "WorkspaceObjectAdd":
			cd = WorkspaceObjectAdd(data)
		case "WorkspaceObjectListAdd":
			cd = WorkspaceObjectListAdd(data)
		case "WorkspaceObjectListRemove":
			cd = WorkspaceObjectListRemove(data)
		case "WorkspaceSelect":
			cd = WorkspaceSelect(data)
		case "WorkspaceGetCurrent":
			cd = WorkspaceGetCurrent(data)
		case "WorkspaceGetAll":
			cd = WorkspaceGetAll(data)
		case "WorkspaceSetInfo":
			cd = WorkspaceSetInfo(data)
		case "WorkspaceExport":
			cd = WorkspaceExport(data)
		case "AccountRecover":
			cd = AccountRecover(data)
		case "AccountCreate":
			cd = AccountCreate(data)
		case "AccountDelete":
			cd = AccountDelete(data)
		case "AccountRevertDeletion":
			cd = AccountRevertDeletion(data)
		case "AccountSelect":
			cd = AccountSelect(data)
		case "AccountEnableLocalNetworkSync":
			cd = AccountEnableLocalNetworkSync(data)
		case "AccountStop":
			cd = AccountStop(data)
		case "AccountMove":
			cd = AccountMove(data)
		case "AccountConfigUpdate":
			cd = AccountConfigUpdate(data)
		case "AccountRecoverFromLegacyExport":
			cd = AccountRecoverFromLegacyExport(data)
		case "AccountChangeNetworkConfigAndRestart":
			cd = AccountChangeNetworkConfigAndRestart(data)
		case "SpaceDelete":
			cd = SpaceDelete(data)
		case "SpaceInviteGenerate":
			cd = SpaceInviteGenerate(data)
		case "SpaceInviteGetCurrent":
			cd = SpaceInviteGetCurrent(data)
		case "SpaceInviteRevoke":
			cd = SpaceInviteRevoke(data)
		case "SpaceInviteView":
			cd = SpaceInviteView(data)
		case "SpaceJoin":
			cd = SpaceJoin(data)
		case "SpaceJoinCancel":
			cd = SpaceJoinCancel(data)
		case "SpaceExit":
			cd = SpaceExit(data)
		case "SpaceStopSharing":
			cd = SpaceStopSharing(data)
		case "SpaceRequestApprove":
			cd = SpaceRequestApprove(data)
		case "SpaceRequestDecline":
			cd = SpaceRequestDecline(data)
		case "SpaceParticipantRemove":
			cd = SpaceParticipantRemove(data)
		case "SpaceParticipantPermissionsChange":
			cd = SpaceParticipantPermissionsChange(data)
		case "ObjectOpen":
			cd = ObjectOpen(data)
		case "ObjectClose":
			cd = ObjectClose(data)
		case "ObjectShow":
			cd = ObjectShow(data)
		case "ObjectCreate":
			cd = ObjectCreate(data)
		case "ObjectCreateBookmark":
			cd = ObjectCreateBookmark(data)
		case "ObjectCreateFromUrl":
			cd = ObjectCreateFromUrl(data)
		case "ObjectCreateSet":
			cd = ObjectCreateSet(data)
		case "ObjectGraph":
			cd = ObjectGraph(data)
		case "ObjectSearch":
			cd = ObjectSearch(data)
		case "ObjectSearchSubscribe":
			cd = ObjectSearchSubscribe(data)
		case "ObjectSubscribeIds":
			cd = ObjectSubscribeIds(data)
		case "ObjectGroupsSubscribe":
			cd = ObjectGroupsSubscribe(data)
		case "ObjectSearchUnsubscribe":
			cd = ObjectSearchUnsubscribe(data)
		case "ObjectSetDetails":
			cd = ObjectSetDetails(data)
		case "ObjectDuplicate":
			cd = ObjectDuplicate(data)
		case "ObjectSetObjectType":
			cd = ObjectSetObjectType(data)
		case "ObjectSetLayout":
			cd = ObjectSetLayout(data)
		case "ObjectSetInternalFlags":
			cd = ObjectSetInternalFlags(data)
		case "ObjectSetIsFavorite":
			cd = ObjectSetIsFavorite(data)
		case "ObjectSetIsArchived":
			cd = ObjectSetIsArchived(data)
		case "ObjectSetSource":
			cd = ObjectSetSource(data)
		case "ObjectWorkspaceSetDashboard":
			cd = ObjectWorkspaceSetDashboard(data)
		case "ObjectListDuplicate":
			cd = ObjectListDuplicate(data)
		case "ObjectListDelete":
			cd = ObjectListDelete(data)
		case "ObjectListSetIsArchived":
			cd = ObjectListSetIsArchived(data)
		case "ObjectListSetIsFavorite":
			cd = ObjectListSetIsFavorite(data)
		case "ObjectListSetObjectType":
			cd = ObjectListSetObjectType(data)
		case "ObjectApplyTemplate":
			cd = ObjectApplyTemplate(data)
		case "ObjectToSet":
			cd = ObjectToSet(data)
		case "ObjectToCollection":
			cd = ObjectToCollection(data)
		case "ObjectShareByLink":
			cd = ObjectShareByLink(data)
		case "ObjectUndo":
			cd = ObjectUndo(data)
		case "ObjectRedo":
			cd = ObjectRedo(data)
		case "ObjectListExport":
			cd = ObjectListExport(data)
		case "ObjectBookmarkFetch":
			cd = ObjectBookmarkFetch(data)
		case "ObjectToBookmark":
			cd = ObjectToBookmark(data)
		case "ObjectImport":
			cd = ObjectImport(data)
		case "ObjectImportList":
			cd = ObjectImportList(data)
		case "ObjectImportNotionValidateToken":
			cd = ObjectImportNotionValidateToken(data)
		case "ObjectImportUseCase":
			cd = ObjectImportUseCase(data)
		case "ObjectImportExperience":
			cd = ObjectImportExperience(data)
		case "ObjectCollectionAdd":
			cd = ObjectCollectionAdd(data)
		case "ObjectCollectionRemove":
			cd = ObjectCollectionRemove(data)
		case "ObjectCollectionSort":
			cd = ObjectCollectionSort(data)
		case "ObjectCreateRelation":
			cd = ObjectCreateRelation(data)
		case "ObjectCreateRelationOption":
			cd = ObjectCreateRelationOption(data)
		case "RelationListRemoveOption":
			cd = RelationListRemoveOption(data)
		case "RelationOptions":
			cd = RelationOptions(data)
		case "ObjectRelationAdd":
			cd = ObjectRelationAdd(data)
		case "ObjectRelationDelete":
			cd = ObjectRelationDelete(data)
		case "ObjectRelationAddFeatured":
			cd = ObjectRelationAddFeatured(data)
		case "ObjectRelationRemoveFeatured":
			cd = ObjectRelationRemoveFeatured(data)
		case "ObjectRelationListAvailable":
			cd = ObjectRelationListAvailable(data)
		case "ObjectCreateObjectType":
			cd = ObjectCreateObjectType(data)
		case "ObjectTypeRelationAdd":
			cd = ObjectTypeRelationAdd(data)
		case "ObjectTypeRelationRemove":
			cd = ObjectTypeRelationRemove(data)
		case "HistoryShowVersion":
			cd = HistoryShowVersion(data)
		case "HistoryGetVersions":
			cd = HistoryGetVersions(data)
		case "HistorySetVersion":
			cd = HistorySetVersion(data)
		case "FileOffload":
			cd = FileOffload(data)
		case "FileSpaceOffload":
			cd = FileSpaceOffload(data)
		case "FileListOffload":
			cd = FileListOffload(data)
		case "FileUpload":
			cd = FileUpload(data)
		case "FileDownload":
			cd = FileDownload(data)
		case "FileDrop":
			cd = FileDrop(data)
		case "FileSpaceUsage":
			cd = FileSpaceUsage(data)
		case "FileNodeUsage":
			cd = FileNodeUsage(data)
		case "NavigationListObjects":
			cd = NavigationListObjects(data)
		case "NavigationGetObjectInfoWithLinks":
			cd = NavigationGetObjectInfoWithLinks(data)
		case "TemplateCreateFromObject":
			cd = TemplateCreateFromObject(data)
		case "TemplateClone":
			cd = TemplateClone(data)
		case "TemplateExportAll":
			cd = TemplateExportAll(data)
		case "LinkPreview":
			cd = LinkPreview(data)
		case "UnsplashSearch":
			cd = UnsplashSearch(data)
		case "UnsplashDownload":
			cd = UnsplashDownload(data)
		case "GalleryDownloadManifest":
			cd = GalleryDownloadManifest(data)
		case "GalleryDownloadIndex":
			cd = GalleryDownloadIndex(data)
		case "BlockUpload":
			cd = BlockUpload(data)
		case "BlockReplace":
			cd = BlockReplace(data)
		case "BlockCreate":
			cd = BlockCreate(data)
		case "BlockSplit":
			cd = BlockSplit(data)
		case "BlockMerge":
			cd = BlockMerge(data)
		case "BlockCopy":
			cd = BlockCopy(data)
		case "BlockPaste":
			cd = BlockPaste(data)
		case "BlockCut":
			cd = BlockCut(data)
		case "BlockSetFields":
			cd = BlockSetFields(data)
		case "BlockExport":
			cd = BlockExport(data)
		case "BlockSetCarriage":
			cd = BlockSetCarriage(data)
		case "BlockPreview":
			cd = BlockPreview(data)
		case "BlockListDelete":
			cd = BlockListDelete(data)
		case "BlockListMoveToExistingObject":
			cd = BlockListMoveToExistingObject(data)
		case "BlockListMoveToNewObject":
			cd = BlockListMoveToNewObject(data)
		case "BlockListConvertToObjects":
			cd = BlockListConvertToObjects(data)
		case "BlockListSetFields":
			cd = BlockListSetFields(data)
		case "BlockListDuplicate":
			cd = BlockListDuplicate(data)
		case "BlockListSetBackgroundColor":
			cd = BlockListSetBackgroundColor(data)
		case "BlockListSetAlign":
			cd = BlockListSetAlign(data)
		case "BlockListSetVerticalAlign":
			cd = BlockListSetVerticalAlign(data)
		case "BlockListTurnInto":
			cd = BlockListTurnInto(data)
		case "BlockTextSetText":
			cd = BlockTextSetText(data)
		case "BlockTextSetColor":
			cd = BlockTextSetColor(data)
		case "BlockTextSetStyle":
			cd = BlockTextSetStyle(data)
		case "BlockTextSetChecked":
			cd = BlockTextSetChecked(data)
		case "BlockTextSetIcon":
			cd = BlockTextSetIcon(data)
		case "BlockTextListSetColor":
			cd = BlockTextListSetColor(data)
		case "BlockTextListSetMark":
			cd = BlockTextListSetMark(data)
		case "BlockTextListSetStyle":
			cd = BlockTextListSetStyle(data)
		case "BlockTextListClearStyle":
			cd = BlockTextListClearStyle(data)
		case "BlockTextListClearContent":
			cd = BlockTextListClearContent(data)
		case "BlockFileSetName":
			cd = BlockFileSetName(data)
		case "BlockImageSetName":
			cd = BlockImageSetName(data)
		case "BlockVideoSetName":
			cd = BlockVideoSetName(data)
		case "BlockFileCreateAndUpload":
			cd = BlockFileCreateAndUpload(data)
		case "BlockFileListSetStyle":
			cd = BlockFileListSetStyle(data)
		case "BlockDataviewViewCreate":
			cd = BlockDataviewViewCreate(data)
		case "BlockDataviewViewDelete":
			cd = BlockDataviewViewDelete(data)
		case "BlockDataviewViewUpdate":
			cd = BlockDataviewViewUpdate(data)
		case "BlockDataviewViewSetActive":
			cd = BlockDataviewViewSetActive(data)
		case "BlockDataviewViewSetPosition":
			cd = BlockDataviewViewSetPosition(data)
		case "BlockDataviewSetSource":
			cd = BlockDataviewSetSource(data)
		case "BlockDataviewRelationAdd":
			cd = BlockDataviewRelationAdd(data)
		case "BlockDataviewRelationDelete":
			cd = BlockDataviewRelationDelete(data)
		case "BlockDataviewRelationListAvailable":
			cd = BlockDataviewRelationListAvailable(data)
		case "BlockDataviewGroupOrderUpdate":
			cd = BlockDataviewGroupOrderUpdate(data)
		case "BlockDataviewObjectOrderUpdate":
			cd = BlockDataviewObjectOrderUpdate(data)
		case "BlockDataviewObjectOrderMove":
			cd = BlockDataviewObjectOrderMove(data)
		case "BlockDataviewCreateFromExistingObject":
			cd = BlockDataviewCreateFromExistingObject(data)
		case "BlockDataviewFilterAdd":
			cd = BlockDataviewFilterAdd(data)
		case "BlockDataviewFilterRemove":
			cd = BlockDataviewFilterRemove(data)
		case "BlockDataviewFilterReplace":
			cd = BlockDataviewFilterReplace(data)
		case "BlockDataviewFilterSort":
			cd = BlockDataviewFilterSort(data)
		case "BlockDataviewSortAdd":
			cd = BlockDataviewSortAdd(data)
		case "BlockDataviewSortRemove":
			cd = BlockDataviewSortRemove(data)
		case "BlockDataviewSortReplace":
			cd = BlockDataviewSortReplace(data)
		case "BlockDataviewSortSort":
			cd = BlockDataviewSortSort(data)
		case "BlockDataviewViewRelationAdd":
			cd = BlockDataviewViewRelationAdd(data)
		case "BlockDataviewViewRelationRemove":
			cd = BlockDataviewViewRelationRemove(data)
		case "BlockDataviewViewRelationReplace":
			cd = BlockDataviewViewRelationReplace(data)
		case "BlockDataviewViewRelationSort":
			cd = BlockDataviewViewRelationSort(data)
		case "BlockTableCreate":
			cd = BlockTableCreate(data)
		case "BlockTableExpand":
			cd = BlockTableExpand(data)
		case "BlockTableRowCreate":
			cd = BlockTableRowCreate(data)
		case "BlockTableRowDelete":
			cd = BlockTableRowDelete(data)
		case "BlockTableRowDuplicate":
			cd = BlockTableRowDuplicate(data)
		case "BlockTableRowSetHeader":
			cd = BlockTableRowSetHeader(data)
		case "BlockTableColumnCreate":
			cd = BlockTableColumnCreate(data)
		case "BlockTableColumnMove":
			cd = BlockTableColumnMove(data)
		case "BlockTableColumnDelete":
			cd = BlockTableColumnDelete(data)
		case "BlockTableColumnDuplicate":
			cd = BlockTableColumnDuplicate(data)
		case "BlockTableRowListFill":
			cd = BlockTableRowListFill(data)
		case "BlockTableRowListClean":
			cd = BlockTableRowListClean(data)
		case "BlockTableColumnListFill":
			cd = BlockTableColumnListFill(data)
		case "BlockTableSort":
			cd = BlockTableSort(data)
		case "BlockCreateWidget":
			cd = BlockCreateWidget(data)
		case "BlockWidgetSetTargetId":
			cd = BlockWidgetSetTargetId(data)
		case "BlockWidgetSetLayout":
			cd = BlockWidgetSetLayout(data)
		case "BlockWidgetSetLimit":
			cd = BlockWidgetSetLimit(data)
		case "BlockWidgetSetViewId":
			cd = BlockWidgetSetViewId(data)
		case "BlockLinkCreateWithObject":
			cd = BlockLinkCreateWithObject(data)
		case "BlockLinkListSetAppearance":
			cd = BlockLinkListSetAppearance(data)
		case "BlockBookmarkFetch":
			cd = BlockBookmarkFetch(data)
		case "BlockBookmarkCreateAndFetch":
			cd = BlockBookmarkCreateAndFetch(data)
		case "BlockRelationSetKey":
			cd = BlockRelationSetKey(data)
		case "BlockRelationAdd":
			cd = BlockRelationAdd(data)
		case "BlockDivListSetStyle":
			cd = BlockDivListSetStyle(data)
		case "BlockLatexSetText":
			cd = BlockLatexSetText(data)
		case "ProcessCancel":
			cd = ProcessCancel(data)
		case "LogSend":
			cd = LogSend(data)
		case "DebugStat":
			cd = DebugStat(data)
		case "DebugTree":
			cd = DebugTree(data)
		case "DebugTreeHeads":
			cd = DebugTreeHeads(data)
		case "DebugSpaceSummary":
			cd = DebugSpaceSummary(data)
		case "DebugStackGoroutines":
			cd = DebugStackGoroutines(data)
		case "DebugExportLocalstore":
			cd = DebugExportLocalstore(data)
		case "DebugPing":
			cd = DebugPing(data)
		case "DebugSubscriptions":
			cd = DebugSubscriptions(data)
		case "DebugOpenedObjects":
			cd = DebugOpenedObjects(data)
		case "MetricsSetParameters":
			cd = MetricsSetParameters(data)
		case "NotificationList":
			cd = NotificationList(data)
		case "NotificationReply":
			cd = NotificationReply(data)
		case "NotificationTest":
			cd = NotificationTest(data)
		case "BroadcastPayloadEvent":
			cd = BroadcastPayloadEvent(data)
		default:
			log.Errorf("unknown command type: %s\n", cmd)
		}
		if callback != nil {
			callback(cd)
		}
	}()
}

type MessageHandler interface {
	Handle(b []byte)
}

func CommandMobile(cmd string, data []byte, callback MessageHandler) {
	CommandAsync(cmd, data, callback.Handle)
}

type ClientCommandsHandlerProxy struct {
	client       ClientCommandsHandler
	interceptors []func(ctx context.Context, req any, methodName string, actualCall func(ctx context.Context, req any) (any, error)) (any, error)
}

func (h *ClientCommandsHandlerProxy) AppGetVersion(ctx context.Context, req *pb.RpcAppGetVersionRequest) *pb.RpcAppGetVersionResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AppGetVersion(ctx, req.(*pb.RpcAppGetVersionRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AppGetVersion", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAppGetVersionResponse)
}
func (h *ClientCommandsHandlerProxy) AppSetDeviceState(ctx context.Context, req *pb.RpcAppSetDeviceStateRequest) *pb.RpcAppSetDeviceStateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AppSetDeviceState(ctx, req.(*pb.RpcAppSetDeviceStateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AppSetDeviceState", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAppSetDeviceStateResponse)
}
func (h *ClientCommandsHandlerProxy) AppShutdown(ctx context.Context, req *pb.RpcAppShutdownRequest) *pb.RpcAppShutdownResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AppShutdown(ctx, req.(*pb.RpcAppShutdownRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AppShutdown", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAppShutdownResponse)
}
func (h *ClientCommandsHandlerProxy) WalletCreate(ctx context.Context, req *pb.RpcWalletCreateRequest) *pb.RpcWalletCreateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.WalletCreate(ctx, req.(*pb.RpcWalletCreateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "WalletCreate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcWalletCreateResponse)
}
func (h *ClientCommandsHandlerProxy) WalletRecover(ctx context.Context, req *pb.RpcWalletRecoverRequest) *pb.RpcWalletRecoverResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.WalletRecover(ctx, req.(*pb.RpcWalletRecoverRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "WalletRecover", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcWalletRecoverResponse)
}
func (h *ClientCommandsHandlerProxy) WalletConvert(ctx context.Context, req *pb.RpcWalletConvertRequest) *pb.RpcWalletConvertResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.WalletConvert(ctx, req.(*pb.RpcWalletConvertRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "WalletConvert", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcWalletConvertResponse)
}
func (h *ClientCommandsHandlerProxy) AccountLocalLinkNewChallenge(ctx context.Context, req *pb.RpcAccountLocalLinkNewChallengeRequest) *pb.RpcAccountLocalLinkNewChallengeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AccountLocalLinkNewChallenge(ctx, req.(*pb.RpcAccountLocalLinkNewChallengeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AccountLocalLinkNewChallenge", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAccountLocalLinkNewChallengeResponse)
}
func (h *ClientCommandsHandlerProxy) AccountLocalLinkSolveChallenge(ctx context.Context, req *pb.RpcAccountLocalLinkSolveChallengeRequest) *pb.RpcAccountLocalLinkSolveChallengeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AccountLocalLinkSolveChallenge(ctx, req.(*pb.RpcAccountLocalLinkSolveChallengeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AccountLocalLinkSolveChallenge", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAccountLocalLinkSolveChallengeResponse)
}
func (h *ClientCommandsHandlerProxy) WalletCreateSession(ctx context.Context, req *pb.RpcWalletCreateSessionRequest) *pb.RpcWalletCreateSessionResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.WalletCreateSession(ctx, req.(*pb.RpcWalletCreateSessionRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "WalletCreateSession", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcWalletCreateSessionResponse)
}
func (h *ClientCommandsHandlerProxy) WalletCloseSession(ctx context.Context, req *pb.RpcWalletCloseSessionRequest) *pb.RpcWalletCloseSessionResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.WalletCloseSession(ctx, req.(*pb.RpcWalletCloseSessionRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "WalletCloseSession", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcWalletCloseSessionResponse)
}
func (h *ClientCommandsHandlerProxy) WorkspaceCreate(ctx context.Context, req *pb.RpcWorkspaceCreateRequest) *pb.RpcWorkspaceCreateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.WorkspaceCreate(ctx, req.(*pb.RpcWorkspaceCreateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "WorkspaceCreate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcWorkspaceCreateResponse)
}
func (h *ClientCommandsHandlerProxy) WorkspaceOpen(ctx context.Context, req *pb.RpcWorkspaceOpenRequest) *pb.RpcWorkspaceOpenResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.WorkspaceOpen(ctx, req.(*pb.RpcWorkspaceOpenRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "WorkspaceOpen", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcWorkspaceOpenResponse)
}
func (h *ClientCommandsHandlerProxy) WorkspaceObjectAdd(ctx context.Context, req *pb.RpcWorkspaceObjectAddRequest) *pb.RpcWorkspaceObjectAddResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.WorkspaceObjectAdd(ctx, req.(*pb.RpcWorkspaceObjectAddRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "WorkspaceObjectAdd", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcWorkspaceObjectAddResponse)
}
func (h *ClientCommandsHandlerProxy) WorkspaceObjectListAdd(ctx context.Context, req *pb.RpcWorkspaceObjectListAddRequest) *pb.RpcWorkspaceObjectListAddResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.WorkspaceObjectListAdd(ctx, req.(*pb.RpcWorkspaceObjectListAddRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "WorkspaceObjectListAdd", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcWorkspaceObjectListAddResponse)
}
func (h *ClientCommandsHandlerProxy) WorkspaceObjectListRemove(ctx context.Context, req *pb.RpcWorkspaceObjectListRemoveRequest) *pb.RpcWorkspaceObjectListRemoveResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.WorkspaceObjectListRemove(ctx, req.(*pb.RpcWorkspaceObjectListRemoveRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "WorkspaceObjectListRemove", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcWorkspaceObjectListRemoveResponse)
}
func (h *ClientCommandsHandlerProxy) WorkspaceSelect(ctx context.Context, req *pb.RpcWorkspaceSelectRequest) *pb.RpcWorkspaceSelectResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.WorkspaceSelect(ctx, req.(*pb.RpcWorkspaceSelectRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "WorkspaceSelect", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcWorkspaceSelectResponse)
}
func (h *ClientCommandsHandlerProxy) WorkspaceGetCurrent(ctx context.Context, req *pb.RpcWorkspaceGetCurrentRequest) *pb.RpcWorkspaceGetCurrentResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.WorkspaceGetCurrent(ctx, req.(*pb.RpcWorkspaceGetCurrentRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "WorkspaceGetCurrent", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcWorkspaceGetCurrentResponse)
}
func (h *ClientCommandsHandlerProxy) WorkspaceGetAll(ctx context.Context, req *pb.RpcWorkspaceGetAllRequest) *pb.RpcWorkspaceGetAllResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.WorkspaceGetAll(ctx, req.(*pb.RpcWorkspaceGetAllRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "WorkspaceGetAll", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcWorkspaceGetAllResponse)
}
func (h *ClientCommandsHandlerProxy) WorkspaceSetInfo(ctx context.Context, req *pb.RpcWorkspaceSetInfoRequest) *pb.RpcWorkspaceSetInfoResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.WorkspaceSetInfo(ctx, req.(*pb.RpcWorkspaceSetInfoRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "WorkspaceSetInfo", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcWorkspaceSetInfoResponse)
}
func (h *ClientCommandsHandlerProxy) WorkspaceExport(ctx context.Context, req *pb.RpcWorkspaceExportRequest) *pb.RpcWorkspaceExportResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.WorkspaceExport(ctx, req.(*pb.RpcWorkspaceExportRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "WorkspaceExport", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcWorkspaceExportResponse)
}
func (h *ClientCommandsHandlerProxy) AccountRecover(ctx context.Context, req *pb.RpcAccountRecoverRequest) *pb.RpcAccountRecoverResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AccountRecover(ctx, req.(*pb.RpcAccountRecoverRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AccountRecover", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAccountRecoverResponse)
}
func (h *ClientCommandsHandlerProxy) AccountCreate(ctx context.Context, req *pb.RpcAccountCreateRequest) *pb.RpcAccountCreateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AccountCreate(ctx, req.(*pb.RpcAccountCreateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AccountCreate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAccountCreateResponse)
}
func (h *ClientCommandsHandlerProxy) AccountDelete(ctx context.Context, req *pb.RpcAccountDeleteRequest) *pb.RpcAccountDeleteResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AccountDelete(ctx, req.(*pb.RpcAccountDeleteRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AccountDelete", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAccountDeleteResponse)
}
func (h *ClientCommandsHandlerProxy) AccountRevertDeletion(ctx context.Context, req *pb.RpcAccountRevertDeletionRequest) *pb.RpcAccountRevertDeletionResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AccountRevertDeletion(ctx, req.(*pb.RpcAccountRevertDeletionRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AccountRevertDeletion", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAccountRevertDeletionResponse)
}
func (h *ClientCommandsHandlerProxy) AccountSelect(ctx context.Context, req *pb.RpcAccountSelectRequest) *pb.RpcAccountSelectResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AccountSelect(ctx, req.(*pb.RpcAccountSelectRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AccountSelect", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAccountSelectResponse)
}
func (h *ClientCommandsHandlerProxy) AccountEnableLocalNetworkSync(ctx context.Context, req *pb.RpcAccountEnableLocalNetworkSyncRequest) *pb.RpcAccountEnableLocalNetworkSyncResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AccountEnableLocalNetworkSync(ctx, req.(*pb.RpcAccountEnableLocalNetworkSyncRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AccountEnableLocalNetworkSync", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAccountEnableLocalNetworkSyncResponse)
}
func (h *ClientCommandsHandlerProxy) AccountStop(ctx context.Context, req *pb.RpcAccountStopRequest) *pb.RpcAccountStopResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AccountStop(ctx, req.(*pb.RpcAccountStopRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AccountStop", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAccountStopResponse)
}
func (h *ClientCommandsHandlerProxy) AccountMove(ctx context.Context, req *pb.RpcAccountMoveRequest) *pb.RpcAccountMoveResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AccountMove(ctx, req.(*pb.RpcAccountMoveRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AccountMove", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAccountMoveResponse)
}
func (h *ClientCommandsHandlerProxy) AccountConfigUpdate(ctx context.Context, req *pb.RpcAccountConfigUpdateRequest) *pb.RpcAccountConfigUpdateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AccountConfigUpdate(ctx, req.(*pb.RpcAccountConfigUpdateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AccountConfigUpdate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAccountConfigUpdateResponse)
}
func (h *ClientCommandsHandlerProxy) AccountRecoverFromLegacyExport(ctx context.Context, req *pb.RpcAccountRecoverFromLegacyExportRequest) *pb.RpcAccountRecoverFromLegacyExportResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AccountRecoverFromLegacyExport(ctx, req.(*pb.RpcAccountRecoverFromLegacyExportRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AccountRecoverFromLegacyExport", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAccountRecoverFromLegacyExportResponse)
}
func (h *ClientCommandsHandlerProxy) AccountChangeNetworkConfigAndRestart(ctx context.Context, req *pb.RpcAccountChangeNetworkConfigAndRestartRequest) *pb.RpcAccountChangeNetworkConfigAndRestartResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.AccountChangeNetworkConfigAndRestart(ctx, req.(*pb.RpcAccountChangeNetworkConfigAndRestartRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "AccountChangeNetworkConfigAndRestart", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcAccountChangeNetworkConfigAndRestartResponse)
}
func (h *ClientCommandsHandlerProxy) SpaceDelete(ctx context.Context, req *pb.RpcSpaceDeleteRequest) *pb.RpcSpaceDeleteResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.SpaceDelete(ctx, req.(*pb.RpcSpaceDeleteRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "SpaceDelete", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcSpaceDeleteResponse)
}
func (h *ClientCommandsHandlerProxy) SpaceInviteGenerate(ctx context.Context, req *pb.RpcSpaceInviteGenerateRequest) *pb.RpcSpaceInviteGenerateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.SpaceInviteGenerate(ctx, req.(*pb.RpcSpaceInviteGenerateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "SpaceInviteGenerate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcSpaceInviteGenerateResponse)
}
func (h *ClientCommandsHandlerProxy) SpaceInviteGetCurrent(ctx context.Context, req *pb.RpcSpaceInviteGetCurrentRequest) *pb.RpcSpaceInviteGetCurrentResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.SpaceInviteGetCurrent(ctx, req.(*pb.RpcSpaceInviteGetCurrentRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "SpaceInviteGetCurrent", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcSpaceInviteGetCurrentResponse)
}
func (h *ClientCommandsHandlerProxy) SpaceInviteRevoke(ctx context.Context, req *pb.RpcSpaceInviteRevokeRequest) *pb.RpcSpaceInviteRevokeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.SpaceInviteRevoke(ctx, req.(*pb.RpcSpaceInviteRevokeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "SpaceInviteRevoke", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcSpaceInviteRevokeResponse)
}
func (h *ClientCommandsHandlerProxy) SpaceInviteView(ctx context.Context, req *pb.RpcSpaceInviteViewRequest) *pb.RpcSpaceInviteViewResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.SpaceInviteView(ctx, req.(*pb.RpcSpaceInviteViewRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "SpaceInviteView", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcSpaceInviteViewResponse)
}
func (h *ClientCommandsHandlerProxy) SpaceJoin(ctx context.Context, req *pb.RpcSpaceJoinRequest) *pb.RpcSpaceJoinResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.SpaceJoin(ctx, req.(*pb.RpcSpaceJoinRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "SpaceJoin", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcSpaceJoinResponse)
}
func (h *ClientCommandsHandlerProxy) SpaceJoinCancel(ctx context.Context, req *pb.RpcSpaceJoinCancelRequest) *pb.RpcSpaceJoinCancelResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.SpaceJoinCancel(ctx, req.(*pb.RpcSpaceJoinCancelRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "SpaceJoinCancel", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcSpaceJoinCancelResponse)
}
func (h *ClientCommandsHandlerProxy) SpaceExit(ctx context.Context, req *pb.RpcSpaceExitRequest) *pb.RpcSpaceExitResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.SpaceExit(ctx, req.(*pb.RpcSpaceExitRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "SpaceExit", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcSpaceExitResponse)
}
func (h *ClientCommandsHandlerProxy) SpaceStopSharing(ctx context.Context, req *pb.RpcSpaceStopSharingRequest) *pb.RpcSpaceStopSharingResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.SpaceStopSharing(ctx, req.(*pb.RpcSpaceStopSharingRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "SpaceStopSharing", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcSpaceStopSharingResponse)
}
func (h *ClientCommandsHandlerProxy) SpaceRequestApprove(ctx context.Context, req *pb.RpcSpaceRequestApproveRequest) *pb.RpcSpaceRequestApproveResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.SpaceRequestApprove(ctx, req.(*pb.RpcSpaceRequestApproveRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "SpaceRequestApprove", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcSpaceRequestApproveResponse)
}
func (h *ClientCommandsHandlerProxy) SpaceRequestDecline(ctx context.Context, req *pb.RpcSpaceRequestDeclineRequest) *pb.RpcSpaceRequestDeclineResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.SpaceRequestDecline(ctx, req.(*pb.RpcSpaceRequestDeclineRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "SpaceRequestDecline", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcSpaceRequestDeclineResponse)
}
func (h *ClientCommandsHandlerProxy) SpaceParticipantRemove(ctx context.Context, req *pb.RpcSpaceParticipantRemoveRequest) *pb.RpcSpaceParticipantRemoveResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.SpaceParticipantRemove(ctx, req.(*pb.RpcSpaceParticipantRemoveRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "SpaceParticipantRemove", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcSpaceParticipantRemoveResponse)
}
func (h *ClientCommandsHandlerProxy) SpaceParticipantPermissionsChange(ctx context.Context, req *pb.RpcSpaceParticipantPermissionsChangeRequest) *pb.RpcSpaceParticipantPermissionsChangeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.SpaceParticipantPermissionsChange(ctx, req.(*pb.RpcSpaceParticipantPermissionsChangeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "SpaceParticipantPermissionsChange", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcSpaceParticipantPermissionsChangeResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectOpen(ctx context.Context, req *pb.RpcObjectOpenRequest) *pb.RpcObjectOpenResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectOpen(ctx, req.(*pb.RpcObjectOpenRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectOpen", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectOpenResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectClose(ctx context.Context, req *pb.RpcObjectCloseRequest) *pb.RpcObjectCloseResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectClose(ctx, req.(*pb.RpcObjectCloseRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectClose", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectCloseResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectShow(ctx context.Context, req *pb.RpcObjectShowRequest) *pb.RpcObjectShowResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectShow(ctx, req.(*pb.RpcObjectShowRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectShow", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectShowResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectCreate(ctx context.Context, req *pb.RpcObjectCreateRequest) *pb.RpcObjectCreateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectCreate(ctx, req.(*pb.RpcObjectCreateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectCreate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectCreateResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectCreateBookmark(ctx context.Context, req *pb.RpcObjectCreateBookmarkRequest) *pb.RpcObjectCreateBookmarkResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectCreateBookmark(ctx, req.(*pb.RpcObjectCreateBookmarkRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectCreateBookmark", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectCreateBookmarkResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectCreateFromUrl(ctx context.Context, req *pb.RpcObjectCreateFromUrlRequest) *pb.RpcObjectCreateFromUrlResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectCreateFromUrl(ctx, req.(*pb.RpcObjectCreateFromUrlRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectCreateFromUrl", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectCreateFromUrlResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectCreateSet(ctx context.Context, req *pb.RpcObjectCreateSetRequest) *pb.RpcObjectCreateSetResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectCreateSet(ctx, req.(*pb.RpcObjectCreateSetRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectCreateSet", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectCreateSetResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectGraph(ctx context.Context, req *pb.RpcObjectGraphRequest) *pb.RpcObjectGraphResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectGraph(ctx, req.(*pb.RpcObjectGraphRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectGraph", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectGraphResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectSearch(ctx context.Context, req *pb.RpcObjectSearchRequest) *pb.RpcObjectSearchResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectSearch(ctx, req.(*pb.RpcObjectSearchRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectSearch", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectSearchResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectSearchSubscribe(ctx context.Context, req *pb.RpcObjectSearchSubscribeRequest) *pb.RpcObjectSearchSubscribeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectSearchSubscribe(ctx, req.(*pb.RpcObjectSearchSubscribeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectSearchSubscribe", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectSearchSubscribeResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectSubscribeIds(ctx context.Context, req *pb.RpcObjectSubscribeIdsRequest) *pb.RpcObjectSubscribeIdsResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectSubscribeIds(ctx, req.(*pb.RpcObjectSubscribeIdsRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectSubscribeIds", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectSubscribeIdsResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectGroupsSubscribe(ctx context.Context, req *pb.RpcObjectGroupsSubscribeRequest) *pb.RpcObjectGroupsSubscribeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectGroupsSubscribe(ctx, req.(*pb.RpcObjectGroupsSubscribeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectGroupsSubscribe", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectGroupsSubscribeResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectSearchUnsubscribe(ctx context.Context, req *pb.RpcObjectSearchUnsubscribeRequest) *pb.RpcObjectSearchUnsubscribeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectSearchUnsubscribe(ctx, req.(*pb.RpcObjectSearchUnsubscribeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectSearchUnsubscribe", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectSearchUnsubscribeResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectSetDetails(ctx context.Context, req *pb.RpcObjectSetDetailsRequest) *pb.RpcObjectSetDetailsResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectSetDetails(ctx, req.(*pb.RpcObjectSetDetailsRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectSetDetails", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectSetDetailsResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectDuplicate(ctx context.Context, req *pb.RpcObjectDuplicateRequest) *pb.RpcObjectDuplicateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectDuplicate(ctx, req.(*pb.RpcObjectDuplicateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectDuplicate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectDuplicateResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectSetObjectType(ctx context.Context, req *pb.RpcObjectSetObjectTypeRequest) *pb.RpcObjectSetObjectTypeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectSetObjectType(ctx, req.(*pb.RpcObjectSetObjectTypeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectSetObjectType", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectSetObjectTypeResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectSetLayout(ctx context.Context, req *pb.RpcObjectSetLayoutRequest) *pb.RpcObjectSetLayoutResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectSetLayout(ctx, req.(*pb.RpcObjectSetLayoutRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectSetLayout", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectSetLayoutResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectSetInternalFlags(ctx context.Context, req *pb.RpcObjectSetInternalFlagsRequest) *pb.RpcObjectSetInternalFlagsResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectSetInternalFlags(ctx, req.(*pb.RpcObjectSetInternalFlagsRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectSetInternalFlags", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectSetInternalFlagsResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectSetIsFavorite(ctx context.Context, req *pb.RpcObjectSetIsFavoriteRequest) *pb.RpcObjectSetIsFavoriteResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectSetIsFavorite(ctx, req.(*pb.RpcObjectSetIsFavoriteRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectSetIsFavorite", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectSetIsFavoriteResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectSetIsArchived(ctx context.Context, req *pb.RpcObjectSetIsArchivedRequest) *pb.RpcObjectSetIsArchivedResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectSetIsArchived(ctx, req.(*pb.RpcObjectSetIsArchivedRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectSetIsArchived", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectSetIsArchivedResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectSetSource(ctx context.Context, req *pb.RpcObjectSetSourceRequest) *pb.RpcObjectSetSourceResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectSetSource(ctx, req.(*pb.RpcObjectSetSourceRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectSetSource", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectSetSourceResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectWorkspaceSetDashboard(ctx context.Context, req *pb.RpcObjectWorkspaceSetDashboardRequest) *pb.RpcObjectWorkspaceSetDashboardResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectWorkspaceSetDashboard(ctx, req.(*pb.RpcObjectWorkspaceSetDashboardRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectWorkspaceSetDashboard", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectWorkspaceSetDashboardResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectListDuplicate(ctx context.Context, req *pb.RpcObjectListDuplicateRequest) *pb.RpcObjectListDuplicateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectListDuplicate(ctx, req.(*pb.RpcObjectListDuplicateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectListDuplicate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectListDuplicateResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectListDelete(ctx context.Context, req *pb.RpcObjectListDeleteRequest) *pb.RpcObjectListDeleteResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectListDelete(ctx, req.(*pb.RpcObjectListDeleteRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectListDelete", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectListDeleteResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectListSetIsArchived(ctx context.Context, req *pb.RpcObjectListSetIsArchivedRequest) *pb.RpcObjectListSetIsArchivedResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectListSetIsArchived(ctx, req.(*pb.RpcObjectListSetIsArchivedRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectListSetIsArchived", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectListSetIsArchivedResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectListSetIsFavorite(ctx context.Context, req *pb.RpcObjectListSetIsFavoriteRequest) *pb.RpcObjectListSetIsFavoriteResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectListSetIsFavorite(ctx, req.(*pb.RpcObjectListSetIsFavoriteRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectListSetIsFavorite", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectListSetIsFavoriteResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectListSetObjectType(ctx context.Context, req *pb.RpcObjectListSetObjectTypeRequest) *pb.RpcObjectListSetObjectTypeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectListSetObjectType(ctx, req.(*pb.RpcObjectListSetObjectTypeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectListSetObjectType", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectListSetObjectTypeResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectApplyTemplate(ctx context.Context, req *pb.RpcObjectApplyTemplateRequest) *pb.RpcObjectApplyTemplateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectApplyTemplate(ctx, req.(*pb.RpcObjectApplyTemplateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectApplyTemplate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectApplyTemplateResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectToSet(ctx context.Context, req *pb.RpcObjectToSetRequest) *pb.RpcObjectToSetResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectToSet(ctx, req.(*pb.RpcObjectToSetRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectToSet", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectToSetResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectToCollection(ctx context.Context, req *pb.RpcObjectToCollectionRequest) *pb.RpcObjectToCollectionResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectToCollection(ctx, req.(*pb.RpcObjectToCollectionRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectToCollection", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectToCollectionResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectShareByLink(ctx context.Context, req *pb.RpcObjectShareByLinkRequest) *pb.RpcObjectShareByLinkResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectShareByLink(ctx, req.(*pb.RpcObjectShareByLinkRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectShareByLink", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectShareByLinkResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectUndo(ctx context.Context, req *pb.RpcObjectUndoRequest) *pb.RpcObjectUndoResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectUndo(ctx, req.(*pb.RpcObjectUndoRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectUndo", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectUndoResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectRedo(ctx context.Context, req *pb.RpcObjectRedoRequest) *pb.RpcObjectRedoResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectRedo(ctx, req.(*pb.RpcObjectRedoRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectRedo", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectRedoResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectListExport(ctx context.Context, req *pb.RpcObjectListExportRequest) *pb.RpcObjectListExportResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectListExport(ctx, req.(*pb.RpcObjectListExportRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectListExport", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectListExportResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectBookmarkFetch(ctx context.Context, req *pb.RpcObjectBookmarkFetchRequest) *pb.RpcObjectBookmarkFetchResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectBookmarkFetch(ctx, req.(*pb.RpcObjectBookmarkFetchRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectBookmarkFetch", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectBookmarkFetchResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectToBookmark(ctx context.Context, req *pb.RpcObjectToBookmarkRequest) *pb.RpcObjectToBookmarkResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectToBookmark(ctx, req.(*pb.RpcObjectToBookmarkRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectToBookmark", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectToBookmarkResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectImport(ctx context.Context, req *pb.RpcObjectImportRequest) *pb.RpcObjectImportResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectImport(ctx, req.(*pb.RpcObjectImportRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectImport", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectImportResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectImportList(ctx context.Context, req *pb.RpcObjectImportListRequest) *pb.RpcObjectImportListResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectImportList(ctx, req.(*pb.RpcObjectImportListRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectImportList", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectImportListResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectImportNotionValidateToken(ctx context.Context, req *pb.RpcObjectImportNotionValidateTokenRequest) *pb.RpcObjectImportNotionValidateTokenResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectImportNotionValidateToken(ctx, req.(*pb.RpcObjectImportNotionValidateTokenRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectImportNotionValidateToken", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectImportNotionValidateTokenResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectImportUseCase(ctx context.Context, req *pb.RpcObjectImportUseCaseRequest) *pb.RpcObjectImportUseCaseResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectImportUseCase(ctx, req.(*pb.RpcObjectImportUseCaseRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectImportUseCase", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectImportUseCaseResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectImportExperience(ctx context.Context, req *pb.RpcObjectImportExperienceRequest) *pb.RpcObjectImportExperienceResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectImportExperience(ctx, req.(*pb.RpcObjectImportExperienceRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectImportExperience", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectImportExperienceResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectCollectionAdd(ctx context.Context, req *pb.RpcObjectCollectionAddRequest) *pb.RpcObjectCollectionAddResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectCollectionAdd(ctx, req.(*pb.RpcObjectCollectionAddRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectCollectionAdd", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectCollectionAddResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectCollectionRemove(ctx context.Context, req *pb.RpcObjectCollectionRemoveRequest) *pb.RpcObjectCollectionRemoveResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectCollectionRemove(ctx, req.(*pb.RpcObjectCollectionRemoveRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectCollectionRemove", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectCollectionRemoveResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectCollectionSort(ctx context.Context, req *pb.RpcObjectCollectionSortRequest) *pb.RpcObjectCollectionSortResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectCollectionSort(ctx, req.(*pb.RpcObjectCollectionSortRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectCollectionSort", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectCollectionSortResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectCreateRelation(ctx context.Context, req *pb.RpcObjectCreateRelationRequest) *pb.RpcObjectCreateRelationResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectCreateRelation(ctx, req.(*pb.RpcObjectCreateRelationRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectCreateRelation", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectCreateRelationResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectCreateRelationOption(ctx context.Context, req *pb.RpcObjectCreateRelationOptionRequest) *pb.RpcObjectCreateRelationOptionResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectCreateRelationOption(ctx, req.(*pb.RpcObjectCreateRelationOptionRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectCreateRelationOption", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectCreateRelationOptionResponse)
}
func (h *ClientCommandsHandlerProxy) RelationListRemoveOption(ctx context.Context, req *pb.RpcRelationListRemoveOptionRequest) *pb.RpcRelationListRemoveOptionResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.RelationListRemoveOption(ctx, req.(*pb.RpcRelationListRemoveOptionRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "RelationListRemoveOption", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcRelationListRemoveOptionResponse)
}
func (h *ClientCommandsHandlerProxy) RelationOptions(ctx context.Context, req *pb.RpcRelationOptionsRequest) *pb.RpcRelationOptionsResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.RelationOptions(ctx, req.(*pb.RpcRelationOptionsRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "RelationOptions", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcRelationOptionsResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectRelationAdd(ctx context.Context, req *pb.RpcObjectRelationAddRequest) *pb.RpcObjectRelationAddResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectRelationAdd(ctx, req.(*pb.RpcObjectRelationAddRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectRelationAdd", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectRelationAddResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectRelationDelete(ctx context.Context, req *pb.RpcObjectRelationDeleteRequest) *pb.RpcObjectRelationDeleteResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectRelationDelete(ctx, req.(*pb.RpcObjectRelationDeleteRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectRelationDelete", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectRelationDeleteResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectRelationAddFeatured(ctx context.Context, req *pb.RpcObjectRelationAddFeaturedRequest) *pb.RpcObjectRelationAddFeaturedResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectRelationAddFeatured(ctx, req.(*pb.RpcObjectRelationAddFeaturedRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectRelationAddFeatured", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectRelationAddFeaturedResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectRelationRemoveFeatured(ctx context.Context, req *pb.RpcObjectRelationRemoveFeaturedRequest) *pb.RpcObjectRelationRemoveFeaturedResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectRelationRemoveFeatured(ctx, req.(*pb.RpcObjectRelationRemoveFeaturedRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectRelationRemoveFeatured", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectRelationRemoveFeaturedResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectRelationListAvailable(ctx context.Context, req *pb.RpcObjectRelationListAvailableRequest) *pb.RpcObjectRelationListAvailableResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectRelationListAvailable(ctx, req.(*pb.RpcObjectRelationListAvailableRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectRelationListAvailable", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectRelationListAvailableResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectCreateObjectType(ctx context.Context, req *pb.RpcObjectCreateObjectTypeRequest) *pb.RpcObjectCreateObjectTypeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectCreateObjectType(ctx, req.(*pb.RpcObjectCreateObjectTypeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectCreateObjectType", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectCreateObjectTypeResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectTypeRelationAdd(ctx context.Context, req *pb.RpcObjectTypeRelationAddRequest) *pb.RpcObjectTypeRelationAddResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectTypeRelationAdd(ctx, req.(*pb.RpcObjectTypeRelationAddRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectTypeRelationAdd", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectTypeRelationAddResponse)
}
func (h *ClientCommandsHandlerProxy) ObjectTypeRelationRemove(ctx context.Context, req *pb.RpcObjectTypeRelationRemoveRequest) *pb.RpcObjectTypeRelationRemoveResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ObjectTypeRelationRemove(ctx, req.(*pb.RpcObjectTypeRelationRemoveRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ObjectTypeRelationRemove", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcObjectTypeRelationRemoveResponse)
}
func (h *ClientCommandsHandlerProxy) HistoryShowVersion(ctx context.Context, req *pb.RpcHistoryShowVersionRequest) *pb.RpcHistoryShowVersionResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.HistoryShowVersion(ctx, req.(*pb.RpcHistoryShowVersionRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "HistoryShowVersion", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcHistoryShowVersionResponse)
}
func (h *ClientCommandsHandlerProxy) HistoryGetVersions(ctx context.Context, req *pb.RpcHistoryGetVersionsRequest) *pb.RpcHistoryGetVersionsResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.HistoryGetVersions(ctx, req.(*pb.RpcHistoryGetVersionsRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "HistoryGetVersions", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcHistoryGetVersionsResponse)
}
func (h *ClientCommandsHandlerProxy) HistorySetVersion(ctx context.Context, req *pb.RpcHistorySetVersionRequest) *pb.RpcHistorySetVersionResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.HistorySetVersion(ctx, req.(*pb.RpcHistorySetVersionRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "HistorySetVersion", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcHistorySetVersionResponse)
}
func (h *ClientCommandsHandlerProxy) FileOffload(ctx context.Context, req *pb.RpcFileOffloadRequest) *pb.RpcFileOffloadResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.FileOffload(ctx, req.(*pb.RpcFileOffloadRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "FileOffload", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcFileOffloadResponse)
}
func (h *ClientCommandsHandlerProxy) FileSpaceOffload(ctx context.Context, req *pb.RpcFileSpaceOffloadRequest) *pb.RpcFileSpaceOffloadResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.FileSpaceOffload(ctx, req.(*pb.RpcFileSpaceOffloadRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "FileSpaceOffload", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcFileSpaceOffloadResponse)
}
func (h *ClientCommandsHandlerProxy) FileListOffload(ctx context.Context, req *pb.RpcFileListOffloadRequest) *pb.RpcFileListOffloadResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.FileListOffload(ctx, req.(*pb.RpcFileListOffloadRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "FileListOffload", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcFileListOffloadResponse)
}
func (h *ClientCommandsHandlerProxy) FileUpload(ctx context.Context, req *pb.RpcFileUploadRequest) *pb.RpcFileUploadResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.FileUpload(ctx, req.(*pb.RpcFileUploadRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "FileUpload", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcFileUploadResponse)
}
func (h *ClientCommandsHandlerProxy) FileDownload(ctx context.Context, req *pb.RpcFileDownloadRequest) *pb.RpcFileDownloadResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.FileDownload(ctx, req.(*pb.RpcFileDownloadRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "FileDownload", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcFileDownloadResponse)
}
func (h *ClientCommandsHandlerProxy) FileDrop(ctx context.Context, req *pb.RpcFileDropRequest) *pb.RpcFileDropResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.FileDrop(ctx, req.(*pb.RpcFileDropRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "FileDrop", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcFileDropResponse)
}
func (h *ClientCommandsHandlerProxy) FileSpaceUsage(ctx context.Context, req *pb.RpcFileSpaceUsageRequest) *pb.RpcFileSpaceUsageResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.FileSpaceUsage(ctx, req.(*pb.RpcFileSpaceUsageRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "FileSpaceUsage", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcFileSpaceUsageResponse)
}
func (h *ClientCommandsHandlerProxy) FileNodeUsage(ctx context.Context, req *pb.RpcFileNodeUsageRequest) *pb.RpcFileNodeUsageResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.FileNodeUsage(ctx, req.(*pb.RpcFileNodeUsageRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "FileNodeUsage", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcFileNodeUsageResponse)
}
func (h *ClientCommandsHandlerProxy) NavigationListObjects(ctx context.Context, req *pb.RpcNavigationListObjectsRequest) *pb.RpcNavigationListObjectsResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.NavigationListObjects(ctx, req.(*pb.RpcNavigationListObjectsRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "NavigationListObjects", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcNavigationListObjectsResponse)
}
func (h *ClientCommandsHandlerProxy) NavigationGetObjectInfoWithLinks(ctx context.Context, req *pb.RpcNavigationGetObjectInfoWithLinksRequest) *pb.RpcNavigationGetObjectInfoWithLinksResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.NavigationGetObjectInfoWithLinks(ctx, req.(*pb.RpcNavigationGetObjectInfoWithLinksRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "NavigationGetObjectInfoWithLinks", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcNavigationGetObjectInfoWithLinksResponse)
}
func (h *ClientCommandsHandlerProxy) TemplateCreateFromObject(ctx context.Context, req *pb.RpcTemplateCreateFromObjectRequest) *pb.RpcTemplateCreateFromObjectResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.TemplateCreateFromObject(ctx, req.(*pb.RpcTemplateCreateFromObjectRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "TemplateCreateFromObject", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcTemplateCreateFromObjectResponse)
}
func (h *ClientCommandsHandlerProxy) TemplateClone(ctx context.Context, req *pb.RpcTemplateCloneRequest) *pb.RpcTemplateCloneResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.TemplateClone(ctx, req.(*pb.RpcTemplateCloneRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "TemplateClone", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcTemplateCloneResponse)
}
func (h *ClientCommandsHandlerProxy) TemplateExportAll(ctx context.Context, req *pb.RpcTemplateExportAllRequest) *pb.RpcTemplateExportAllResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.TemplateExportAll(ctx, req.(*pb.RpcTemplateExportAllRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "TemplateExportAll", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcTemplateExportAllResponse)
}
func (h *ClientCommandsHandlerProxy) LinkPreview(ctx context.Context, req *pb.RpcLinkPreviewRequest) *pb.RpcLinkPreviewResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.LinkPreview(ctx, req.(*pb.RpcLinkPreviewRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "LinkPreview", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcLinkPreviewResponse)
}
func (h *ClientCommandsHandlerProxy) UnsplashSearch(ctx context.Context, req *pb.RpcUnsplashSearchRequest) *pb.RpcUnsplashSearchResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.UnsplashSearch(ctx, req.(*pb.RpcUnsplashSearchRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "UnsplashSearch", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcUnsplashSearchResponse)
}
func (h *ClientCommandsHandlerProxy) UnsplashDownload(ctx context.Context, req *pb.RpcUnsplashDownloadRequest) *pb.RpcUnsplashDownloadResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.UnsplashDownload(ctx, req.(*pb.RpcUnsplashDownloadRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "UnsplashDownload", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcUnsplashDownloadResponse)
}
func (h *ClientCommandsHandlerProxy) GalleryDownloadManifest(ctx context.Context, req *pb.RpcGalleryDownloadManifestRequest) *pb.RpcGalleryDownloadManifestResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.GalleryDownloadManifest(ctx, req.(*pb.RpcGalleryDownloadManifestRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "GalleryDownloadManifest", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcGalleryDownloadManifestResponse)
}
func (h *ClientCommandsHandlerProxy) GalleryDownloadIndex(ctx context.Context, req *pb.RpcGalleryDownloadIndexRequest) *pb.RpcGalleryDownloadIndexResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.GalleryDownloadIndex(ctx, req.(*pb.RpcGalleryDownloadIndexRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "GalleryDownloadIndex", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcGalleryDownloadIndexResponse)
}
func (h *ClientCommandsHandlerProxy) BlockUpload(ctx context.Context, req *pb.RpcBlockUploadRequest) *pb.RpcBlockUploadResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockUpload(ctx, req.(*pb.RpcBlockUploadRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockUpload", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockUploadResponse)
}
func (h *ClientCommandsHandlerProxy) BlockReplace(ctx context.Context, req *pb.RpcBlockReplaceRequest) *pb.RpcBlockReplaceResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockReplace(ctx, req.(*pb.RpcBlockReplaceRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockReplace", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockReplaceResponse)
}
func (h *ClientCommandsHandlerProxy) BlockCreate(ctx context.Context, req *pb.RpcBlockCreateRequest) *pb.RpcBlockCreateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockCreate(ctx, req.(*pb.RpcBlockCreateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockCreate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockCreateResponse)
}
func (h *ClientCommandsHandlerProxy) BlockSplit(ctx context.Context, req *pb.RpcBlockSplitRequest) *pb.RpcBlockSplitResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockSplit(ctx, req.(*pb.RpcBlockSplitRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockSplit", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockSplitResponse)
}
func (h *ClientCommandsHandlerProxy) BlockMerge(ctx context.Context, req *pb.RpcBlockMergeRequest) *pb.RpcBlockMergeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockMerge(ctx, req.(*pb.RpcBlockMergeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockMerge", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockMergeResponse)
}
func (h *ClientCommandsHandlerProxy) BlockCopy(ctx context.Context, req *pb.RpcBlockCopyRequest) *pb.RpcBlockCopyResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockCopy(ctx, req.(*pb.RpcBlockCopyRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockCopy", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockCopyResponse)
}
func (h *ClientCommandsHandlerProxy) BlockPaste(ctx context.Context, req *pb.RpcBlockPasteRequest) *pb.RpcBlockPasteResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockPaste(ctx, req.(*pb.RpcBlockPasteRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockPaste", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockPasteResponse)
}
func (h *ClientCommandsHandlerProxy) BlockCut(ctx context.Context, req *pb.RpcBlockCutRequest) *pb.RpcBlockCutResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockCut(ctx, req.(*pb.RpcBlockCutRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockCut", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockCutResponse)
}
func (h *ClientCommandsHandlerProxy) BlockSetFields(ctx context.Context, req *pb.RpcBlockSetFieldsRequest) *pb.RpcBlockSetFieldsResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockSetFields(ctx, req.(*pb.RpcBlockSetFieldsRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockSetFields", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockSetFieldsResponse)
}
func (h *ClientCommandsHandlerProxy) BlockExport(ctx context.Context, req *pb.RpcBlockExportRequest) *pb.RpcBlockExportResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockExport(ctx, req.(*pb.RpcBlockExportRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockExport", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockExportResponse)
}
func (h *ClientCommandsHandlerProxy) BlockSetCarriage(ctx context.Context, req *pb.RpcBlockSetCarriageRequest) *pb.RpcBlockSetCarriageResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockSetCarriage(ctx, req.(*pb.RpcBlockSetCarriageRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockSetCarriage", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockSetCarriageResponse)
}
func (h *ClientCommandsHandlerProxy) BlockPreview(ctx context.Context, req *pb.RpcBlockPreviewRequest) *pb.RpcBlockPreviewResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockPreview(ctx, req.(*pb.RpcBlockPreviewRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockPreview", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockPreviewResponse)
}
func (h *ClientCommandsHandlerProxy) BlockListDelete(ctx context.Context, req *pb.RpcBlockListDeleteRequest) *pb.RpcBlockListDeleteResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockListDelete(ctx, req.(*pb.RpcBlockListDeleteRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockListDelete", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockListDeleteResponse)
}
func (h *ClientCommandsHandlerProxy) BlockListMoveToExistingObject(ctx context.Context, req *pb.RpcBlockListMoveToExistingObjectRequest) *pb.RpcBlockListMoveToExistingObjectResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockListMoveToExistingObject(ctx, req.(*pb.RpcBlockListMoveToExistingObjectRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockListMoveToExistingObject", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockListMoveToExistingObjectResponse)
}
func (h *ClientCommandsHandlerProxy) BlockListMoveToNewObject(ctx context.Context, req *pb.RpcBlockListMoveToNewObjectRequest) *pb.RpcBlockListMoveToNewObjectResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockListMoveToNewObject(ctx, req.(*pb.RpcBlockListMoveToNewObjectRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockListMoveToNewObject", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockListMoveToNewObjectResponse)
}
func (h *ClientCommandsHandlerProxy) BlockListConvertToObjects(ctx context.Context, req *pb.RpcBlockListConvertToObjectsRequest) *pb.RpcBlockListConvertToObjectsResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockListConvertToObjects(ctx, req.(*pb.RpcBlockListConvertToObjectsRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockListConvertToObjects", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockListConvertToObjectsResponse)
}
func (h *ClientCommandsHandlerProxy) BlockListSetFields(ctx context.Context, req *pb.RpcBlockListSetFieldsRequest) *pb.RpcBlockListSetFieldsResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockListSetFields(ctx, req.(*pb.RpcBlockListSetFieldsRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockListSetFields", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockListSetFieldsResponse)
}
func (h *ClientCommandsHandlerProxy) BlockListDuplicate(ctx context.Context, req *pb.RpcBlockListDuplicateRequest) *pb.RpcBlockListDuplicateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockListDuplicate(ctx, req.(*pb.RpcBlockListDuplicateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockListDuplicate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockListDuplicateResponse)
}
func (h *ClientCommandsHandlerProxy) BlockListSetBackgroundColor(ctx context.Context, req *pb.RpcBlockListSetBackgroundColorRequest) *pb.RpcBlockListSetBackgroundColorResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockListSetBackgroundColor(ctx, req.(*pb.RpcBlockListSetBackgroundColorRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockListSetBackgroundColor", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockListSetBackgroundColorResponse)
}
func (h *ClientCommandsHandlerProxy) BlockListSetAlign(ctx context.Context, req *pb.RpcBlockListSetAlignRequest) *pb.RpcBlockListSetAlignResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockListSetAlign(ctx, req.(*pb.RpcBlockListSetAlignRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockListSetAlign", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockListSetAlignResponse)
}
func (h *ClientCommandsHandlerProxy) BlockListSetVerticalAlign(ctx context.Context, req *pb.RpcBlockListSetVerticalAlignRequest) *pb.RpcBlockListSetVerticalAlignResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockListSetVerticalAlign(ctx, req.(*pb.RpcBlockListSetVerticalAlignRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockListSetVerticalAlign", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockListSetVerticalAlignResponse)
}
func (h *ClientCommandsHandlerProxy) BlockListTurnInto(ctx context.Context, req *pb.RpcBlockListTurnIntoRequest) *pb.RpcBlockListTurnIntoResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockListTurnInto(ctx, req.(*pb.RpcBlockListTurnIntoRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockListTurnInto", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockListTurnIntoResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTextSetText(ctx context.Context, req *pb.RpcBlockTextSetTextRequest) *pb.RpcBlockTextSetTextResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTextSetText(ctx, req.(*pb.RpcBlockTextSetTextRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTextSetText", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTextSetTextResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTextSetColor(ctx context.Context, req *pb.RpcBlockTextSetColorRequest) *pb.RpcBlockTextSetColorResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTextSetColor(ctx, req.(*pb.RpcBlockTextSetColorRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTextSetColor", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTextSetColorResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTextSetStyle(ctx context.Context, req *pb.RpcBlockTextSetStyleRequest) *pb.RpcBlockTextSetStyleResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTextSetStyle(ctx, req.(*pb.RpcBlockTextSetStyleRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTextSetStyle", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTextSetStyleResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTextSetChecked(ctx context.Context, req *pb.RpcBlockTextSetCheckedRequest) *pb.RpcBlockTextSetCheckedResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTextSetChecked(ctx, req.(*pb.RpcBlockTextSetCheckedRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTextSetChecked", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTextSetCheckedResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTextSetIcon(ctx context.Context, req *pb.RpcBlockTextSetIconRequest) *pb.RpcBlockTextSetIconResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTextSetIcon(ctx, req.(*pb.RpcBlockTextSetIconRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTextSetIcon", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTextSetIconResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTextListSetColor(ctx context.Context, req *pb.RpcBlockTextListSetColorRequest) *pb.RpcBlockTextListSetColorResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTextListSetColor(ctx, req.(*pb.RpcBlockTextListSetColorRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTextListSetColor", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTextListSetColorResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTextListSetMark(ctx context.Context, req *pb.RpcBlockTextListSetMarkRequest) *pb.RpcBlockTextListSetMarkResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTextListSetMark(ctx, req.(*pb.RpcBlockTextListSetMarkRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTextListSetMark", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTextListSetMarkResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTextListSetStyle(ctx context.Context, req *pb.RpcBlockTextListSetStyleRequest) *pb.RpcBlockTextListSetStyleResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTextListSetStyle(ctx, req.(*pb.RpcBlockTextListSetStyleRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTextListSetStyle", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTextListSetStyleResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTextListClearStyle(ctx context.Context, req *pb.RpcBlockTextListClearStyleRequest) *pb.RpcBlockTextListClearStyleResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTextListClearStyle(ctx, req.(*pb.RpcBlockTextListClearStyleRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTextListClearStyle", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTextListClearStyleResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTextListClearContent(ctx context.Context, req *pb.RpcBlockTextListClearContentRequest) *pb.RpcBlockTextListClearContentResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTextListClearContent(ctx, req.(*pb.RpcBlockTextListClearContentRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTextListClearContent", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTextListClearContentResponse)
}
func (h *ClientCommandsHandlerProxy) BlockFileSetName(ctx context.Context, req *pb.RpcBlockFileSetNameRequest) *pb.RpcBlockFileSetNameResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockFileSetName(ctx, req.(*pb.RpcBlockFileSetNameRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockFileSetName", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockFileSetNameResponse)
}
func (h *ClientCommandsHandlerProxy) BlockImageSetName(ctx context.Context, req *pb.RpcBlockImageSetNameRequest) *pb.RpcBlockImageSetNameResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockImageSetName(ctx, req.(*pb.RpcBlockImageSetNameRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockImageSetName", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockImageSetNameResponse)
}
func (h *ClientCommandsHandlerProxy) BlockVideoSetName(ctx context.Context, req *pb.RpcBlockVideoSetNameRequest) *pb.RpcBlockVideoSetNameResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockVideoSetName(ctx, req.(*pb.RpcBlockVideoSetNameRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockVideoSetName", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockVideoSetNameResponse)
}
func (h *ClientCommandsHandlerProxy) BlockFileCreateAndUpload(ctx context.Context, req *pb.RpcBlockFileCreateAndUploadRequest) *pb.RpcBlockFileCreateAndUploadResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockFileCreateAndUpload(ctx, req.(*pb.RpcBlockFileCreateAndUploadRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockFileCreateAndUpload", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockFileCreateAndUploadResponse)
}
func (h *ClientCommandsHandlerProxy) BlockFileListSetStyle(ctx context.Context, req *pb.RpcBlockFileListSetStyleRequest) *pb.RpcBlockFileListSetStyleResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockFileListSetStyle(ctx, req.(*pb.RpcBlockFileListSetStyleRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockFileListSetStyle", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockFileListSetStyleResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewViewCreate(ctx context.Context, req *pb.RpcBlockDataviewViewCreateRequest) *pb.RpcBlockDataviewViewCreateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewViewCreate(ctx, req.(*pb.RpcBlockDataviewViewCreateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewViewCreate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewViewCreateResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewViewDelete(ctx context.Context, req *pb.RpcBlockDataviewViewDeleteRequest) *pb.RpcBlockDataviewViewDeleteResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewViewDelete(ctx, req.(*pb.RpcBlockDataviewViewDeleteRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewViewDelete", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewViewDeleteResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewViewUpdate(ctx context.Context, req *pb.RpcBlockDataviewViewUpdateRequest) *pb.RpcBlockDataviewViewUpdateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewViewUpdate(ctx, req.(*pb.RpcBlockDataviewViewUpdateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewViewUpdate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewViewUpdateResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewViewSetActive(ctx context.Context, req *pb.RpcBlockDataviewViewSetActiveRequest) *pb.RpcBlockDataviewViewSetActiveResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewViewSetActive(ctx, req.(*pb.RpcBlockDataviewViewSetActiveRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewViewSetActive", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewViewSetActiveResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewViewSetPosition(ctx context.Context, req *pb.RpcBlockDataviewViewSetPositionRequest) *pb.RpcBlockDataviewViewSetPositionResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewViewSetPosition(ctx, req.(*pb.RpcBlockDataviewViewSetPositionRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewViewSetPosition", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewViewSetPositionResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewSetSource(ctx context.Context, req *pb.RpcBlockDataviewSetSourceRequest) *pb.RpcBlockDataviewSetSourceResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewSetSource(ctx, req.(*pb.RpcBlockDataviewSetSourceRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewSetSource", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewSetSourceResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewRelationAdd(ctx context.Context, req *pb.RpcBlockDataviewRelationAddRequest) *pb.RpcBlockDataviewRelationAddResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewRelationAdd(ctx, req.(*pb.RpcBlockDataviewRelationAddRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewRelationAdd", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewRelationAddResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewRelationDelete(ctx context.Context, req *pb.RpcBlockDataviewRelationDeleteRequest) *pb.RpcBlockDataviewRelationDeleteResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewRelationDelete(ctx, req.(*pb.RpcBlockDataviewRelationDeleteRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewRelationDelete", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewRelationDeleteResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewRelationListAvailable(ctx context.Context, req *pb.RpcBlockDataviewRelationListAvailableRequest) *pb.RpcBlockDataviewRelationListAvailableResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewRelationListAvailable(ctx, req.(*pb.RpcBlockDataviewRelationListAvailableRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewRelationListAvailable", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewRelationListAvailableResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewGroupOrderUpdate(ctx context.Context, req *pb.RpcBlockDataviewGroupOrderUpdateRequest) *pb.RpcBlockDataviewGroupOrderUpdateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewGroupOrderUpdate(ctx, req.(*pb.RpcBlockDataviewGroupOrderUpdateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewGroupOrderUpdate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewGroupOrderUpdateResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewObjectOrderUpdate(ctx context.Context, req *pb.RpcBlockDataviewObjectOrderUpdateRequest) *pb.RpcBlockDataviewObjectOrderUpdateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewObjectOrderUpdate(ctx, req.(*pb.RpcBlockDataviewObjectOrderUpdateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewObjectOrderUpdate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewObjectOrderUpdateResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewObjectOrderMove(ctx context.Context, req *pb.RpcBlockDataviewObjectOrderMoveRequest) *pb.RpcBlockDataviewObjectOrderMoveResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewObjectOrderMove(ctx, req.(*pb.RpcBlockDataviewObjectOrderMoveRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewObjectOrderMove", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewObjectOrderMoveResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewCreateFromExistingObject(ctx context.Context, req *pb.RpcBlockDataviewCreateFromExistingObjectRequest) *pb.RpcBlockDataviewCreateFromExistingObjectResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewCreateFromExistingObject(ctx, req.(*pb.RpcBlockDataviewCreateFromExistingObjectRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewCreateFromExistingObject", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewCreateFromExistingObjectResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewFilterAdd(ctx context.Context, req *pb.RpcBlockDataviewFilterAddRequest) *pb.RpcBlockDataviewFilterAddResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewFilterAdd(ctx, req.(*pb.RpcBlockDataviewFilterAddRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewFilterAdd", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewFilterAddResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewFilterRemove(ctx context.Context, req *pb.RpcBlockDataviewFilterRemoveRequest) *pb.RpcBlockDataviewFilterRemoveResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewFilterRemove(ctx, req.(*pb.RpcBlockDataviewFilterRemoveRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewFilterRemove", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewFilterRemoveResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewFilterReplace(ctx context.Context, req *pb.RpcBlockDataviewFilterReplaceRequest) *pb.RpcBlockDataviewFilterReplaceResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewFilterReplace(ctx, req.(*pb.RpcBlockDataviewFilterReplaceRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewFilterReplace", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewFilterReplaceResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewFilterSort(ctx context.Context, req *pb.RpcBlockDataviewFilterSortRequest) *pb.RpcBlockDataviewFilterSortResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewFilterSort(ctx, req.(*pb.RpcBlockDataviewFilterSortRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewFilterSort", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewFilterSortResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewSortAdd(ctx context.Context, req *pb.RpcBlockDataviewSortAddRequest) *pb.RpcBlockDataviewSortAddResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewSortAdd(ctx, req.(*pb.RpcBlockDataviewSortAddRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewSortAdd", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewSortAddResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewSortRemove(ctx context.Context, req *pb.RpcBlockDataviewSortRemoveRequest) *pb.RpcBlockDataviewSortRemoveResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewSortRemove(ctx, req.(*pb.RpcBlockDataviewSortRemoveRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewSortRemove", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewSortRemoveResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewSortReplace(ctx context.Context, req *pb.RpcBlockDataviewSortReplaceRequest) *pb.RpcBlockDataviewSortReplaceResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewSortReplace(ctx, req.(*pb.RpcBlockDataviewSortReplaceRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewSortReplace", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewSortReplaceResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewSortSort(ctx context.Context, req *pb.RpcBlockDataviewSortSortRequest) *pb.RpcBlockDataviewSortSortResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewSortSort(ctx, req.(*pb.RpcBlockDataviewSortSortRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewSortSort", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewSortSortResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewViewRelationAdd(ctx context.Context, req *pb.RpcBlockDataviewViewRelationAddRequest) *pb.RpcBlockDataviewViewRelationAddResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewViewRelationAdd(ctx, req.(*pb.RpcBlockDataviewViewRelationAddRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewViewRelationAdd", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewViewRelationAddResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewViewRelationRemove(ctx context.Context, req *pb.RpcBlockDataviewViewRelationRemoveRequest) *pb.RpcBlockDataviewViewRelationRemoveResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewViewRelationRemove(ctx, req.(*pb.RpcBlockDataviewViewRelationRemoveRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewViewRelationRemove", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewViewRelationRemoveResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewViewRelationReplace(ctx context.Context, req *pb.RpcBlockDataviewViewRelationReplaceRequest) *pb.RpcBlockDataviewViewRelationReplaceResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewViewRelationReplace(ctx, req.(*pb.RpcBlockDataviewViewRelationReplaceRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewViewRelationReplace", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewViewRelationReplaceResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDataviewViewRelationSort(ctx context.Context, req *pb.RpcBlockDataviewViewRelationSortRequest) *pb.RpcBlockDataviewViewRelationSortResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDataviewViewRelationSort(ctx, req.(*pb.RpcBlockDataviewViewRelationSortRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDataviewViewRelationSort", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDataviewViewRelationSortResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTableCreate(ctx context.Context, req *pb.RpcBlockTableCreateRequest) *pb.RpcBlockTableCreateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTableCreate(ctx, req.(*pb.RpcBlockTableCreateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTableCreate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTableCreateResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTableExpand(ctx context.Context, req *pb.RpcBlockTableExpandRequest) *pb.RpcBlockTableExpandResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTableExpand(ctx, req.(*pb.RpcBlockTableExpandRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTableExpand", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTableExpandResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTableRowCreate(ctx context.Context, req *pb.RpcBlockTableRowCreateRequest) *pb.RpcBlockTableRowCreateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTableRowCreate(ctx, req.(*pb.RpcBlockTableRowCreateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTableRowCreate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTableRowCreateResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTableRowDelete(ctx context.Context, req *pb.RpcBlockTableRowDeleteRequest) *pb.RpcBlockTableRowDeleteResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTableRowDelete(ctx, req.(*pb.RpcBlockTableRowDeleteRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTableRowDelete", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTableRowDeleteResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTableRowDuplicate(ctx context.Context, req *pb.RpcBlockTableRowDuplicateRequest) *pb.RpcBlockTableRowDuplicateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTableRowDuplicate(ctx, req.(*pb.RpcBlockTableRowDuplicateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTableRowDuplicate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTableRowDuplicateResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTableRowSetHeader(ctx context.Context, req *pb.RpcBlockTableRowSetHeaderRequest) *pb.RpcBlockTableRowSetHeaderResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTableRowSetHeader(ctx, req.(*pb.RpcBlockTableRowSetHeaderRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTableRowSetHeader", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTableRowSetHeaderResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTableColumnCreate(ctx context.Context, req *pb.RpcBlockTableColumnCreateRequest) *pb.RpcBlockTableColumnCreateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTableColumnCreate(ctx, req.(*pb.RpcBlockTableColumnCreateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTableColumnCreate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTableColumnCreateResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTableColumnMove(ctx context.Context, req *pb.RpcBlockTableColumnMoveRequest) *pb.RpcBlockTableColumnMoveResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTableColumnMove(ctx, req.(*pb.RpcBlockTableColumnMoveRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTableColumnMove", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTableColumnMoveResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTableColumnDelete(ctx context.Context, req *pb.RpcBlockTableColumnDeleteRequest) *pb.RpcBlockTableColumnDeleteResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTableColumnDelete(ctx, req.(*pb.RpcBlockTableColumnDeleteRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTableColumnDelete", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTableColumnDeleteResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTableColumnDuplicate(ctx context.Context, req *pb.RpcBlockTableColumnDuplicateRequest) *pb.RpcBlockTableColumnDuplicateResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTableColumnDuplicate(ctx, req.(*pb.RpcBlockTableColumnDuplicateRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTableColumnDuplicate", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTableColumnDuplicateResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTableRowListFill(ctx context.Context, req *pb.RpcBlockTableRowListFillRequest) *pb.RpcBlockTableRowListFillResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTableRowListFill(ctx, req.(*pb.RpcBlockTableRowListFillRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTableRowListFill", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTableRowListFillResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTableRowListClean(ctx context.Context, req *pb.RpcBlockTableRowListCleanRequest) *pb.RpcBlockTableRowListCleanResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTableRowListClean(ctx, req.(*pb.RpcBlockTableRowListCleanRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTableRowListClean", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTableRowListCleanResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTableColumnListFill(ctx context.Context, req *pb.RpcBlockTableColumnListFillRequest) *pb.RpcBlockTableColumnListFillResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTableColumnListFill(ctx, req.(*pb.RpcBlockTableColumnListFillRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTableColumnListFill", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTableColumnListFillResponse)
}
func (h *ClientCommandsHandlerProxy) BlockTableSort(ctx context.Context, req *pb.RpcBlockTableSortRequest) *pb.RpcBlockTableSortResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockTableSort(ctx, req.(*pb.RpcBlockTableSortRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockTableSort", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockTableSortResponse)
}
func (h *ClientCommandsHandlerProxy) BlockCreateWidget(ctx context.Context, req *pb.RpcBlockCreateWidgetRequest) *pb.RpcBlockCreateWidgetResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockCreateWidget(ctx, req.(*pb.RpcBlockCreateWidgetRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockCreateWidget", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockCreateWidgetResponse)
}
func (h *ClientCommandsHandlerProxy) BlockWidgetSetTargetId(ctx context.Context, req *pb.RpcBlockWidgetSetTargetIdRequest) *pb.RpcBlockWidgetSetTargetIdResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockWidgetSetTargetId(ctx, req.(*pb.RpcBlockWidgetSetTargetIdRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockWidgetSetTargetId", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockWidgetSetTargetIdResponse)
}
func (h *ClientCommandsHandlerProxy) BlockWidgetSetLayout(ctx context.Context, req *pb.RpcBlockWidgetSetLayoutRequest) *pb.RpcBlockWidgetSetLayoutResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockWidgetSetLayout(ctx, req.(*pb.RpcBlockWidgetSetLayoutRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockWidgetSetLayout", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockWidgetSetLayoutResponse)
}
func (h *ClientCommandsHandlerProxy) BlockWidgetSetLimit(ctx context.Context, req *pb.RpcBlockWidgetSetLimitRequest) *pb.RpcBlockWidgetSetLimitResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockWidgetSetLimit(ctx, req.(*pb.RpcBlockWidgetSetLimitRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockWidgetSetLimit", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockWidgetSetLimitResponse)
}
func (h *ClientCommandsHandlerProxy) BlockWidgetSetViewId(ctx context.Context, req *pb.RpcBlockWidgetSetViewIdRequest) *pb.RpcBlockWidgetSetViewIdResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockWidgetSetViewId(ctx, req.(*pb.RpcBlockWidgetSetViewIdRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockWidgetSetViewId", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockWidgetSetViewIdResponse)
}
func (h *ClientCommandsHandlerProxy) BlockLinkCreateWithObject(ctx context.Context, req *pb.RpcBlockLinkCreateWithObjectRequest) *pb.RpcBlockLinkCreateWithObjectResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockLinkCreateWithObject(ctx, req.(*pb.RpcBlockLinkCreateWithObjectRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockLinkCreateWithObject", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockLinkCreateWithObjectResponse)
}
func (h *ClientCommandsHandlerProxy) BlockLinkListSetAppearance(ctx context.Context, req *pb.RpcBlockLinkListSetAppearanceRequest) *pb.RpcBlockLinkListSetAppearanceResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockLinkListSetAppearance(ctx, req.(*pb.RpcBlockLinkListSetAppearanceRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockLinkListSetAppearance", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockLinkListSetAppearanceResponse)
}
func (h *ClientCommandsHandlerProxy) BlockBookmarkFetch(ctx context.Context, req *pb.RpcBlockBookmarkFetchRequest) *pb.RpcBlockBookmarkFetchResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockBookmarkFetch(ctx, req.(*pb.RpcBlockBookmarkFetchRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockBookmarkFetch", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockBookmarkFetchResponse)
}
func (h *ClientCommandsHandlerProxy) BlockBookmarkCreateAndFetch(ctx context.Context, req *pb.RpcBlockBookmarkCreateAndFetchRequest) *pb.RpcBlockBookmarkCreateAndFetchResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockBookmarkCreateAndFetch(ctx, req.(*pb.RpcBlockBookmarkCreateAndFetchRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockBookmarkCreateAndFetch", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockBookmarkCreateAndFetchResponse)
}
func (h *ClientCommandsHandlerProxy) BlockRelationSetKey(ctx context.Context, req *pb.RpcBlockRelationSetKeyRequest) *pb.RpcBlockRelationSetKeyResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockRelationSetKey(ctx, req.(*pb.RpcBlockRelationSetKeyRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockRelationSetKey", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockRelationSetKeyResponse)
}
func (h *ClientCommandsHandlerProxy) BlockRelationAdd(ctx context.Context, req *pb.RpcBlockRelationAddRequest) *pb.RpcBlockRelationAddResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockRelationAdd(ctx, req.(*pb.RpcBlockRelationAddRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockRelationAdd", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockRelationAddResponse)
}
func (h *ClientCommandsHandlerProxy) BlockDivListSetStyle(ctx context.Context, req *pb.RpcBlockDivListSetStyleRequest) *pb.RpcBlockDivListSetStyleResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockDivListSetStyle(ctx, req.(*pb.RpcBlockDivListSetStyleRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockDivListSetStyle", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockDivListSetStyleResponse)
}
func (h *ClientCommandsHandlerProxy) BlockLatexSetText(ctx context.Context, req *pb.RpcBlockLatexSetTextRequest) *pb.RpcBlockLatexSetTextResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BlockLatexSetText(ctx, req.(*pb.RpcBlockLatexSetTextRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BlockLatexSetText", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBlockLatexSetTextResponse)
}
func (h *ClientCommandsHandlerProxy) ProcessCancel(ctx context.Context, req *pb.RpcProcessCancelRequest) *pb.RpcProcessCancelResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.ProcessCancel(ctx, req.(*pb.RpcProcessCancelRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "ProcessCancel", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcProcessCancelResponse)
}
func (h *ClientCommandsHandlerProxy) LogSend(ctx context.Context, req *pb.RpcLogSendRequest) *pb.RpcLogSendResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.LogSend(ctx, req.(*pb.RpcLogSendRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "LogSend", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcLogSendResponse)
}
func (h *ClientCommandsHandlerProxy) DebugStat(ctx context.Context, req *pb.RpcDebugStatRequest) *pb.RpcDebugStatResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.DebugStat(ctx, req.(*pb.RpcDebugStatRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "DebugStat", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcDebugStatResponse)
}
func (h *ClientCommandsHandlerProxy) DebugTree(ctx context.Context, req *pb.RpcDebugTreeRequest) *pb.RpcDebugTreeResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.DebugTree(ctx, req.(*pb.RpcDebugTreeRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "DebugTree", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcDebugTreeResponse)
}
func (h *ClientCommandsHandlerProxy) DebugTreeHeads(ctx context.Context, req *pb.RpcDebugTreeHeadsRequest) *pb.RpcDebugTreeHeadsResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.DebugTreeHeads(ctx, req.(*pb.RpcDebugTreeHeadsRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "DebugTreeHeads", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcDebugTreeHeadsResponse)
}
func (h *ClientCommandsHandlerProxy) DebugSpaceSummary(ctx context.Context, req *pb.RpcDebugSpaceSummaryRequest) *pb.RpcDebugSpaceSummaryResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.DebugSpaceSummary(ctx, req.(*pb.RpcDebugSpaceSummaryRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "DebugSpaceSummary", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcDebugSpaceSummaryResponse)
}
func (h *ClientCommandsHandlerProxy) DebugStackGoroutines(ctx context.Context, req *pb.RpcDebugStackGoroutinesRequest) *pb.RpcDebugStackGoroutinesResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.DebugStackGoroutines(ctx, req.(*pb.RpcDebugStackGoroutinesRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "DebugStackGoroutines", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcDebugStackGoroutinesResponse)
}
func (h *ClientCommandsHandlerProxy) DebugExportLocalstore(ctx context.Context, req *pb.RpcDebugExportLocalstoreRequest) *pb.RpcDebugExportLocalstoreResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.DebugExportLocalstore(ctx, req.(*pb.RpcDebugExportLocalstoreRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "DebugExportLocalstore", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcDebugExportLocalstoreResponse)
}
func (h *ClientCommandsHandlerProxy) DebugPing(ctx context.Context, req *pb.RpcDebugPingRequest) *pb.RpcDebugPingResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.DebugPing(ctx, req.(*pb.RpcDebugPingRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "DebugPing", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcDebugPingResponse)
}
func (h *ClientCommandsHandlerProxy) DebugSubscriptions(ctx context.Context, req *pb.RpcDebugSubscriptionsRequest) *pb.RpcDebugSubscriptionsResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.DebugSubscriptions(ctx, req.(*pb.RpcDebugSubscriptionsRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "DebugSubscriptions", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcDebugSubscriptionsResponse)
}
func (h *ClientCommandsHandlerProxy) DebugOpenedObjects(ctx context.Context, req *pb.RpcDebugOpenedObjectsRequest) *pb.RpcDebugOpenedObjectsResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.DebugOpenedObjects(ctx, req.(*pb.RpcDebugOpenedObjectsRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "DebugOpenedObjects", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcDebugOpenedObjectsResponse)
}
func (h *ClientCommandsHandlerProxy) MetricsSetParameters(ctx context.Context, req *pb.RpcMetricsSetParametersRequest) *pb.RpcMetricsSetParametersResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.MetricsSetParameters(ctx, req.(*pb.RpcMetricsSetParametersRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "MetricsSetParameters", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcMetricsSetParametersResponse)
}
func (h *ClientCommandsHandlerProxy) NotificationList(ctx context.Context, req *pb.RpcNotificationListRequest) *pb.RpcNotificationListResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.NotificationList(ctx, req.(*pb.RpcNotificationListRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "NotificationList", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcNotificationListResponse)
}
func (h *ClientCommandsHandlerProxy) NotificationReply(ctx context.Context, req *pb.RpcNotificationReplyRequest) *pb.RpcNotificationReplyResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.NotificationReply(ctx, req.(*pb.RpcNotificationReplyRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "NotificationReply", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcNotificationReplyResponse)
}
func (h *ClientCommandsHandlerProxy) NotificationTest(ctx context.Context, req *pb.RpcNotificationTestRequest) *pb.RpcNotificationTestResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.NotificationTest(ctx, req.(*pb.RpcNotificationTestRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "NotificationTest", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcNotificationTestResponse)
}
func (h *ClientCommandsHandlerProxy) BroadcastPayloadEvent(ctx context.Context, req *pb.RpcBroadcastPayloadEventRequest) *pb.RpcBroadcastPayloadEventResponse {
	actualCall := func(ctx context.Context, req any) (any, error) {
		return h.client.BroadcastPayloadEvent(ctx, req.(*pb.RpcBroadcastPayloadEventRequest)), nil
	}
	for _, interceptor := range h.interceptors {
		toCall := actualCall
		currentInterceptor := interceptor
		actualCall = func(ctx context.Context, req any) (any, error) {
			return currentInterceptor(ctx, req, "BroadcastPayloadEvent", toCall)
		}
	}
	call, _ := actualCall(ctx, req)
	return call.(*pb.RpcBroadcastPayloadEventResponse)
}
