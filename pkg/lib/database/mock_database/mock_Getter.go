// Code generated by mockery. DO NOT EDIT.

package mock_database

import (
	types "github.com/gogo/protobuf/types"
	mock "github.com/stretchr/testify/mock"
)

// MockGetter is an autogenerated mock type for the Getter type
type MockGetter struct {
	mock.Mock
}

type MockGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGetter) EXPECT() *MockGetter_Expecter {
	return &MockGetter_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: key
func (_m *MockGetter) Get(key string) *types.Value {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *types.Value
	if rf, ok := ret.Get(0).(func(string) *types.Value); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Value)
		}
	}

	return r0
}

// MockGetter_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockGetter_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *MockGetter_Expecter) Get(key interface{}) *MockGetter_Get_Call {
	return &MockGetter_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockGetter_Get_Call) Run(run func(key string)) *MockGetter_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGetter_Get_Call) Return(_a0 *types.Value) *MockGetter_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGetter_Get_Call) RunAndReturn(run func(string) *types.Value) *MockGetter_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGetter creates a new instance of MockGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetter {
	mock := &MockGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
