// Code generated by mockery v2.38.0. DO NOT EDIT.

package mock_database

import (
	database "github.com/anyproto/anytype-heart/pkg/lib/database"
	mock "github.com/stretchr/testify/mock"
)

// MockFilter is an autogenerated mock type for the Filter type
type MockFilter struct {
	mock.Mock
}

type MockFilter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFilter) EXPECT() *MockFilter_Expecter {
	return &MockFilter_Expecter{mock: &_m.Mock}
}

// FilterObject provides a mock function with given fields: g
func (_m *MockFilter) FilterObject(g database.Getter) bool {
	ret := _m.Called(g)

	if len(ret) == 0 {
		panic("no return value specified for FilterObject")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(database.Getter) bool); ok {
		r0 = rf(g)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockFilter_FilterObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterObject'
type MockFilter_FilterObject_Call struct {
	*mock.Call
}

// FilterObject is a helper method to define mock.On call
//   - g database.Getter
func (_e *MockFilter_Expecter) FilterObject(g interface{}) *MockFilter_FilterObject_Call {
	return &MockFilter_FilterObject_Call{Call: _e.mock.On("FilterObject", g)}
}

func (_c *MockFilter_FilterObject_Call) Run(run func(g database.Getter)) *MockFilter_FilterObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(database.Getter))
	})
	return _c
}

func (_c *MockFilter_FilterObject_Call) Return(_a0 bool) *MockFilter_FilterObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFilter_FilterObject_Call) RunAndReturn(run func(database.Getter) bool) *MockFilter_FilterObject_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *MockFilter) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockFilter_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockFilter_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockFilter_Expecter) String() *MockFilter_String_Call {
	return &MockFilter_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockFilter_String_Call) Run(run func()) *MockFilter_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFilter_String_Call) Return(_a0 string) *MockFilter_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFilter_String_Call) RunAndReturn(run func() string) *MockFilter_String_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFilter creates a new instance of MockFilter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFilter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFilter {
	mock := &MockFilter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
