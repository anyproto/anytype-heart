// Code generated by mockery v2.26.1. DO NOT EDIT.

package mock_objectstore

import (
	context "context"

	app "github.com/anyproto/any-sync/app"

	coordinatorproto "github.com/anyproto/any-sync/coordinator/coordinatorproto"

	database "github.com/anyproto/anytype-heart/pkg/lib/database"

	ftsearch "github.com/anyproto/anytype-heart/pkg/lib/localstore/ftsearch"

	mock "github.com/stretchr/testify/mock"

	model "github.com/anyproto/anytype-heart/pkg/lib/pb/model"

	schema "github.com/anyproto/anytype-heart/pkg/lib/schema"

	smartblock "github.com/anyproto/anytype-heart/pkg/lib/core/smartblock"

	types "github.com/gogo/protobuf/types"
)

// MockObjectStore is an autogenerated mock type for the ObjectStore type
type MockObjectStore struct {
	mock.Mock
}

type MockObjectStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockObjectStore) EXPECT() *MockObjectStore_Expecter {
	return &MockObjectStore_Expecter{mock: &_m.Mock}
}

// AddToIndexQueue provides a mock function with given fields: id
func (_m *MockObjectStore) AddToIndexQueue(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_AddToIndexQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToIndexQueue'
type MockObjectStore_AddToIndexQueue_Call struct {
	*mock.Call
}

// AddToIndexQueue is a helper method to define mock.On call
//   - id string
func (_e *MockObjectStore_Expecter) AddToIndexQueue(id interface{}) *MockObjectStore_AddToIndexQueue_Call {
	return &MockObjectStore_AddToIndexQueue_Call{Call: _e.mock.On("AddToIndexQueue", id)}
}

func (_c *MockObjectStore_AddToIndexQueue_Call) Run(run func(id string)) *MockObjectStore_AddToIndexQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_AddToIndexQueue_Call) Return(_a0 error) *MockObjectStore_AddToIndexQueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_AddToIndexQueue_Call) RunAndReturn(run func(string) error) *MockObjectStore_AddToIndexQueue_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields: ctx
func (_m *MockObjectStore) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockObjectStore_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockObjectStore_Expecter) Close(ctx interface{}) *MockObjectStore_Close_Call {
	return &MockObjectStore_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *MockObjectStore_Close_Call) Run(run func(ctx context.Context)) *MockObjectStore_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockObjectStore_Close_Call) Return(err error) *MockObjectStore_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockObjectStore_Close_Call) RunAndReturn(run func(context.Context) error) *MockObjectStore_Close_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDetails provides a mock function with given fields: id
func (_m *MockObjectStore) DeleteDetails(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_DeleteDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDetails'
type MockObjectStore_DeleteDetails_Call struct {
	*mock.Call
}

// DeleteDetails is a helper method to define mock.On call
//   - id string
func (_e *MockObjectStore_Expecter) DeleteDetails(id interface{}) *MockObjectStore_DeleteDetails_Call {
	return &MockObjectStore_DeleteDetails_Call{Call: _e.mock.On("DeleteDetails", id)}
}

func (_c *MockObjectStore_DeleteDetails_Call) Run(run func(id string)) *MockObjectStore_DeleteDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_DeleteDetails_Call) Return(_a0 error) *MockObjectStore_DeleteDetails_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_DeleteDetails_Call) RunAndReturn(run func(string) error) *MockObjectStore_DeleteDetails_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteObject provides a mock function with given fields: id
func (_m *MockObjectStore) DeleteObject(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_DeleteObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteObject'
type MockObjectStore_DeleteObject_Call struct {
	*mock.Call
}

// DeleteObject is a helper method to define mock.On call
//   - id string
func (_e *MockObjectStore_Expecter) DeleteObject(id interface{}) *MockObjectStore_DeleteObject_Call {
	return &MockObjectStore_DeleteObject_Call{Call: _e.mock.On("DeleteObject", id)}
}

func (_c *MockObjectStore_DeleteObject_Call) Run(run func(id string)) *MockObjectStore_DeleteObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_DeleteObject_Call) Return(_a0 error) *MockObjectStore_DeleteObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_DeleteObject_Call) RunAndReturn(run func(string) error) *MockObjectStore_DeleteObject_Call {
	_c.Call.Return(run)
	return _c
}

// EraseIndexes provides a mock function with given fields:
func (_m *MockObjectStore) EraseIndexes() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_EraseIndexes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EraseIndexes'
type MockObjectStore_EraseIndexes_Call struct {
	*mock.Call
}

// EraseIndexes is a helper method to define mock.On call
func (_e *MockObjectStore_Expecter) EraseIndexes() *MockObjectStore_EraseIndexes_Call {
	return &MockObjectStore_EraseIndexes_Call{Call: _e.mock.On("EraseIndexes")}
}

func (_c *MockObjectStore_EraseIndexes_Call) Run(run func()) *MockObjectStore_EraseIndexes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObjectStore_EraseIndexes_Call) Return(_a0 error) *MockObjectStore_EraseIndexes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_EraseIndexes_Call) RunAndReturn(run func() error) *MockObjectStore_EraseIndexes_Call {
	_c.Call.Return(run)
	return _c
}

// FTSearch provides a mock function with given fields:
func (_m *MockObjectStore) FTSearch() ftsearch.FTSearch {
	ret := _m.Called()

	var r0 ftsearch.FTSearch
	if rf, ok := ret.Get(0).(func() ftsearch.FTSearch); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ftsearch.FTSearch)
		}
	}

	return r0
}

// MockObjectStore_FTSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTSearch'
type MockObjectStore_FTSearch_Call struct {
	*mock.Call
}

// FTSearch is a helper method to define mock.On call
func (_e *MockObjectStore_Expecter) FTSearch() *MockObjectStore_FTSearch_Call {
	return &MockObjectStore_FTSearch_Call{Call: _e.mock.On("FTSearch")}
}

func (_c *MockObjectStore_FTSearch_Call) Run(run func()) *MockObjectStore_FTSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObjectStore_FTSearch_Call) Return(_a0 ftsearch.FTSearch) *MockObjectStore_FTSearch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_FTSearch_Call) RunAndReturn(run func() ftsearch.FTSearch) *MockObjectStore_FTSearch_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountStatus provides a mock function with given fields:
func (_m *MockObjectStore) GetAccountStatus() (*coordinatorproto.SpaceStatusPayload, error) {
	ret := _m.Called()

	var r0 *coordinatorproto.SpaceStatusPayload
	var r1 error
	if rf, ok := ret.Get(0).(func() (*coordinatorproto.SpaceStatusPayload, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *coordinatorproto.SpaceStatusPayload); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coordinatorproto.SpaceStatusPayload)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetAccountStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountStatus'
type MockObjectStore_GetAccountStatus_Call struct {
	*mock.Call
}

// GetAccountStatus is a helper method to define mock.On call
func (_e *MockObjectStore_Expecter) GetAccountStatus() *MockObjectStore_GetAccountStatus_Call {
	return &MockObjectStore_GetAccountStatus_Call{Call: _e.mock.On("GetAccountStatus")}
}

func (_c *MockObjectStore_GetAccountStatus_Call) Run(run func()) *MockObjectStore_GetAccountStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObjectStore_GetAccountStatus_Call) Return(status *coordinatorproto.SpaceStatusPayload, err error) *MockObjectStore_GetAccountStatus_Call {
	_c.Call.Return(status, err)
	return _c
}

func (_c *MockObjectStore_GetAccountStatus_Call) RunAndReturn(run func() (*coordinatorproto.SpaceStatusPayload, error)) *MockObjectStore_GetAccountStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetAggregatedOptions provides a mock function with given fields: relationKey
func (_m *MockObjectStore) GetAggregatedOptions(relationKey string) ([]*model.RelationOption, error) {
	ret := _m.Called(relationKey)

	var r0 []*model.RelationOption
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*model.RelationOption, error)); ok {
		return rf(relationKey)
	}
	if rf, ok := ret.Get(0).(func(string) []*model.RelationOption); ok {
		r0 = rf(relationKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.RelationOption)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(relationKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetAggregatedOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAggregatedOptions'
type MockObjectStore_GetAggregatedOptions_Call struct {
	*mock.Call
}

// GetAggregatedOptions is a helper method to define mock.On call
//   - relationKey string
func (_e *MockObjectStore_Expecter) GetAggregatedOptions(relationKey interface{}) *MockObjectStore_GetAggregatedOptions_Call {
	return &MockObjectStore_GetAggregatedOptions_Call{Call: _e.mock.On("GetAggregatedOptions", relationKey)}
}

func (_c *MockObjectStore_GetAggregatedOptions_Call) Run(run func(relationKey string)) *MockObjectStore_GetAggregatedOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_GetAggregatedOptions_Call) Return(options []*model.RelationOption, err error) *MockObjectStore_GetAggregatedOptions_Call {
	_c.Call.Return(options, err)
	return _c
}

func (_c *MockObjectStore_GetAggregatedOptions_Call) RunAndReturn(run func(string) ([]*model.RelationOption, error)) *MockObjectStore_GetAggregatedOptions_Call {
	_c.Call.Return(run)
	return _c
}

// GetByIDs provides a mock function with given fields: ids
func (_m *MockObjectStore) GetByIDs(ids ...string) ([]*model.ObjectInfo, error) {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*model.ObjectInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(...string) ([]*model.ObjectInfo, error)); ok {
		return rf(ids...)
	}
	if rf, ok := ret.Get(0).(func(...string) []*model.ObjectInfo); ok {
		r0 = rf(ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ObjectInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(ids...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByIDs'
type MockObjectStore_GetByIDs_Call struct {
	*mock.Call
}

// GetByIDs is a helper method to define mock.On call
//   - ids ...string
func (_e *MockObjectStore_Expecter) GetByIDs(ids ...interface{}) *MockObjectStore_GetByIDs_Call {
	return &MockObjectStore_GetByIDs_Call{Call: _e.mock.On("GetByIDs",
		append([]interface{}{}, ids...)...)}
}

func (_c *MockObjectStore_GetByIDs_Call) Run(run func(ids ...string)) *MockObjectStore_GetByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockObjectStore_GetByIDs_Call) Return(_a0 []*model.ObjectInfo, _a1 error) *MockObjectStore_GetByIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_GetByIDs_Call) RunAndReturn(run func(...string) ([]*model.ObjectInfo, error)) *MockObjectStore_GetByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetChecksums provides a mock function with given fields:
func (_m *MockObjectStore) GetChecksums() (*model.ObjectStoreChecksums, error) {
	ret := _m.Called()

	var r0 *model.ObjectStoreChecksums
	var r1 error
	if rf, ok := ret.Get(0).(func() (*model.ObjectStoreChecksums, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *model.ObjectStoreChecksums); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ObjectStoreChecksums)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetChecksums_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChecksums'
type MockObjectStore_GetChecksums_Call struct {
	*mock.Call
}

// GetChecksums is a helper method to define mock.On call
func (_e *MockObjectStore_Expecter) GetChecksums() *MockObjectStore_GetChecksums_Call {
	return &MockObjectStore_GetChecksums_Call{Call: _e.mock.On("GetChecksums")}
}

func (_c *MockObjectStore_GetChecksums_Call) Run(run func()) *MockObjectStore_GetChecksums_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObjectStore_GetChecksums_Call) Return(checksums *model.ObjectStoreChecksums, err error) *MockObjectStore_GetChecksums_Call {
	_c.Call.Return(checksums, err)
	return _c
}

func (_c *MockObjectStore_GetChecksums_Call) RunAndReturn(run func() (*model.ObjectStoreChecksums, error)) *MockObjectStore_GetChecksums_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentWorkspaceID provides a mock function with given fields:
func (_m *MockObjectStore) GetCurrentWorkspaceID() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetCurrentWorkspaceID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentWorkspaceID'
type MockObjectStore_GetCurrentWorkspaceID_Call struct {
	*mock.Call
}

// GetCurrentWorkspaceID is a helper method to define mock.On call
func (_e *MockObjectStore_Expecter) GetCurrentWorkspaceID() *MockObjectStore_GetCurrentWorkspaceID_Call {
	return &MockObjectStore_GetCurrentWorkspaceID_Call{Call: _e.mock.On("GetCurrentWorkspaceID")}
}

func (_c *MockObjectStore_GetCurrentWorkspaceID_Call) Run(run func()) *MockObjectStore_GetCurrentWorkspaceID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObjectStore_GetCurrentWorkspaceID_Call) Return(_a0 string, _a1 error) *MockObjectStore_GetCurrentWorkspaceID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_GetCurrentWorkspaceID_Call) RunAndReturn(run func() (string, error)) *MockObjectStore_GetCurrentWorkspaceID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDetails provides a mock function with given fields: id
func (_m *MockObjectStore) GetDetails(id string) (*model.ObjectDetails, error) {
	ret := _m.Called(id)

	var r0 *model.ObjectDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ObjectDetails, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ObjectDetails); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ObjectDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDetails'
type MockObjectStore_GetDetails_Call struct {
	*mock.Call
}

// GetDetails is a helper method to define mock.On call
//   - id string
func (_e *MockObjectStore_Expecter) GetDetails(id interface{}) *MockObjectStore_GetDetails_Call {
	return &MockObjectStore_GetDetails_Call{Call: _e.mock.On("GetDetails", id)}
}

func (_c *MockObjectStore_GetDetails_Call) Run(run func(id string)) *MockObjectStore_GetDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_GetDetails_Call) Return(_a0 *model.ObjectDetails, _a1 error) *MockObjectStore_GetDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_GetDetails_Call) RunAndReturn(run func(string) (*model.ObjectDetails, error)) *MockObjectStore_GetDetails_Call {
	_c.Call.Return(run)
	return _c
}

// GetInboundLinksByID provides a mock function with given fields: id
func (_m *MockObjectStore) GetInboundLinksByID(id string) ([]string, error) {
	ret := _m.Called(id)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetInboundLinksByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInboundLinksByID'
type MockObjectStore_GetInboundLinksByID_Call struct {
	*mock.Call
}

// GetInboundLinksByID is a helper method to define mock.On call
//   - id string
func (_e *MockObjectStore_Expecter) GetInboundLinksByID(id interface{}) *MockObjectStore_GetInboundLinksByID_Call {
	return &MockObjectStore_GetInboundLinksByID_Call{Call: _e.mock.On("GetInboundLinksByID", id)}
}

func (_c *MockObjectStore_GetInboundLinksByID_Call) Run(run func(id string)) *MockObjectStore_GetInboundLinksByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_GetInboundLinksByID_Call) Return(_a0 []string, _a1 error) *MockObjectStore_GetInboundLinksByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_GetInboundLinksByID_Call) RunAndReturn(run func(string) ([]string, error)) *MockObjectStore_GetInboundLinksByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastIndexedHeadsHash provides a mock function with given fields: id
func (_m *MockObjectStore) GetLastIndexedHeadsHash(id string) (string, error) {
	ret := _m.Called(id)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetLastIndexedHeadsHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastIndexedHeadsHash'
type MockObjectStore_GetLastIndexedHeadsHash_Call struct {
	*mock.Call
}

// GetLastIndexedHeadsHash is a helper method to define mock.On call
//   - id string
func (_e *MockObjectStore_Expecter) GetLastIndexedHeadsHash(id interface{}) *MockObjectStore_GetLastIndexedHeadsHash_Call {
	return &MockObjectStore_GetLastIndexedHeadsHash_Call{Call: _e.mock.On("GetLastIndexedHeadsHash", id)}
}

func (_c *MockObjectStore_GetLastIndexedHeadsHash_Call) Run(run func(id string)) *MockObjectStore_GetLastIndexedHeadsHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_GetLastIndexedHeadsHash_Call) Return(headsHash string, err error) *MockObjectStore_GetLastIndexedHeadsHash_Call {
	_c.Call.Return(headsHash, err)
	return _c
}

func (_c *MockObjectStore_GetLastIndexedHeadsHash_Call) RunAndReturn(run func(string) (string, error)) *MockObjectStore_GetLastIndexedHeadsHash_Call {
	_c.Call.Return(run)
	return _c
}

// GetObjectType provides a mock function with given fields: url
func (_m *MockObjectStore) GetObjectType(url string) (*model.ObjectType, error) {
	ret := _m.Called(url)

	var r0 *model.ObjectType
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ObjectType, error)); ok {
		return rf(url)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ObjectType); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ObjectType)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetObjectType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObjectType'
type MockObjectStore_GetObjectType_Call struct {
	*mock.Call
}

// GetObjectType is a helper method to define mock.On call
//   - url string
func (_e *MockObjectStore_Expecter) GetObjectType(url interface{}) *MockObjectStore_GetObjectType_Call {
	return &MockObjectStore_GetObjectType_Call{Call: _e.mock.On("GetObjectType", url)}
}

func (_c *MockObjectStore_GetObjectType_Call) Run(run func(url string)) *MockObjectStore_GetObjectType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_GetObjectType_Call) Return(_a0 *model.ObjectType, _a1 error) *MockObjectStore_GetObjectType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_GetObjectType_Call) RunAndReturn(run func(string) (*model.ObjectType, error)) *MockObjectStore_GetObjectType_Call {
	_c.Call.Return(run)
	return _c
}

// GetObjectTypes provides a mock function with given fields: urls
func (_m *MockObjectStore) GetObjectTypes(urls []string) ([]*model.ObjectType, error) {
	ret := _m.Called(urls)

	var r0 []*model.ObjectType
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]*model.ObjectType, error)); ok {
		return rf(urls)
	}
	if rf, ok := ret.Get(0).(func([]string) []*model.ObjectType); ok {
		r0 = rf(urls)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ObjectType)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(urls)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetObjectTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObjectTypes'
type MockObjectStore_GetObjectTypes_Call struct {
	*mock.Call
}

// GetObjectTypes is a helper method to define mock.On call
//   - urls []string
func (_e *MockObjectStore_Expecter) GetObjectTypes(urls interface{}) *MockObjectStore_GetObjectTypes_Call {
	return &MockObjectStore_GetObjectTypes_Call{Call: _e.mock.On("GetObjectTypes", urls)}
}

func (_c *MockObjectStore_GetObjectTypes_Call) Run(run func(urls []string)) *MockObjectStore_GetObjectTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockObjectStore_GetObjectTypes_Call) Return(ots []*model.ObjectType, err error) *MockObjectStore_GetObjectTypes_Call {
	_c.Call.Return(ots, err)
	return _c
}

func (_c *MockObjectStore_GetObjectTypes_Call) RunAndReturn(run func([]string) ([]*model.ObjectType, error)) *MockObjectStore_GetObjectTypes_Call {
	_c.Call.Return(run)
	return _c
}

// GetOutboundLinksByID provides a mock function with given fields: id
func (_m *MockObjectStore) GetOutboundLinksByID(id string) ([]string, error) {
	ret := _m.Called(id)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetOutboundLinksByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOutboundLinksByID'
type MockObjectStore_GetOutboundLinksByID_Call struct {
	*mock.Call
}

// GetOutboundLinksByID is a helper method to define mock.On call
//   - id string
func (_e *MockObjectStore_Expecter) GetOutboundLinksByID(id interface{}) *MockObjectStore_GetOutboundLinksByID_Call {
	return &MockObjectStore_GetOutboundLinksByID_Call{Call: _e.mock.On("GetOutboundLinksByID", id)}
}

func (_c *MockObjectStore_GetOutboundLinksByID_Call) Run(run func(id string)) *MockObjectStore_GetOutboundLinksByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_GetOutboundLinksByID_Call) Return(_a0 []string, _a1 error) *MockObjectStore_GetOutboundLinksByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_GetOutboundLinksByID_Call) RunAndReturn(run func(string) ([]string, error)) *MockObjectStore_GetOutboundLinksByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetRelationByID provides a mock function with given fields: id
func (_m *MockObjectStore) GetRelationByID(id string) (*model.Relation, error) {
	ret := _m.Called(id)

	var r0 *model.Relation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Relation, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Relation); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Relation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetRelationByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRelationByID'
type MockObjectStore_GetRelationByID_Call struct {
	*mock.Call
}

// GetRelationByID is a helper method to define mock.On call
//   - id string
func (_e *MockObjectStore_Expecter) GetRelationByID(id interface{}) *MockObjectStore_GetRelationByID_Call {
	return &MockObjectStore_GetRelationByID_Call{Call: _e.mock.On("GetRelationByID", id)}
}

func (_c *MockObjectStore_GetRelationByID_Call) Run(run func(id string)) *MockObjectStore_GetRelationByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_GetRelationByID_Call) Return(relation *model.Relation, err error) *MockObjectStore_GetRelationByID_Call {
	_c.Call.Return(relation, err)
	return _c
}

func (_c *MockObjectStore_GetRelationByID_Call) RunAndReturn(run func(string) (*model.Relation, error)) *MockObjectStore_GetRelationByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetRelationByKey provides a mock function with given fields: key
func (_m *MockObjectStore) GetRelationByKey(key string) (*model.Relation, error) {
	ret := _m.Called(key)

	var r0 *model.Relation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Relation, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Relation); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Relation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetRelationByKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRelationByKey'
type MockObjectStore_GetRelationByKey_Call struct {
	*mock.Call
}

// GetRelationByKey is a helper method to define mock.On call
//   - key string
func (_e *MockObjectStore_Expecter) GetRelationByKey(key interface{}) *MockObjectStore_GetRelationByKey_Call {
	return &MockObjectStore_GetRelationByKey_Call{Call: _e.mock.On("GetRelationByKey", key)}
}

func (_c *MockObjectStore_GetRelationByKey_Call) Run(run func(key string)) *MockObjectStore_GetRelationByKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_GetRelationByKey_Call) Return(relation *model.Relation, err error) *MockObjectStore_GetRelationByKey_Call {
	_c.Call.Return(relation, err)
	return _c
}

func (_c *MockObjectStore_GetRelationByKey_Call) RunAndReturn(run func(string) (*model.Relation, error)) *MockObjectStore_GetRelationByKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithLinksInfoByID provides a mock function with given fields: id
func (_m *MockObjectStore) GetWithLinksInfoByID(id string) (*model.ObjectInfoWithLinks, error) {
	ret := _m.Called(id)

	var r0 *model.ObjectInfoWithLinks
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ObjectInfoWithLinks, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ObjectInfoWithLinks); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ObjectInfoWithLinks)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetWithLinksInfoByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithLinksInfoByID'
type MockObjectStore_GetWithLinksInfoByID_Call struct {
	*mock.Call
}

// GetWithLinksInfoByID is a helper method to define mock.On call
//   - id string
func (_e *MockObjectStore_Expecter) GetWithLinksInfoByID(id interface{}) *MockObjectStore_GetWithLinksInfoByID_Call {
	return &MockObjectStore_GetWithLinksInfoByID_Call{Call: _e.mock.On("GetWithLinksInfoByID", id)}
}

func (_c *MockObjectStore_GetWithLinksInfoByID_Call) Run(run func(id string)) *MockObjectStore_GetWithLinksInfoByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_GetWithLinksInfoByID_Call) Return(_a0 *model.ObjectInfoWithLinks, _a1 error) *MockObjectStore_GetWithLinksInfoByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_GetWithLinksInfoByID_Call) RunAndReturn(run func(string) (*model.ObjectInfoWithLinks, error)) *MockObjectStore_GetWithLinksInfoByID_Call {
	_c.Call.Return(run)
	return _c
}

// HasIDs provides a mock function with given fields: ids
func (_m *MockObjectStore) HasIDs(ids ...string) ([]string, error) {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(...string) ([]string, error)); ok {
		return rf(ids...)
	}
	if rf, ok := ret.Get(0).(func(...string) []string); ok {
		r0 = rf(ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(ids...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_HasIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasIDs'
type MockObjectStore_HasIDs_Call struct {
	*mock.Call
}

// HasIDs is a helper method to define mock.On call
//   - ids ...string
func (_e *MockObjectStore_Expecter) HasIDs(ids ...interface{}) *MockObjectStore_HasIDs_Call {
	return &MockObjectStore_HasIDs_Call{Call: _e.mock.On("HasIDs",
		append([]interface{}{}, ids...)...)}
}

func (_c *MockObjectStore_HasIDs_Call) Run(run func(ids ...string)) *MockObjectStore_HasIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockObjectStore_HasIDs_Call) Return(exists []string, err error) *MockObjectStore_HasIDs_Call {
	_c.Call.Return(exists, err)
	return _c
}

func (_c *MockObjectStore_HasIDs_Call) RunAndReturn(run func(...string) ([]string, error)) *MockObjectStore_HasIDs_Call {
	_c.Call.Return(run)
	return _c
}

// HasObjectType provides a mock function with given fields: id
func (_m *MockObjectStore) HasObjectType(id string) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_HasObjectType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasObjectType'
type MockObjectStore_HasObjectType_Call struct {
	*mock.Call
}

// HasObjectType is a helper method to define mock.On call
//   - id string
func (_e *MockObjectStore_Expecter) HasObjectType(id interface{}) *MockObjectStore_HasObjectType_Call {
	return &MockObjectStore_HasObjectType_Call{Call: _e.mock.On("HasObjectType", id)}
}

func (_c *MockObjectStore_HasObjectType_Call) Run(run func(id string)) *MockObjectStore_HasObjectType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_HasObjectType_Call) Return(_a0 bool, _a1 error) *MockObjectStore_HasObjectType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_HasObjectType_Call) RunAndReturn(run func(string) (bool, error)) *MockObjectStore_HasObjectType_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: a
func (_m *MockObjectStore) Init(a *app.App) error {
	ret := _m.Called(a)

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockObjectStore_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - a *app.App
func (_e *MockObjectStore_Expecter) Init(a interface{}) *MockObjectStore_Init_Call {
	return &MockObjectStore_Init_Call{Call: _e.mock.On("Init", a)}
}

func (_c *MockObjectStore_Init_Call) Run(run func(a *app.App)) *MockObjectStore_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app.App))
	})
	return _c
}

func (_c *MockObjectStore_Init_Call) Return(err error) *MockObjectStore_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockObjectStore_Init_Call) RunAndReturn(run func(*app.App) error) *MockObjectStore_Init_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields:
func (_m *MockObjectStore) List() ([]*model.ObjectInfo, error) {
	ret := _m.Called()

	var r0 []*model.ObjectInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*model.ObjectInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*model.ObjectInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ObjectInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockObjectStore_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *MockObjectStore_Expecter) List() *MockObjectStore_List_Call {
	return &MockObjectStore_List_Call{Call: _e.mock.On("List")}
}

func (_c *MockObjectStore_List_Call) Run(run func()) *MockObjectStore_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObjectStore_List_Call) Return(_a0 []*model.ObjectInfo, _a1 error) *MockObjectStore_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_List_Call) RunAndReturn(run func() ([]*model.ObjectInfo, error)) *MockObjectStore_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListIDsFromFullTextQueue provides a mock function with given fields:
func (_m *MockObjectStore) ListIDsFromFullTextQueue() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_ListIDsFromFullTextQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIDsFromFullTextQueue'
type MockObjectStore_ListIDsFromFullTextQueue_Call struct {
	*mock.Call
}

// ListIDsFromFullTextQueue is a helper method to define mock.On call
func (_e *MockObjectStore_Expecter) ListIDsFromFullTextQueue() *MockObjectStore_ListIDsFromFullTextQueue_Call {
	return &MockObjectStore_ListIDsFromFullTextQueue_Call{Call: _e.mock.On("ListIDsFromFullTextQueue")}
}

func (_c *MockObjectStore_ListIDsFromFullTextQueue_Call) Run(run func()) *MockObjectStore_ListIDsFromFullTextQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObjectStore_ListIDsFromFullTextQueue_Call) Return(_a0 []string, _a1 error) *MockObjectStore_ListIDsFromFullTextQueue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_ListIDsFromFullTextQueue_Call) RunAndReturn(run func() ([]string, error)) *MockObjectStore_ListIDsFromFullTextQueue_Call {
	_c.Call.Return(run)
	return _c
}

// ListIds provides a mock function with given fields:
func (_m *MockObjectStore) ListIds() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_ListIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIds'
type MockObjectStore_ListIds_Call struct {
	*mock.Call
}

// ListIds is a helper method to define mock.On call
func (_e *MockObjectStore_Expecter) ListIds() *MockObjectStore_ListIds_Call {
	return &MockObjectStore_ListIds_Call{Call: _e.mock.On("ListIds")}
}

func (_c *MockObjectStore_ListIds_Call) Run(run func()) *MockObjectStore_ListIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObjectStore_ListIds_Call) Return(_a0 []string, _a1 error) *MockObjectStore_ListIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_ListIds_Call) RunAndReturn(run func() ([]string, error)) *MockObjectStore_ListIds_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockObjectStore) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockObjectStore_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockObjectStore_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockObjectStore_Expecter) Name() *MockObjectStore_Name_Call {
	return &MockObjectStore_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockObjectStore_Name_Call) Run(run func()) *MockObjectStore_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObjectStore_Name_Call) Return(name string) *MockObjectStore_Name_Call {
	_c.Call.Return(name)
	return _c
}

func (_c *MockObjectStore_Name_Call) RunAndReturn(run func() string) *MockObjectStore_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: _a0, q
func (_m *MockObjectStore) Query(_a0 schema.Schema, q database.Query) ([]database.Record, int, error) {
	ret := _m.Called(_a0, q)

	var r0 []database.Record
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(schema.Schema, database.Query) ([]database.Record, int, error)); ok {
		return rf(_a0, q)
	}
	if rf, ok := ret.Get(0).(func(schema.Schema, database.Query) []database.Record); ok {
		r0 = rf(_a0, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Record)
		}
	}

	if rf, ok := ret.Get(1).(func(schema.Schema, database.Query) int); ok {
		r1 = rf(_a0, q)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(schema.Schema, database.Query) error); ok {
		r2 = rf(_a0, q)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockObjectStore_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockObjectStore_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - _a0 schema.Schema
//   - q database.Query
func (_e *MockObjectStore_Expecter) Query(_a0 interface{}, q interface{}) *MockObjectStore_Query_Call {
	return &MockObjectStore_Query_Call{Call: _e.mock.On("Query", _a0, q)}
}

func (_c *MockObjectStore_Query_Call) Run(run func(_a0 schema.Schema, q database.Query)) *MockObjectStore_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.Schema), args[1].(database.Query))
	})
	return _c
}

func (_c *MockObjectStore_Query_Call) Return(records []database.Record, total int, err error) *MockObjectStore_Query_Call {
	_c.Call.Return(records, total, err)
	return _c
}

func (_c *MockObjectStore_Query_Call) RunAndReturn(run func(schema.Schema, database.Query) ([]database.Record, int, error)) *MockObjectStore_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryByID provides a mock function with given fields: ids
func (_m *MockObjectStore) QueryByID(ids []string) ([]database.Record, error) {
	ret := _m.Called(ids)

	var r0 []database.Record
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]database.Record, error)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func([]string) []database.Record); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Record)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_QueryByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryByID'
type MockObjectStore_QueryByID_Call struct {
	*mock.Call
}

// QueryByID is a helper method to define mock.On call
//   - ids []string
func (_e *MockObjectStore_Expecter) QueryByID(ids interface{}) *MockObjectStore_QueryByID_Call {
	return &MockObjectStore_QueryByID_Call{Call: _e.mock.On("QueryByID", ids)}
}

func (_c *MockObjectStore_QueryByID_Call) Run(run func(ids []string)) *MockObjectStore_QueryByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockObjectStore_QueryByID_Call) Return(records []database.Record, err error) *MockObjectStore_QueryByID_Call {
	_c.Call.Return(records, err)
	return _c
}

func (_c *MockObjectStore_QueryByID_Call) RunAndReturn(run func([]string) ([]database.Record, error)) *MockObjectStore_QueryByID_Call {
	_c.Call.Return(run)
	return _c
}

// QueryByIDAndSubscribeForChanges provides a mock function with given fields: ids, subscription
func (_m *MockObjectStore) QueryByIDAndSubscribeForChanges(ids []string, subscription database.Subscription) ([]database.Record, func(), error) {
	ret := _m.Called(ids, subscription)

	var r0 []database.Record
	var r1 func()
	var r2 error
	if rf, ok := ret.Get(0).(func([]string, database.Subscription) ([]database.Record, func(), error)); ok {
		return rf(ids, subscription)
	}
	if rf, ok := ret.Get(0).(func([]string, database.Subscription) []database.Record); ok {
		r0 = rf(ids, subscription)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Record)
		}
	}

	if rf, ok := ret.Get(1).(func([]string, database.Subscription) func()); ok {
		r1 = rf(ids, subscription)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func())
		}
	}

	if rf, ok := ret.Get(2).(func([]string, database.Subscription) error); ok {
		r2 = rf(ids, subscription)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockObjectStore_QueryByIDAndSubscribeForChanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryByIDAndSubscribeForChanges'
type MockObjectStore_QueryByIDAndSubscribeForChanges_Call struct {
	*mock.Call
}

// QueryByIDAndSubscribeForChanges is a helper method to define mock.On call
//   - ids []string
//   - subscription database.Subscription
func (_e *MockObjectStore_Expecter) QueryByIDAndSubscribeForChanges(ids interface{}, subscription interface{}) *MockObjectStore_QueryByIDAndSubscribeForChanges_Call {
	return &MockObjectStore_QueryByIDAndSubscribeForChanges_Call{Call: _e.mock.On("QueryByIDAndSubscribeForChanges", ids, subscription)}
}

func (_c *MockObjectStore_QueryByIDAndSubscribeForChanges_Call) Run(run func(ids []string, subscription database.Subscription)) *MockObjectStore_QueryByIDAndSubscribeForChanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string), args[1].(database.Subscription))
	})
	return _c
}

func (_c *MockObjectStore_QueryByIDAndSubscribeForChanges_Call) Return(records []database.Record, close func(), err error) *MockObjectStore_QueryByIDAndSubscribeForChanges_Call {
	_c.Call.Return(records, close, err)
	return _c
}

func (_c *MockObjectStore_QueryByIDAndSubscribeForChanges_Call) RunAndReturn(run func([]string, database.Subscription) ([]database.Record, func(), error)) *MockObjectStore_QueryByIDAndSubscribeForChanges_Call {
	_c.Call.Return(run)
	return _c
}

// QueryObjectIDs provides a mock function with given fields: q, objectTypes
func (_m *MockObjectStore) QueryObjectIDs(q database.Query, objectTypes []smartblock.SmartBlockType) ([]string, int, error) {
	ret := _m.Called(q, objectTypes)

	var r0 []string
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(database.Query, []smartblock.SmartBlockType) ([]string, int, error)); ok {
		return rf(q, objectTypes)
	}
	if rf, ok := ret.Get(0).(func(database.Query, []smartblock.SmartBlockType) []string); ok {
		r0 = rf(q, objectTypes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(database.Query, []smartblock.SmartBlockType) int); ok {
		r1 = rf(q, objectTypes)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(database.Query, []smartblock.SmartBlockType) error); ok {
		r2 = rf(q, objectTypes)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockObjectStore_QueryObjectIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryObjectIDs'
type MockObjectStore_QueryObjectIDs_Call struct {
	*mock.Call
}

// QueryObjectIDs is a helper method to define mock.On call
//   - q database.Query
//   - objectTypes []smartblock.SmartBlockType
func (_e *MockObjectStore_Expecter) QueryObjectIDs(q interface{}, objectTypes interface{}) *MockObjectStore_QueryObjectIDs_Call {
	return &MockObjectStore_QueryObjectIDs_Call{Call: _e.mock.On("QueryObjectIDs", q, objectTypes)}
}

func (_c *MockObjectStore_QueryObjectIDs_Call) Run(run func(q database.Query, objectTypes []smartblock.SmartBlockType)) *MockObjectStore_QueryObjectIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(database.Query), args[1].([]smartblock.SmartBlockType))
	})
	return _c
}

func (_c *MockObjectStore_QueryObjectIDs_Call) Return(ids []string, total int, err error) *MockObjectStore_QueryObjectIDs_Call {
	_c.Call.Return(ids, total, err)
	return _c
}

func (_c *MockObjectStore_QueryObjectIDs_Call) RunAndReturn(run func(database.Query, []smartblock.SmartBlockType) ([]string, int, error)) *MockObjectStore_QueryObjectIDs_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRaw provides a mock function with given fields: f, limit, offset
func (_m *MockObjectStore) QueryRaw(f *database.Filters, limit int, offset int) ([]database.Record, error) {
	ret := _m.Called(f, limit, offset)

	var r0 []database.Record
	var r1 error
	if rf, ok := ret.Get(0).(func(*database.Filters, int, int) ([]database.Record, error)); ok {
		return rf(f, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(*database.Filters, int, int) []database.Record); ok {
		r0 = rf(f, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Record)
		}
	}

	if rf, ok := ret.Get(1).(func(*database.Filters, int, int) error); ok {
		r1 = rf(f, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_QueryRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRaw'
type MockObjectStore_QueryRaw_Call struct {
	*mock.Call
}

// QueryRaw is a helper method to define mock.On call
//   - f *database.Filters
//   - limit int
//   - offset int
func (_e *MockObjectStore_Expecter) QueryRaw(f interface{}, limit interface{}, offset interface{}) *MockObjectStore_QueryRaw_Call {
	return &MockObjectStore_QueryRaw_Call{Call: _e.mock.On("QueryRaw", f, limit, offset)}
}

func (_c *MockObjectStore_QueryRaw_Call) Run(run func(f *database.Filters, limit int, offset int)) *MockObjectStore_QueryRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*database.Filters), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockObjectStore_QueryRaw_Call) Return(records []database.Record, err error) *MockObjectStore_QueryRaw_Call {
	_c.Call.Return(records, err)
	return _c
}

func (_c *MockObjectStore_QueryRaw_Call) RunAndReturn(run func(*database.Filters, int, int) ([]database.Record, error)) *MockObjectStore_QueryRaw_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveCurrentWorkspaceID provides a mock function with given fields:
func (_m *MockObjectStore) RemoveCurrentWorkspaceID() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_RemoveCurrentWorkspaceID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveCurrentWorkspaceID'
type MockObjectStore_RemoveCurrentWorkspaceID_Call struct {
	*mock.Call
}

// RemoveCurrentWorkspaceID is a helper method to define mock.On call
func (_e *MockObjectStore_Expecter) RemoveCurrentWorkspaceID() *MockObjectStore_RemoveCurrentWorkspaceID_Call {
	return &MockObjectStore_RemoveCurrentWorkspaceID_Call{Call: _e.mock.On("RemoveCurrentWorkspaceID")}
}

func (_c *MockObjectStore_RemoveCurrentWorkspaceID_Call) Run(run func()) *MockObjectStore_RemoveCurrentWorkspaceID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObjectStore_RemoveCurrentWorkspaceID_Call) Return(err error) *MockObjectStore_RemoveCurrentWorkspaceID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockObjectStore_RemoveCurrentWorkspaceID_Call) RunAndReturn(run func() error) *MockObjectStore_RemoveCurrentWorkspaceID_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveIDsFromFullTextQueue provides a mock function with given fields: ids
func (_m *MockObjectStore) RemoveIDsFromFullTextQueue(ids []string) {
	_m.Called(ids)
}

// MockObjectStore_RemoveIDsFromFullTextQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveIDsFromFullTextQueue'
type MockObjectStore_RemoveIDsFromFullTextQueue_Call struct {
	*mock.Call
}

// RemoveIDsFromFullTextQueue is a helper method to define mock.On call
//   - ids []string
func (_e *MockObjectStore_Expecter) RemoveIDsFromFullTextQueue(ids interface{}) *MockObjectStore_RemoveIDsFromFullTextQueue_Call {
	return &MockObjectStore_RemoveIDsFromFullTextQueue_Call{Call: _e.mock.On("RemoveIDsFromFullTextQueue", ids)}
}

func (_c *MockObjectStore_RemoveIDsFromFullTextQueue_Call) Run(run func(ids []string)) *MockObjectStore_RemoveIDsFromFullTextQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockObjectStore_RemoveIDsFromFullTextQueue_Call) Return() *MockObjectStore_RemoveIDsFromFullTextQueue_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockObjectStore_RemoveIDsFromFullTextQueue_Call) RunAndReturn(run func([]string)) *MockObjectStore_RemoveIDsFromFullTextQueue_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: ctx
func (_m *MockObjectStore) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockObjectStore_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockObjectStore_Expecter) Run(ctx interface{}) *MockObjectStore_Run_Call {
	return &MockObjectStore_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *MockObjectStore_Run_Call) Run(run func(ctx context.Context)) *MockObjectStore_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockObjectStore_Run_Call) Return(err error) *MockObjectStore_Run_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockObjectStore_Run_Call) RunAndReturn(run func(context.Context) error) *MockObjectStore_Run_Call {
	_c.Call.Return(run)
	return _c
}

// SaveAccountStatus provides a mock function with given fields: status
func (_m *MockObjectStore) SaveAccountStatus(status *coordinatorproto.SpaceStatusPayload) error {
	ret := _m.Called(status)

	var r0 error
	if rf, ok := ret.Get(0).(func(*coordinatorproto.SpaceStatusPayload) error); ok {
		r0 = rf(status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_SaveAccountStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveAccountStatus'
type MockObjectStore_SaveAccountStatus_Call struct {
	*mock.Call
}

// SaveAccountStatus is a helper method to define mock.On call
//   - status *coordinatorproto.SpaceStatusPayload
func (_e *MockObjectStore_Expecter) SaveAccountStatus(status interface{}) *MockObjectStore_SaveAccountStatus_Call {
	return &MockObjectStore_SaveAccountStatus_Call{Call: _e.mock.On("SaveAccountStatus", status)}
}

func (_c *MockObjectStore_SaveAccountStatus_Call) Run(run func(status *coordinatorproto.SpaceStatusPayload)) *MockObjectStore_SaveAccountStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*coordinatorproto.SpaceStatusPayload))
	})
	return _c
}

func (_c *MockObjectStore_SaveAccountStatus_Call) Return(err error) *MockObjectStore_SaveAccountStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockObjectStore_SaveAccountStatus_Call) RunAndReturn(run func(*coordinatorproto.SpaceStatusPayload) error) *MockObjectStore_SaveAccountStatus_Call {
	_c.Call.Return(run)
	return _c
}

// SaveChecksums provides a mock function with given fields: checksums
func (_m *MockObjectStore) SaveChecksums(checksums *model.ObjectStoreChecksums) error {
	ret := _m.Called(checksums)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.ObjectStoreChecksums) error); ok {
		r0 = rf(checksums)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_SaveChecksums_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveChecksums'
type MockObjectStore_SaveChecksums_Call struct {
	*mock.Call
}

// SaveChecksums is a helper method to define mock.On call
//   - checksums *model.ObjectStoreChecksums
func (_e *MockObjectStore_Expecter) SaveChecksums(checksums interface{}) *MockObjectStore_SaveChecksums_Call {
	return &MockObjectStore_SaveChecksums_Call{Call: _e.mock.On("SaveChecksums", checksums)}
}

func (_c *MockObjectStore_SaveChecksums_Call) Run(run func(checksums *model.ObjectStoreChecksums)) *MockObjectStore_SaveChecksums_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.ObjectStoreChecksums))
	})
	return _c
}

func (_c *MockObjectStore_SaveChecksums_Call) Return(err error) *MockObjectStore_SaveChecksums_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockObjectStore_SaveChecksums_Call) RunAndReturn(run func(*model.ObjectStoreChecksums) error) *MockObjectStore_SaveChecksums_Call {
	_c.Call.Return(run)
	return _c
}

// SaveLastIndexedHeadsHash provides a mock function with given fields: id, headsHash
func (_m *MockObjectStore) SaveLastIndexedHeadsHash(id string, headsHash string) error {
	ret := _m.Called(id, headsHash)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, headsHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_SaveLastIndexedHeadsHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveLastIndexedHeadsHash'
type MockObjectStore_SaveLastIndexedHeadsHash_Call struct {
	*mock.Call
}

// SaveLastIndexedHeadsHash is a helper method to define mock.On call
//   - id string
//   - headsHash string
func (_e *MockObjectStore_Expecter) SaveLastIndexedHeadsHash(id interface{}, headsHash interface{}) *MockObjectStore_SaveLastIndexedHeadsHash_Call {
	return &MockObjectStore_SaveLastIndexedHeadsHash_Call{Call: _e.mock.On("SaveLastIndexedHeadsHash", id, headsHash)}
}

func (_c *MockObjectStore_SaveLastIndexedHeadsHash_Call) Run(run func(id string, headsHash string)) *MockObjectStore_SaveLastIndexedHeadsHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockObjectStore_SaveLastIndexedHeadsHash_Call) Return(err error) *MockObjectStore_SaveLastIndexedHeadsHash_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockObjectStore_SaveLastIndexedHeadsHash_Call) RunAndReturn(run func(string, string) error) *MockObjectStore_SaveLastIndexedHeadsHash_Call {
	_c.Call.Return(run)
	return _c
}

// SetCurrentWorkspaceID provides a mock function with given fields: workspaceID
func (_m *MockObjectStore) SetCurrentWorkspaceID(workspaceID string) error {
	ret := _m.Called(workspaceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(workspaceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_SetCurrentWorkspaceID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCurrentWorkspaceID'
type MockObjectStore_SetCurrentWorkspaceID_Call struct {
	*mock.Call
}

// SetCurrentWorkspaceID is a helper method to define mock.On call
//   - workspaceID string
func (_e *MockObjectStore_Expecter) SetCurrentWorkspaceID(workspaceID interface{}) *MockObjectStore_SetCurrentWorkspaceID_Call {
	return &MockObjectStore_SetCurrentWorkspaceID_Call{Call: _e.mock.On("SetCurrentWorkspaceID", workspaceID)}
}

func (_c *MockObjectStore_SetCurrentWorkspaceID_Call) Run(run func(workspaceID string)) *MockObjectStore_SetCurrentWorkspaceID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_SetCurrentWorkspaceID_Call) Return(err error) *MockObjectStore_SetCurrentWorkspaceID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockObjectStore_SetCurrentWorkspaceID_Call) RunAndReturn(run func(string) error) *MockObjectStore_SetCurrentWorkspaceID_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeForAll provides a mock function with given fields: callback
func (_m *MockObjectStore) SubscribeForAll(callback func(database.Record)) {
	_m.Called(callback)
}

// MockObjectStore_SubscribeForAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeForAll'
type MockObjectStore_SubscribeForAll_Call struct {
	*mock.Call
}

// SubscribeForAll is a helper method to define mock.On call
//   - callback func(database.Record)
func (_e *MockObjectStore_Expecter) SubscribeForAll(callback interface{}) *MockObjectStore_SubscribeForAll_Call {
	return &MockObjectStore_SubscribeForAll_Call{Call: _e.mock.On("SubscribeForAll", callback)}
}

func (_c *MockObjectStore_SubscribeForAll_Call) Run(run func(callback func(database.Record))) *MockObjectStore_SubscribeForAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(database.Record)))
	})
	return _c
}

func (_c *MockObjectStore_SubscribeForAll_Call) Return() *MockObjectStore_SubscribeForAll_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockObjectStore_SubscribeForAll_Call) RunAndReturn(run func(func(database.Record))) *MockObjectStore_SubscribeForAll_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateObjectDetails provides a mock function with given fields: id, details
func (_m *MockObjectStore) UpdateObjectDetails(id string, details *types.Struct) error {
	ret := _m.Called(id, details)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *types.Struct) error); ok {
		r0 = rf(id, details)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_UpdateObjectDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateObjectDetails'
type MockObjectStore_UpdateObjectDetails_Call struct {
	*mock.Call
}

// UpdateObjectDetails is a helper method to define mock.On call
//   - id string
//   - details *types.Struct
func (_e *MockObjectStore_Expecter) UpdateObjectDetails(id interface{}, details interface{}) *MockObjectStore_UpdateObjectDetails_Call {
	return &MockObjectStore_UpdateObjectDetails_Call{Call: _e.mock.On("UpdateObjectDetails", id, details)}
}

func (_c *MockObjectStore_UpdateObjectDetails_Call) Run(run func(id string, details *types.Struct)) *MockObjectStore_UpdateObjectDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*types.Struct))
	})
	return _c
}

func (_c *MockObjectStore_UpdateObjectDetails_Call) Return(_a0 error) *MockObjectStore_UpdateObjectDetails_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_UpdateObjectDetails_Call) RunAndReturn(run func(string, *types.Struct) error) *MockObjectStore_UpdateObjectDetails_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateObjectLinks provides a mock function with given fields: id, links
func (_m *MockObjectStore) UpdateObjectLinks(id string, links []string) error {
	ret := _m.Called(id, links)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = rf(id, links)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_UpdateObjectLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateObjectLinks'
type MockObjectStore_UpdateObjectLinks_Call struct {
	*mock.Call
}

// UpdateObjectLinks is a helper method to define mock.On call
//   - id string
//   - links []string
func (_e *MockObjectStore_Expecter) UpdateObjectLinks(id interface{}, links interface{}) *MockObjectStore_UpdateObjectLinks_Call {
	return &MockObjectStore_UpdateObjectLinks_Call{Call: _e.mock.On("UpdateObjectLinks", id, links)}
}

func (_c *MockObjectStore_UpdateObjectLinks_Call) Run(run func(id string, links []string)) *MockObjectStore_UpdateObjectLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string))
	})
	return _c
}

func (_c *MockObjectStore_UpdateObjectLinks_Call) Return(_a0 error) *MockObjectStore_UpdateObjectLinks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_UpdateObjectLinks_Call) RunAndReturn(run func(string, []string) error) *MockObjectStore_UpdateObjectLinks_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateObjectSnippet provides a mock function with given fields: id, snippet
func (_m *MockObjectStore) UpdateObjectSnippet(id string, snippet string) error {
	ret := _m.Called(id, snippet)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, snippet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_UpdateObjectSnippet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateObjectSnippet'
type MockObjectStore_UpdateObjectSnippet_Call struct {
	*mock.Call
}

// UpdateObjectSnippet is a helper method to define mock.On call
//   - id string
//   - snippet string
func (_e *MockObjectStore_Expecter) UpdateObjectSnippet(id interface{}, snippet interface{}) *MockObjectStore_UpdateObjectSnippet_Call {
	return &MockObjectStore_UpdateObjectSnippet_Call{Call: _e.mock.On("UpdateObjectSnippet", id, snippet)}
}

func (_c *MockObjectStore_UpdateObjectSnippet_Call) Run(run func(id string, snippet string)) *MockObjectStore_UpdateObjectSnippet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockObjectStore_UpdateObjectSnippet_Call) Return(_a0 error) *MockObjectStore_UpdateObjectSnippet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_UpdateObjectSnippet_Call) RunAndReturn(run func(string, string) error) *MockObjectStore_UpdateObjectSnippet_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePendingLocalDetails provides a mock function with given fields: id, proc
func (_m *MockObjectStore) UpdatePendingLocalDetails(id string, proc func(*types.Struct) (*types.Struct, error)) error {
	ret := _m.Called(id, proc)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(*types.Struct) (*types.Struct, error)) error); ok {
		r0 = rf(id, proc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_UpdatePendingLocalDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePendingLocalDetails'
type MockObjectStore_UpdatePendingLocalDetails_Call struct {
	*mock.Call
}

// UpdatePendingLocalDetails is a helper method to define mock.On call
//   - id string
//   - proc func(*types.Struct)(*types.Struct , error)
func (_e *MockObjectStore_Expecter) UpdatePendingLocalDetails(id interface{}, proc interface{}) *MockObjectStore_UpdatePendingLocalDetails_Call {
	return &MockObjectStore_UpdatePendingLocalDetails_Call{Call: _e.mock.On("UpdatePendingLocalDetails", id, proc)}
}

func (_c *MockObjectStore_UpdatePendingLocalDetails_Call) Run(run func(id string, proc func(*types.Struct) (*types.Struct, error))) *MockObjectStore_UpdatePendingLocalDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func(*types.Struct) (*types.Struct, error)))
	})
	return _c
}

func (_c *MockObjectStore_UpdatePendingLocalDetails_Call) Return(_a0 error) *MockObjectStore_UpdatePendingLocalDetails_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_UpdatePendingLocalDetails_Call) RunAndReturn(run func(string, func(*types.Struct) (*types.Struct, error)) error) *MockObjectStore_UpdatePendingLocalDetails_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockObjectStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockObjectStore creates a new instance of MockObjectStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockObjectStore(t mockConstructorTestingTNewMockObjectStore) *MockObjectStore {
	mock := &MockObjectStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
