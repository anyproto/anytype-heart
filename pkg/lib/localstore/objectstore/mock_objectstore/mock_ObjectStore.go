// Code generated by mockery v2.35.2. DO NOT EDIT.

package mock_objectstore

import (
	context "context"

	app "github.com/anyproto/any-sync/app"

	coordinatorproto "github.com/anyproto/any-sync/coordinator/coordinatorproto"

	database "github.com/anyproto/anytype-heart/pkg/lib/database"

	domain "github.com/anyproto/anytype-heart/core/domain"

	ftsearch "github.com/anyproto/anytype-heart/pkg/lib/localstore/ftsearch"

	mock "github.com/stretchr/testify/mock"

	model "github.com/anyproto/anytype-heart/pkg/lib/pb/model"

	objectstore "github.com/anyproto/anytype-heart/pkg/lib/localstore/objectstore"

	pbtypes "github.com/anyproto/anytype-heart/util/pbtypes"

	relationutils "github.com/anyproto/anytype-heart/core/relationutils"

	types "github.com/gogo/protobuf/types"
)

// MockObjectStore is an autogenerated mock type for the ObjectStore type
type MockObjectStore struct {
	mock.Mock
}

type MockObjectStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockObjectStore) EXPECT() *MockObjectStore_Expecter {
	return &MockObjectStore_Expecter{mock: &_m.Mock}
}

// AddToIndexQueue provides a mock function with given fields: id
func (_m *MockObjectStore) AddToIndexQueue(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_AddToIndexQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToIndexQueue'
type MockObjectStore_AddToIndexQueue_Call struct {
	*mock.Call
}

// AddToIndexQueue is a helper method to define mock.On call
//   - id string
func (_e *MockObjectStore_Expecter) AddToIndexQueue(id interface{}) *MockObjectStore_AddToIndexQueue_Call {
	return &MockObjectStore_AddToIndexQueue_Call{Call: _e.mock.On("AddToIndexQueue", id)}
}

func (_c *MockObjectStore_AddToIndexQueue_Call) Run(run func(id string)) *MockObjectStore_AddToIndexQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_AddToIndexQueue_Call) Return(_a0 error) *MockObjectStore_AddToIndexQueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_AddToIndexQueue_Call) RunAndReturn(run func(string) error) *MockObjectStore_AddToIndexQueue_Call {
	_c.Call.Return(run)
	return _c
}

// BatchProcessFullTextQueue provides a mock function with given fields: limit, processIds
func (_m *MockObjectStore) BatchProcessFullTextQueue(limit int, processIds func([]string) error) error {
	ret := _m.Called(limit, processIds)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, func([]string) error) error); ok {
		r0 = rf(limit, processIds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_BatchProcessFullTextQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchProcessFullTextQueue'
type MockObjectStore_BatchProcessFullTextQueue_Call struct {
	*mock.Call
}

// BatchProcessFullTextQueue is a helper method to define mock.On call
//   - limit int
//   - processIds func([]string) error
func (_e *MockObjectStore_Expecter) BatchProcessFullTextQueue(limit interface{}, processIds interface{}) *MockObjectStore_BatchProcessFullTextQueue_Call {
	return &MockObjectStore_BatchProcessFullTextQueue_Call{Call: _e.mock.On("BatchProcessFullTextQueue", limit, processIds)}
}

func (_c *MockObjectStore_BatchProcessFullTextQueue_Call) Run(run func(limit int, processIds func([]string) error)) *MockObjectStore_BatchProcessFullTextQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(func([]string) error))
	})
	return _c
}

func (_c *MockObjectStore_BatchProcessFullTextQueue_Call) Return(_a0 error) *MockObjectStore_BatchProcessFullTextQueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_BatchProcessFullTextQueue_Call) RunAndReturn(run func(int, func([]string) error) error) *MockObjectStore_BatchProcessFullTextQueue_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields: ctx
func (_m *MockObjectStore) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockObjectStore_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockObjectStore_Expecter) Close(ctx interface{}) *MockObjectStore_Close_Call {
	return &MockObjectStore_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *MockObjectStore_Close_Call) Run(run func(ctx context.Context)) *MockObjectStore_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockObjectStore_Close_Call) Return(err error) *MockObjectStore_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockObjectStore_Close_Call) RunAndReturn(run func(context.Context) error) *MockObjectStore_Close_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDetails provides a mock function with given fields: id
func (_m *MockObjectStore) DeleteDetails(id ...string) error {
	_va := make([]interface{}, len(id))
	for _i := range id {
		_va[_i] = id[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...string) error); ok {
		r0 = rf(id...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_DeleteDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDetails'
type MockObjectStore_DeleteDetails_Call struct {
	*mock.Call
}

// DeleteDetails is a helper method to define mock.On call
//   - id ...string
func (_e *MockObjectStore_Expecter) DeleteDetails(id ...interface{}) *MockObjectStore_DeleteDetails_Call {
	return &MockObjectStore_DeleteDetails_Call{Call: _e.mock.On("DeleteDetails",
		append([]interface{}{}, id...)...)}
}

func (_c *MockObjectStore_DeleteDetails_Call) Run(run func(id ...string)) *MockObjectStore_DeleteDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockObjectStore_DeleteDetails_Call) Return(_a0 error) *MockObjectStore_DeleteDetails_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_DeleteDetails_Call) RunAndReturn(run func(...string) error) *MockObjectStore_DeleteDetails_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteObject provides a mock function with given fields: id
func (_m *MockObjectStore) DeleteObject(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_DeleteObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteObject'
type MockObjectStore_DeleteObject_Call struct {
	*mock.Call
}

// DeleteObject is a helper method to define mock.On call
//   - id string
func (_e *MockObjectStore_Expecter) DeleteObject(id interface{}) *MockObjectStore_DeleteObject_Call {
	return &MockObjectStore_DeleteObject_Call{Call: _e.mock.On("DeleteObject", id)}
}

func (_c *MockObjectStore_DeleteObject_Call) Run(run func(id string)) *MockObjectStore_DeleteObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_DeleteObject_Call) Return(_a0 error) *MockObjectStore_DeleteObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_DeleteObject_Call) RunAndReturn(run func(string) error) *MockObjectStore_DeleteObject_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVirtualSpace provides a mock function with given fields: spaceID
func (_m *MockObjectStore) DeleteVirtualSpace(spaceID string) error {
	ret := _m.Called(spaceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(spaceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_DeleteVirtualSpace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVirtualSpace'
type MockObjectStore_DeleteVirtualSpace_Call struct {
	*mock.Call
}

// DeleteVirtualSpace is a helper method to define mock.On call
//   - spaceID string
func (_e *MockObjectStore_Expecter) DeleteVirtualSpace(spaceID interface{}) *MockObjectStore_DeleteVirtualSpace_Call {
	return &MockObjectStore_DeleteVirtualSpace_Call{Call: _e.mock.On("DeleteVirtualSpace", spaceID)}
}

func (_c *MockObjectStore_DeleteVirtualSpace_Call) Run(run func(spaceID string)) *MockObjectStore_DeleteVirtualSpace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_DeleteVirtualSpace_Call) Return(_a0 error) *MockObjectStore_DeleteVirtualSpace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_DeleteVirtualSpace_Call) RunAndReturn(run func(string) error) *MockObjectStore_DeleteVirtualSpace_Call {
	_c.Call.Return(run)
	return _c
}

// EraseIndexes provides a mock function with given fields: spaceId
func (_m *MockObjectStore) EraseIndexes(spaceId string) error {
	ret := _m.Called(spaceId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(spaceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_EraseIndexes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EraseIndexes'
type MockObjectStore_EraseIndexes_Call struct {
	*mock.Call
}

// EraseIndexes is a helper method to define mock.On call
//   - spaceId string
func (_e *MockObjectStore_Expecter) EraseIndexes(spaceId interface{}) *MockObjectStore_EraseIndexes_Call {
	return &MockObjectStore_EraseIndexes_Call{Call: _e.mock.On("EraseIndexes", spaceId)}
}

func (_c *MockObjectStore_EraseIndexes_Call) Run(run func(spaceId string)) *MockObjectStore_EraseIndexes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_EraseIndexes_Call) Return(_a0 error) *MockObjectStore_EraseIndexes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_EraseIndexes_Call) RunAndReturn(run func(string) error) *MockObjectStore_EraseIndexes_Call {
	_c.Call.Return(run)
	return _c
}

// FTSearch provides a mock function with given fields:
func (_m *MockObjectStore) FTSearch() ftsearch.FTSearch {
	ret := _m.Called()

	var r0 ftsearch.FTSearch
	if rf, ok := ret.Get(0).(func() ftsearch.FTSearch); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ftsearch.FTSearch)
		}
	}

	return r0
}

// MockObjectStore_FTSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTSearch'
type MockObjectStore_FTSearch_Call struct {
	*mock.Call
}

// FTSearch is a helper method to define mock.On call
func (_e *MockObjectStore_Expecter) FTSearch() *MockObjectStore_FTSearch_Call {
	return &MockObjectStore_FTSearch_Call{Call: _e.mock.On("FTSearch")}
}

func (_c *MockObjectStore_FTSearch_Call) Run(run func()) *MockObjectStore_FTSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObjectStore_FTSearch_Call) Return(_a0 ftsearch.FTSearch) *MockObjectStore_FTSearch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_FTSearch_Call) RunAndReturn(run func() ftsearch.FTSearch) *MockObjectStore_FTSearch_Call {
	_c.Call.Return(run)
	return _c
}

// FetchRelationByKey provides a mock function with given fields: spaceID, key
func (_m *MockObjectStore) FetchRelationByKey(spaceID string, key string) (*relationutils.Relation, error) {
	ret := _m.Called(spaceID, key)

	var r0 *relationutils.Relation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*relationutils.Relation, error)); ok {
		return rf(spaceID, key)
	}
	if rf, ok := ret.Get(0).(func(string, string) *relationutils.Relation); ok {
		r0 = rf(spaceID, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*relationutils.Relation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(spaceID, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_FetchRelationByKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchRelationByKey'
type MockObjectStore_FetchRelationByKey_Call struct {
	*mock.Call
}

// FetchRelationByKey is a helper method to define mock.On call
//   - spaceID string
//   - key string
func (_e *MockObjectStore_Expecter) FetchRelationByKey(spaceID interface{}, key interface{}) *MockObjectStore_FetchRelationByKey_Call {
	return &MockObjectStore_FetchRelationByKey_Call{Call: _e.mock.On("FetchRelationByKey", spaceID, key)}
}

func (_c *MockObjectStore_FetchRelationByKey_Call) Run(run func(spaceID string, key string)) *MockObjectStore_FetchRelationByKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockObjectStore_FetchRelationByKey_Call) Return(relation *relationutils.Relation, err error) *MockObjectStore_FetchRelationByKey_Call {
	_c.Call.Return(relation, err)
	return _c
}

func (_c *MockObjectStore_FetchRelationByKey_Call) RunAndReturn(run func(string, string) (*relationutils.Relation, error)) *MockObjectStore_FetchRelationByKey_Call {
	_c.Call.Return(run)
	return _c
}

// FetchRelationByKeys provides a mock function with given fields: spaceId, keys
func (_m *MockObjectStore) FetchRelationByKeys(spaceId string, keys ...string) (relationutils.Relations, error) {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, spaceId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 relationutils.Relations
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...string) (relationutils.Relations, error)); ok {
		return rf(spaceId, keys...)
	}
	if rf, ok := ret.Get(0).(func(string, ...string) relationutils.Relations); ok {
		r0 = rf(spaceId, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(relationutils.Relations)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = rf(spaceId, keys...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_FetchRelationByKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchRelationByKeys'
type MockObjectStore_FetchRelationByKeys_Call struct {
	*mock.Call
}

// FetchRelationByKeys is a helper method to define mock.On call
//   - spaceId string
//   - keys ...string
func (_e *MockObjectStore_Expecter) FetchRelationByKeys(spaceId interface{}, keys ...interface{}) *MockObjectStore_FetchRelationByKeys_Call {
	return &MockObjectStore_FetchRelationByKeys_Call{Call: _e.mock.On("FetchRelationByKeys",
		append([]interface{}{spaceId}, keys...)...)}
}

func (_c *MockObjectStore_FetchRelationByKeys_Call) Run(run func(spaceId string, keys ...string)) *MockObjectStore_FetchRelationByKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockObjectStore_FetchRelationByKeys_Call) Return(relations relationutils.Relations, err error) *MockObjectStore_FetchRelationByKeys_Call {
	_c.Call.Return(relations, err)
	return _c
}

func (_c *MockObjectStore_FetchRelationByKeys_Call) RunAndReturn(run func(string, ...string) (relationutils.Relations, error)) *MockObjectStore_FetchRelationByKeys_Call {
	_c.Call.Return(run)
	return _c
}

// FetchRelationByLinks provides a mock function with given fields: spaceId, links
func (_m *MockObjectStore) FetchRelationByLinks(spaceId string, links pbtypes.RelationLinks) (relationutils.Relations, error) {
	ret := _m.Called(spaceId, links)

	var r0 relationutils.Relations
	var r1 error
	if rf, ok := ret.Get(0).(func(string, pbtypes.RelationLinks) (relationutils.Relations, error)); ok {
		return rf(spaceId, links)
	}
	if rf, ok := ret.Get(0).(func(string, pbtypes.RelationLinks) relationutils.Relations); ok {
		r0 = rf(spaceId, links)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(relationutils.Relations)
		}
	}

	if rf, ok := ret.Get(1).(func(string, pbtypes.RelationLinks) error); ok {
		r1 = rf(spaceId, links)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_FetchRelationByLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchRelationByLinks'
type MockObjectStore_FetchRelationByLinks_Call struct {
	*mock.Call
}

// FetchRelationByLinks is a helper method to define mock.On call
//   - spaceId string
//   - links pbtypes.RelationLinks
func (_e *MockObjectStore_Expecter) FetchRelationByLinks(spaceId interface{}, links interface{}) *MockObjectStore_FetchRelationByLinks_Call {
	return &MockObjectStore_FetchRelationByLinks_Call{Call: _e.mock.On("FetchRelationByLinks", spaceId, links)}
}

func (_c *MockObjectStore_FetchRelationByLinks_Call) Run(run func(spaceId string, links pbtypes.RelationLinks)) *MockObjectStore_FetchRelationByLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(pbtypes.RelationLinks))
	})
	return _c
}

func (_c *MockObjectStore_FetchRelationByLinks_Call) Return(relations relationutils.Relations, err error) *MockObjectStore_FetchRelationByLinks_Call {
	_c.Call.Return(relations, err)
	return _c
}

func (_c *MockObjectStore_FetchRelationByLinks_Call) RunAndReturn(run func(string, pbtypes.RelationLinks) (relationutils.Relations, error)) *MockObjectStore_FetchRelationByLinks_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountStatus provides a mock function with given fields:
func (_m *MockObjectStore) GetAccountStatus() (*coordinatorproto.SpaceStatusPayload, error) {
	ret := _m.Called()

	var r0 *coordinatorproto.SpaceStatusPayload
	var r1 error
	if rf, ok := ret.Get(0).(func() (*coordinatorproto.SpaceStatusPayload, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *coordinatorproto.SpaceStatusPayload); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coordinatorproto.SpaceStatusPayload)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetAccountStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountStatus'
type MockObjectStore_GetAccountStatus_Call struct {
	*mock.Call
}

// GetAccountStatus is a helper method to define mock.On call
func (_e *MockObjectStore_Expecter) GetAccountStatus() *MockObjectStore_GetAccountStatus_Call {
	return &MockObjectStore_GetAccountStatus_Call{Call: _e.mock.On("GetAccountStatus")}
}

func (_c *MockObjectStore_GetAccountStatus_Call) Run(run func()) *MockObjectStore_GetAccountStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObjectStore_GetAccountStatus_Call) Return(status *coordinatorproto.SpaceStatusPayload, err error) *MockObjectStore_GetAccountStatus_Call {
	_c.Call.Return(status, err)
	return _c
}

func (_c *MockObjectStore_GetAccountStatus_Call) RunAndReturn(run func() (*coordinatorproto.SpaceStatusPayload, error)) *MockObjectStore_GetAccountStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetByIDs provides a mock function with given fields: spaceID, ids
func (_m *MockObjectStore) GetByIDs(spaceID string, ids []string) ([]*model.ObjectInfo, error) {
	ret := _m.Called(spaceID, ids)

	var r0 []*model.ObjectInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string) ([]*model.ObjectInfo, error)); ok {
		return rf(spaceID, ids)
	}
	if rf, ok := ret.Get(0).(func(string, []string) []*model.ObjectInfo); ok {
		r0 = rf(spaceID, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ObjectInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(spaceID, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByIDs'
type MockObjectStore_GetByIDs_Call struct {
	*mock.Call
}

// GetByIDs is a helper method to define mock.On call
//   - spaceID string
//   - ids []string
func (_e *MockObjectStore_Expecter) GetByIDs(spaceID interface{}, ids interface{}) *MockObjectStore_GetByIDs_Call {
	return &MockObjectStore_GetByIDs_Call{Call: _e.mock.On("GetByIDs", spaceID, ids)}
}

func (_c *MockObjectStore_GetByIDs_Call) Run(run func(spaceID string, ids []string)) *MockObjectStore_GetByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string))
	})
	return _c
}

func (_c *MockObjectStore_GetByIDs_Call) Return(_a0 []*model.ObjectInfo, _a1 error) *MockObjectStore_GetByIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_GetByIDs_Call) RunAndReturn(run func(string, []string) ([]*model.ObjectInfo, error)) *MockObjectStore_GetByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetChecksums provides a mock function with given fields: spaceID
func (_m *MockObjectStore) GetChecksums(spaceID string) (*model.ObjectStoreChecksums, error) {
	ret := _m.Called(spaceID)

	var r0 *model.ObjectStoreChecksums
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ObjectStoreChecksums, error)); ok {
		return rf(spaceID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ObjectStoreChecksums); ok {
		r0 = rf(spaceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ObjectStoreChecksums)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(spaceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetChecksums_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChecksums'
type MockObjectStore_GetChecksums_Call struct {
	*mock.Call
}

// GetChecksums is a helper method to define mock.On call
//   - spaceID string
func (_e *MockObjectStore_Expecter) GetChecksums(spaceID interface{}) *MockObjectStore_GetChecksums_Call {
	return &MockObjectStore_GetChecksums_Call{Call: _e.mock.On("GetChecksums", spaceID)}
}

func (_c *MockObjectStore_GetChecksums_Call) Run(run func(spaceID string)) *MockObjectStore_GetChecksums_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_GetChecksums_Call) Return(checksums *model.ObjectStoreChecksums, err error) *MockObjectStore_GetChecksums_Call {
	_c.Call.Return(checksums, err)
	return _c
}

func (_c *MockObjectStore_GetChecksums_Call) RunAndReturn(run func(string) (*model.ObjectStoreChecksums, error)) *MockObjectStore_GetChecksums_Call {
	_c.Call.Return(run)
	return _c
}

// GetDetails provides a mock function with given fields: id
func (_m *MockObjectStore) GetDetails(id string) (*model.ObjectDetails, error) {
	ret := _m.Called(id)

	var r0 *model.ObjectDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ObjectDetails, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ObjectDetails); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ObjectDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDetails'
type MockObjectStore_GetDetails_Call struct {
	*mock.Call
}

// GetDetails is a helper method to define mock.On call
//   - id string
func (_e *MockObjectStore_Expecter) GetDetails(id interface{}) *MockObjectStore_GetDetails_Call {
	return &MockObjectStore_GetDetails_Call{Call: _e.mock.On("GetDetails", id)}
}

func (_c *MockObjectStore_GetDetails_Call) Run(run func(id string)) *MockObjectStore_GetDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_GetDetails_Call) Return(_a0 *model.ObjectDetails, _a1 error) *MockObjectStore_GetDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_GetDetails_Call) RunAndReturn(run func(string) (*model.ObjectDetails, error)) *MockObjectStore_GetDetails_Call {
	_c.Call.Return(run)
	return _c
}

// GetGlobalChecksums provides a mock function with given fields:
func (_m *MockObjectStore) GetGlobalChecksums() (*model.ObjectStoreChecksums, error) {
	ret := _m.Called()

	var r0 *model.ObjectStoreChecksums
	var r1 error
	if rf, ok := ret.Get(0).(func() (*model.ObjectStoreChecksums, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *model.ObjectStoreChecksums); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ObjectStoreChecksums)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetGlobalChecksums_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGlobalChecksums'
type MockObjectStore_GetGlobalChecksums_Call struct {
	*mock.Call
}

// GetGlobalChecksums is a helper method to define mock.On call
func (_e *MockObjectStore_Expecter) GetGlobalChecksums() *MockObjectStore_GetGlobalChecksums_Call {
	return &MockObjectStore_GetGlobalChecksums_Call{Call: _e.mock.On("GetGlobalChecksums")}
}

func (_c *MockObjectStore_GetGlobalChecksums_Call) Run(run func()) *MockObjectStore_GetGlobalChecksums_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObjectStore_GetGlobalChecksums_Call) Return(checksums *model.ObjectStoreChecksums, err error) *MockObjectStore_GetGlobalChecksums_Call {
	_c.Call.Return(checksums, err)
	return _c
}

func (_c *MockObjectStore_GetGlobalChecksums_Call) RunAndReturn(run func() (*model.ObjectStoreChecksums, error)) *MockObjectStore_GetGlobalChecksums_Call {
	_c.Call.Return(run)
	return _c
}

// GetInboundLinksByID provides a mock function with given fields: id
func (_m *MockObjectStore) GetInboundLinksByID(id string) ([]string, error) {
	ret := _m.Called(id)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetInboundLinksByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInboundLinksByID'
type MockObjectStore_GetInboundLinksByID_Call struct {
	*mock.Call
}

// GetInboundLinksByID is a helper method to define mock.On call
//   - id string
func (_e *MockObjectStore_Expecter) GetInboundLinksByID(id interface{}) *MockObjectStore_GetInboundLinksByID_Call {
	return &MockObjectStore_GetInboundLinksByID_Call{Call: _e.mock.On("GetInboundLinksByID", id)}
}

func (_c *MockObjectStore_GetInboundLinksByID_Call) Run(run func(id string)) *MockObjectStore_GetInboundLinksByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_GetInboundLinksByID_Call) Return(_a0 []string, _a1 error) *MockObjectStore_GetInboundLinksByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_GetInboundLinksByID_Call) RunAndReturn(run func(string) ([]string, error)) *MockObjectStore_GetInboundLinksByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastIndexedHeadsHash provides a mock function with given fields: id
func (_m *MockObjectStore) GetLastIndexedHeadsHash(id string) (string, error) {
	ret := _m.Called(id)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetLastIndexedHeadsHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastIndexedHeadsHash'
type MockObjectStore_GetLastIndexedHeadsHash_Call struct {
	*mock.Call
}

// GetLastIndexedHeadsHash is a helper method to define mock.On call
//   - id string
func (_e *MockObjectStore_Expecter) GetLastIndexedHeadsHash(id interface{}) *MockObjectStore_GetLastIndexedHeadsHash_Call {
	return &MockObjectStore_GetLastIndexedHeadsHash_Call{Call: _e.mock.On("GetLastIndexedHeadsHash", id)}
}

func (_c *MockObjectStore_GetLastIndexedHeadsHash_Call) Run(run func(id string)) *MockObjectStore_GetLastIndexedHeadsHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_GetLastIndexedHeadsHash_Call) Return(headsHash string, err error) *MockObjectStore_GetLastIndexedHeadsHash_Call {
	_c.Call.Return(headsHash, err)
	return _c
}

func (_c *MockObjectStore_GetLastIndexedHeadsHash_Call) RunAndReturn(run func(string) (string, error)) *MockObjectStore_GetLastIndexedHeadsHash_Call {
	_c.Call.Return(run)
	return _c
}

// GetObjectByUniqueKey provides a mock function with given fields: spaceId, uniqueKey
func (_m *MockObjectStore) GetObjectByUniqueKey(spaceId string, uniqueKey domain.UniqueKey) (*model.ObjectDetails, error) {
	ret := _m.Called(spaceId, uniqueKey)

	var r0 *model.ObjectDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(string, domain.UniqueKey) (*model.ObjectDetails, error)); ok {
		return rf(spaceId, uniqueKey)
	}
	if rf, ok := ret.Get(0).(func(string, domain.UniqueKey) *model.ObjectDetails); ok {
		r0 = rf(spaceId, uniqueKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ObjectDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(string, domain.UniqueKey) error); ok {
		r1 = rf(spaceId, uniqueKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetObjectByUniqueKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObjectByUniqueKey'
type MockObjectStore_GetObjectByUniqueKey_Call struct {
	*mock.Call
}

// GetObjectByUniqueKey is a helper method to define mock.On call
//   - spaceId string
//   - uniqueKey domain.UniqueKey
func (_e *MockObjectStore_Expecter) GetObjectByUniqueKey(spaceId interface{}, uniqueKey interface{}) *MockObjectStore_GetObjectByUniqueKey_Call {
	return &MockObjectStore_GetObjectByUniqueKey_Call{Call: _e.mock.On("GetObjectByUniqueKey", spaceId, uniqueKey)}
}

func (_c *MockObjectStore_GetObjectByUniqueKey_Call) Run(run func(spaceId string, uniqueKey domain.UniqueKey)) *MockObjectStore_GetObjectByUniqueKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(domain.UniqueKey))
	})
	return _c
}

func (_c *MockObjectStore_GetObjectByUniqueKey_Call) Return(_a0 *model.ObjectDetails, _a1 error) *MockObjectStore_GetObjectByUniqueKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_GetObjectByUniqueKey_Call) RunAndReturn(run func(string, domain.UniqueKey) (*model.ObjectDetails, error)) *MockObjectStore_GetObjectByUniqueKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetObjectType provides a mock function with given fields: url
func (_m *MockObjectStore) GetObjectType(url string) (*model.ObjectType, error) {
	ret := _m.Called(url)

	var r0 *model.ObjectType
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ObjectType, error)); ok {
		return rf(url)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ObjectType); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ObjectType)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetObjectType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObjectType'
type MockObjectStore_GetObjectType_Call struct {
	*mock.Call
}

// GetObjectType is a helper method to define mock.On call
//   - url string
func (_e *MockObjectStore_Expecter) GetObjectType(url interface{}) *MockObjectStore_GetObjectType_Call {
	return &MockObjectStore_GetObjectType_Call{Call: _e.mock.On("GetObjectType", url)}
}

func (_c *MockObjectStore_GetObjectType_Call) Run(run func(url string)) *MockObjectStore_GetObjectType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_GetObjectType_Call) Return(_a0 *model.ObjectType, _a1 error) *MockObjectStore_GetObjectType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_GetObjectType_Call) RunAndReturn(run func(string) (*model.ObjectType, error)) *MockObjectStore_GetObjectType_Call {
	_c.Call.Return(run)
	return _c
}

// GetOutboundLinksByID provides a mock function with given fields: id
func (_m *MockObjectStore) GetOutboundLinksByID(id string) ([]string, error) {
	ret := _m.Called(id)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetOutboundLinksByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOutboundLinksByID'
type MockObjectStore_GetOutboundLinksByID_Call struct {
	*mock.Call
}

// GetOutboundLinksByID is a helper method to define mock.On call
//   - id string
func (_e *MockObjectStore_Expecter) GetOutboundLinksByID(id interface{}) *MockObjectStore_GetOutboundLinksByID_Call {
	return &MockObjectStore_GetOutboundLinksByID_Call{Call: _e.mock.On("GetOutboundLinksByID", id)}
}

func (_c *MockObjectStore_GetOutboundLinksByID_Call) Run(run func(id string)) *MockObjectStore_GetOutboundLinksByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_GetOutboundLinksByID_Call) Return(_a0 []string, _a1 error) *MockObjectStore_GetOutboundLinksByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_GetOutboundLinksByID_Call) RunAndReturn(run func(string) ([]string, error)) *MockObjectStore_GetOutboundLinksByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetRelationByID provides a mock function with given fields: id
func (_m *MockObjectStore) GetRelationByID(id string) (*model.Relation, error) {
	ret := _m.Called(id)

	var r0 *model.Relation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Relation, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Relation); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Relation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetRelationByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRelationByID'
type MockObjectStore_GetRelationByID_Call struct {
	*mock.Call
}

// GetRelationByID is a helper method to define mock.On call
//   - id string
func (_e *MockObjectStore_Expecter) GetRelationByID(id interface{}) *MockObjectStore_GetRelationByID_Call {
	return &MockObjectStore_GetRelationByID_Call{Call: _e.mock.On("GetRelationByID", id)}
}

func (_c *MockObjectStore_GetRelationByID_Call) Run(run func(id string)) *MockObjectStore_GetRelationByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_GetRelationByID_Call) Return(relation *model.Relation, err error) *MockObjectStore_GetRelationByID_Call {
	_c.Call.Return(relation, err)
	return _c
}

func (_c *MockObjectStore_GetRelationByID_Call) RunAndReturn(run func(string) (*model.Relation, error)) *MockObjectStore_GetRelationByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetRelationByKey provides a mock function with given fields: key
func (_m *MockObjectStore) GetRelationByKey(key string) (*model.Relation, error) {
	ret := _m.Called(key)

	var r0 *model.Relation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Relation, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Relation); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Relation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetRelationByKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRelationByKey'
type MockObjectStore_GetRelationByKey_Call struct {
	*mock.Call
}

// GetRelationByKey is a helper method to define mock.On call
//   - key string
func (_e *MockObjectStore_Expecter) GetRelationByKey(key interface{}) *MockObjectStore_GetRelationByKey_Call {
	return &MockObjectStore_GetRelationByKey_Call{Call: _e.mock.On("GetRelationByKey", key)}
}

func (_c *MockObjectStore_GetRelationByKey_Call) Run(run func(key string)) *MockObjectStore_GetRelationByKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_GetRelationByKey_Call) Return(_a0 *model.Relation, _a1 error) *MockObjectStore_GetRelationByKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_GetRelationByKey_Call) RunAndReturn(run func(string) (*model.Relation, error)) *MockObjectStore_GetRelationByKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetRelationLink provides a mock function with given fields: spaceID, key
func (_m *MockObjectStore) GetRelationLink(spaceID string, key string) (*model.RelationLink, error) {
	ret := _m.Called(spaceID, key)

	var r0 *model.RelationLink
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.RelationLink, error)); ok {
		return rf(spaceID, key)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.RelationLink); ok {
		r0 = rf(spaceID, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RelationLink)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(spaceID, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetRelationLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRelationLink'
type MockObjectStore_GetRelationLink_Call struct {
	*mock.Call
}

// GetRelationLink is a helper method to define mock.On call
//   - spaceID string
//   - key string
func (_e *MockObjectStore_Expecter) GetRelationLink(spaceID interface{}, key interface{}) *MockObjectStore_GetRelationLink_Call {
	return &MockObjectStore_GetRelationLink_Call{Call: _e.mock.On("GetRelationLink", spaceID, key)}
}

func (_c *MockObjectStore_GetRelationLink_Call) Run(run func(spaceID string, key string)) *MockObjectStore_GetRelationLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockObjectStore_GetRelationLink_Call) Return(_a0 *model.RelationLink, _a1 error) *MockObjectStore_GetRelationLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_GetRelationLink_Call) RunAndReturn(run func(string, string) (*model.RelationLink, error)) *MockObjectStore_GetRelationLink_Call {
	_c.Call.Return(run)
	return _c
}

// GetUniqueKeyById provides a mock function with given fields: id
func (_m *MockObjectStore) GetUniqueKeyById(id string) (domain.UniqueKey, error) {
	ret := _m.Called(id)

	var r0 domain.UniqueKey
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.UniqueKey, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) domain.UniqueKey); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.UniqueKey)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetUniqueKeyById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUniqueKeyById'
type MockObjectStore_GetUniqueKeyById_Call struct {
	*mock.Call
}

// GetUniqueKeyById is a helper method to define mock.On call
//   - id string
func (_e *MockObjectStore_Expecter) GetUniqueKeyById(id interface{}) *MockObjectStore_GetUniqueKeyById_Call {
	return &MockObjectStore_GetUniqueKeyById_Call{Call: _e.mock.On("GetUniqueKeyById", id)}
}

func (_c *MockObjectStore_GetUniqueKeyById_Call) Run(run func(id string)) *MockObjectStore_GetUniqueKeyById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_GetUniqueKeyById_Call) Return(key domain.UniqueKey, err error) *MockObjectStore_GetUniqueKeyById_Call {
	_c.Call.Return(key, err)
	return _c
}

func (_c *MockObjectStore_GetUniqueKeyById_Call) RunAndReturn(run func(string) (domain.UniqueKey, error)) *MockObjectStore_GetUniqueKeyById_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithLinksInfoByID provides a mock function with given fields: spaceID, id
func (_m *MockObjectStore) GetWithLinksInfoByID(spaceID string, id string) (*model.ObjectInfoWithLinks, error) {
	ret := _m.Called(spaceID, id)

	var r0 *model.ObjectInfoWithLinks
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.ObjectInfoWithLinks, error)); ok {
		return rf(spaceID, id)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.ObjectInfoWithLinks); ok {
		r0 = rf(spaceID, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ObjectInfoWithLinks)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(spaceID, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_GetWithLinksInfoByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithLinksInfoByID'
type MockObjectStore_GetWithLinksInfoByID_Call struct {
	*mock.Call
}

// GetWithLinksInfoByID is a helper method to define mock.On call
//   - spaceID string
//   - id string
func (_e *MockObjectStore_Expecter) GetWithLinksInfoByID(spaceID interface{}, id interface{}) *MockObjectStore_GetWithLinksInfoByID_Call {
	return &MockObjectStore_GetWithLinksInfoByID_Call{Call: _e.mock.On("GetWithLinksInfoByID", spaceID, id)}
}

func (_c *MockObjectStore_GetWithLinksInfoByID_Call) Run(run func(spaceID string, id string)) *MockObjectStore_GetWithLinksInfoByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockObjectStore_GetWithLinksInfoByID_Call) Return(_a0 *model.ObjectInfoWithLinks, _a1 error) *MockObjectStore_GetWithLinksInfoByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_GetWithLinksInfoByID_Call) RunAndReturn(run func(string, string) (*model.ObjectInfoWithLinks, error)) *MockObjectStore_GetWithLinksInfoByID_Call {
	_c.Call.Return(run)
	return _c
}

// HasIDs provides a mock function with given fields: ids
func (_m *MockObjectStore) HasIDs(ids ...string) ([]string, error) {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(...string) ([]string, error)); ok {
		return rf(ids...)
	}
	if rf, ok := ret.Get(0).(func(...string) []string); ok {
		r0 = rf(ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(ids...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_HasIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasIDs'
type MockObjectStore_HasIDs_Call struct {
	*mock.Call
}

// HasIDs is a helper method to define mock.On call
//   - ids ...string
func (_e *MockObjectStore_Expecter) HasIDs(ids ...interface{}) *MockObjectStore_HasIDs_Call {
	return &MockObjectStore_HasIDs_Call{Call: _e.mock.On("HasIDs",
		append([]interface{}{}, ids...)...)}
}

func (_c *MockObjectStore_HasIDs_Call) Run(run func(ids ...string)) *MockObjectStore_HasIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockObjectStore_HasIDs_Call) Return(exists []string, err error) *MockObjectStore_HasIDs_Call {
	_c.Call.Return(exists, err)
	return _c
}

func (_c *MockObjectStore_HasIDs_Call) RunAndReturn(run func(...string) ([]string, error)) *MockObjectStore_HasIDs_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: a
func (_m *MockObjectStore) Init(a *app.App) error {
	ret := _m.Called(a)

	var r0 error
	if rf, ok := ret.Get(0).(func(*app.App) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockObjectStore_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - a *app.App
func (_e *MockObjectStore_Expecter) Init(a interface{}) *MockObjectStore_Init_Call {
	return &MockObjectStore_Init_Call{Call: _e.mock.On("Init", a)}
}

func (_c *MockObjectStore_Init_Call) Run(run func(a *app.App)) *MockObjectStore_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*app.App))
	})
	return _c
}

func (_c *MockObjectStore_Init_Call) Return(err error) *MockObjectStore_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockObjectStore_Init_Call) RunAndReturn(run func(*app.App) error) *MockObjectStore_Init_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: spaceID, includeArchived
func (_m *MockObjectStore) List(spaceID string, includeArchived bool) ([]*model.ObjectInfo, error) {
	ret := _m.Called(spaceID, includeArchived)

	var r0 []*model.ObjectInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bool) ([]*model.ObjectInfo, error)); ok {
		return rf(spaceID, includeArchived)
	}
	if rf, ok := ret.Get(0).(func(string, bool) []*model.ObjectInfo); ok {
		r0 = rf(spaceID, includeArchived)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ObjectInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(spaceID, includeArchived)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockObjectStore_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - spaceID string
//   - includeArchived bool
func (_e *MockObjectStore_Expecter) List(spaceID interface{}, includeArchived interface{}) *MockObjectStore_List_Call {
	return &MockObjectStore_List_Call{Call: _e.mock.On("List", spaceID, includeArchived)}
}

func (_c *MockObjectStore_List_Call) Run(run func(spaceID string, includeArchived bool)) *MockObjectStore_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *MockObjectStore_List_Call) Return(_a0 []*model.ObjectInfo, _a1 error) *MockObjectStore_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_List_Call) RunAndReturn(run func(string, bool) ([]*model.ObjectInfo, error)) *MockObjectStore_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllRelations provides a mock function with given fields: spaceId
func (_m *MockObjectStore) ListAllRelations(spaceId string) (relationutils.Relations, error) {
	ret := _m.Called(spaceId)

	var r0 relationutils.Relations
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (relationutils.Relations, error)); ok {
		return rf(spaceId)
	}
	if rf, ok := ret.Get(0).(func(string) relationutils.Relations); ok {
		r0 = rf(spaceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(relationutils.Relations)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(spaceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_ListAllRelations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllRelations'
type MockObjectStore_ListAllRelations_Call struct {
	*mock.Call
}

// ListAllRelations is a helper method to define mock.On call
//   - spaceId string
func (_e *MockObjectStore_Expecter) ListAllRelations(spaceId interface{}) *MockObjectStore_ListAllRelations_Call {
	return &MockObjectStore_ListAllRelations_Call{Call: _e.mock.On("ListAllRelations", spaceId)}
}

func (_c *MockObjectStore_ListAllRelations_Call) Run(run func(spaceId string)) *MockObjectStore_ListAllRelations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_ListAllRelations_Call) Return(relations relationutils.Relations, err error) *MockObjectStore_ListAllRelations_Call {
	_c.Call.Return(relations, err)
	return _c
}

func (_c *MockObjectStore_ListAllRelations_Call) RunAndReturn(run func(string) (relationutils.Relations, error)) *MockObjectStore_ListAllRelations_Call {
	_c.Call.Return(run)
	return _c
}

// ListIDsFromFullTextQueue provides a mock function with given fields:
func (_m *MockObjectStore) ListIDsFromFullTextQueue() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_ListIDsFromFullTextQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIDsFromFullTextQueue'
type MockObjectStore_ListIDsFromFullTextQueue_Call struct {
	*mock.Call
}

// ListIDsFromFullTextQueue is a helper method to define mock.On call
func (_e *MockObjectStore_Expecter) ListIDsFromFullTextQueue() *MockObjectStore_ListIDsFromFullTextQueue_Call {
	return &MockObjectStore_ListIDsFromFullTextQueue_Call{Call: _e.mock.On("ListIDsFromFullTextQueue")}
}

func (_c *MockObjectStore_ListIDsFromFullTextQueue_Call) Run(run func()) *MockObjectStore_ListIDsFromFullTextQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObjectStore_ListIDsFromFullTextQueue_Call) Return(_a0 []string, _a1 error) *MockObjectStore_ListIDsFromFullTextQueue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_ListIDsFromFullTextQueue_Call) RunAndReturn(run func() ([]string, error)) *MockObjectStore_ListIDsFromFullTextQueue_Call {
	_c.Call.Return(run)
	return _c
}

// ListIds provides a mock function with given fields:
func (_m *MockObjectStore) ListIds() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_ListIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIds'
type MockObjectStore_ListIds_Call struct {
	*mock.Call
}

// ListIds is a helper method to define mock.On call
func (_e *MockObjectStore_Expecter) ListIds() *MockObjectStore_ListIds_Call {
	return &MockObjectStore_ListIds_Call{Call: _e.mock.On("ListIds")}
}

func (_c *MockObjectStore_ListIds_Call) Run(run func()) *MockObjectStore_ListIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObjectStore_ListIds_Call) Return(_a0 []string, _a1 error) *MockObjectStore_ListIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_ListIds_Call) RunAndReturn(run func() ([]string, error)) *MockObjectStore_ListIds_Call {
	_c.Call.Return(run)
	return _c
}

// ListIdsBySpace provides a mock function with given fields: spaceId
func (_m *MockObjectStore) ListIdsBySpace(spaceId string) ([]string, error) {
	ret := _m.Called(spaceId)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(spaceId)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(spaceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(spaceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_ListIdsBySpace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIdsBySpace'
type MockObjectStore_ListIdsBySpace_Call struct {
	*mock.Call
}

// ListIdsBySpace is a helper method to define mock.On call
//   - spaceId string
func (_e *MockObjectStore_Expecter) ListIdsBySpace(spaceId interface{}) *MockObjectStore_ListIdsBySpace_Call {
	return &MockObjectStore_ListIdsBySpace_Call{Call: _e.mock.On("ListIdsBySpace", spaceId)}
}

func (_c *MockObjectStore_ListIdsBySpace_Call) Run(run func(spaceId string)) *MockObjectStore_ListIdsBySpace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_ListIdsBySpace_Call) Return(_a0 []string, _a1 error) *MockObjectStore_ListIdsBySpace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_ListIdsBySpace_Call) RunAndReturn(run func(string) ([]string, error)) *MockObjectStore_ListIdsBySpace_Call {
	_c.Call.Return(run)
	return _c
}

// ListVirtualSpaces provides a mock function with given fields:
func (_m *MockObjectStore) ListVirtualSpaces() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_ListVirtualSpaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVirtualSpaces'
type MockObjectStore_ListVirtualSpaces_Call struct {
	*mock.Call
}

// ListVirtualSpaces is a helper method to define mock.On call
func (_e *MockObjectStore_Expecter) ListVirtualSpaces() *MockObjectStore_ListVirtualSpaces_Call {
	return &MockObjectStore_ListVirtualSpaces_Call{Call: _e.mock.On("ListVirtualSpaces")}
}

func (_c *MockObjectStore_ListVirtualSpaces_Call) Run(run func()) *MockObjectStore_ListVirtualSpaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObjectStore_ListVirtualSpaces_Call) Return(_a0 []string, _a1 error) *MockObjectStore_ListVirtualSpaces_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectStore_ListVirtualSpaces_Call) RunAndReturn(run func() ([]string, error)) *MockObjectStore_ListVirtualSpaces_Call {
	_c.Call.Return(run)
	return _c
}

// ModifyObjectDetails provides a mock function with given fields: id, proc
func (_m *MockObjectStore) ModifyObjectDetails(id string, proc func(*types.Struct) (*types.Struct, error)) error {
	ret := _m.Called(id, proc)

	if len(ret) == 0 {
		panic("no return value specified for ModifyObjectDetails")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(*types.Struct) (*types.Struct, error)) error); ok {
		r0 = rf(id, proc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_ModifyObjectDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModifyObjectDetails'
type MockObjectStore_ModifyObjectDetails_Call struct {
	*mock.Call
}

// ModifyObjectDetails is a helper method to define mock.On call
//   - id string
//   - proc func(*types.Struct)(*types.Struct , error)
func (_e *MockObjectStore_Expecter) ModifyObjectDetails(id interface{}, proc interface{}) *MockObjectStore_ModifyObjectDetails_Call {
	return &MockObjectStore_ModifyObjectDetails_Call{Call: _e.mock.On("ModifyObjectDetails", id, proc)}
}

func (_c *MockObjectStore_ModifyObjectDetails_Call) Run(run func(id string, proc func(*types.Struct) (*types.Struct, error))) *MockObjectStore_ModifyObjectDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func(*types.Struct) (*types.Struct, error)))
	})
	return _c
}

func (_c *MockObjectStore_ModifyObjectDetails_Call) Return(_a0 error) *MockObjectStore_ModifyObjectDetails_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_ModifyObjectDetails_Call) RunAndReturn(run func(string, func(*types.Struct) (*types.Struct, error)) error) *MockObjectStore_ModifyObjectDetails_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockObjectStore) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockObjectStore_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockObjectStore_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockObjectStore_Expecter) Name() *MockObjectStore_Name_Call {
	return &MockObjectStore_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockObjectStore_Name_Call) Run(run func()) *MockObjectStore_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObjectStore_Name_Call) Return(name string) *MockObjectStore_Name_Call {
	_c.Call.Return(name)
	return _c
}

func (_c *MockObjectStore_Name_Call) RunAndReturn(run func() string) *MockObjectStore_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: q
func (_m *MockObjectStore) Query(q database.Query) ([]database.Record, int, error) {
	ret := _m.Called(q)

	var r0 []database.Record
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(database.Query) ([]database.Record, int, error)); ok {
		return rf(q)
	}
	if rf, ok := ret.Get(0).(func(database.Query) []database.Record); ok {
		r0 = rf(q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Record)
		}
	}

	if rf, ok := ret.Get(1).(func(database.Query) int); ok {
		r1 = rf(q)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(database.Query) error); ok {
		r2 = rf(q)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockObjectStore_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockObjectStore_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - q database.Query
func (_e *MockObjectStore_Expecter) Query(q interface{}) *MockObjectStore_Query_Call {
	return &MockObjectStore_Query_Call{Call: _e.mock.On("Query", q)}
}

func (_c *MockObjectStore_Query_Call) Run(run func(q database.Query)) *MockObjectStore_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(database.Query))
	})
	return _c
}

func (_c *MockObjectStore_Query_Call) Return(records []database.Record, total int, err error) *MockObjectStore_Query_Call {
	_c.Call.Return(records, total, err)
	return _c
}

func (_c *MockObjectStore_Query_Call) RunAndReturn(run func(database.Query) ([]database.Record, int, error)) *MockObjectStore_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryByID provides a mock function with given fields: ids
func (_m *MockObjectStore) QueryByID(ids []string) ([]database.Record, error) {
	ret := _m.Called(ids)

	var r0 []database.Record
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]database.Record, error)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func([]string) []database.Record); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Record)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_QueryByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryByID'
type MockObjectStore_QueryByID_Call struct {
	*mock.Call
}

// QueryByID is a helper method to define mock.On call
//   - ids []string
func (_e *MockObjectStore_Expecter) QueryByID(ids interface{}) *MockObjectStore_QueryByID_Call {
	return &MockObjectStore_QueryByID_Call{Call: _e.mock.On("QueryByID", ids)}
}

func (_c *MockObjectStore_QueryByID_Call) Run(run func(ids []string)) *MockObjectStore_QueryByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockObjectStore_QueryByID_Call) Return(records []database.Record, err error) *MockObjectStore_QueryByID_Call {
	_c.Call.Return(records, err)
	return _c
}

func (_c *MockObjectStore_QueryByID_Call) RunAndReturn(run func([]string) ([]database.Record, error)) *MockObjectStore_QueryByID_Call {
	_c.Call.Return(run)
	return _c
}

// QueryByIDAndSubscribeForChanges provides a mock function with given fields: ids, subscription
func (_m *MockObjectStore) QueryByIDAndSubscribeForChanges(ids []string, subscription database.Subscription) ([]database.Record, func(), error) {
	ret := _m.Called(ids, subscription)

	var r0 []database.Record
	var r1 func()
	var r2 error
	if rf, ok := ret.Get(0).(func([]string, database.Subscription) ([]database.Record, func(), error)); ok {
		return rf(ids, subscription)
	}
	if rf, ok := ret.Get(0).(func([]string, database.Subscription) []database.Record); ok {
		r0 = rf(ids, subscription)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Record)
		}
	}

	if rf, ok := ret.Get(1).(func([]string, database.Subscription) func()); ok {
		r1 = rf(ids, subscription)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func())
		}
	}

	if rf, ok := ret.Get(2).(func([]string, database.Subscription) error); ok {
		r2 = rf(ids, subscription)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockObjectStore_QueryByIDAndSubscribeForChanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryByIDAndSubscribeForChanges'
type MockObjectStore_QueryByIDAndSubscribeForChanges_Call struct {
	*mock.Call
}

// QueryByIDAndSubscribeForChanges is a helper method to define mock.On call
//   - ids []string
//   - subscription database.Subscription
func (_e *MockObjectStore_Expecter) QueryByIDAndSubscribeForChanges(ids interface{}, subscription interface{}) *MockObjectStore_QueryByIDAndSubscribeForChanges_Call {
	return &MockObjectStore_QueryByIDAndSubscribeForChanges_Call{Call: _e.mock.On("QueryByIDAndSubscribeForChanges", ids, subscription)}
}

func (_c *MockObjectStore_QueryByIDAndSubscribeForChanges_Call) Run(run func(ids []string, subscription database.Subscription)) *MockObjectStore_QueryByIDAndSubscribeForChanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string), args[1].(database.Subscription))
	})
	return _c
}

func (_c *MockObjectStore_QueryByIDAndSubscribeForChanges_Call) Return(records []database.Record, close func(), err error) *MockObjectStore_QueryByIDAndSubscribeForChanges_Call {
	_c.Call.Return(records, close, err)
	return _c
}

func (_c *MockObjectStore_QueryByIDAndSubscribeForChanges_Call) RunAndReturn(run func([]string, database.Subscription) ([]database.Record, func(), error)) *MockObjectStore_QueryByIDAndSubscribeForChanges_Call {
	_c.Call.Return(run)
	return _c
}

// QueryObjectIDs provides a mock function with given fields: q
func (_m *MockObjectStore) QueryObjectIDs(q database.Query) ([]string, int, error) {
	ret := _m.Called(q)

	var r0 []string
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(database.Query) ([]string, int, error)); ok {
		return rf(q)
	}
	if rf, ok := ret.Get(0).(func(database.Query) []string); ok {
		r0 = rf(q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(database.Query) int); ok {
		r1 = rf(q)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(database.Query) error); ok {
		r2 = rf(q)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockObjectStore_QueryObjectIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryObjectIDs'
type MockObjectStore_QueryObjectIDs_Call struct {
	*mock.Call
}

// QueryObjectIDs is a helper method to define mock.On call
//   - q database.Query
func (_e *MockObjectStore_Expecter) QueryObjectIDs(q interface{}) *MockObjectStore_QueryObjectIDs_Call {
	return &MockObjectStore_QueryObjectIDs_Call{Call: _e.mock.On("QueryObjectIDs", q)}
}

func (_c *MockObjectStore_QueryObjectIDs_Call) Run(run func(q database.Query)) *MockObjectStore_QueryObjectIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(database.Query))
	})
	return _c
}

func (_c *MockObjectStore_QueryObjectIDs_Call) Return(ids []string, total int, err error) *MockObjectStore_QueryObjectIDs_Call {
	_c.Call.Return(ids, total, err)
	return _c
}

func (_c *MockObjectStore_QueryObjectIDs_Call) RunAndReturn(run func(database.Query) ([]string, int, error)) *MockObjectStore_QueryObjectIDs_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRaw provides a mock function with given fields: f, limit, offset
func (_m *MockObjectStore) QueryRaw(f *database.Filters, limit int, offset int) ([]database.Record, error) {
	ret := _m.Called(f, limit, offset)

	var r0 []database.Record
	var r1 error
	if rf, ok := ret.Get(0).(func(*database.Filters, int, int) ([]database.Record, error)); ok {
		return rf(f, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(*database.Filters, int, int) []database.Record); ok {
		r0 = rf(f, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Record)
		}
	}

	if rf, ok := ret.Get(1).(func(*database.Filters, int, int) error); ok {
		r1 = rf(f, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectStore_QueryRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRaw'
type MockObjectStore_QueryRaw_Call struct {
	*mock.Call
}

// QueryRaw is a helper method to define mock.On call
//   - f *database.Filters
//   - limit int
//   - offset int
func (_e *MockObjectStore_Expecter) QueryRaw(f interface{}, limit interface{}, offset interface{}) *MockObjectStore_QueryRaw_Call {
	return &MockObjectStore_QueryRaw_Call{Call: _e.mock.On("QueryRaw", f, limit, offset)}
}

func (_c *MockObjectStore_QueryRaw_Call) Run(run func(f *database.Filters, limit int, offset int)) *MockObjectStore_QueryRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*database.Filters), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockObjectStore_QueryRaw_Call) Return(records []database.Record, err error) *MockObjectStore_QueryRaw_Call {
	_c.Call.Return(records, err)
	return _c
}

func (_c *MockObjectStore_QueryRaw_Call) RunAndReturn(run func(*database.Filters, int, int) ([]database.Record, error)) *MockObjectStore_QueryRaw_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveIDsFromFullTextQueue provides a mock function with given fields: ids
func (_m *MockObjectStore) RemoveIDsFromFullTextQueue(ids []string) {
	_m.Called(ids)
}

// MockObjectStore_RemoveIDsFromFullTextQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveIDsFromFullTextQueue'
type MockObjectStore_RemoveIDsFromFullTextQueue_Call struct {
	*mock.Call
}

// RemoveIDsFromFullTextQueue is a helper method to define mock.On call
//   - ids []string
func (_e *MockObjectStore_Expecter) RemoveIDsFromFullTextQueue(ids interface{}) *MockObjectStore_RemoveIDsFromFullTextQueue_Call {
	return &MockObjectStore_RemoveIDsFromFullTextQueue_Call{Call: _e.mock.On("RemoveIDsFromFullTextQueue", ids)}
}

func (_c *MockObjectStore_RemoveIDsFromFullTextQueue_Call) Run(run func(ids []string)) *MockObjectStore_RemoveIDsFromFullTextQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockObjectStore_RemoveIDsFromFullTextQueue_Call) Return() *MockObjectStore_RemoveIDsFromFullTextQueue_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockObjectStore_RemoveIDsFromFullTextQueue_Call) RunAndReturn(run func([]string)) *MockObjectStore_RemoveIDsFromFullTextQueue_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: ctx
func (_m *MockObjectStore) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockObjectStore_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockObjectStore_Expecter) Run(ctx interface{}) *MockObjectStore_Run_Call {
	return &MockObjectStore_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *MockObjectStore_Run_Call) Run(run func(ctx context.Context)) *MockObjectStore_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockObjectStore_Run_Call) Return(err error) *MockObjectStore_Run_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockObjectStore_Run_Call) RunAndReturn(run func(context.Context) error) *MockObjectStore_Run_Call {
	_c.Call.Return(run)
	return _c
}

// SaveAccountStatus provides a mock function with given fields: status
func (_m *MockObjectStore) SaveAccountStatus(status *coordinatorproto.SpaceStatusPayload) error {
	ret := _m.Called(status)

	var r0 error
	if rf, ok := ret.Get(0).(func(*coordinatorproto.SpaceStatusPayload) error); ok {
		r0 = rf(status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_SaveAccountStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveAccountStatus'
type MockObjectStore_SaveAccountStatus_Call struct {
	*mock.Call
}

// SaveAccountStatus is a helper method to define mock.On call
//   - status *coordinatorproto.SpaceStatusPayload
func (_e *MockObjectStore_Expecter) SaveAccountStatus(status interface{}) *MockObjectStore_SaveAccountStatus_Call {
	return &MockObjectStore_SaveAccountStatus_Call{Call: _e.mock.On("SaveAccountStatus", status)}
}

func (_c *MockObjectStore_SaveAccountStatus_Call) Run(run func(status *coordinatorproto.SpaceStatusPayload)) *MockObjectStore_SaveAccountStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*coordinatorproto.SpaceStatusPayload))
	})
	return _c
}

func (_c *MockObjectStore_SaveAccountStatus_Call) Return(err error) *MockObjectStore_SaveAccountStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockObjectStore_SaveAccountStatus_Call) RunAndReturn(run func(*coordinatorproto.SpaceStatusPayload) error) *MockObjectStore_SaveAccountStatus_Call {
	_c.Call.Return(run)
	return _c
}

// SaveChecksums provides a mock function with given fields: spaceID, checksums
func (_m *MockObjectStore) SaveChecksums(spaceID string, checksums *model.ObjectStoreChecksums) error {
	ret := _m.Called(spaceID, checksums)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *model.ObjectStoreChecksums) error); ok {
		r0 = rf(spaceID, checksums)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_SaveChecksums_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveChecksums'
type MockObjectStore_SaveChecksums_Call struct {
	*mock.Call
}

// SaveChecksums is a helper method to define mock.On call
//   - spaceID string
//   - checksums *model.ObjectStoreChecksums
func (_e *MockObjectStore_Expecter) SaveChecksums(spaceID interface{}, checksums interface{}) *MockObjectStore_SaveChecksums_Call {
	return &MockObjectStore_SaveChecksums_Call{Call: _e.mock.On("SaveChecksums", spaceID, checksums)}
}

func (_c *MockObjectStore_SaveChecksums_Call) Run(run func(spaceID string, checksums *model.ObjectStoreChecksums)) *MockObjectStore_SaveChecksums_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*model.ObjectStoreChecksums))
	})
	return _c
}

func (_c *MockObjectStore_SaveChecksums_Call) Return(err error) *MockObjectStore_SaveChecksums_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockObjectStore_SaveChecksums_Call) RunAndReturn(run func(string, *model.ObjectStoreChecksums) error) *MockObjectStore_SaveChecksums_Call {
	_c.Call.Return(run)
	return _c
}

// SaveLastIndexedHeadsHash provides a mock function with given fields: id, headsHash
func (_m *MockObjectStore) SaveLastIndexedHeadsHash(id string, headsHash string) error {
	ret := _m.Called(id, headsHash)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, headsHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_SaveLastIndexedHeadsHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveLastIndexedHeadsHash'
type MockObjectStore_SaveLastIndexedHeadsHash_Call struct {
	*mock.Call
}

// SaveLastIndexedHeadsHash is a helper method to define mock.On call
//   - id string
//   - headsHash string
func (_e *MockObjectStore_Expecter) SaveLastIndexedHeadsHash(id interface{}, headsHash interface{}) *MockObjectStore_SaveLastIndexedHeadsHash_Call {
	return &MockObjectStore_SaveLastIndexedHeadsHash_Call{Call: _e.mock.On("SaveLastIndexedHeadsHash", id, headsHash)}
}

func (_c *MockObjectStore_SaveLastIndexedHeadsHash_Call) Run(run func(id string, headsHash string)) *MockObjectStore_SaveLastIndexedHeadsHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockObjectStore_SaveLastIndexedHeadsHash_Call) Return(err error) *MockObjectStore_SaveLastIndexedHeadsHash_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockObjectStore_SaveLastIndexedHeadsHash_Call) RunAndReturn(run func(string, string) error) *MockObjectStore_SaveLastIndexedHeadsHash_Call {
	_c.Call.Return(run)
	return _c
}

// SaveVirtualSpace provides a mock function with given fields: id
func (_m *MockObjectStore) SaveVirtualSpace(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_SaveVirtualSpace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveVirtualSpace'
type MockObjectStore_SaveVirtualSpace_Call struct {
	*mock.Call
}

// SaveVirtualSpace is a helper method to define mock.On call
//   - id string
func (_e *MockObjectStore_Expecter) SaveVirtualSpace(id interface{}) *MockObjectStore_SaveVirtualSpace_Call {
	return &MockObjectStore_SaveVirtualSpace_Call{Call: _e.mock.On("SaveVirtualSpace", id)}
}

func (_c *MockObjectStore_SaveVirtualSpace_Call) Run(run func(id string)) *MockObjectStore_SaveVirtualSpace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectStore_SaveVirtualSpace_Call) Return(_a0 error) *MockObjectStore_SaveVirtualSpace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_SaveVirtualSpace_Call) RunAndReturn(run func(string) error) *MockObjectStore_SaveVirtualSpace_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeBacklinksUpdate provides a mock function with given fields:
func (_m *MockObjectStore) SubscribeBacklinksUpdate() <-chan objectstore.BacklinksUpdateInfo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SubscribeBacklinksUpdate")
	}

	var r0 <-chan objectstore.BacklinksUpdateInfo
	if rf, ok := ret.Get(0).(func() <-chan objectstore.BacklinksUpdateInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan objectstore.BacklinksUpdateInfo)
		}
	}

	return r0
}

// MockObjectStore_SubscribeBacklinksUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeBacklinksUpdate'
type MockObjectStore_SubscribeBacklinksUpdate_Call struct {
	*mock.Call
}

// SubscribeBacklinksUpdate is a helper method to define mock.On call
func (_e *MockObjectStore_Expecter) SubscribeBacklinksUpdate() *MockObjectStore_SubscribeBacklinksUpdate_Call {
	return &MockObjectStore_SubscribeBacklinksUpdate_Call{Call: _e.mock.On("SubscribeBacklinksUpdate")}
}

func (_c *MockObjectStore_SubscribeBacklinksUpdate_Call) Run(run func()) *MockObjectStore_SubscribeBacklinksUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObjectStore_SubscribeBacklinksUpdate_Call) Return(_a0 <-chan objectstore.BacklinksUpdateInfo) *MockObjectStore_SubscribeBacklinksUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_SubscribeBacklinksUpdate_Call) RunAndReturn(run func() <-chan objectstore.BacklinksUpdateInfo) *MockObjectStore_SubscribeBacklinksUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeForAll provides a mock function with given fields: callback
func (_m *MockObjectStore) SubscribeForAll(callback func(database.Record)) {
	_m.Called(callback)
}

// MockObjectStore_SubscribeForAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeForAll'
type MockObjectStore_SubscribeForAll_Call struct {
	*mock.Call
}

// SubscribeForAll is a helper method to define mock.On call
//   - callback func(database.Record)
func (_e *MockObjectStore_Expecter) SubscribeForAll(callback interface{}) *MockObjectStore_SubscribeForAll_Call {
	return &MockObjectStore_SubscribeForAll_Call{Call: _e.mock.On("SubscribeForAll", callback)}
}

func (_c *MockObjectStore_SubscribeForAll_Call) Run(run func(callback func(database.Record))) *MockObjectStore_SubscribeForAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(database.Record)))
	})
	return _c
}

func (_c *MockObjectStore_SubscribeForAll_Call) Return() *MockObjectStore_SubscribeForAll_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockObjectStore_SubscribeForAll_Call) RunAndReturn(run func(func(database.Record))) *MockObjectStore_SubscribeForAll_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateObjectDetails provides a mock function with given fields: id, details
func (_m *MockObjectStore) UpdateObjectDetails(id string, details *types.Struct) error {
	ret := _m.Called(id, details)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *types.Struct) error); ok {
		r0 = rf(id, details)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_UpdateObjectDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateObjectDetails'
type MockObjectStore_UpdateObjectDetails_Call struct {
	*mock.Call
}

// UpdateObjectDetails is a helper method to define mock.On call
//   - id string
//   - details *types.Struct
func (_e *MockObjectStore_Expecter) UpdateObjectDetails(id interface{}, details interface{}) *MockObjectStore_UpdateObjectDetails_Call {
	return &MockObjectStore_UpdateObjectDetails_Call{Call: _e.mock.On("UpdateObjectDetails", id, details)}
}

func (_c *MockObjectStore_UpdateObjectDetails_Call) Run(run func(id string, details *types.Struct)) *MockObjectStore_UpdateObjectDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*types.Struct))
	})
	return _c
}

func (_c *MockObjectStore_UpdateObjectDetails_Call) Return(_a0 error) *MockObjectStore_UpdateObjectDetails_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_UpdateObjectDetails_Call) RunAndReturn(run func(string, *types.Struct) error) *MockObjectStore_UpdateObjectDetails_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateObjectLinks provides a mock function with given fields: id, links
func (_m *MockObjectStore) UpdateObjectLinks(id string, links []string) error {
	ret := _m.Called(id, links)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = rf(id, links)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_UpdateObjectLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateObjectLinks'
type MockObjectStore_UpdateObjectLinks_Call struct {
	*mock.Call
}

// UpdateObjectLinks is a helper method to define mock.On call
//   - id string
//   - links []string
func (_e *MockObjectStore_Expecter) UpdateObjectLinks(id interface{}, links interface{}) *MockObjectStore_UpdateObjectLinks_Call {
	return &MockObjectStore_UpdateObjectLinks_Call{Call: _e.mock.On("UpdateObjectLinks", id, links)}
}

func (_c *MockObjectStore_UpdateObjectLinks_Call) Run(run func(id string, links []string)) *MockObjectStore_UpdateObjectLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string))
	})
	return _c
}

func (_c *MockObjectStore_UpdateObjectLinks_Call) Return(_a0 error) *MockObjectStore_UpdateObjectLinks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_UpdateObjectLinks_Call) RunAndReturn(run func(string, []string) error) *MockObjectStore_UpdateObjectLinks_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateObjectSnippet provides a mock function with given fields: id, snippet
func (_m *MockObjectStore) UpdateObjectSnippet(id string, snippet string) error {
	ret := _m.Called(id, snippet)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, snippet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_UpdateObjectSnippet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateObjectSnippet'
type MockObjectStore_UpdateObjectSnippet_Call struct {
	*mock.Call
}

// UpdateObjectSnippet is a helper method to define mock.On call
//   - id string
//   - snippet string
func (_e *MockObjectStore_Expecter) UpdateObjectSnippet(id interface{}, snippet interface{}) *MockObjectStore_UpdateObjectSnippet_Call {
	return &MockObjectStore_UpdateObjectSnippet_Call{Call: _e.mock.On("UpdateObjectSnippet", id, snippet)}
}

func (_c *MockObjectStore_UpdateObjectSnippet_Call) Run(run func(id string, snippet string)) *MockObjectStore_UpdateObjectSnippet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockObjectStore_UpdateObjectSnippet_Call) Return(_a0 error) *MockObjectStore_UpdateObjectSnippet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_UpdateObjectSnippet_Call) RunAndReturn(run func(string, string) error) *MockObjectStore_UpdateObjectSnippet_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePendingLocalDetails provides a mock function with given fields: id, proc
func (_m *MockObjectStore) UpdatePendingLocalDetails(id string, proc func(*types.Struct) (*types.Struct, error)) error {
	ret := _m.Called(id, proc)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(*types.Struct) (*types.Struct, error)) error); ok {
		r0 = rf(id, proc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStore_UpdatePendingLocalDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePendingLocalDetails'
type MockObjectStore_UpdatePendingLocalDetails_Call struct {
	*mock.Call
}

// UpdatePendingLocalDetails is a helper method to define mock.On call
//   - id string
//   - proc func(*types.Struct)(*types.Struct , error)
func (_e *MockObjectStore_Expecter) UpdatePendingLocalDetails(id interface{}, proc interface{}) *MockObjectStore_UpdatePendingLocalDetails_Call {
	return &MockObjectStore_UpdatePendingLocalDetails_Call{Call: _e.mock.On("UpdatePendingLocalDetails", id, proc)}
}

func (_c *MockObjectStore_UpdatePendingLocalDetails_Call) Run(run func(id string, proc func(*types.Struct) (*types.Struct, error))) *MockObjectStore_UpdatePendingLocalDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func(*types.Struct) (*types.Struct, error)))
	})
	return _c
}

func (_c *MockObjectStore_UpdatePendingLocalDetails_Call) Return(_a0 error) *MockObjectStore_UpdatePendingLocalDetails_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStore_UpdatePendingLocalDetails_Call) RunAndReturn(run func(string, func(*types.Struct) (*types.Struct, error)) error) *MockObjectStore_UpdatePendingLocalDetails_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockObjectStore creates a new instance of MockObjectStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockObjectStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockObjectStore {
	mock := &MockObjectStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
