// Code generated by mockery. DO NOT EDIT.

package mock_objectstore

import (
	coordinatorproto "github.com/anyproto/any-sync/coordinator/coordinatorproto"
	mock "github.com/stretchr/testify/mock"
)

// MockAccountStore is an autogenerated mock type for the AccountStore type
type MockAccountStore struct {
	mock.Mock
}

type MockAccountStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountStore) EXPECT() *MockAccountStore_Expecter {
	return &MockAccountStore_Expecter{mock: &_m.Mock}
}

// GetAccountStatus provides a mock function with given fields:
func (_m *MockAccountStore) GetAccountStatus() (*coordinatorproto.SpaceStatusPayload, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAccountStatus")
	}

	var r0 *coordinatorproto.SpaceStatusPayload
	var r1 error
	if rf, ok := ret.Get(0).(func() (*coordinatorproto.SpaceStatusPayload, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *coordinatorproto.SpaceStatusPayload); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coordinatorproto.SpaceStatusPayload)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountStore_GetAccountStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountStatus'
type MockAccountStore_GetAccountStatus_Call struct {
	*mock.Call
}

// GetAccountStatus is a helper method to define mock.On call
func (_e *MockAccountStore_Expecter) GetAccountStatus() *MockAccountStore_GetAccountStatus_Call {
	return &MockAccountStore_GetAccountStatus_Call{Call: _e.mock.On("GetAccountStatus")}
}

func (_c *MockAccountStore_GetAccountStatus_Call) Run(run func()) *MockAccountStore_GetAccountStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAccountStore_GetAccountStatus_Call) Return(status *coordinatorproto.SpaceStatusPayload, err error) *MockAccountStore_GetAccountStatus_Call {
	_c.Call.Return(status, err)
	return _c
}

func (_c *MockAccountStore_GetAccountStatus_Call) RunAndReturn(run func() (*coordinatorproto.SpaceStatusPayload, error)) *MockAccountStore_GetAccountStatus_Call {
	_c.Call.Return(run)
	return _c
}

// SaveAccountStatus provides a mock function with given fields: status
func (_m *MockAccountStore) SaveAccountStatus(status *coordinatorproto.SpaceStatusPayload) error {
	ret := _m.Called(status)

	if len(ret) == 0 {
		panic("no return value specified for SaveAccountStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*coordinatorproto.SpaceStatusPayload) error); ok {
		r0 = rf(status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountStore_SaveAccountStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveAccountStatus'
type MockAccountStore_SaveAccountStatus_Call struct {
	*mock.Call
}

// SaveAccountStatus is a helper method to define mock.On call
//   - status *coordinatorproto.SpaceStatusPayload
func (_e *MockAccountStore_Expecter) SaveAccountStatus(status interface{}) *MockAccountStore_SaveAccountStatus_Call {
	return &MockAccountStore_SaveAccountStatus_Call{Call: _e.mock.On("SaveAccountStatus", status)}
}

func (_c *MockAccountStore_SaveAccountStatus_Call) Run(run func(status *coordinatorproto.SpaceStatusPayload)) *MockAccountStore_SaveAccountStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*coordinatorproto.SpaceStatusPayload))
	})
	return _c
}

func (_c *MockAccountStore_SaveAccountStatus_Call) Return(err error) *MockAccountStore_SaveAccountStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAccountStore_SaveAccountStatus_Call) RunAndReturn(run func(*coordinatorproto.SpaceStatusPayload) error) *MockAccountStore_SaveAccountStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountStore creates a new instance of MockAccountStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountStore {
	mock := &MockAccountStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
