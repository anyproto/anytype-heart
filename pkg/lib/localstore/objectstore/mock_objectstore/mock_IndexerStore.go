// Code generated by mockery. DO NOT EDIT.

package mock_objectstore

import (
	ftsearch "github.com/anyproto/anytype-heart/pkg/lib/localstore/ftsearch"
	mock "github.com/stretchr/testify/mock"

	model "github.com/anyproto/anytype-heart/pkg/lib/pb/model"
)

// MockIndexerStore is an autogenerated mock type for the IndexerStore type
type MockIndexerStore struct {
	mock.Mock
}

type MockIndexerStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIndexerStore) EXPECT() *MockIndexerStore_Expecter {
	return &MockIndexerStore_Expecter{mock: &_m.Mock}
}

// AddToIndexQueue provides a mock function with given fields: id
func (_m *MockIndexerStore) AddToIndexQueue(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for AddToIndexQueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIndexerStore_AddToIndexQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToIndexQueue'
type MockIndexerStore_AddToIndexQueue_Call struct {
	*mock.Call
}

// AddToIndexQueue is a helper method to define mock.On call
//   - id string
func (_e *MockIndexerStore_Expecter) AddToIndexQueue(id interface{}) *MockIndexerStore_AddToIndexQueue_Call {
	return &MockIndexerStore_AddToIndexQueue_Call{Call: _e.mock.On("AddToIndexQueue", id)}
}

func (_c *MockIndexerStore_AddToIndexQueue_Call) Run(run func(id string)) *MockIndexerStore_AddToIndexQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIndexerStore_AddToIndexQueue_Call) Return(_a0 error) *MockIndexerStore_AddToIndexQueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIndexerStore_AddToIndexQueue_Call) RunAndReturn(run func(string) error) *MockIndexerStore_AddToIndexQueue_Call {
	_c.Call.Return(run)
	return _c
}

// FTSearch provides a mock function with given fields:
func (_m *MockIndexerStore) FTSearch() ftsearch.FTSearch {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FTSearch")
	}

	var r0 ftsearch.FTSearch
	if rf, ok := ret.Get(0).(func() ftsearch.FTSearch); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ftsearch.FTSearch)
		}
	}

	return r0
}

// MockIndexerStore_FTSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FTSearch'
type MockIndexerStore_FTSearch_Call struct {
	*mock.Call
}

// FTSearch is a helper method to define mock.On call
func (_e *MockIndexerStore_Expecter) FTSearch() *MockIndexerStore_FTSearch_Call {
	return &MockIndexerStore_FTSearch_Call{Call: _e.mock.On("FTSearch")}
}

func (_c *MockIndexerStore_FTSearch_Call) Run(run func()) *MockIndexerStore_FTSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIndexerStore_FTSearch_Call) Return(_a0 ftsearch.FTSearch) *MockIndexerStore_FTSearch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIndexerStore_FTSearch_Call) RunAndReturn(run func() ftsearch.FTSearch) *MockIndexerStore_FTSearch_Call {
	_c.Call.Return(run)
	return _c
}

// GetChecksums provides a mock function with given fields: spaceID
func (_m *MockIndexerStore) GetChecksums(spaceID string) (*model.ObjectStoreChecksums, error) {
	ret := _m.Called(spaceID)

	if len(ret) == 0 {
		panic("no return value specified for GetChecksums")
	}

	var r0 *model.ObjectStoreChecksums
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ObjectStoreChecksums, error)); ok {
		return rf(spaceID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ObjectStoreChecksums); ok {
		r0 = rf(spaceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ObjectStoreChecksums)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(spaceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIndexerStore_GetChecksums_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChecksums'
type MockIndexerStore_GetChecksums_Call struct {
	*mock.Call
}

// GetChecksums is a helper method to define mock.On call
//   - spaceID string
func (_e *MockIndexerStore_Expecter) GetChecksums(spaceID interface{}) *MockIndexerStore_GetChecksums_Call {
	return &MockIndexerStore_GetChecksums_Call{Call: _e.mock.On("GetChecksums", spaceID)}
}

func (_c *MockIndexerStore_GetChecksums_Call) Run(run func(spaceID string)) *MockIndexerStore_GetChecksums_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIndexerStore_GetChecksums_Call) Return(checksums *model.ObjectStoreChecksums, err error) *MockIndexerStore_GetChecksums_Call {
	_c.Call.Return(checksums, err)
	return _c
}

func (_c *MockIndexerStore_GetChecksums_Call) RunAndReturn(run func(string) (*model.ObjectStoreChecksums, error)) *MockIndexerStore_GetChecksums_Call {
	_c.Call.Return(run)
	return _c
}

// GetGlobalChecksums provides a mock function with given fields:
func (_m *MockIndexerStore) GetGlobalChecksums() (*model.ObjectStoreChecksums, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGlobalChecksums")
	}

	var r0 *model.ObjectStoreChecksums
	var r1 error
	if rf, ok := ret.Get(0).(func() (*model.ObjectStoreChecksums, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *model.ObjectStoreChecksums); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ObjectStoreChecksums)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIndexerStore_GetGlobalChecksums_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGlobalChecksums'
type MockIndexerStore_GetGlobalChecksums_Call struct {
	*mock.Call
}

// GetGlobalChecksums is a helper method to define mock.On call
func (_e *MockIndexerStore_Expecter) GetGlobalChecksums() *MockIndexerStore_GetGlobalChecksums_Call {
	return &MockIndexerStore_GetGlobalChecksums_Call{Call: _e.mock.On("GetGlobalChecksums")}
}

func (_c *MockIndexerStore_GetGlobalChecksums_Call) Run(run func()) *MockIndexerStore_GetGlobalChecksums_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIndexerStore_GetGlobalChecksums_Call) Return(checksums *model.ObjectStoreChecksums, err error) *MockIndexerStore_GetGlobalChecksums_Call {
	_c.Call.Return(checksums, err)
	return _c
}

func (_c *MockIndexerStore_GetGlobalChecksums_Call) RunAndReturn(run func() (*model.ObjectStoreChecksums, error)) *MockIndexerStore_GetGlobalChecksums_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastIndexedHeadsHash provides a mock function with given fields: id
func (_m *MockIndexerStore) GetLastIndexedHeadsHash(id string) (string, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetLastIndexedHeadsHash")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIndexerStore_GetLastIndexedHeadsHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastIndexedHeadsHash'
type MockIndexerStore_GetLastIndexedHeadsHash_Call struct {
	*mock.Call
}

// GetLastIndexedHeadsHash is a helper method to define mock.On call
//   - id string
func (_e *MockIndexerStore_Expecter) GetLastIndexedHeadsHash(id interface{}) *MockIndexerStore_GetLastIndexedHeadsHash_Call {
	return &MockIndexerStore_GetLastIndexedHeadsHash_Call{Call: _e.mock.On("GetLastIndexedHeadsHash", id)}
}

func (_c *MockIndexerStore_GetLastIndexedHeadsHash_Call) Run(run func(id string)) *MockIndexerStore_GetLastIndexedHeadsHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIndexerStore_GetLastIndexedHeadsHash_Call) Return(headsHash string, err error) *MockIndexerStore_GetLastIndexedHeadsHash_Call {
	_c.Call.Return(headsHash, err)
	return _c
}

func (_c *MockIndexerStore_GetLastIndexedHeadsHash_Call) RunAndReturn(run func(string) (string, error)) *MockIndexerStore_GetLastIndexedHeadsHash_Call {
	_c.Call.Return(run)
	return _c
}

// ListIDsFromFullTextQueue provides a mock function with given fields:
func (_m *MockIndexerStore) ListIDsFromFullTextQueue() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListIDsFromFullTextQueue")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIndexerStore_ListIDsFromFullTextQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIDsFromFullTextQueue'
type MockIndexerStore_ListIDsFromFullTextQueue_Call struct {
	*mock.Call
}

// ListIDsFromFullTextQueue is a helper method to define mock.On call
func (_e *MockIndexerStore_Expecter) ListIDsFromFullTextQueue() *MockIndexerStore_ListIDsFromFullTextQueue_Call {
	return &MockIndexerStore_ListIDsFromFullTextQueue_Call{Call: _e.mock.On("ListIDsFromFullTextQueue")}
}

func (_c *MockIndexerStore_ListIDsFromFullTextQueue_Call) Run(run func()) *MockIndexerStore_ListIDsFromFullTextQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIndexerStore_ListIDsFromFullTextQueue_Call) Return(_a0 []string, _a1 error) *MockIndexerStore_ListIDsFromFullTextQueue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIndexerStore_ListIDsFromFullTextQueue_Call) RunAndReturn(run func() ([]string, error)) *MockIndexerStore_ListIDsFromFullTextQueue_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveIDsFromFullTextQueue provides a mock function with given fields: ids
func (_m *MockIndexerStore) RemoveIDsFromFullTextQueue(ids []string) {
	_m.Called(ids)
}

// MockIndexerStore_RemoveIDsFromFullTextQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveIDsFromFullTextQueue'
type MockIndexerStore_RemoveIDsFromFullTextQueue_Call struct {
	*mock.Call
}

// RemoveIDsFromFullTextQueue is a helper method to define mock.On call
//   - ids []string
func (_e *MockIndexerStore_Expecter) RemoveIDsFromFullTextQueue(ids interface{}) *MockIndexerStore_RemoveIDsFromFullTextQueue_Call {
	return &MockIndexerStore_RemoveIDsFromFullTextQueue_Call{Call: _e.mock.On("RemoveIDsFromFullTextQueue", ids)}
}

func (_c *MockIndexerStore_RemoveIDsFromFullTextQueue_Call) Run(run func(ids []string)) *MockIndexerStore_RemoveIDsFromFullTextQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockIndexerStore_RemoveIDsFromFullTextQueue_Call) Return() *MockIndexerStore_RemoveIDsFromFullTextQueue_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIndexerStore_RemoveIDsFromFullTextQueue_Call) RunAndReturn(run func([]string)) *MockIndexerStore_RemoveIDsFromFullTextQueue_Call {
	_c.Call.Return(run)
	return _c
}

// SaveChecksums provides a mock function with given fields: spaceID, checksums
func (_m *MockIndexerStore) SaveChecksums(spaceID string, checksums *model.ObjectStoreChecksums) error {
	ret := _m.Called(spaceID, checksums)

	if len(ret) == 0 {
		panic("no return value specified for SaveChecksums")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *model.ObjectStoreChecksums) error); ok {
		r0 = rf(spaceID, checksums)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIndexerStore_SaveChecksums_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveChecksums'
type MockIndexerStore_SaveChecksums_Call struct {
	*mock.Call
}

// SaveChecksums is a helper method to define mock.On call
//   - spaceID string
//   - checksums *model.ObjectStoreChecksums
func (_e *MockIndexerStore_Expecter) SaveChecksums(spaceID interface{}, checksums interface{}) *MockIndexerStore_SaveChecksums_Call {
	return &MockIndexerStore_SaveChecksums_Call{Call: _e.mock.On("SaveChecksums", spaceID, checksums)}
}

func (_c *MockIndexerStore_SaveChecksums_Call) Run(run func(spaceID string, checksums *model.ObjectStoreChecksums)) *MockIndexerStore_SaveChecksums_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*model.ObjectStoreChecksums))
	})
	return _c
}

func (_c *MockIndexerStore_SaveChecksums_Call) Return(err error) *MockIndexerStore_SaveChecksums_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIndexerStore_SaveChecksums_Call) RunAndReturn(run func(string, *model.ObjectStoreChecksums) error) *MockIndexerStore_SaveChecksums_Call {
	_c.Call.Return(run)
	return _c
}

// SaveLastIndexedHeadsHash provides a mock function with given fields: id, headsHash
func (_m *MockIndexerStore) SaveLastIndexedHeadsHash(id string, headsHash string) error {
	ret := _m.Called(id, headsHash)

	if len(ret) == 0 {
		panic("no return value specified for SaveLastIndexedHeadsHash")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, headsHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIndexerStore_SaveLastIndexedHeadsHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveLastIndexedHeadsHash'
type MockIndexerStore_SaveLastIndexedHeadsHash_Call struct {
	*mock.Call
}

// SaveLastIndexedHeadsHash is a helper method to define mock.On call
//   - id string
//   - headsHash string
func (_e *MockIndexerStore_Expecter) SaveLastIndexedHeadsHash(id interface{}, headsHash interface{}) *MockIndexerStore_SaveLastIndexedHeadsHash_Call {
	return &MockIndexerStore_SaveLastIndexedHeadsHash_Call{Call: _e.mock.On("SaveLastIndexedHeadsHash", id, headsHash)}
}

func (_c *MockIndexerStore_SaveLastIndexedHeadsHash_Call) Run(run func(id string, headsHash string)) *MockIndexerStore_SaveLastIndexedHeadsHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockIndexerStore_SaveLastIndexedHeadsHash_Call) Return(err error) *MockIndexerStore_SaveLastIndexedHeadsHash_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIndexerStore_SaveLastIndexedHeadsHash_Call) RunAndReturn(run func(string, string) error) *MockIndexerStore_SaveLastIndexedHeadsHash_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIndexerStore creates a new instance of MockIndexerStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIndexerStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIndexerStore {
	mock := &MockIndexerStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
