/*
Code generated by pkg/lib/bundle/generator. DO NOT EDIT.
source: pkg/lib/bundle/types.json
*/
package bundle

import (
	"github.com/anyproto/anytype-heart/core/domain"
	"github.com/anyproto/anytype-heart/pkg/lib/pb/model"
)

const TypeChecksum = "c4f1cd92b533a4b5f533c01185049b8c7c170401c2f0bf09d6d888cad6a61669"
const (
	TypePrefix = "_ot"
)
const (
	TypeKeyRecipe         domain.TypeKey = "recipe"
	TypeKeyNote           domain.TypeKey = "note"
	TypeKeyContact        domain.TypeKey = "contact"
	TypeKeyBookmark       domain.TypeKey = "bookmark"
	TypeKeyDate           domain.TypeKey = "date"
	TypeKeyTask           domain.TypeKey = "task"
	TypeKeyRelation       domain.TypeKey = "relation"
	TypeKeyBook           domain.TypeKey = "book"
	TypeKeyVideo          domain.TypeKey = "video"
	TypeKeyDashboard      domain.TypeKey = "dashboard"
	TypeKeyMovie          domain.TypeKey = "movie"
	TypeKeyObjectType     domain.TypeKey = "objectType"
	TypeKeyRelationOption domain.TypeKey = "relationOption"
	TypeKeySpace          domain.TypeKey = "space"
	TypeKeySpaceView      domain.TypeKey = "spaceView"
	TypeKeyParticipant    domain.TypeKey = "participant"
	TypeKeyTemplate       domain.TypeKey = "template"
	TypeKeySet            domain.TypeKey = "set"
	TypeKeyCollection     domain.TypeKey = "collection"
	TypeKeyDiaryEntry     domain.TypeKey = "diaryEntry"
	TypeKeyPage           domain.TypeKey = "page"
	TypeKeyImage          domain.TypeKey = "image"
	TypeKeyProfile        domain.TypeKey = "profile"
	TypeKeyAudio          domain.TypeKey = "audio"
	TypeKeyGoal           domain.TypeKey = "goal"
	TypeKeyFile           domain.TypeKey = "file"
	TypeKeyProject        domain.TypeKey = "project"
	TypeKeyChat           domain.TypeKey = "chat"
	TypeKeyChatDerived    domain.TypeKey = "chatDerived"
)

var (
	types = map[domain.TypeKey]*model.ObjectType{
		TypeKeyAudio: {

			Description:            "Sound when recorded, with ability to reproduce",
			IconColor:              5,
			IconName:               "musical-notes",
			Layout:                 model.ObjectType_file,
			Name:                   "Audio",
			Readonly:               true,
			RelationLinks:          []*model.RelationLink{MustGetRelationLink(RelationKeyAddedDate), MustGetRelationLink(RelationKeyOrigin), MustGetRelationLink(RelationKeyFileExt), MustGetRelationLink(RelationKeySizeInBytes), MustGetRelationLink(RelationKeyFileMimeType), MustGetRelationLink(RelationKeyArtist), MustGetRelationLink(RelationKeyAudioAlbum), MustGetRelationLink(RelationKeyAudioGenre), MustGetRelationLink(RelationKeyReleasedYear), MustGetRelationLink(RelationKeyAudioAlbumTrackNumber), MustGetRelationLink(RelationKeyAudioLyrics)},
			RestrictObjectCreation: true,
			Revision:               3,
			Types:                  []model.SmartBlockType{model.SmartBlockType_File},
			Url:                    TypePrefix + "audio",
		},
		TypeKeyBook: {

			Description:   "A book is a medium for recording information in the form of writing or images, typically composed of many pages bound together and protected by a cover",
			IconColor:     3,
			IconName:      "book",
			Layout:        model.ObjectType_basic,
			Name:          "Book",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag), MustGetRelationLink(RelationKeyAuthor), MustGetRelationLink(RelationKeyStarred), MustGetRelationLink(RelationKeyStatus), MustGetRelationLink(RelationKeyUrl)},
			Revision:      1,
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "book",
		},
		TypeKeyBookmark: {

			Description:   "URL that is stored as Object and may be categorised and linked with objects",
			IconColor:     4,
			IconName:      "bookmark",
			Layout:        model.ObjectType_bookmark,
			Name:          "Bookmark",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag), MustGetRelationLink(RelationKeyPicture), MustGetRelationLink(RelationKeySource)},
			Revision:      1,
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "bookmark",
		},
		TypeKeyChat: {

			Description:   "A chat [deprecated]",
			Hidden:        true,
			IconColor:     7,
			IconName:      "chatbubble",
			Layout:        model.ObjectType_chat,
			Name:          "Chat [deprecated]",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag)},
			Revision:      1,
			Types:         []model.SmartBlockType{model.SmartBlockType_ChatObject},
			Url:           TypePrefix + "chat",
		},
		TypeKeyChatDerived: {

			Description:   "A chat derived object",
			Hidden:        true,
			IconColor:     7,
			IconName:      "chatbubble",
			Layout:        model.ObjectType_chatDerived,
			Name:          "Chat Derived Object",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag)},
			Revision:      2,
			Types:         []model.SmartBlockType{model.SmartBlockType_ChatDerivedObject},
			Url:           TypePrefix + "chatDerived",
		},
		TypeKeyCollection: {

			Description:   "Collect objects in one place, use different views to organize them",
			IconColor:     7,
			IconName:      "layers",
			Layout:        model.ObjectType_collection,
			Name:          "Collection",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag)},
			Revision:      1,
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "collection",
		},
		TypeKeyContact: {

			Description:   "Information to make action of communicating or meeting with Human or Company",
			IconColor:     8,
			IconName:      "id-card",
			Layout:        model.ObjectType_profile,
			Name:          "Contact",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag), MustGetRelationLink(RelationKeyCompany), MustGetRelationLink(RelationKeyEmail), MustGetRelationLink(RelationKeyPhone)},
			Revision:      1,
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "contact",
		},
		TypeKeyDashboard: {

			Description:            "Internal home dashboard with favourite objects",
			Hidden:                 true,
			IconColor:              0,
			Layout:                 model.ObjectType_dashboard,
			Name:                   "Dashboard",
			Readonly:               true,
			RestrictObjectCreation: true,
			Types:                  []model.SmartBlockType{model.SmartBlockType_Home},
			Url:                    TypePrefix + "dashboard",
		},
		TypeKeyDate: {

			Description:   "Gregorian calendar date",
			Hidden:        true,
			IconColor:     9,
			IconName:      "calendar",
			Layout:        model.ObjectType_date,
			Name:          "Date",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag)},
			Types:         []model.SmartBlockType{model.SmartBlockType_Date},
			Url:           TypePrefix + "date",
		},
		TypeKeyDiaryEntry: {

			Description:   "Record of events and experiences",
			IconColor:     2,
			IconName:      "reader",
			Layout:        model.ObjectType_basic,
			Name:          "Diary Entry",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag), MustGetRelationLink(RelationKeyMood)},
			Revision:      1,
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "diaryEntry",
		},
		TypeKeyFile: {

			Description:            "Computer resource for recording data in a computer storage device",
			IconColor:              7,
			IconName:               "attach",
			Layout:                 model.ObjectType_file,
			Name:                   "File",
			Readonly:               true,
			RelationLinks:          []*model.RelationLink{MustGetRelationLink(RelationKeyAddedDate), MustGetRelationLink(RelationKeyOrigin), MustGetRelationLink(RelationKeyFileExt), MustGetRelationLink(RelationKeySizeInBytes), MustGetRelationLink(RelationKeyFileMimeType)},
			RestrictObjectCreation: true,
			Revision:               3,
			Types:                  []model.SmartBlockType{model.SmartBlockType_File},
			Url:                    TypePrefix + "file",
		},
		TypeKeyGoal: {

			Description:   "The object of a person's ambition or effort; an aim or desired result",
			IconColor:     4,
			IconName:      "flag",
			Layout:        model.ObjectType_todo,
			Name:          "Goal",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag), MustGetRelationLink(RelationKeyDueDate), MustGetRelationLink(RelationKeyProgress), MustGetRelationLink(RelationKeyStatus), MustGetRelationLink(RelationKeyTasks)},
			Revision:      1,
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "goal",
		},
		TypeKeyImage: {

			Description:            "A representation of the external form of a person or thing in art",
			IconColor:              10,
			IconName:               "image",
			Layout:                 model.ObjectType_image,
			Name:                   "Image",
			Readonly:               true,
			RelationLinks:          []*model.RelationLink{MustGetRelationLink(RelationKeyAddedDate), MustGetRelationLink(RelationKeyOrigin), MustGetRelationLink(RelationKeyFileExt), MustGetRelationLink(RelationKeySizeInBytes), MustGetRelationLink(RelationKeyHeightInPixels), MustGetRelationLink(RelationKeyWidthInPixels), MustGetRelationLink(RelationKeyFileMimeType), MustGetRelationLink(RelationKeyCamera), MustGetRelationLink(RelationKeyCameraIso), MustGetRelationLink(RelationKeyAperture), MustGetRelationLink(RelationKeyExposure), MustGetRelationLink(RelationKeyFocalRatio)},
			RestrictObjectCreation: true,
			Revision:               3,
			Types:                  []model.SmartBlockType{model.SmartBlockType_File},
			Url:                    TypePrefix + "image",
		},
		TypeKeyMovie: {

			Description:   "Motion picture or Moving picture, is a work of visual art used to simulate experiences that communicate ideas, stories, perceptions, feelings, beauty, or atmosphere through the use of moving images",
			IconColor:     5,
			IconName:      "film",
			Layout:        model.ObjectType_basic,
			Name:          "Movie",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag), MustGetRelationLink(RelationKeyGenre), MustGetRelationLink(RelationKeyStatus)},
			Revision:      1,
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "movie",
		},
		TypeKeyNote: {

			Description:   "Blank canvas with no Title. A brief record of points written down as an aid to memory",
			IconColor:     2,
			IconName:      "create",
			Layout:        model.ObjectType_note,
			Name:          "Note",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag)},
			Revision:      1,
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "note",
		},
		TypeKeyObjectType: {

			Description:   "Object that contains a definition of some object type",
			IconColor:     9,
			IconName:      "extension-puzzle",
			Layout:        model.ObjectType_objectType,
			Name:          "Type",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyRecommendedRelations), MustGetRelationLink(RelationKeyRecommendedLayout)},
			Revision:      1,
			Types:         []model.SmartBlockType{model.SmartBlockType_SubObject, model.SmartBlockType_BundledObjectType},
			Url:           TypePrefix + "objectType",
		},
		TypeKeyPage: {

			Description:   "Blank canvas with Title",
			IconColor:     8,
			IconName:      "document",
			Layout:        model.ObjectType_basic,
			Name:          "Page",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag)},
			Revision:      1,
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "page",
		},
		TypeKeyParticipant: {

			Description:            "Anytype identity as a space participant",
			IconColor:              3,
			IconName:               "person",
			Layout:                 model.ObjectType_participant,
			Name:                   "Space member",
			Readonly:               true,
			RelationLinks:          []*model.RelationLink{MustGetRelationLink(RelationKeyTag)},
			RestrictObjectCreation: true,
			Revision:               2,
			Types:                  []model.SmartBlockType{model.SmartBlockType_Participant},
			Url:                    TypePrefix + "participant",
		},
		TypeKeyProfile: {

			Description:   "Homo sapiens",
			IconColor:     3,
			IconName:      "man",
			Layout:        model.ObjectType_profile,
			Name:          "Human",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag)},
			Revision:      1,
			Types:         []model.SmartBlockType{model.SmartBlockType_Page, model.SmartBlockType_ProfilePage},
			Url:           TypePrefix + "profile",
		},
		TypeKeyProject: {

			Description:   "An individual or collaborative enterprise that is carefully planned to achieve a particular aim",
			IconColor:     3,
			IconName:      "hammer",
			Layout:        model.ObjectType_basic,
			Name:          "Project",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag), MustGetRelationLink(RelationKeyTasks)},
			Revision:      1,
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "project",
		},
		TypeKeyRecipe: {

			Description:   "A recipe is a set of instructions that describes how to prepare or make something, especially a dish of prepared food",
			IconColor:     4,
			IconName:      "pizza",
			Layout:        model.ObjectType_basic,
			Name:          "Recipe",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag), MustGetRelationLink(RelationKeyIngredients), MustGetRelationLink(RelationKeyTime)},
			Revision:      1,
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "recipe",
		},
		TypeKeyRelation: {

			Description:   "Meaningful connection between objects",
			Hidden:        true,
			IconColor:     7,
			IconName:      "share-social",
			Layout:        model.ObjectType_relation,
			Name:          "Relation",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyRelationFormat), MustGetRelationLink(RelationKeyRelationMaxCount), MustGetRelationLink(RelationKeyRelationDefaultValue), MustGetRelationLink(RelationKeyRelationFormatObjectTypes)},
			Revision:      1,
			Types:         []model.SmartBlockType{model.SmartBlockType_SubObject, model.SmartBlockType_BundledRelation},
			Url:           TypePrefix + "relation",
		},
		TypeKeyRelationOption: {

			Description: "Object that contains a relation option",
			Hidden:      true,
			IconColor:   0,
			Layout:      model.ObjectType_relationOption,
			Name:        "Relation option",
			Readonly:    true,
			Types:       []model.SmartBlockType{model.SmartBlockType_SubObject},
			Url:         TypePrefix + "relationOption",
		},
		TypeKeySet: {

			Description:   "Query all objects in your space based on types and relations",
			IconColor:     6,
			IconName:      "search",
			Layout:        model.ObjectType_set,
			Name:          "Set",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag), MustGetRelationLink(RelationKeySetOf)},
			Revision:      1,
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "set",
		},
		TypeKeySpace: {

			Description:            "Workspace",
			Hidden:                 true,
			IconColor:              10,
			IconName:               "folder",
			Layout:                 model.ObjectType_space,
			Name:                   "Space",
			Readonly:               true,
			RelationLinks:          []*model.RelationLink{MustGetRelationLink(RelationKeyTag)},
			RestrictObjectCreation: true,
			Revision:               1,
			Types:                  []model.SmartBlockType{model.SmartBlockType_Workspace},
			Url:                    TypePrefix + "space",
		},
		TypeKeySpaceView: {

			Description:            "Space",
			Hidden:                 true,
			IconColor:              10,
			IconName:               "folder",
			Layout:                 model.ObjectType_spaceView,
			Name:                   "Space",
			Readonly:               true,
			RelationLinks:          []*model.RelationLink{MustGetRelationLink(RelationKeyTag)},
			RestrictObjectCreation: true,
			Types:                  []model.SmartBlockType{model.SmartBlockType_SpaceView},
			Url:                    TypePrefix + "spaceView",
		},
		TypeKeyTask: {

			Description:   "A piece of work to be done or undertaken",
			IconColor:     10,
			IconName:      "checkbox",
			Layout:        model.ObjectType_todo,
			Name:          "Task",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag), MustGetRelationLink(RelationKeyAssignee), MustGetRelationLink(RelationKeyDone), MustGetRelationLink(RelationKeyDueDate), MustGetRelationLink(RelationKeyLinkedProjects), MustGetRelationLink(RelationKeyPriority), MustGetRelationLink(RelationKeyStatus), MustGetRelationLink(RelationKeyTasks)},
			Revision:      1,
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "task",
		},
		TypeKeyTemplate: {

			Description:   "Sample object that has already some details in place and used to create objects from",
			IconColor:     8,
			IconName:      "copy",
			Layout:        model.ObjectType_basic,
			Name:          "Template",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTargetObjectType), MustGetRelationLink(RelationKeyTemplateIsBundled)},
			Revision:      2,
			Types:         []model.SmartBlockType{model.SmartBlockType_Template},
			Url:           TypePrefix + "template",
		},
		TypeKeyVideo: {

			Description:            "The recording of moving visual images",
			IconColor:              6,
			IconName:               "videocam",
			Layout:                 model.ObjectType_file,
			Name:                   "Video",
			Readonly:               true,
			RelationLinks:          []*model.RelationLink{MustGetRelationLink(RelationKeyAddedDate), MustGetRelationLink(RelationKeyOrigin), MustGetRelationLink(RelationKeyFileExt), MustGetRelationLink(RelationKeySizeInBytes), MustGetRelationLink(RelationKeyHeightInPixels), MustGetRelationLink(RelationKeyWidthInPixels), MustGetRelationLink(RelationKeyFileMimeType), MustGetRelationLink(RelationKeyCamera), MustGetRelationLink(RelationKeyCameraIso), MustGetRelationLink(RelationKeyAperture), MustGetRelationLink(RelationKeyExposure)},
			RestrictObjectCreation: true,
			Revision:               3,
			Types:                  []model.SmartBlockType{model.SmartBlockType_File},
			Url:                    TypePrefix + "video",
		},
	}
)
