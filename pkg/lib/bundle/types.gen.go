/*
Code generated by pkg/lib/bundle/generator. DO NOT EDIT.
source: pkg/lib/bundle/types.json
*/
package bundle

import (
	"github.com/anyproto/anytype-heart/core/domain"
	"github.com/anyproto/anytype-heart/pkg/lib/pb/model"
)

const TypeChecksum = "8028c5cd83c93e95f8c9797c0c46a3a71e0f57e3540e0b5f156eb62bbc155e64"
const (
	TypePrefix = "_ot"
)
const (
	TypeKeyRecipe         domain.TypeKey = "recipe"
	TypeKeyNote           domain.TypeKey = "note"
	TypeKeyContact        domain.TypeKey = "contact"
	TypeKeyBookmark       domain.TypeKey = "bookmark"
	TypeKeyWeeklyPlan     domain.TypeKey = "weeklyPlan"
	TypeKeyDate           domain.TypeKey = "date"
	TypeKeyIdea           domain.TypeKey = "idea"
	TypeKeyTask           domain.TypeKey = "task"
	TypeKeyRelation       domain.TypeKey = "relation"
	TypeKeyBook           domain.TypeKey = "book"
	TypeKeyVideo          domain.TypeKey = "video"
	TypeKeyDashboard      domain.TypeKey = "dashboard"
	TypeKeyDailyPlan      domain.TypeKey = "dailyPlan"
	TypeKeyMovie          domain.TypeKey = "movie"
	TypeKeyObjectType     domain.TypeKey = "objectType"
	TypeKeyRelationOption domain.TypeKey = "relationOption"
	TypeKeySpace          domain.TypeKey = "space"
	TypeKeyTemplate       domain.TypeKey = "template"
	TypeKeySet            domain.TypeKey = "set"
	TypeKeyCollection     domain.TypeKey = "collection"
	TypeKeyClassNote      domain.TypeKey = "classNote"
	TypeKeyDiaryEntry     domain.TypeKey = "diaryEntry"
	TypeKeyPage           domain.TypeKey = "page"
	TypeKeyImage          domain.TypeKey = "image"
	TypeKeyBug            domain.TypeKey = "bug"
	TypeKeyProfile        domain.TypeKey = "profile"
	TypeKeyAudio          domain.TypeKey = "audio"
	TypeKeyGoal           domain.TypeKey = "goal"
	TypeKeyFeature        domain.TypeKey = "feature"
	TypeKeyDocument       domain.TypeKey = "document"
	TypeKeyFile           domain.TypeKey = "file"
	TypeKeyProject        domain.TypeKey = "project"
)

var (
	types = map[domain.TypeKey]*model.ObjectType{
		TypeKeyAudio: {

			Description:   "Auto-generated object from .wav, .mp3, .ogg files added to Anytype. Sound when recorded, with ability to reproduce",
			IconEmoji:     "üéµ",
			Layout:        model.ObjectType_file,
			Name:          "Audio",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyArtist), MustGetRelationLink(RelationKeyAudioAlbum), MustGetRelationLink(RelationKeyAudioAlbumTrackNumber), MustGetRelationLink(RelationKeyAudioGenre), MustGetRelationLink(RelationKeyReleasedYear), MustGetRelationLink(RelationKeyThumbnailImage), MustGetRelationLink(RelationKeyComposer), MustGetRelationLink(RelationKeySizeInBytes), MustGetRelationLink(RelationKeyFileMimeType), MustGetRelationLink(RelationKeyAddedDate), MustGetRelationLink(RelationKeyFileExt), MustGetRelationLink(RelationKeyAudioArtist), MustGetRelationLink(RelationKeyAudioLyrics)},
			Types:         []model.SmartBlockType{model.SmartBlockType_File},
			Url:           TypePrefix + "audio",
		},
		TypeKeyBook: {

			Description:   "A book is a medium for recording information in the form of writing or images, typically composed of many pages bound together and protected by a cover",
			IconEmoji:     "üìò",
			Layout:        model.ObjectType_basic,
			Name:          "Book",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag), MustGetRelationLink(RelationKeyAuthor), MustGetRelationLink(RelationKeyCategory), MustGetRelationLink(RelationKeyRating), MustGetRelationLink(RelationKeyStatus), MustGetRelationLink(RelationKeyStarred), MustGetRelationLink(RelationKeyUrl)},
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "book",
		},
		TypeKeyBookmark: {

			Description:   "URL that is stored as Object and may be categorised and linked with objects",
			IconEmoji:     "üîñ",
			Layout:        model.ObjectType_bookmark,
			Name:          "Bookmark",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag), MustGetRelationLink(RelationKeySource), MustGetRelationLink(RelationKeyPicture)},
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "bookmark",
		},
		TypeKeyBug: {

			Description:   "An error, fault or flaw in any computer program or a hardware system. A bug produces unexpected results or causes a system to behave unexpectedly",
			IconEmoji:     "üêû",
			Layout:        model.ObjectType_todo,
			Name:          "Bug (Software)",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag), MustGetRelationLink(RelationKeyHowToReproduce), MustGetRelationLink(RelationKeyResult), MustGetRelationLink(RelationKeyAdditional), MustGetRelationLink(RelationKeyAttachments), MustGetRelationLink(RelationKeyAssignee), MustGetRelationLink(RelationKeyDueDate), MustGetRelationLink(RelationKeyPriority)},
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "bug",
		},
		TypeKeyClassNote: {

			Description:   "Note for recording lectures or seminars",
			IconEmoji:     "üë®üèª\u200düè´",
			Layout:        model.ObjectType_basic,
			Name:          "Class Note",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag), MustGetRelationLink(RelationKeyClass), MustGetRelationLink(RelationKeyClassType), MustGetRelationLink(RelationKeyRecords), MustGetRelationLink(RelationKeyQuestions), MustGetRelationLink(RelationKeyMaterials), MustGetRelationLink(RelationKeyTasks), MustGetRelationLink(RelationKeyReflection)},
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "classNote",
		},
		TypeKeyCollection: {

			Description:   "Collect objects in one place, use different views to organize them",
			IconEmoji:     "üóÇÔ∏è",
			Layout:        model.ObjectType_collection,
			Name:          "Collection",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag)},
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "collection",
		},
		TypeKeyContact: {

			Description:   "Information to make action of communicating or meeting with Human or Company",
			IconEmoji:     "üìá",
			Layout:        model.ObjectType_profile,
			Name:          "Contact",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag), MustGetRelationLink(RelationKeyPhone), MustGetRelationLink(RelationKeyEmail), MustGetRelationLink(RelationKeyDateOfBirth), MustGetRelationLink(RelationKeyPlaceOfBirth), MustGetRelationLink(RelationKeyCompany), MustGetRelationLink(RelationKeySocialProfile), MustGetRelationLink(RelationKeyJob), MustGetRelationLink(RelationKeyLinkedContacts), MustGetRelationLink(RelationKeyOccupation), MustGetRelationLink(RelationKeyInstagram), MustGetRelationLink(RelationKeyGender), MustGetRelationLink(RelationKeyFacebook)},
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "contact",
		},
		TypeKeyDailyPlan: {

			Description:   "A detailed proposal for doing or achieving something for the day\n",
			IconEmoji:     "üìÜ",
			Layout:        model.ObjectType_todo,
			Name:          "Daily Plan",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag), MustGetRelationLink(RelationKeyTasks), MustGetRelationLink(RelationKeyEvents)},
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "dailyPlan",
		},
		TypeKeyDashboard: {

			Description: "Internal home dashboard with favourite objects",
			Hidden:      true,
			Layout:      model.ObjectType_dashboard,
			Name:        "Dashboard",
			Readonly:    true,
			Types:       []model.SmartBlockType{model.SmartBlockType_Home},
			Url:         TypePrefix + "dashboard",
		},
		TypeKeyDate: {

			Description:   "Gregorian calendar date",
			Hidden:        true,
			IconEmoji:     "üìÖ",
			Layout:        model.ObjectType_basic,
			Name:          "Date",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag)},
			Types:         []model.SmartBlockType{model.SmartBlockType_Date},
			Url:           TypePrefix + "date",
		},
		TypeKeyDiaryEntry: {

			Description:   "Record of events and experiences",
			IconEmoji:     "‚ú®",
			Layout:        model.ObjectType_basic,
			Name:          "Diary Entry",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag), MustGetRelationLink(RelationKeyMood)},
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "diaryEntry",
		},
		TypeKeyDocument: {

			Description:   "A piece of matter that provides information or evidence or that serves as an official record",
			IconEmoji:     "üìÉ",
			Layout:        model.ObjectType_basic,
			Name:          "Document",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag)},
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "document",
		},
		TypeKeyFeature: {

			Description:   "A distinguishing characteristic of a software item (e.g., performance, portability, or functionality)",
			IconEmoji:     "ü™Å",
			Layout:        model.ObjectType_todo,
			Name:          "Feature",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag), MustGetRelationLink(RelationKeyHypothesisAssumptions), MustGetRelationLink(RelationKeyProblem), MustGetRelationLink(RelationKeyUserStories), MustGetRelationLink(RelationKeyLogic), MustGetRelationLink(RelationKeyMeasureOfSuccess), MustGetRelationLink(RelationKeyAttachments), MustGetRelationLink(RelationKeyAssignee), MustGetRelationLink(RelationKeyDueDate), MustGetRelationLink(RelationKeyPriority)},
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "feature",
		},
		TypeKeyFile: {

			Description:   "Auto-generated object from files added to Anytype. Computer resource for recording data in a computer storage device",
			IconEmoji:     "üìé",
			Layout:        model.ObjectType_file,
			Name:          "File",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyFileMimeType), MustGetRelationLink(RelationKeySizeInBytes), MustGetRelationLink(RelationKeyAddedDate), MustGetRelationLink(RelationKeyFileExt)},
			Types:         []model.SmartBlockType{model.SmartBlockType_File},
			Url:           TypePrefix + "file",
		},
		TypeKeyGoal: {

			Description:   "The object of a person's ambition or effort; an aim or desired result",
			IconEmoji:     "üéØ",
			Layout:        model.ObjectType_todo,
			Name:          "Goal",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag), MustGetRelationLink(RelationKeyProgress), MustGetRelationLink(RelationKeyStatus), MustGetRelationLink(RelationKeyDueDate), MustGetRelationLink(RelationKeyTasks)},
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "goal",
		},
		TypeKeyIdea: {

			Description:   "A thought or suggestion as to a possible course of action",
			IconEmoji:     "üí°",
			Layout:        model.ObjectType_basic,
			Name:          "Idea",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag), MustGetRelationLink(RelationKeyProblem), MustGetRelationLink(RelationKeySolution), MustGetRelationLink(RelationKeyAlternative)},
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "idea",
		},
		TypeKeyImage: {

			Description:   "Auto-generated object from .jpg & .png files added to Anytype. A representation of the external form of a person or thing in art",
			IconEmoji:     "üèû",
			Layout:        model.ObjectType_image,
			Name:          "Image",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyFileMimeType), MustGetRelationLink(RelationKeyWidthInPixels), MustGetRelationLink(RelationKeyCamera), MustGetRelationLink(RelationKeyHeightInPixels), MustGetRelationLink(RelationKeySizeInBytes), MustGetRelationLink(RelationKeyCameraIso), MustGetRelationLink(RelationKeyAperture), MustGetRelationLink(RelationKeyExposure), MustGetRelationLink(RelationKeyAddedDate), MustGetRelationLink(RelationKeyFocalRatio), MustGetRelationLink(RelationKeyFileExt)},
			Types:         []model.SmartBlockType{model.SmartBlockType_File},
			Url:           TypePrefix + "image",
		},
		TypeKeyMovie: {

			Description:   "Motion picture or Moving picture, is a work of visual art used to simulate experiences that communicate ideas, stories, perceptions, feelings, beauty, or atmosphere through the use of moving images",
			IconEmoji:     "üçø",
			Layout:        model.ObjectType_basic,
			Name:          "Movie",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag), MustGetRelationLink(RelationKeyDirector), MustGetRelationLink(RelationKeyStars), MustGetRelationLink(RelationKeyGenre), MustGetRelationLink(RelationKeyTrailer), MustGetRelationLink(RelationKeyRating), MustGetRelationLink(RelationKeyImdbRating), MustGetRelationLink(RelationKeyRottenTomatoesRating), MustGetRelationLink(RelationKeyStatus)},
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "movie",
		},
		TypeKeyNote: {

			Description:   "Blank canvas with no Title. A brief record of points written down as an aid to memory",
			IconEmoji:     "üìù",
			Layout:        model.ObjectType_note,
			Name:          "Note",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag)},
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "note",
		},
		TypeKeyObjectType: {

			Description:   "Object that contains a definition of some object type",
			IconEmoji:     "ü•ö",
			Layout:        model.ObjectType_objectType,
			Name:          "Type",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyRecommendedRelations), MustGetRelationLink(RelationKeyRecommendedLayout)},
			Types:         []model.SmartBlockType{model.SmartBlockType_SubObject, model.SmartBlockType_BundledObjectType},
			Url:           TypePrefix + "objectType",
		},
		TypeKeyPage: {

			Description:   "Blank canvas with Title",
			IconEmoji:     "üìÑ",
			Layout:        model.ObjectType_basic,
			Name:          "Page",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag)},
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "page",
		},
		TypeKeyProfile: {

			Description:   "Homo sapiens",
			IconEmoji:     "üßç",
			Layout:        model.ObjectType_profile,
			Name:          "Human",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag)},
			Types:         []model.SmartBlockType{model.SmartBlockType_Page, model.SmartBlockType_ProfilePage},
			Url:           TypePrefix + "profile",
		},
		TypeKeyProject: {

			Description:   "An individual or collaborative enterprise that is carefully planned to achieve a particular aim",
			IconEmoji:     "üî®",
			Layout:        model.ObjectType_basic,
			Name:          "Project",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag), MustGetRelationLink(RelationKeyObjectives), MustGetRelationLink(RelationKeyScope), MustGetRelationLink(RelationKeyTimeframe), MustGetRelationLink(RelationKeyBudget), MustGetRelationLink(RelationKeyStakeholders), MustGetRelationLink(RelationKeyTasks)},
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "project",
		},
		TypeKeyRecipe: {

			Description:   "A recipe is a set of instructions that describes how to prepare or make something, especially a dish of prepared food",
			IconEmoji:     "üç≤",
			Layout:        model.ObjectType_basic,
			Name:          "Recipe",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag), MustGetRelationLink(RelationKeyTime), MustGetRelationLink(RelationKeyServings), MustGetRelationLink(RelationKeyIngredients), MustGetRelationLink(RelationKeyInstructions), MustGetRelationLink(RelationKeyDifficulty)},
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "recipe",
		},
		TypeKeyRelation: {

			Description:   "Meaningful connection between objects",
			Hidden:        true,
			IconEmoji:     "üîó",
			Layout:        model.ObjectType_relation,
			Name:          "Relation",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyRelationFormat), MustGetRelationLink(RelationKeyRelationMaxCount), MustGetRelationLink(RelationKeyRelationDefaultValue), MustGetRelationLink(RelationKeyRelationFormatObjectTypes)},
			Types:         []model.SmartBlockType{model.SmartBlockType_SubObject, model.SmartBlockType_BundledRelation},
			Url:           TypePrefix + "relation",
		},
		TypeKeyRelationOption: {

			Description: "Object that contains a relation option",
			Hidden:      true,
			IconEmoji:   "ü•ö",
			Layout:      model.ObjectType_relationOption,
			Name:        "Relation option",
			Readonly:    true,
			Types:       []model.SmartBlockType{model.SmartBlockType_SubObject},
			Url:         TypePrefix + "relationOption",
		},
		TypeKeySet: {

			Description:   "Query all objects in your space based on types and relations",
			IconEmoji:     "üîé",
			Layout:        model.ObjectType_set,
			Name:          "Set",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag), MustGetRelationLink(RelationKeySetOf)},
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "set",
		},
		TypeKeySpace: {

			Description:   "Space for sharing",
			Hidden:        true,
			IconEmoji:     "üåé",
			Layout:        model.ObjectType_space,
			Name:          "Space",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag)},
			Types:         []model.SmartBlockType{model.SmartBlockType_Workspace},
			Url:           TypePrefix + "space",
		},
		TypeKeyTask: {

			Description:   "A piece of work to be done or undertaken",
			IconEmoji:     "‚úÖ",
			Layout:        model.ObjectType_todo,
			Name:          "Task",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag), MustGetRelationLink(RelationKeyAssignee), MustGetRelationLink(RelationKeyDueDate), MustGetRelationLink(RelationKeyAttachments), MustGetRelationLink(RelationKeyStatus), MustGetRelationLink(RelationKeyDone), MustGetRelationLink(RelationKeyPriority), MustGetRelationLink(RelationKeyTasks), MustGetRelationLink(RelationKeyLinkedProjects)},
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "task",
		},
		TypeKeyTemplate: {

			Description:   "Sample object that has already some details in place and used to create objects from",
			Hidden:        true,
			Layout:        model.ObjectType_basic,
			Name:          "Template",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTargetObjectType), MustGetRelationLink(RelationKeyTemplateIsBundled)},
			Types:         []model.SmartBlockType{model.SmartBlockType_Template},
			Url:           TypePrefix + "template",
		},
		TypeKeyVideo: {

			Description:   "Auto-generated object from .mpeg-4 files added to Anytype. The recording of moving visual images",
			IconEmoji:     "üìΩ",
			Layout:        model.ObjectType_file,
			Name:          "Video",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeySizeInBytes), MustGetRelationLink(RelationKeyFileMimeType), MustGetRelationLink(RelationKeyCamera), MustGetRelationLink(RelationKeyThumbnailImage), MustGetRelationLink(RelationKeyHeightInPixels), MustGetRelationLink(RelationKeyWidthInPixels), MustGetRelationLink(RelationKeyCameraIso), MustGetRelationLink(RelationKeyAperture), MustGetRelationLink(RelationKeyExposure), MustGetRelationLink(RelationKeyAddedDate), MustGetRelationLink(RelationKeyFileExt)},
			Types:         []model.SmartBlockType{model.SmartBlockType_File},
			Url:           TypePrefix + "video",
		},
		TypeKeyWeeklyPlan: {

			Description:   "The act of organizing your activities and tasks for the week",
			IconEmoji:     "üóìÔ∏è",
			Layout:        model.ObjectType_todo,
			Name:          "Weekly Plan",
			Readonly:      true,
			RelationLinks: []*model.RelationLink{MustGetRelationLink(RelationKeyTag), MustGetRelationLink(RelationKeyEvents), MustGetRelationLink(RelationKeyTasks)},
			Types:         []model.SmartBlockType{model.SmartBlockType_Page},
			Url:           TypePrefix + "weeklyPlan",
		},
	}
)
