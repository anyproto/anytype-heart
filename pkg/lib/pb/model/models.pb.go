// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5-devel
// 	protoc        v5.29.3
// source: pkg/lib/pb/model/protos/models.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SmartBlockType int32

const (
	SmartBlockType_AccountOld         SmartBlockType = 0 // deprecated
	SmartBlockType_Page               SmartBlockType = 16
	SmartBlockType_ProfilePage        SmartBlockType = 17
	SmartBlockType_Home               SmartBlockType = 32
	SmartBlockType_Archive            SmartBlockType = 48
	SmartBlockType_Widget             SmartBlockType = 112
	SmartBlockType_File               SmartBlockType = 256
	SmartBlockType_Template           SmartBlockType = 288
	SmartBlockType_BundledTemplate    SmartBlockType = 289
	SmartBlockType_BundledRelation    SmartBlockType = 512 // DEPRECATED
	SmartBlockType_SubObject          SmartBlockType = 513
	SmartBlockType_BundledObjectType  SmartBlockType = 514 // DEPRECATED
	SmartBlockType_AnytypeProfile     SmartBlockType = 515
	SmartBlockType_Date               SmartBlockType = 516
	SmartBlockType_Workspace          SmartBlockType = 518
	SmartBlockType_STRelation         SmartBlockType = 521
	SmartBlockType_STType             SmartBlockType = 528
	SmartBlockType_STRelationOption   SmartBlockType = 529
	SmartBlockType_SpaceView          SmartBlockType = 530
	SmartBlockType_Identity           SmartBlockType = 532
	SmartBlockType_Participant        SmartBlockType = 534
	SmartBlockType_MissingObject      SmartBlockType = 519
	SmartBlockType_FileObject         SmartBlockType = 533
	SmartBlockType_NotificationObject SmartBlockType = 535
	SmartBlockType_DevicesObject      SmartBlockType = 536
	SmartBlockType_ChatObject         SmartBlockType = 537 // Container for any-store based chats
	SmartBlockType_ChatDerivedObject  SmartBlockType = 544 // Any-store based object for chat
	SmartBlockType_AccountObject      SmartBlockType = 545 // Container for account data in tech space
)

// Enum value maps for SmartBlockType.
var (
	SmartBlockType_name = map[int32]string{
		0:   "AccountOld",
		16:  "Page",
		17:  "ProfilePage",
		32:  "Home",
		48:  "Archive",
		112: "Widget",
		256: "File",
		288: "Template",
		289: "BundledTemplate",
		512: "BundledRelation",
		513: "SubObject",
		514: "BundledObjectType",
		515: "AnytypeProfile",
		516: "Date",
		518: "Workspace",
		521: "STRelation",
		528: "STType",
		529: "STRelationOption",
		530: "SpaceView",
		532: "Identity",
		534: "Participant",
		519: "MissingObject",
		533: "FileObject",
		535: "NotificationObject",
		536: "DevicesObject",
		537: "ChatObject",
		544: "ChatDerivedObject",
		545: "AccountObject",
	}
	SmartBlockType_value = map[string]int32{
		"AccountOld":         0,
		"Page":               16,
		"ProfilePage":        17,
		"Home":               32,
		"Archive":            48,
		"Widget":             112,
		"File":               256,
		"Template":           288,
		"BundledTemplate":    289,
		"BundledRelation":    512,
		"SubObject":          513,
		"BundledObjectType":  514,
		"AnytypeProfile":     515,
		"Date":               516,
		"Workspace":          518,
		"STRelation":         521,
		"STType":             528,
		"STRelationOption":   529,
		"SpaceView":          530,
		"Identity":           532,
		"Participant":        534,
		"MissingObject":      519,
		"FileObject":         533,
		"NotificationObject": 535,
		"DevicesObject":      536,
		"ChatObject":         537,
		"ChatDerivedObject":  544,
		"AccountObject":      545,
	}
)

func (x SmartBlockType) Enum() *SmartBlockType {
	p := new(SmartBlockType)
	*p = x
	return p
}

func (x SmartBlockType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SmartBlockType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[0].Descriptor()
}

func (SmartBlockType) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[0]
}

func (x SmartBlockType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SmartBlockType.Descriptor instead.
func (SmartBlockType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{0}
}

// RelationFormat describes how the underlying data is stored in the google.protobuf.Value and how it should be validated/sanitized
type RelationFormat int32

const (
	RelationFormat_longtext  RelationFormat = 0   // string
	RelationFormat_shorttext RelationFormat = 1   // string, usually short enough. May be truncated in the future
	RelationFormat_number    RelationFormat = 2   // double
	RelationFormat_status    RelationFormat = 3   // string or list of string(len==1)
	RelationFormat_tag       RelationFormat = 11  // list of string (choose multiple from a list)
	RelationFormat_date      RelationFormat = 4   // float64(pb.Value doesn't have int64) or the string
	RelationFormat_file      RelationFormat = 5   // relation can has objects of specific types: file, image, audio, video
	RelationFormat_checkbox  RelationFormat = 6   // boolean
	RelationFormat_url       RelationFormat = 7   // string with sanity check
	RelationFormat_email     RelationFormat = 8   // string with sanity check
	RelationFormat_phone     RelationFormat = 9   // string with sanity check
	RelationFormat_emoji     RelationFormat = 10  // one emoji, can contains multiple utf-8 symbols
	RelationFormat_object    RelationFormat = 100 // relation can has objectType to specify objectType
	RelationFormat_relations RelationFormat = 101 // base64-encoded relation pb model
)

// Enum value maps for RelationFormat.
var (
	RelationFormat_name = map[int32]string{
		0:   "longtext",
		1:   "shorttext",
		2:   "number",
		3:   "status",
		11:  "tag",
		4:   "date",
		5:   "file",
		6:   "checkbox",
		7:   "url",
		8:   "email",
		9:   "phone",
		10:  "emoji",
		100: "object",
		101: "relations",
	}
	RelationFormat_value = map[string]int32{
		"longtext":  0,
		"shorttext": 1,
		"number":    2,
		"status":    3,
		"tag":       11,
		"date":      4,
		"file":      5,
		"checkbox":  6,
		"url":       7,
		"email":     8,
		"phone":     9,
		"emoji":     10,
		"object":    100,
		"relations": 101,
	}
)

func (x RelationFormat) Enum() *RelationFormat {
	p := new(RelationFormat)
	*p = x
	return p
}

func (x RelationFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelationFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[1].Descriptor()
}

func (RelationFormat) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[1]
}

func (x RelationFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelationFormat.Descriptor instead.
func (RelationFormat) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{1}
}

type ObjectOrigin int32

const (
	ObjectOrigin_none             ObjectOrigin = 0
	ObjectOrigin_clipboard        ObjectOrigin = 1
	ObjectOrigin_dragAndDrop      ObjectOrigin = 2
	ObjectOrigin_import           ObjectOrigin = 3
	ObjectOrigin_webclipper       ObjectOrigin = 4
	ObjectOrigin_sharingExtension ObjectOrigin = 5
	ObjectOrigin_usecase          ObjectOrigin = 6
	ObjectOrigin_builtin          ObjectOrigin = 7
	ObjectOrigin_bookmark         ObjectOrigin = 8
	ObjectOrigin_api              ObjectOrigin = 9
)

// Enum value maps for ObjectOrigin.
var (
	ObjectOrigin_name = map[int32]string{
		0: "none",
		1: "clipboard",
		2: "dragAndDrop",
		3: "import",
		4: "webclipper",
		5: "sharingExtension",
		6: "usecase",
		7: "builtin",
		8: "bookmark",
		9: "api",
	}
	ObjectOrigin_value = map[string]int32{
		"none":             0,
		"clipboard":        1,
		"dragAndDrop":      2,
		"import":           3,
		"webclipper":       4,
		"sharingExtension": 5,
		"usecase":          6,
		"builtin":          7,
		"bookmark":         8,
		"api":              9,
	}
)

func (x ObjectOrigin) Enum() *ObjectOrigin {
	p := new(ObjectOrigin)
	*p = x
	return p
}

func (x ObjectOrigin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectOrigin) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[2].Descriptor()
}

func (ObjectOrigin) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[2]
}

func (x ObjectOrigin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectOrigin.Descriptor instead.
func (ObjectOrigin) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2}
}

type SpaceStatus int32

const (
	// Unknown means the space is not loaded yet
	SpaceStatus_Unknown SpaceStatus = 0
	// Loading - the space in progress of loading
	SpaceStatus_Loading SpaceStatus = 1
	// Ok - the space loaded and available
	SpaceStatus_Ok SpaceStatus = 2
	// Missing - the space is missing
	SpaceStatus_Missing SpaceStatus = 3
	// Error - the space loading ended with an error
	SpaceStatus_Error SpaceStatus = 4
	// RemoteWaitingDeletion - network status is "waiting deletion"
	SpaceStatus_RemoteWaitingDeletion SpaceStatus = 5
	// RemoteDeleted - the space is deleted in the current network
	SpaceStatus_RemoteDeleted SpaceStatus = 6
	// SpaceDeleted - the space should be deleted in the network
	SpaceStatus_SpaceDeleted SpaceStatus = 7
	// SpaceActive - the space is active in the network
	SpaceStatus_SpaceActive SpaceStatus = 8
	// SpaceJoining - the account is joining the space
	SpaceStatus_SpaceJoining SpaceStatus = 9
	// SpaceRemoving - the account is removing from space or the space is removed from network
	SpaceStatus_SpaceRemoving SpaceStatus = 10
)

// Enum value maps for SpaceStatus.
var (
	SpaceStatus_name = map[int32]string{
		0:  "Unknown",
		1:  "Loading",
		2:  "Ok",
		3:  "Missing",
		4:  "Error",
		5:  "RemoteWaitingDeletion",
		6:  "RemoteDeleted",
		7:  "SpaceDeleted",
		8:  "SpaceActive",
		9:  "SpaceJoining",
		10: "SpaceRemoving",
	}
	SpaceStatus_value = map[string]int32{
		"Unknown":               0,
		"Loading":               1,
		"Ok":                    2,
		"Missing":               3,
		"Error":                 4,
		"RemoteWaitingDeletion": 5,
		"RemoteDeleted":         6,
		"SpaceDeleted":          7,
		"SpaceActive":           8,
		"SpaceJoining":          9,
		"SpaceRemoving":         10,
	}
)

func (x SpaceStatus) Enum() *SpaceStatus {
	p := new(SpaceStatus)
	*p = x
	return p
}

func (x SpaceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpaceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[3].Descriptor()
}

func (SpaceStatus) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[3]
}

func (x SpaceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpaceStatus.Descriptor instead.
func (SpaceStatus) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{3}
}

type ParticipantPermissions int32

const (
	ParticipantPermissions_Reader        ParticipantPermissions = 0
	ParticipantPermissions_Writer        ParticipantPermissions = 1
	ParticipantPermissions_Owner         ParticipantPermissions = 2
	ParticipantPermissions_NoPermissions ParticipantPermissions = 3
)

// Enum value maps for ParticipantPermissions.
var (
	ParticipantPermissions_name = map[int32]string{
		0: "Reader",
		1: "Writer",
		2: "Owner",
		3: "NoPermissions",
	}
	ParticipantPermissions_value = map[string]int32{
		"Reader":        0,
		"Writer":        1,
		"Owner":         2,
		"NoPermissions": 3,
	}
)

func (x ParticipantPermissions) Enum() *ParticipantPermissions {
	p := new(ParticipantPermissions)
	*p = x
	return p
}

func (x ParticipantPermissions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParticipantPermissions) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[4].Descriptor()
}

func (ParticipantPermissions) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[4]
}

func (x ParticipantPermissions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParticipantPermissions.Descriptor instead.
func (ParticipantPermissions) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{4}
}

type ParticipantStatus int32

const (
	ParticipantStatus_Joining  ParticipantStatus = 0
	ParticipantStatus_Active   ParticipantStatus = 1
	ParticipantStatus_Removed  ParticipantStatus = 2
	ParticipantStatus_Declined ParticipantStatus = 3
	ParticipantStatus_Removing ParticipantStatus = 4
	ParticipantStatus_Canceled ParticipantStatus = 5
)

// Enum value maps for ParticipantStatus.
var (
	ParticipantStatus_name = map[int32]string{
		0: "Joining",
		1: "Active",
		2: "Removed",
		3: "Declined",
		4: "Removing",
		5: "Canceled",
	}
	ParticipantStatus_value = map[string]int32{
		"Joining":  0,
		"Active":   1,
		"Removed":  2,
		"Declined": 3,
		"Removing": 4,
		"Canceled": 5,
	}
)

func (x ParticipantStatus) Enum() *ParticipantStatus {
	p := new(ParticipantStatus)
	*p = x
	return p
}

func (x ParticipantStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParticipantStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[5].Descriptor()
}

func (ParticipantStatus) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[5]
}

func (x ParticipantStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParticipantStatus.Descriptor instead.
func (ParticipantStatus) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{5}
}

type SpaceAccessType int32

const (
	SpaceAccessType_Private  SpaceAccessType = 0
	SpaceAccessType_Personal SpaceAccessType = 1
	SpaceAccessType_Shared   SpaceAccessType = 2
)

// Enum value maps for SpaceAccessType.
var (
	SpaceAccessType_name = map[int32]string{
		0: "Private",
		1: "Personal",
		2: "Shared",
	}
	SpaceAccessType_value = map[string]int32{
		"Private":  0,
		"Personal": 1,
		"Shared":   2,
	}
)

func (x SpaceAccessType) Enum() *SpaceAccessType {
	p := new(SpaceAccessType)
	*p = x
	return p
}

func (x SpaceAccessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpaceAccessType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[6].Descriptor()
}

func (SpaceAccessType) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[6]
}

func (x SpaceAccessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpaceAccessType.Descriptor instead.
func (SpaceAccessType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{6}
}

type SpaceUxType int32

const (
	SpaceUxType_Chat   SpaceUxType = 0 // chat-first UX
	SpaceUxType_Data   SpaceUxType = 1 // objects-first UX
	SpaceUxType_Stream SpaceUxType = 2 // stream UX (chat with limited amount of owners)
)

// Enum value maps for SpaceUxType.
var (
	SpaceUxType_name = map[int32]string{
		0: "Chat",
		1: "Data",
		2: "Stream",
	}
	SpaceUxType_value = map[string]int32{
		"Chat":   0,
		"Data":   1,
		"Stream": 2,
	}
)

func (x SpaceUxType) Enum() *SpaceUxType {
	p := new(SpaceUxType)
	*p = x
	return p
}

func (x SpaceUxType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpaceUxType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[7].Descriptor()
}

func (SpaceUxType) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[7]
}

func (x SpaceUxType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpaceUxType.Descriptor instead.
func (SpaceUxType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{7}
}

type ImageKind int32

const (
	ImageKind_Basic              ImageKind = 0
	ImageKind_Cover              ImageKind = 1
	ImageKind_Icon               ImageKind = 2
	ImageKind_AutomaticallyAdded ImageKind = 3
)

// Enum value maps for ImageKind.
var (
	ImageKind_name = map[int32]string{
		0: "Basic",
		1: "Cover",
		2: "Icon",
		3: "AutomaticallyAdded",
	}
	ImageKind_value = map[string]int32{
		"Basic":              0,
		"Cover":              1,
		"Icon":               2,
		"AutomaticallyAdded": 3,
	}
)

func (x ImageKind) Enum() *ImageKind {
	p := new(ImageKind)
	*p = x
	return p
}

func (x ImageKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageKind) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[8].Descriptor()
}

func (ImageKind) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[8]
}

func (x ImageKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageKind.Descriptor instead.
func (ImageKind) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{8}
}

type FileIndexingStatus int32

const (
	FileIndexingStatus_NotIndexed FileIndexingStatus = 0
	FileIndexingStatus_Indexed    FileIndexingStatus = 1
	FileIndexingStatus_NotFound   FileIndexingStatus = 2
)

// Enum value maps for FileIndexingStatus.
var (
	FileIndexingStatus_name = map[int32]string{
		0: "NotIndexed",
		1: "Indexed",
		2: "NotFound",
	}
	FileIndexingStatus_value = map[string]int32{
		"NotIndexed": 0,
		"Indexed":    1,
		"NotFound":   2,
	}
)

func (x FileIndexingStatus) Enum() *FileIndexingStatus {
	p := new(FileIndexingStatus)
	*p = x
	return p
}

func (x FileIndexingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileIndexingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[9].Descriptor()
}

func (FileIndexingStatus) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[9]
}

func (x FileIndexingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileIndexingStatus.Descriptor instead.
func (FileIndexingStatus) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{9}
}

type SpaceShareableStatus int32

const (
	SpaceShareableStatus_StatusUnknown      SpaceShareableStatus = 0
	SpaceShareableStatus_StatusShareable    SpaceShareableStatus = 1
	SpaceShareableStatus_StatusNotShareable SpaceShareableStatus = 2
)

// Enum value maps for SpaceShareableStatus.
var (
	SpaceShareableStatus_name = map[int32]string{
		0: "StatusUnknown",
		1: "StatusShareable",
		2: "StatusNotShareable",
	}
	SpaceShareableStatus_value = map[string]int32{
		"StatusUnknown":      0,
		"StatusShareable":    1,
		"StatusNotShareable": 2,
	}
)

func (x SpaceShareableStatus) Enum() *SpaceShareableStatus {
	p := new(SpaceShareableStatus)
	*p = x
	return p
}

func (x SpaceShareableStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpaceShareableStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[10].Descriptor()
}

func (SpaceShareableStatus) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[10]
}

func (x SpaceShareableStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpaceShareableStatus.Descriptor instead.
func (SpaceShareableStatus) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{10}
}

type NameserviceNameType int32

const (
	// .any suffix
	NameserviceNameType_AnyName NameserviceNameType = 0
)

// Enum value maps for NameserviceNameType.
var (
	NameserviceNameType_name = map[int32]string{
		0: "AnyName",
	}
	NameserviceNameType_value = map[string]int32{
		"AnyName": 0,
	}
)

func (x NameserviceNameType) Enum() *NameserviceNameType {
	p := new(NameserviceNameType)
	*p = x
	return p
}

func (x NameserviceNameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NameserviceNameType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[11].Descriptor()
}

func (NameserviceNameType) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[11]
}

func (x NameserviceNameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NameserviceNameType.Descriptor instead.
func (NameserviceNameType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{11}
}

type DeviceNetworkType int32

const (
	DeviceNetworkType_WIFI          DeviceNetworkType = 0
	DeviceNetworkType_CELLULAR      DeviceNetworkType = 1
	DeviceNetworkType_NOT_CONNECTED DeviceNetworkType = 2
)

// Enum value maps for DeviceNetworkType.
var (
	DeviceNetworkType_name = map[int32]string{
		0: "WIFI",
		1: "CELLULAR",
		2: "NOT_CONNECTED",
	}
	DeviceNetworkType_value = map[string]int32{
		"WIFI":          0,
		"CELLULAR":      1,
		"NOT_CONNECTED": 2,
	}
)

func (x DeviceNetworkType) Enum() *DeviceNetworkType {
	p := new(DeviceNetworkType)
	*p = x
	return p
}

func (x DeviceNetworkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceNetworkType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[12].Descriptor()
}

func (DeviceNetworkType) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[12]
}

func (x DeviceNetworkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceNetworkType.Descriptor instead.
func (DeviceNetworkType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{12}
}

type BlockPosition int32

const (
	Block_None BlockPosition = 0
	// above target block
	Block_Top BlockPosition = 1
	// under target block
	Block_Bottom BlockPosition = 2
	// to left of target block
	Block_Left BlockPosition = 3
	// to right of target block
	Block_Right BlockPosition = 4
	// inside target block, as last block
	Block_Inner BlockPosition = 5
	// replace target block
	Block_Replace BlockPosition = 6
	// inside target block, as first block
	Block_InnerFirst BlockPosition = 7
)

// Enum value maps for BlockPosition.
var (
	BlockPosition_name = map[int32]string{
		0: "None",
		1: "Top",
		2: "Bottom",
		3: "Left",
		4: "Right",
		5: "Inner",
		6: "Replace",
		7: "InnerFirst",
	}
	BlockPosition_value = map[string]int32{
		"None":       0,
		"Top":        1,
		"Bottom":     2,
		"Left":       3,
		"Right":      4,
		"Inner":      5,
		"Replace":    6,
		"InnerFirst": 7,
	}
)

func (x BlockPosition) Enum() *BlockPosition {
	p := new(BlockPosition)
	*p = x
	return p
}

func (x BlockPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[13].Descriptor()
}

func (BlockPosition) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[13]
}

func (x BlockPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockPosition.Descriptor instead.
func (BlockPosition) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 0}
}

type BlockAlign int32

const (
	Block_AlignLeft    BlockAlign = 0
	Block_AlignCenter  BlockAlign = 1
	Block_AlignRight   BlockAlign = 2
	Block_AlignJustify BlockAlign = 3
)

// Enum value maps for BlockAlign.
var (
	BlockAlign_name = map[int32]string{
		0: "AlignLeft",
		1: "AlignCenter",
		2: "AlignRight",
		3: "AlignJustify",
	}
	BlockAlign_value = map[string]int32{
		"AlignLeft":    0,
		"AlignCenter":  1,
		"AlignRight":   2,
		"AlignJustify": 3,
	}
)

func (x BlockAlign) Enum() *BlockAlign {
	p := new(BlockAlign)
	*p = x
	return p
}

func (x BlockAlign) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockAlign) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[14].Descriptor()
}

func (BlockAlign) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[14]
}

func (x BlockAlign) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockAlign.Descriptor instead.
func (BlockAlign) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1}
}

type BlockVerticalAlign int32

const (
	Block_VerticalAlignTop    BlockVerticalAlign = 0
	Block_VerticalAlignMiddle BlockVerticalAlign = 1
	Block_VerticalAlignBottom BlockVerticalAlign = 2
)

// Enum value maps for BlockVerticalAlign.
var (
	BlockVerticalAlign_name = map[int32]string{
		0: "VerticalAlignTop",
		1: "VerticalAlignMiddle",
		2: "VerticalAlignBottom",
	}
	BlockVerticalAlign_value = map[string]int32{
		"VerticalAlignTop":    0,
		"VerticalAlignMiddle": 1,
		"VerticalAlignBottom": 2,
	}
)

func (x BlockVerticalAlign) Enum() *BlockVerticalAlign {
	p := new(BlockVerticalAlign)
	*p = x
	return p
}

func (x BlockVerticalAlign) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockVerticalAlign) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[15].Descriptor()
}

func (BlockVerticalAlign) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[15]
}

func (x BlockVerticalAlign) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockVerticalAlign.Descriptor instead.
func (BlockVerticalAlign) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 2}
}

type BlockContentLayoutStyle int32

const (
	BlockContentLayout_Row          BlockContentLayoutStyle = 0
	BlockContentLayout_Column       BlockContentLayoutStyle = 1
	BlockContentLayout_Div          BlockContentLayoutStyle = 2
	BlockContentLayout_Header       BlockContentLayoutStyle = 3
	BlockContentLayout_TableRows    BlockContentLayoutStyle = 4
	BlockContentLayout_TableColumns BlockContentLayoutStyle = 5
)

// Enum value maps for BlockContentLayoutStyle.
var (
	BlockContentLayoutStyle_name = map[int32]string{
		0: "Row",
		1: "Column",
		2: "Div",
		3: "Header",
		4: "TableRows",
		5: "TableColumns",
	}
	BlockContentLayoutStyle_value = map[string]int32{
		"Row":          0,
		"Column":       1,
		"Div":          2,
		"Header":       3,
		"TableRows":    4,
		"TableColumns": 5,
	}
)

func (x BlockContentLayoutStyle) Enum() *BlockContentLayoutStyle {
	p := new(BlockContentLayoutStyle)
	*p = x
	return p
}

func (x BlockContentLayoutStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockContentLayoutStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[16].Descriptor()
}

func (BlockContentLayoutStyle) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[16]
}

func (x BlockContentLayoutStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockContentLayoutStyle.Descriptor instead.
func (BlockContentLayoutStyle) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 0, 0}
}

type BlockContentLinkIconSize int32

const (
	BlockContentLink_SizeNone   BlockContentLinkIconSize = 0
	BlockContentLink_SizeSmall  BlockContentLinkIconSize = 1
	BlockContentLink_SizeMedium BlockContentLinkIconSize = 2
)

// Enum value maps for BlockContentLinkIconSize.
var (
	BlockContentLinkIconSize_name = map[int32]string{
		0: "SizeNone",
		1: "SizeSmall",
		2: "SizeMedium",
	}
	BlockContentLinkIconSize_value = map[string]int32{
		"SizeNone":   0,
		"SizeSmall":  1,
		"SizeMedium": 2,
	}
)

func (x BlockContentLinkIconSize) Enum() *BlockContentLinkIconSize {
	p := new(BlockContentLinkIconSize)
	*p = x
	return p
}

func (x BlockContentLinkIconSize) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockContentLinkIconSize) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[17].Descriptor()
}

func (BlockContentLinkIconSize) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[17]
}

func (x BlockContentLinkIconSize) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockContentLinkIconSize.Descriptor instead.
func (BlockContentLinkIconSize) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 1, 0}
}

type BlockContentLinkStyle int32

const (
	BlockContentLink_Page      BlockContentLinkStyle = 0
	BlockContentLink_Dataview  BlockContentLinkStyle = 1
	BlockContentLink_Dashboard BlockContentLinkStyle = 2
	BlockContentLink_Archive   BlockContentLinkStyle = 3 // ...
)

// Enum value maps for BlockContentLinkStyle.
var (
	BlockContentLinkStyle_name = map[int32]string{
		0: "Page",
		1: "Dataview",
		2: "Dashboard",
		3: "Archive",
	}
	BlockContentLinkStyle_value = map[string]int32{
		"Page":      0,
		"Dataview":  1,
		"Dashboard": 2,
		"Archive":   3,
	}
)

func (x BlockContentLinkStyle) Enum() *BlockContentLinkStyle {
	p := new(BlockContentLinkStyle)
	*p = x
	return p
}

func (x BlockContentLinkStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockContentLinkStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[18].Descriptor()
}

func (BlockContentLinkStyle) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[18]
}

func (x BlockContentLinkStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockContentLinkStyle.Descriptor instead.
func (BlockContentLinkStyle) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 1, 1}
}

type BlockContentLinkDescription int32

const (
	BlockContentLink_None    BlockContentLinkDescription = 0
	BlockContentLink_Added   BlockContentLinkDescription = 1
	BlockContentLink_Content BlockContentLinkDescription = 2
)

// Enum value maps for BlockContentLinkDescription.
var (
	BlockContentLinkDescription_name = map[int32]string{
		0: "None",
		1: "Added",
		2: "Content",
	}
	BlockContentLinkDescription_value = map[string]int32{
		"None":    0,
		"Added":   1,
		"Content": 2,
	}
)

func (x BlockContentLinkDescription) Enum() *BlockContentLinkDescription {
	p := new(BlockContentLinkDescription)
	*p = x
	return p
}

func (x BlockContentLinkDescription) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockContentLinkDescription) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[19].Descriptor()
}

func (BlockContentLinkDescription) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[19]
}

func (x BlockContentLinkDescription) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockContentLinkDescription.Descriptor instead.
func (BlockContentLinkDescription) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 1, 2}
}

type BlockContentLinkCardStyle int32

const (
	BlockContentLink_Text   BlockContentLinkCardStyle = 0
	BlockContentLink_Card   BlockContentLinkCardStyle = 1
	BlockContentLink_Inline BlockContentLinkCardStyle = 2
)

// Enum value maps for BlockContentLinkCardStyle.
var (
	BlockContentLinkCardStyle_name = map[int32]string{
		0: "Text",
		1: "Card",
		2: "Inline",
	}
	BlockContentLinkCardStyle_value = map[string]int32{
		"Text":   0,
		"Card":   1,
		"Inline": 2,
	}
)

func (x BlockContentLinkCardStyle) Enum() *BlockContentLinkCardStyle {
	p := new(BlockContentLinkCardStyle)
	*p = x
	return p
}

func (x BlockContentLinkCardStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockContentLinkCardStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[20].Descriptor()
}

func (BlockContentLinkCardStyle) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[20]
}

func (x BlockContentLinkCardStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockContentLinkCardStyle.Descriptor instead.
func (BlockContentLinkCardStyle) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 1, 3}
}

type BlockContentDivStyle int32

const (
	BlockContentDiv_Line BlockContentDivStyle = 0
	BlockContentDiv_Dots BlockContentDivStyle = 1
)

// Enum value maps for BlockContentDivStyle.
var (
	BlockContentDivStyle_name = map[int32]string{
		0: "Line",
		1: "Dots",
	}
	BlockContentDivStyle_value = map[string]int32{
		"Line": 0,
		"Dots": 1,
	}
)

func (x BlockContentDivStyle) Enum() *BlockContentDivStyle {
	p := new(BlockContentDivStyle)
	*p = x
	return p
}

func (x BlockContentDivStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockContentDivStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[21].Descriptor()
}

func (BlockContentDivStyle) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[21]
}

func (x BlockContentDivStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockContentDivStyle.Descriptor instead.
func (BlockContentDivStyle) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 2, 0}
}

type BlockContentBookmarkState int32

const (
	BlockContentBookmark_Empty    BlockContentBookmarkState = 0
	BlockContentBookmark_Fetching BlockContentBookmarkState = 1
	BlockContentBookmark_Done     BlockContentBookmarkState = 2
	BlockContentBookmark_Error    BlockContentBookmarkState = 3
)

// Enum value maps for BlockContentBookmarkState.
var (
	BlockContentBookmarkState_name = map[int32]string{
		0: "Empty",
		1: "Fetching",
		2: "Done",
		3: "Error",
	}
	BlockContentBookmarkState_value = map[string]int32{
		"Empty":    0,
		"Fetching": 1,
		"Done":     2,
		"Error":    3,
	}
)

func (x BlockContentBookmarkState) Enum() *BlockContentBookmarkState {
	p := new(BlockContentBookmarkState)
	*p = x
	return p
}

func (x BlockContentBookmarkState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockContentBookmarkState) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[22].Descriptor()
}

func (BlockContentBookmarkState) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[22]
}

func (x BlockContentBookmarkState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockContentBookmarkState.Descriptor instead.
func (BlockContentBookmarkState) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 3, 0}
}

type BlockContentTextStyle int32

const (
	BlockContentText_Paragraph   BlockContentTextStyle = 0
	BlockContentText_Header1     BlockContentTextStyle = 1
	BlockContentText_Header2     BlockContentTextStyle = 2
	BlockContentText_Header3     BlockContentTextStyle = 3
	BlockContentText_Header4     BlockContentTextStyle = 4 // deprecated
	BlockContentText_Quote       BlockContentTextStyle = 5
	BlockContentText_Code        BlockContentTextStyle = 6
	BlockContentText_Title       BlockContentTextStyle = 7 // currently only one block of this style can exists on a page
	BlockContentText_Checkbox    BlockContentTextStyle = 8
	BlockContentText_Marked      BlockContentTextStyle = 9
	BlockContentText_Numbered    BlockContentTextStyle = 10
	BlockContentText_Toggle      BlockContentTextStyle = 11
	BlockContentText_Description BlockContentTextStyle = 12 // currently only one block of this style can exists on a page
	BlockContentText_Callout     BlockContentTextStyle = 13
)

// Enum value maps for BlockContentTextStyle.
var (
	BlockContentTextStyle_name = map[int32]string{
		0:  "Paragraph",
		1:  "Header1",
		2:  "Header2",
		3:  "Header3",
		4:  "Header4",
		5:  "Quote",
		6:  "Code",
		7:  "Title",
		8:  "Checkbox",
		9:  "Marked",
		10: "Numbered",
		11: "Toggle",
		12: "Description",
		13: "Callout",
	}
	BlockContentTextStyle_value = map[string]int32{
		"Paragraph":   0,
		"Header1":     1,
		"Header2":     2,
		"Header3":     3,
		"Header4":     4,
		"Quote":       5,
		"Code":        6,
		"Title":       7,
		"Checkbox":    8,
		"Marked":      9,
		"Numbered":    10,
		"Toggle":      11,
		"Description": 12,
		"Callout":     13,
	}
)

func (x BlockContentTextStyle) Enum() *BlockContentTextStyle {
	p := new(BlockContentTextStyle)
	*p = x
	return p
}

func (x BlockContentTextStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockContentTextStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[23].Descriptor()
}

func (BlockContentTextStyle) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[23]
}

func (x BlockContentTextStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockContentTextStyle.Descriptor instead.
func (BlockContentTextStyle) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 6, 0}
}

type BlockContentTextMarkType int32

const (
	BlockContentTextMark_Strikethrough   BlockContentTextMarkType = 0
	BlockContentTextMark_Keyboard        BlockContentTextMarkType = 1
	BlockContentTextMark_Italic          BlockContentTextMarkType = 2
	BlockContentTextMark_Bold            BlockContentTextMarkType = 3
	BlockContentTextMark_Underscored     BlockContentTextMarkType = 4
	BlockContentTextMark_Link            BlockContentTextMarkType = 5
	BlockContentTextMark_TextColor       BlockContentTextMarkType = 6
	BlockContentTextMark_BackgroundColor BlockContentTextMarkType = 7
	BlockContentTextMark_Mention         BlockContentTextMarkType = 8
	BlockContentTextMark_Emoji           BlockContentTextMarkType = 9
	BlockContentTextMark_Object          BlockContentTextMarkType = 10
)

// Enum value maps for BlockContentTextMarkType.
var (
	BlockContentTextMarkType_name = map[int32]string{
		0:  "Strikethrough",
		1:  "Keyboard",
		2:  "Italic",
		3:  "Bold",
		4:  "Underscored",
		5:  "Link",
		6:  "TextColor",
		7:  "BackgroundColor",
		8:  "Mention",
		9:  "Emoji",
		10: "Object",
	}
	BlockContentTextMarkType_value = map[string]int32{
		"Strikethrough":   0,
		"Keyboard":        1,
		"Italic":          2,
		"Bold":            3,
		"Underscored":     4,
		"Link":            5,
		"TextColor":       6,
		"BackgroundColor": 7,
		"Mention":         8,
		"Emoji":           9,
		"Object":          10,
	}
)

func (x BlockContentTextMarkType) Enum() *BlockContentTextMarkType {
	p := new(BlockContentTextMarkType)
	*p = x
	return p
}

func (x BlockContentTextMarkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockContentTextMarkType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[24].Descriptor()
}

func (BlockContentTextMarkType) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[24]
}

func (x BlockContentTextMarkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockContentTextMarkType.Descriptor instead.
func (BlockContentTextMarkType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 6, 1, 0}
}

type BlockContentFileType int32

const (
	BlockContentFile_None  BlockContentFileType = 0
	BlockContentFile_File  BlockContentFileType = 1
	BlockContentFile_Image BlockContentFileType = 2
	BlockContentFile_Video BlockContentFileType = 3
	BlockContentFile_Audio BlockContentFileType = 4
	BlockContentFile_PDF   BlockContentFileType = 5
)

// Enum value maps for BlockContentFileType.
var (
	BlockContentFileType_name = map[int32]string{
		0: "None",
		1: "File",
		2: "Image",
		3: "Video",
		4: "Audio",
		5: "PDF",
	}
	BlockContentFileType_value = map[string]int32{
		"None":  0,
		"File":  1,
		"Image": 2,
		"Video": 3,
		"Audio": 4,
		"PDF":   5,
	}
)

func (x BlockContentFileType) Enum() *BlockContentFileType {
	p := new(BlockContentFileType)
	*p = x
	return p
}

func (x BlockContentFileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockContentFileType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[25].Descriptor()
}

func (BlockContentFileType) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[25]
}

func (x BlockContentFileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockContentFileType.Descriptor instead.
func (BlockContentFileType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 7, 0}
}

type BlockContentFileStyle int32

const (
	BlockContentFile_Auto  BlockContentFileStyle = 0 // all types expect File and None has Embed style by default
	BlockContentFile_Link  BlockContentFileStyle = 1
	BlockContentFile_Embed BlockContentFileStyle = 2
)

// Enum value maps for BlockContentFileStyle.
var (
	BlockContentFileStyle_name = map[int32]string{
		0: "Auto",
		1: "Link",
		2: "Embed",
	}
	BlockContentFileStyle_value = map[string]int32{
		"Auto":  0,
		"Link":  1,
		"Embed": 2,
	}
)

func (x BlockContentFileStyle) Enum() *BlockContentFileStyle {
	p := new(BlockContentFileStyle)
	*p = x
	return p
}

func (x BlockContentFileStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockContentFileStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[26].Descriptor()
}

func (BlockContentFileStyle) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[26]
}

func (x BlockContentFileStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockContentFileStyle.Descriptor instead.
func (BlockContentFileStyle) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 7, 1}
}

type BlockContentFileState int32

const (
	BlockContentFile_Empty     BlockContentFileState = 0 // There is no file and preview, it's an empty block, that waits files.
	BlockContentFile_Uploading BlockContentFileState = 1 // There is still no file/preview, but file already uploading
	BlockContentFile_Done      BlockContentFileState = 2 // File and preview downloaded
	BlockContentFile_Error     BlockContentFileState = 3 // Error while uploading
)

// Enum value maps for BlockContentFileState.
var (
	BlockContentFileState_name = map[int32]string{
		0: "Empty",
		1: "Uploading",
		2: "Done",
		3: "Error",
	}
	BlockContentFileState_value = map[string]int32{
		"Empty":     0,
		"Uploading": 1,
		"Done":      2,
		"Error":     3,
	}
)

func (x BlockContentFileState) Enum() *BlockContentFileState {
	p := new(BlockContentFileState)
	*p = x
	return p
}

func (x BlockContentFileState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockContentFileState) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[27].Descriptor()
}

func (BlockContentFileState) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[27]
}

func (x BlockContentFileState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockContentFileState.Descriptor instead.
func (BlockContentFileState) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 7, 2}
}

type BlockContentDataviewViewType int32

const (
	BlockContentDataviewView_Table    BlockContentDataviewViewType = 0
	BlockContentDataviewView_List     BlockContentDataviewViewType = 1
	BlockContentDataviewView_Gallery  BlockContentDataviewViewType = 2
	BlockContentDataviewView_Kanban   BlockContentDataviewViewType = 3
	BlockContentDataviewView_Calendar BlockContentDataviewViewType = 4
	BlockContentDataviewView_Graph    BlockContentDataviewViewType = 5
)

// Enum value maps for BlockContentDataviewViewType.
var (
	BlockContentDataviewViewType_name = map[int32]string{
		0: "Table",
		1: "List",
		2: "Gallery",
		3: "Kanban",
		4: "Calendar",
		5: "Graph",
	}
	BlockContentDataviewViewType_value = map[string]int32{
		"Table":    0,
		"List":     1,
		"Gallery":  2,
		"Kanban":   3,
		"Calendar": 4,
		"Graph":    5,
	}
)

func (x BlockContentDataviewViewType) Enum() *BlockContentDataviewViewType {
	p := new(BlockContentDataviewViewType)
	*p = x
	return p
}

func (x BlockContentDataviewViewType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockContentDataviewViewType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[28].Descriptor()
}

func (BlockContentDataviewViewType) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[28]
}

func (x BlockContentDataviewViewType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockContentDataviewViewType.Descriptor instead.
func (BlockContentDataviewViewType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 9, 0, 0}
}

type BlockContentDataviewViewSize int32

const (
	BlockContentDataviewView_Small  BlockContentDataviewViewSize = 0
	BlockContentDataviewView_Medium BlockContentDataviewViewSize = 1
	BlockContentDataviewView_Large  BlockContentDataviewViewSize = 2
)

// Enum value maps for BlockContentDataviewViewSize.
var (
	BlockContentDataviewViewSize_name = map[int32]string{
		0: "Small",
		1: "Medium",
		2: "Large",
	}
	BlockContentDataviewViewSize_value = map[string]int32{
		"Small":  0,
		"Medium": 1,
		"Large":  2,
	}
)

func (x BlockContentDataviewViewSize) Enum() *BlockContentDataviewViewSize {
	p := new(BlockContentDataviewViewSize)
	*p = x
	return p
}

func (x BlockContentDataviewViewSize) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockContentDataviewViewSize) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[29].Descriptor()
}

func (BlockContentDataviewViewSize) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[29]
}

func (x BlockContentDataviewViewSize) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockContentDataviewViewSize.Descriptor instead.
func (BlockContentDataviewViewSize) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 9, 0, 1}
}

type BlockContentDataviewRelationDateFormat int32

const (
	BlockContentDataviewRelation_MonthAbbrBeforeDay BlockContentDataviewRelationDateFormat = 0 // Jul 30, 2020
	BlockContentDataviewRelation_MonthAbbrAfterDay  BlockContentDataviewRelationDateFormat = 1 // 30 Jul 2020
	BlockContentDataviewRelation_Short              BlockContentDataviewRelationDateFormat = 2 // 30/07/2020
	BlockContentDataviewRelation_ShortUS            BlockContentDataviewRelationDateFormat = 3 // 07/30/2020
	BlockContentDataviewRelation_ISO                BlockContentDataviewRelationDateFormat = 4 // 2020-07-30
)

// Enum value maps for BlockContentDataviewRelationDateFormat.
var (
	BlockContentDataviewRelationDateFormat_name = map[int32]string{
		0: "MonthAbbrBeforeDay",
		1: "MonthAbbrAfterDay",
		2: "Short",
		3: "ShortUS",
		4: "ISO",
	}
	BlockContentDataviewRelationDateFormat_value = map[string]int32{
		"MonthAbbrBeforeDay": 0,
		"MonthAbbrAfterDay":  1,
		"Short":              2,
		"ShortUS":            3,
		"ISO":                4,
	}
)

func (x BlockContentDataviewRelationDateFormat) Enum() *BlockContentDataviewRelationDateFormat {
	p := new(BlockContentDataviewRelationDateFormat)
	*p = x
	return p
}

func (x BlockContentDataviewRelationDateFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockContentDataviewRelationDateFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[30].Descriptor()
}

func (BlockContentDataviewRelationDateFormat) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[30]
}

func (x BlockContentDataviewRelationDateFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockContentDataviewRelationDateFormat.Descriptor instead.
func (BlockContentDataviewRelationDateFormat) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 9, 1, 0}
}

type BlockContentDataviewRelationTimeFormat int32

const (
	BlockContentDataviewRelation_Format12 BlockContentDataviewRelationTimeFormat = 0
	BlockContentDataviewRelation_Format24 BlockContentDataviewRelationTimeFormat = 1
)

// Enum value maps for BlockContentDataviewRelationTimeFormat.
var (
	BlockContentDataviewRelationTimeFormat_name = map[int32]string{
		0: "Format12",
		1: "Format24",
	}
	BlockContentDataviewRelationTimeFormat_value = map[string]int32{
		"Format12": 0,
		"Format24": 1,
	}
)

func (x BlockContentDataviewRelationTimeFormat) Enum() *BlockContentDataviewRelationTimeFormat {
	p := new(BlockContentDataviewRelationTimeFormat)
	*p = x
	return p
}

func (x BlockContentDataviewRelationTimeFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockContentDataviewRelationTimeFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[31].Descriptor()
}

func (BlockContentDataviewRelationTimeFormat) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[31]
}

func (x BlockContentDataviewRelationTimeFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockContentDataviewRelationTimeFormat.Descriptor instead.
func (BlockContentDataviewRelationTimeFormat) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 9, 1, 1}
}

type BlockContentDataviewRelationFormulaType int32

const (
	BlockContentDataviewRelation_None            BlockContentDataviewRelationFormulaType = 0
	BlockContentDataviewRelation_Count           BlockContentDataviewRelationFormulaType = 1
	BlockContentDataviewRelation_CountValue      BlockContentDataviewRelationFormulaType = 2
	BlockContentDataviewRelation_CountDistinct   BlockContentDataviewRelationFormulaType = 3
	BlockContentDataviewRelation_CountEmpty      BlockContentDataviewRelationFormulaType = 4
	BlockContentDataviewRelation_CountNotEmpty   BlockContentDataviewRelationFormulaType = 5
	BlockContentDataviewRelation_PercentEmpty    BlockContentDataviewRelationFormulaType = 6
	BlockContentDataviewRelation_PercentNotEmpty BlockContentDataviewRelationFormulaType = 7
	BlockContentDataviewRelation_MathSum         BlockContentDataviewRelationFormulaType = 8
	BlockContentDataviewRelation_MathAverage     BlockContentDataviewRelationFormulaType = 9
	BlockContentDataviewRelation_MathMedian      BlockContentDataviewRelationFormulaType = 10
	BlockContentDataviewRelation_MathMin         BlockContentDataviewRelationFormulaType = 11
	BlockContentDataviewRelation_MathMax         BlockContentDataviewRelationFormulaType = 12
	BlockContentDataviewRelation_Range           BlockContentDataviewRelationFormulaType = 13
)

// Enum value maps for BlockContentDataviewRelationFormulaType.
var (
	BlockContentDataviewRelationFormulaType_name = map[int32]string{
		0:  "None",
		1:  "Count",
		2:  "CountValue",
		3:  "CountDistinct",
		4:  "CountEmpty",
		5:  "CountNotEmpty",
		6:  "PercentEmpty",
		7:  "PercentNotEmpty",
		8:  "MathSum",
		9:  "MathAverage",
		10: "MathMedian",
		11: "MathMin",
		12: "MathMax",
		13: "Range",
	}
	BlockContentDataviewRelationFormulaType_value = map[string]int32{
		"None":            0,
		"Count":           1,
		"CountValue":      2,
		"CountDistinct":   3,
		"CountEmpty":      4,
		"CountNotEmpty":   5,
		"PercentEmpty":    6,
		"PercentNotEmpty": 7,
		"MathSum":         8,
		"MathAverage":     9,
		"MathMedian":      10,
		"MathMin":         11,
		"MathMax":         12,
		"Range":           13,
	}
)

func (x BlockContentDataviewRelationFormulaType) Enum() *BlockContentDataviewRelationFormulaType {
	p := new(BlockContentDataviewRelationFormulaType)
	*p = x
	return p
}

func (x BlockContentDataviewRelationFormulaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockContentDataviewRelationFormulaType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[32].Descriptor()
}

func (BlockContentDataviewRelationFormulaType) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[32]
}

func (x BlockContentDataviewRelationFormulaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockContentDataviewRelationFormulaType.Descriptor instead.
func (BlockContentDataviewRelationFormulaType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 9, 1, 2}
}

type BlockContentDataviewSortType int32

const (
	BlockContentDataviewSort_Asc    BlockContentDataviewSortType = 0
	BlockContentDataviewSort_Desc   BlockContentDataviewSortType = 1
	BlockContentDataviewSort_Custom BlockContentDataviewSortType = 2
)

// Enum value maps for BlockContentDataviewSortType.
var (
	BlockContentDataviewSortType_name = map[int32]string{
		0: "Asc",
		1: "Desc",
		2: "Custom",
	}
	BlockContentDataviewSortType_value = map[string]int32{
		"Asc":    0,
		"Desc":   1,
		"Custom": 2,
	}
)

func (x BlockContentDataviewSortType) Enum() *BlockContentDataviewSortType {
	p := new(BlockContentDataviewSortType)
	*p = x
	return p
}

func (x BlockContentDataviewSortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockContentDataviewSortType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[33].Descriptor()
}

func (BlockContentDataviewSortType) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[33]
}

func (x BlockContentDataviewSortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockContentDataviewSortType.Descriptor instead.
func (BlockContentDataviewSortType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 9, 2, 0}
}

type BlockContentDataviewSortEmptyType int32

const (
	BlockContentDataviewSort_NotSpecified BlockContentDataviewSortEmptyType = 0
	BlockContentDataviewSort_Start        BlockContentDataviewSortEmptyType = 1
	BlockContentDataviewSort_End          BlockContentDataviewSortEmptyType = 2
)

// Enum value maps for BlockContentDataviewSortEmptyType.
var (
	BlockContentDataviewSortEmptyType_name = map[int32]string{
		0: "NotSpecified",
		1: "Start",
		2: "End",
	}
	BlockContentDataviewSortEmptyType_value = map[string]int32{
		"NotSpecified": 0,
		"Start":        1,
		"End":          2,
	}
)

func (x BlockContentDataviewSortEmptyType) Enum() *BlockContentDataviewSortEmptyType {
	p := new(BlockContentDataviewSortEmptyType)
	*p = x
	return p
}

func (x BlockContentDataviewSortEmptyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockContentDataviewSortEmptyType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[34].Descriptor()
}

func (BlockContentDataviewSortEmptyType) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[34]
}

func (x BlockContentDataviewSortEmptyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockContentDataviewSortEmptyType.Descriptor instead.
func (BlockContentDataviewSortEmptyType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 9, 2, 1}
}

type BlockContentDataviewFilterOperator int32

const (
	BlockContentDataviewFilter_No  BlockContentDataviewFilterOperator = 0
	BlockContentDataviewFilter_Or  BlockContentDataviewFilterOperator = 1
	BlockContentDataviewFilter_And BlockContentDataviewFilterOperator = 2
)

// Enum value maps for BlockContentDataviewFilterOperator.
var (
	BlockContentDataviewFilterOperator_name = map[int32]string{
		0: "No",
		1: "Or",
		2: "And",
	}
	BlockContentDataviewFilterOperator_value = map[string]int32{
		"No":  0,
		"Or":  1,
		"And": 2,
	}
)

func (x BlockContentDataviewFilterOperator) Enum() *BlockContentDataviewFilterOperator {
	p := new(BlockContentDataviewFilterOperator)
	*p = x
	return p
}

func (x BlockContentDataviewFilterOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockContentDataviewFilterOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[35].Descriptor()
}

func (BlockContentDataviewFilterOperator) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[35]
}

func (x BlockContentDataviewFilterOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockContentDataviewFilterOperator.Descriptor instead.
func (BlockContentDataviewFilterOperator) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 9, 3, 0}
}

type BlockContentDataviewFilterCondition int32

const (
	BlockContentDataviewFilter_None           BlockContentDataviewFilterCondition = 0
	BlockContentDataviewFilter_Equal          BlockContentDataviewFilterCondition = 1
	BlockContentDataviewFilter_NotEqual       BlockContentDataviewFilterCondition = 2
	BlockContentDataviewFilter_Greater        BlockContentDataviewFilterCondition = 3
	BlockContentDataviewFilter_Less           BlockContentDataviewFilterCondition = 4
	BlockContentDataviewFilter_GreaterOrEqual BlockContentDataviewFilterCondition = 5
	BlockContentDataviewFilter_LessOrEqual    BlockContentDataviewFilterCondition = 6
	BlockContentDataviewFilter_Like           BlockContentDataviewFilterCondition = 7
	BlockContentDataviewFilter_NotLike        BlockContentDataviewFilterCondition = 8
	BlockContentDataviewFilter_In             BlockContentDataviewFilterCondition = 9  // "at least one value(from the provided list) is IN"
	BlockContentDataviewFilter_NotIn          BlockContentDataviewFilterCondition = 10 // "none of provided values are IN"
	BlockContentDataviewFilter_Empty          BlockContentDataviewFilterCondition = 11
	BlockContentDataviewFilter_NotEmpty       BlockContentDataviewFilterCondition = 12
	BlockContentDataviewFilter_AllIn          BlockContentDataviewFilterCondition = 13
	BlockContentDataviewFilter_NotAllIn       BlockContentDataviewFilterCondition = 14
	BlockContentDataviewFilter_ExactIn        BlockContentDataviewFilterCondition = 15
	BlockContentDataviewFilter_NotExactIn     BlockContentDataviewFilterCondition = 16
	BlockContentDataviewFilter_Exists         BlockContentDataviewFilterCondition = 17
)

// Enum value maps for BlockContentDataviewFilterCondition.
var (
	BlockContentDataviewFilterCondition_name = map[int32]string{
		0:  "None",
		1:  "Equal",
		2:  "NotEqual",
		3:  "Greater",
		4:  "Less",
		5:  "GreaterOrEqual",
		6:  "LessOrEqual",
		7:  "Like",
		8:  "NotLike",
		9:  "In",
		10: "NotIn",
		11: "Empty",
		12: "NotEmpty",
		13: "AllIn",
		14: "NotAllIn",
		15: "ExactIn",
		16: "NotExactIn",
		17: "Exists",
	}
	BlockContentDataviewFilterCondition_value = map[string]int32{
		"None":           0,
		"Equal":          1,
		"NotEqual":       2,
		"Greater":        3,
		"Less":           4,
		"GreaterOrEqual": 5,
		"LessOrEqual":    6,
		"Like":           7,
		"NotLike":        8,
		"In":             9,
		"NotIn":          10,
		"Empty":          11,
		"NotEmpty":       12,
		"AllIn":          13,
		"NotAllIn":       14,
		"ExactIn":        15,
		"NotExactIn":     16,
		"Exists":         17,
	}
)

func (x BlockContentDataviewFilterCondition) Enum() *BlockContentDataviewFilterCondition {
	p := new(BlockContentDataviewFilterCondition)
	*p = x
	return p
}

func (x BlockContentDataviewFilterCondition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockContentDataviewFilterCondition) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[36].Descriptor()
}

func (BlockContentDataviewFilterCondition) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[36]
}

func (x BlockContentDataviewFilterCondition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockContentDataviewFilterCondition.Descriptor instead.
func (BlockContentDataviewFilterCondition) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 9, 3, 1}
}

type BlockContentDataviewFilterQuickOption int32

const (
	BlockContentDataviewFilter_ExactDate       BlockContentDataviewFilterQuickOption = 0
	BlockContentDataviewFilter_Yesterday       BlockContentDataviewFilterQuickOption = 1
	BlockContentDataviewFilter_Today           BlockContentDataviewFilterQuickOption = 2
	BlockContentDataviewFilter_Tomorrow        BlockContentDataviewFilterQuickOption = 3
	BlockContentDataviewFilter_LastWeek        BlockContentDataviewFilterQuickOption = 4
	BlockContentDataviewFilter_CurrentWeek     BlockContentDataviewFilterQuickOption = 5
	BlockContentDataviewFilter_NextWeek        BlockContentDataviewFilterQuickOption = 6
	BlockContentDataviewFilter_LastMonth       BlockContentDataviewFilterQuickOption = 7
	BlockContentDataviewFilter_CurrentMonth    BlockContentDataviewFilterQuickOption = 8
	BlockContentDataviewFilter_NextMonth       BlockContentDataviewFilterQuickOption = 9
	BlockContentDataviewFilter_NumberOfDaysAgo BlockContentDataviewFilterQuickOption = 10
	BlockContentDataviewFilter_NumberOfDaysNow BlockContentDataviewFilterQuickOption = 11
)

// Enum value maps for BlockContentDataviewFilterQuickOption.
var (
	BlockContentDataviewFilterQuickOption_name = map[int32]string{
		0:  "ExactDate",
		1:  "Yesterday",
		2:  "Today",
		3:  "Tomorrow",
		4:  "LastWeek",
		5:  "CurrentWeek",
		6:  "NextWeek",
		7:  "LastMonth",
		8:  "CurrentMonth",
		9:  "NextMonth",
		10: "NumberOfDaysAgo",
		11: "NumberOfDaysNow",
	}
	BlockContentDataviewFilterQuickOption_value = map[string]int32{
		"ExactDate":       0,
		"Yesterday":       1,
		"Today":           2,
		"Tomorrow":        3,
		"LastWeek":        4,
		"CurrentWeek":     5,
		"NextWeek":        6,
		"LastMonth":       7,
		"CurrentMonth":    8,
		"NextMonth":       9,
		"NumberOfDaysAgo": 10,
		"NumberOfDaysNow": 11,
	}
)

func (x BlockContentDataviewFilterQuickOption) Enum() *BlockContentDataviewFilterQuickOption {
	p := new(BlockContentDataviewFilterQuickOption)
	*p = x
	return p
}

func (x BlockContentDataviewFilterQuickOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockContentDataviewFilterQuickOption) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[37].Descriptor()
}

func (BlockContentDataviewFilterQuickOption) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[37]
}

func (x BlockContentDataviewFilterQuickOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockContentDataviewFilterQuickOption.Descriptor instead.
func (BlockContentDataviewFilterQuickOption) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 9, 3, 2}
}

type BlockContentLatexProcessor int32

const (
	BlockContentLatex_Latex         BlockContentLatexProcessor = 0
	BlockContentLatex_Mermaid       BlockContentLatexProcessor = 1
	BlockContentLatex_Chart         BlockContentLatexProcessor = 2
	BlockContentLatex_Youtube       BlockContentLatexProcessor = 3
	BlockContentLatex_Vimeo         BlockContentLatexProcessor = 4
	BlockContentLatex_Soundcloud    BlockContentLatexProcessor = 5
	BlockContentLatex_GoogleMaps    BlockContentLatexProcessor = 6
	BlockContentLatex_Miro          BlockContentLatexProcessor = 7
	BlockContentLatex_Figma         BlockContentLatexProcessor = 8
	BlockContentLatex_Twitter       BlockContentLatexProcessor = 9
	BlockContentLatex_OpenStreetMap BlockContentLatexProcessor = 10
	BlockContentLatex_Reddit        BlockContentLatexProcessor = 11
	BlockContentLatex_Facebook      BlockContentLatexProcessor = 12
	BlockContentLatex_Instagram     BlockContentLatexProcessor = 13
	BlockContentLatex_Telegram      BlockContentLatexProcessor = 14
	BlockContentLatex_GithubGist    BlockContentLatexProcessor = 15
	BlockContentLatex_Codepen       BlockContentLatexProcessor = 16
	BlockContentLatex_Bilibili      BlockContentLatexProcessor = 17
	BlockContentLatex_Excalidraw    BlockContentLatexProcessor = 18
	BlockContentLatex_Kroki         BlockContentLatexProcessor = 19
	BlockContentLatex_Graphviz      BlockContentLatexProcessor = 20
	BlockContentLatex_Sketchfab     BlockContentLatexProcessor = 21
	BlockContentLatex_Image         BlockContentLatexProcessor = 22
)

// Enum value maps for BlockContentLatexProcessor.
var (
	BlockContentLatexProcessor_name = map[int32]string{
		0:  "Latex",
		1:  "Mermaid",
		2:  "Chart",
		3:  "Youtube",
		4:  "Vimeo",
		5:  "Soundcloud",
		6:  "GoogleMaps",
		7:  "Miro",
		8:  "Figma",
		9:  "Twitter",
		10: "OpenStreetMap",
		11: "Reddit",
		12: "Facebook",
		13: "Instagram",
		14: "Telegram",
		15: "GithubGist",
		16: "Codepen",
		17: "Bilibili",
		18: "Excalidraw",
		19: "Kroki",
		20: "Graphviz",
		21: "Sketchfab",
		22: "Image",
	}
	BlockContentLatexProcessor_value = map[string]int32{
		"Latex":         0,
		"Mermaid":       1,
		"Chart":         2,
		"Youtube":       3,
		"Vimeo":         4,
		"Soundcloud":    5,
		"GoogleMaps":    6,
		"Miro":          7,
		"Figma":         8,
		"Twitter":       9,
		"OpenStreetMap": 10,
		"Reddit":        11,
		"Facebook":      12,
		"Instagram":     13,
		"Telegram":      14,
		"GithubGist":    15,
		"Codepen":       16,
		"Bilibili":      17,
		"Excalidraw":    18,
		"Kroki":         19,
		"Graphviz":      20,
		"Sketchfab":     21,
		"Image":         22,
	}
)

func (x BlockContentLatexProcessor) Enum() *BlockContentLatexProcessor {
	p := new(BlockContentLatexProcessor)
	*p = x
	return p
}

func (x BlockContentLatexProcessor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockContentLatexProcessor) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[38].Descriptor()
}

func (BlockContentLatexProcessor) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[38]
}

func (x BlockContentLatexProcessor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockContentLatexProcessor.Descriptor instead.
func (BlockContentLatexProcessor) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 11, 0}
}

type BlockContentWidgetLayout int32

const (
	BlockContentWidget_Link        BlockContentWidgetLayout = 0
	BlockContentWidget_Tree        BlockContentWidgetLayout = 1
	BlockContentWidget_List        BlockContentWidgetLayout = 2
	BlockContentWidget_CompactList BlockContentWidgetLayout = 3
	BlockContentWidget_View        BlockContentWidgetLayout = 4
)

// Enum value maps for BlockContentWidgetLayout.
var (
	BlockContentWidgetLayout_name = map[int32]string{
		0: "Link",
		1: "Tree",
		2: "List",
		3: "CompactList",
		4: "View",
	}
	BlockContentWidgetLayout_value = map[string]int32{
		"Link":        0,
		"Tree":        1,
		"List":        2,
		"CompactList": 3,
		"View":        4,
	}
)

func (x BlockContentWidgetLayout) Enum() *BlockContentWidgetLayout {
	p := new(BlockContentWidgetLayout)
	*p = x
	return p
}

func (x BlockContentWidgetLayout) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockContentWidgetLayout) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[39].Descriptor()
}

func (BlockContentWidgetLayout) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[39]
}

func (x BlockContentWidgetLayout) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockContentWidgetLayout.Descriptor instead.
func (BlockContentWidgetLayout) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 16, 0}
}

type AccountStatusType int32

const (
	Account_Active          AccountStatusType = 0
	Account_PendingDeletion AccountStatusType = 1
	Account_StartedDeletion AccountStatusType = 2
	Account_Deleted         AccountStatusType = 3
)

// Enum value maps for AccountStatusType.
var (
	AccountStatusType_name = map[int32]string{
		0: "Active",
		1: "PendingDeletion",
		2: "StartedDeletion",
		3: "Deleted",
	}
	AccountStatusType_value = map[string]int32{
		"Active":          0,
		"PendingDeletion": 1,
		"StartedDeletion": 2,
		"Deleted":         3,
	}
)

func (x AccountStatusType) Enum() *AccountStatusType {
	p := new(AccountStatusType)
	*p = x
	return p
}

func (x AccountStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[40].Descriptor()
}

func (AccountStatusType) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[40]
}

func (x AccountStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountStatusType.Descriptor instead.
func (AccountStatusType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{5, 0}
}

type AccountAuthLocalApiScope int32

const (
	AccountAuth_Limited AccountAuthLocalApiScope = 0 // Used in WebClipper; AccountSelect(to be deprecated), ObjectSearch, ObjectShow, ObjectCreate, ObjectCreateFromURL, BlockPreview, BlockPaste, BroadcastPayloadEvent
	AccountAuth_JsonAPI AccountAuthLocalApiScope = 1 // JSON API only, no direct grpc api calls allowed
	AccountAuth_Full    AccountAuthLocalApiScope = 2 // Full access, not available via LocalLink
)

// Enum value maps for AccountAuthLocalApiScope.
var (
	AccountAuthLocalApiScope_name = map[int32]string{
		0: "Limited",
		1: "JsonAPI",
		2: "Full",
	}
	AccountAuthLocalApiScope_value = map[string]int32{
		"Limited": 0,
		"JsonAPI": 1,
		"Full":    2,
	}
)

func (x AccountAuthLocalApiScope) Enum() *AccountAuthLocalApiScope {
	p := new(AccountAuthLocalApiScope)
	*p = x
	return p
}

func (x AccountAuthLocalApiScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountAuthLocalApiScope) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[41].Descriptor()
}

func (AccountAuthLocalApiScope) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[41]
}

func (x AccountAuthLocalApiScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountAuthLocalApiScope.Descriptor instead.
func (AccountAuthLocalApiScope) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{5, 3, 0}
}

type LinkPreviewType int32

const (
	LinkPreview_Unknown LinkPreviewType = 0
	LinkPreview_Page    LinkPreviewType = 1
	LinkPreview_Image   LinkPreviewType = 2
	LinkPreview_Text    LinkPreviewType = 3
)

// Enum value maps for LinkPreviewType.
var (
	LinkPreviewType_name = map[int32]string{
		0: "Unknown",
		1: "Page",
		2: "Image",
		3: "Text",
	}
	LinkPreviewType_value = map[string]int32{
		"Unknown": 0,
		"Page":    1,
		"Image":   2,
		"Text":    3,
	}
)

func (x LinkPreviewType) Enum() *LinkPreviewType {
	p := new(LinkPreviewType)
	*p = x
	return p
}

func (x LinkPreviewType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkPreviewType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[42].Descriptor()
}

func (LinkPreviewType) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[42]
}

func (x LinkPreviewType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkPreviewType.Descriptor instead.
func (LinkPreviewType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{6, 0}
}

type RestrictionsObjectRestriction int32

const (
	Restrictions_None RestrictionsObjectRestriction = 0
	// restricts delete
	Restrictions_Delete RestrictionsObjectRestriction = 1
	// restricts work with relations
	Restrictions_Relations RestrictionsObjectRestriction = 2
	// restricts work with blocks
	Restrictions_Blocks RestrictionsObjectRestriction = 3
	// restricts work with details
	Restrictions_Details RestrictionsObjectRestriction = 4
	// restricts type changing
	Restrictions_TypeChange RestrictionsObjectRestriction = 5
	// restricts layout changing
	Restrictions_LayoutChange RestrictionsObjectRestriction = 6
	// restricts template creation from this object
	Restrictions_Template RestrictionsObjectRestriction = 7
	// restricts duplicate object
	Restrictions_Duplicate RestrictionsObjectRestriction = 8
	// can be set only for types. Restricts creating objects of this type
	Restrictions_CreateObjectOfThisType RestrictionsObjectRestriction = 9
	// object is not allowed to publish
	Restrictions_Publish RestrictionsObjectRestriction = 10
)

// Enum value maps for RestrictionsObjectRestriction.
var (
	RestrictionsObjectRestriction_name = map[int32]string{
		0:  "None",
		1:  "Delete",
		2:  "Relations",
		3:  "Blocks",
		4:  "Details",
		5:  "TypeChange",
		6:  "LayoutChange",
		7:  "Template",
		8:  "Duplicate",
		9:  "CreateObjectOfThisType",
		10: "Publish",
	}
	RestrictionsObjectRestriction_value = map[string]int32{
		"None":                   0,
		"Delete":                 1,
		"Relations":              2,
		"Blocks":                 3,
		"Details":                4,
		"TypeChange":             5,
		"LayoutChange":           6,
		"Template":               7,
		"Duplicate":              8,
		"CreateObjectOfThisType": 9,
		"Publish":                10,
	}
)

func (x RestrictionsObjectRestriction) Enum() *RestrictionsObjectRestriction {
	p := new(RestrictionsObjectRestriction)
	*p = x
	return p
}

func (x RestrictionsObjectRestriction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RestrictionsObjectRestriction) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[43].Descriptor()
}

func (RestrictionsObjectRestriction) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[43]
}

func (x RestrictionsObjectRestriction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RestrictionsObjectRestriction.Descriptor instead.
func (RestrictionsObjectRestriction) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{7, 0}
}

type RestrictionsDataviewRestriction int32

const (
	Restrictions_DVNone         RestrictionsDataviewRestriction = 0
	Restrictions_DVRelation     RestrictionsDataviewRestriction = 1
	Restrictions_DVCreateObject RestrictionsDataviewRestriction = 2
	Restrictions_DVViews        RestrictionsDataviewRestriction = 3
)

// Enum value maps for RestrictionsDataviewRestriction.
var (
	RestrictionsDataviewRestriction_name = map[int32]string{
		0: "DVNone",
		1: "DVRelation",
		2: "DVCreateObject",
		3: "DVViews",
	}
	RestrictionsDataviewRestriction_value = map[string]int32{
		"DVNone":         0,
		"DVRelation":     1,
		"DVCreateObject": 2,
		"DVViews":        3,
	}
)

func (x RestrictionsDataviewRestriction) Enum() *RestrictionsDataviewRestriction {
	p := new(RestrictionsDataviewRestriction)
	*p = x
	return p
}

func (x RestrictionsDataviewRestriction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RestrictionsDataviewRestriction) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[44].Descriptor()
}

func (RestrictionsDataviewRestriction) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[44]
}

func (x RestrictionsDataviewRestriction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RestrictionsDataviewRestriction.Descriptor instead.
func (RestrictionsDataviewRestriction) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{7, 1}
}

type ObjectTypeLayout int32

const (
	ObjectType_basic               ObjectTypeLayout = 0
	ObjectType_profile             ObjectTypeLayout = 1
	ObjectType_todo                ObjectTypeLayout = 2
	ObjectType_set                 ObjectTypeLayout = 3
	ObjectType_objectType          ObjectTypeLayout = 4
	ObjectType_relation            ObjectTypeLayout = 5
	ObjectType_file                ObjectTypeLayout = 6
	ObjectType_dashboard           ObjectTypeLayout = 7
	ObjectType_image               ObjectTypeLayout = 8
	ObjectType_note                ObjectTypeLayout = 9
	ObjectType_space               ObjectTypeLayout = 10
	ObjectType_bookmark            ObjectTypeLayout = 11
	ObjectType_relationOptionsList ObjectTypeLayout = 12
	ObjectType_relationOption      ObjectTypeLayout = 13
	ObjectType_collection          ObjectTypeLayout = 14
	ObjectType_audio               ObjectTypeLayout = 15
	ObjectType_video               ObjectTypeLayout = 16
	ObjectType_date                ObjectTypeLayout = 17
	ObjectType_spaceView           ObjectTypeLayout = 18
	ObjectType_participant         ObjectTypeLayout = 19
	ObjectType_pdf                 ObjectTypeLayout = 20
	ObjectType_chat                ObjectTypeLayout = 21 // deprecated
	ObjectType_chatDerived         ObjectTypeLayout = 22
	ObjectType_tag                 ObjectTypeLayout = 23
)

// Enum value maps for ObjectTypeLayout.
var (
	ObjectTypeLayout_name = map[int32]string{
		0:  "basic",
		1:  "profile",
		2:  "todo",
		3:  "set",
		4:  "objectType",
		5:  "relation",
		6:  "file",
		7:  "dashboard",
		8:  "image",
		9:  "note",
		10: "space",
		11: "bookmark",
		12: "relationOptionsList",
		13: "relationOption",
		14: "collection",
		15: "audio",
		16: "video",
		17: "date",
		18: "spaceView",
		19: "participant",
		20: "pdf",
		21: "chat",
		22: "chatDerived",
		23: "tag",
	}
	ObjectTypeLayout_value = map[string]int32{
		"basic":               0,
		"profile":             1,
		"todo":                2,
		"set":                 3,
		"objectType":          4,
		"relation":            5,
		"file":                6,
		"dashboard":           7,
		"image":               8,
		"note":                9,
		"space":               10,
		"bookmark":            11,
		"relationOptionsList": 12,
		"relationOption":      13,
		"collection":          14,
		"audio":               15,
		"video":               16,
		"date":                17,
		"spaceView":           18,
		"participant":         19,
		"pdf":                 20,
		"chat":                21,
		"chatDerived":         22,
		"tag":                 23,
	}
)

func (x ObjectTypeLayout) Enum() *ObjectTypeLayout {
	p := new(ObjectTypeLayout)
	*p = x
	return p
}

func (x ObjectTypeLayout) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectTypeLayout) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[45].Descriptor()
}

func (ObjectTypeLayout) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[45]
}

func (x ObjectTypeLayout) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectTypeLayout.Descriptor instead.
func (ObjectTypeLayout) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{10, 0}
}

type RelationScope int32

const (
	Relation_object               RelationScope = 0 // stored within the object
	Relation_type                 RelationScope = 1 // stored within the object type
	Relation_setOfTheSameType     RelationScope = 2 // aggregated from the dataview of sets of the same object type
	Relation_objectsOfTheSameType RelationScope = 3 // aggregated from the dataview of sets of the same object type
	Relation_library              RelationScope = 4 // aggregated from relations library
)

// Enum value maps for RelationScope.
var (
	RelationScope_name = map[int32]string{
		0: "object",
		1: "type",
		2: "setOfTheSameType",
		3: "objectsOfTheSameType",
		4: "library",
	}
	RelationScope_value = map[string]int32{
		"object":               0,
		"type":                 1,
		"setOfTheSameType":     2,
		"objectsOfTheSameType": 3,
		"library":              4,
	}
)

func (x RelationScope) Enum() *RelationScope {
	p := new(RelationScope)
	*p = x
	return p
}

func (x RelationScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelationScope) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[46].Descriptor()
}

func (RelationScope) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[46]
}

func (x RelationScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelationScope.Descriptor instead.
func (RelationScope) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{13, 0}
}

type RelationDataSource int32

const (
	Relation_details RelationDataSource = 0 // default, stored inside the object's details
	Relation_derived RelationDataSource = 1 // stored locally, e.g. in badger or generated on the fly
	Relation_account RelationDataSource = 2 // stored in the account DB. means existing only for specific anytype account
	Relation_local   RelationDataSource = 3 // stored locally
)

// Enum value maps for RelationDataSource.
var (
	RelationDataSource_name = map[int32]string{
		0: "details",
		1: "derived",
		2: "account",
		3: "local",
	}
	RelationDataSource_value = map[string]int32{
		"details": 0,
		"derived": 1,
		"account": 2,
		"local":   3,
	}
)

func (x RelationDataSource) Enum() *RelationDataSource {
	p := new(RelationDataSource)
	*p = x
	return p
}

func (x RelationDataSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelationDataSource) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[47].Descriptor()
}

func (RelationDataSource) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[47]
}

func (x RelationDataSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelationDataSource.Descriptor instead.
func (RelationDataSource) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{13, 1}
}

// Use such a weird construction due to the issue with imported repeated enum type
// Look https://github.com/golang/protobuf/issues/1135 for more information.
type InternalFlagValue int32

const (
	InternalFlag_editorDeleteEmpty        InternalFlagValue = 0
	InternalFlag_editorSelectType         InternalFlagValue = 1
	InternalFlag_editorSelectTemplate     InternalFlagValue = 2
	InternalFlag_collectionDontIndexLinks InternalFlagValue = 3
)

// Enum value maps for InternalFlagValue.
var (
	InternalFlagValue_name = map[int32]string{
		0: "editorDeleteEmpty",
		1: "editorSelectType",
		2: "editorSelectTemplate",
		3: "collectionDontIndexLinks",
	}
	InternalFlagValue_value = map[string]int32{
		"editorDeleteEmpty":        0,
		"editorSelectType":         1,
		"editorSelectTemplate":     2,
		"collectionDontIndexLinks": 3,
	}
)

func (x InternalFlagValue) Enum() *InternalFlagValue {
	p := new(InternalFlagValue)
	*p = x
	return p
}

func (x InternalFlagValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InternalFlagValue) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[48].Descriptor()
}

func (InternalFlagValue) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[48]
}

func (x InternalFlagValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InternalFlagValue.Descriptor instead.
func (InternalFlagValue) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{17, 0}
}

type NotificationStatus int32

const (
	Notification_Created NotificationStatus = 0
	Notification_Shown   NotificationStatus = 1
	Notification_Read    NotificationStatus = 2
	Notification_Replied NotificationStatus = 3
)

// Enum value maps for NotificationStatus.
var (
	NotificationStatus_name = map[int32]string{
		0: "Created",
		1: "Shown",
		2: "Read",
		3: "Replied",
	}
	NotificationStatus_value = map[string]int32{
		"Created": 0,
		"Shown":   1,
		"Read":    2,
		"Replied": 3,
	}
)

func (x NotificationStatus) Enum() *NotificationStatus {
	p := new(NotificationStatus)
	*p = x
	return p
}

func (x NotificationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[49].Descriptor()
}

func (NotificationStatus) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[49]
}

func (x NotificationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotificationStatus.Descriptor instead.
func (NotificationStatus) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{21, 0}
}

type NotificationActionType int32

const (
	Notification_CLOSE NotificationActionType = 0
)

// Enum value maps for NotificationActionType.
var (
	NotificationActionType_name = map[int32]string{
		0: "CLOSE",
	}
	NotificationActionType_value = map[string]int32{
		"CLOSE": 0,
	}
)

func (x NotificationActionType) Enum() *NotificationActionType {
	p := new(NotificationActionType)
	*p = x
	return p
}

func (x NotificationActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[50].Descriptor()
}

func (NotificationActionType) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[50]
}

func (x NotificationActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotificationActionType.Descriptor instead.
func (NotificationActionType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{21, 1}
}

type NotificationExportCode int32

const (
	NotificationExport_NULL          NotificationExportCode = 0
	NotificationExport_UNKNOWN_ERROR NotificationExportCode = 1
	NotificationExport_BAD_INPUT     NotificationExportCode = 2
)

// Enum value maps for NotificationExportCode.
var (
	NotificationExportCode_name = map[int32]string{
		0: "NULL",
		1: "UNKNOWN_ERROR",
		2: "BAD_INPUT",
	}
	NotificationExportCode_value = map[string]int32{
		"NULL":          0,
		"UNKNOWN_ERROR": 1,
		"BAD_INPUT":     2,
	}
)

func (x NotificationExportCode) Enum() *NotificationExportCode {
	p := new(NotificationExportCode)
	*p = x
	return p
}

func (x NotificationExportCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationExportCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[51].Descriptor()
}

func (NotificationExportCode) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[51]
}

func (x NotificationExportCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotificationExportCode.Descriptor instead.
func (NotificationExportCode) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{21, 1, 0}
}

type ExportFormat int32

const (
	Export_Markdown   ExportFormat = 0
	Export_Protobuf   ExportFormat = 1
	Export_JSON       ExportFormat = 2
	Export_DOT        ExportFormat = 3
	Export_SVG        ExportFormat = 4
	Export_GRAPH_JSON ExportFormat = 5
)

// Enum value maps for ExportFormat.
var (
	ExportFormat_name = map[int32]string{
		0: "Markdown",
		1: "Protobuf",
		2: "JSON",
		3: "DOT",
		4: "SVG",
		5: "GRAPH_JSON",
	}
	ExportFormat_value = map[string]int32{
		"Markdown":   0,
		"Protobuf":   1,
		"JSON":       2,
		"DOT":        3,
		"SVG":        4,
		"GRAPH_JSON": 5,
	}
)

func (x ExportFormat) Enum() *ExportFormat {
	p := new(ExportFormat)
	*p = x
	return p
}

func (x ExportFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExportFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[52].Descriptor()
}

func (ExportFormat) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[52]
}

func (x ExportFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExportFormat.Descriptor instead.
func (ExportFormat) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{22, 0}
}

type ImportType int32

const (
	Import_Notion   ImportType = 0
	Import_Markdown ImportType = 1
	Import_External ImportType = 2 // external developers use it
	Import_Pb       ImportType = 3
	Import_Html     ImportType = 4
	Import_Txt      ImportType = 5
	Import_Csv      ImportType = 6
)

// Enum value maps for ImportType.
var (
	ImportType_name = map[int32]string{
		0: "Notion",
		1: "Markdown",
		2: "External",
		3: "Pb",
		4: "Html",
		5: "Txt",
		6: "Csv",
	}
	ImportType_value = map[string]int32{
		"Notion":   0,
		"Markdown": 1,
		"External": 2,
		"Pb":       3,
		"Html":     4,
		"Txt":      5,
		"Csv":      6,
	}
)

func (x ImportType) Enum() *ImportType {
	p := new(ImportType)
	*p = x
	return p
}

func (x ImportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImportType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[53].Descriptor()
}

func (ImportType) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[53]
}

func (x ImportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImportType.Descriptor instead.
func (ImportType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{23, 0}
}

type ImportErrorCode int32

const (
	Import_NULL                                    ImportErrorCode = 0
	Import_UNKNOWN_ERROR                           ImportErrorCode = 1
	Import_BAD_INPUT                               ImportErrorCode = 2
	Import_INTERNAL_ERROR                          ImportErrorCode = 3
	Import_FILE_LOAD_ERROR                         ImportErrorCode = 8
	Import_IMPORT_IS_CANCELED                      ImportErrorCode = 6
	Import_NOTION_NO_OBJECTS_IN_INTEGRATION        ImportErrorCode = 5
	Import_NOTION_SERVER_IS_UNAVAILABLE            ImportErrorCode = 12
	Import_NOTION_RATE_LIMIT_EXCEEDED              ImportErrorCode = 13
	Import_FILE_IMPORT_NO_OBJECTS_IN_ZIP_ARCHIVE   ImportErrorCode = 14
	Import_FILE_IMPORT_NO_OBJECTS_IN_DIRECTORY     ImportErrorCode = 17
	Import_HTML_WRONG_HTML_STRUCTURE               ImportErrorCode = 10
	Import_PB_NOT_ANYBLOCK_FORMAT                  ImportErrorCode = 11
	Import_CSV_LIMIT_OF_ROWS_OR_RELATIONS_EXCEEDED ImportErrorCode = 7
	Import_INSUFFICIENT_PERMISSIONS                ImportErrorCode = 9
)

// Enum value maps for ImportErrorCode.
var (
	ImportErrorCode_name = map[int32]string{
		0:  "NULL",
		1:  "UNKNOWN_ERROR",
		2:  "BAD_INPUT",
		3:  "INTERNAL_ERROR",
		8:  "FILE_LOAD_ERROR",
		6:  "IMPORT_IS_CANCELED",
		5:  "NOTION_NO_OBJECTS_IN_INTEGRATION",
		12: "NOTION_SERVER_IS_UNAVAILABLE",
		13: "NOTION_RATE_LIMIT_EXCEEDED",
		14: "FILE_IMPORT_NO_OBJECTS_IN_ZIP_ARCHIVE",
		17: "FILE_IMPORT_NO_OBJECTS_IN_DIRECTORY",
		10: "HTML_WRONG_HTML_STRUCTURE",
		11: "PB_NOT_ANYBLOCK_FORMAT",
		7:  "CSV_LIMIT_OF_ROWS_OR_RELATIONS_EXCEEDED",
		9:  "INSUFFICIENT_PERMISSIONS",
	}
	ImportErrorCode_value = map[string]int32{
		"NULL":                                    0,
		"UNKNOWN_ERROR":                           1,
		"BAD_INPUT":                               2,
		"INTERNAL_ERROR":                          3,
		"FILE_LOAD_ERROR":                         8,
		"IMPORT_IS_CANCELED":                      6,
		"NOTION_NO_OBJECTS_IN_INTEGRATION":        5,
		"NOTION_SERVER_IS_UNAVAILABLE":            12,
		"NOTION_RATE_LIMIT_EXCEEDED":              13,
		"FILE_IMPORT_NO_OBJECTS_IN_ZIP_ARCHIVE":   14,
		"FILE_IMPORT_NO_OBJECTS_IN_DIRECTORY":     17,
		"HTML_WRONG_HTML_STRUCTURE":               10,
		"PB_NOT_ANYBLOCK_FORMAT":                  11,
		"CSV_LIMIT_OF_ROWS_OR_RELATIONS_EXCEEDED": 7,
		"INSUFFICIENT_PERMISSIONS":                9,
	}
)

func (x ImportErrorCode) Enum() *ImportErrorCode {
	p := new(ImportErrorCode)
	*p = x
	return p
}

func (x ImportErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImportErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[54].Descriptor()
}

func (ImportErrorCode) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[54]
}

func (x ImportErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImportErrorCode.Descriptor instead.
func (ImportErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{23, 1}
}

type MembershipStatus int32

const (
	Membership_StatusUnknown MembershipStatus = 0
	// please wait a bit more, we are still processing your request
	// the payment is confirmed, but we need more time to do some side-effects:
	// - increase limits
	// - send emails
	// - allocate names
	Membership_StatusPending MembershipStatus = 1
	// the membership is active, ready to use!
	Membership_StatusActive MembershipStatus = 2
	// in some cases we need to finalize the process:
	// - if user has bought membership directly without first calling
	// the BuySubscription method
	// in this case please call Finalize to finish the process
	Membership_StatusPendingRequiresFinalization MembershipStatus = 3
)

// Enum value maps for MembershipStatus.
var (
	MembershipStatus_name = map[int32]string{
		0: "StatusUnknown",
		1: "StatusPending",
		2: "StatusActive",
		3: "StatusPendingRequiresFinalization",
	}
	MembershipStatus_value = map[string]int32{
		"StatusUnknown":                     0,
		"StatusPending":                     1,
		"StatusActive":                      2,
		"StatusPendingRequiresFinalization": 3,
	}
)

func (x MembershipStatus) Enum() *MembershipStatus {
	p := new(MembershipStatus)
	*p = x
	return p
}

func (x MembershipStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MembershipStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[55].Descriptor()
}

func (MembershipStatus) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[55]
}

func (x MembershipStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MembershipStatus.Descriptor instead.
func (MembershipStatus) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{30, 0}
}

type MembershipPaymentMethod int32

const (
	Membership_MethodNone        MembershipPaymentMethod = 0
	Membership_MethodStripe      MembershipPaymentMethod = 1
	Membership_MethodCrypto      MembershipPaymentMethod = 2
	Membership_MethodInappApple  MembershipPaymentMethod = 3
	Membership_MethodInappGoogle MembershipPaymentMethod = 4
)

// Enum value maps for MembershipPaymentMethod.
var (
	MembershipPaymentMethod_name = map[int32]string{
		0: "MethodNone",
		1: "MethodStripe",
		2: "MethodCrypto",
		3: "MethodInappApple",
		4: "MethodInappGoogle",
	}
	MembershipPaymentMethod_value = map[string]int32{
		"MethodNone":        0,
		"MethodStripe":      1,
		"MethodCrypto":      2,
		"MethodInappApple":  3,
		"MethodInappGoogle": 4,
	}
)

func (x MembershipPaymentMethod) Enum() *MembershipPaymentMethod {
	p := new(MembershipPaymentMethod)
	*p = x
	return p
}

func (x MembershipPaymentMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MembershipPaymentMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[56].Descriptor()
}

func (MembershipPaymentMethod) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[56]
}

func (x MembershipPaymentMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MembershipPaymentMethod.Descriptor instead.
func (MembershipPaymentMethod) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{30, 1}
}

type MembershipEmailVerificationStatus int32

const (
	// user NEVER comleted the verification of the email
	Membership_StatusNotVerified MembershipEmailVerificationStatus = 0
	// user has asked for new code, but did not enter it yet
	// (even if email was verified before, you can ask to UPDATE your e-mail)
	// please wait, you can not ask for more codes yet
	Membership_StatusCodeSent MembershipEmailVerificationStatus = 1
	// the e-mail is finally verified
	Membership_StatusVerified MembershipEmailVerificationStatus = 2
)

// Enum value maps for MembershipEmailVerificationStatus.
var (
	MembershipEmailVerificationStatus_name = map[int32]string{
		0: "StatusNotVerified",
		1: "StatusCodeSent",
		2: "StatusVerified",
	}
	MembershipEmailVerificationStatus_value = map[string]int32{
		"StatusNotVerified": 0,
		"StatusCodeSent":    1,
		"StatusVerified":    2,
	}
)

func (x MembershipEmailVerificationStatus) Enum() *MembershipEmailVerificationStatus {
	p := new(MembershipEmailVerificationStatus)
	*p = x
	return p
}

func (x MembershipEmailVerificationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MembershipEmailVerificationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[57].Descriptor()
}

func (MembershipEmailVerificationStatus) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[57]
}

func (x MembershipEmailVerificationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MembershipEmailVerificationStatus.Descriptor instead.
func (MembershipEmailVerificationStatus) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{30, 2}
}

type MembershipTierDataPeriodType int32

const (
	MembershipTierData_PeriodTypeUnknown   MembershipTierDataPeriodType = 0
	MembershipTierData_PeriodTypeUnlimited MembershipTierDataPeriodType = 1
	MembershipTierData_PeriodTypeDays      MembershipTierDataPeriodType = 2
	MembershipTierData_PeriodTypeWeeks     MembershipTierDataPeriodType = 3
	MembershipTierData_PeriodTypeMonths    MembershipTierDataPeriodType = 4
	MembershipTierData_PeriodTypeYears     MembershipTierDataPeriodType = 5
)

// Enum value maps for MembershipTierDataPeriodType.
var (
	MembershipTierDataPeriodType_name = map[int32]string{
		0: "PeriodTypeUnknown",
		1: "PeriodTypeUnlimited",
		2: "PeriodTypeDays",
		3: "PeriodTypeWeeks",
		4: "PeriodTypeMonths",
		5: "PeriodTypeYears",
	}
	MembershipTierDataPeriodType_value = map[string]int32{
		"PeriodTypeUnknown":   0,
		"PeriodTypeUnlimited": 1,
		"PeriodTypeDays":      2,
		"PeriodTypeWeeks":     3,
		"PeriodTypeMonths":    4,
		"PeriodTypeYears":     5,
	}
)

func (x MembershipTierDataPeriodType) Enum() *MembershipTierDataPeriodType {
	p := new(MembershipTierDataPeriodType)
	*p = x
	return p
}

func (x MembershipTierDataPeriodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MembershipTierDataPeriodType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[58].Descriptor()
}

func (MembershipTierDataPeriodType) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[58]
}

func (x MembershipTierDataPeriodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MembershipTierDataPeriodType.Descriptor instead.
func (MembershipTierDataPeriodType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{31, 0}
}

type ChatMessageAttachmentAttachmentType int32

const (
	ChatMessageAttachment_FILE  ChatMessageAttachmentAttachmentType = 0 // File attachment
	ChatMessageAttachment_IMAGE ChatMessageAttachmentAttachmentType = 1 // Image attachment
	ChatMessageAttachment_LINK  ChatMessageAttachmentAttachmentType = 2 // Link attachment
)

// Enum value maps for ChatMessageAttachmentAttachmentType.
var (
	ChatMessageAttachmentAttachmentType_name = map[int32]string{
		0: "FILE",
		1: "IMAGE",
		2: "LINK",
	}
	ChatMessageAttachmentAttachmentType_value = map[string]int32{
		"FILE":  0,
		"IMAGE": 1,
		"LINK":  2,
	}
)

func (x ChatMessageAttachmentAttachmentType) Enum() *ChatMessageAttachmentAttachmentType {
	p := new(ChatMessageAttachmentAttachmentType)
	*p = x
	return p
}

func (x ChatMessageAttachmentAttachmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatMessageAttachmentAttachmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_lib_pb_model_protos_models_proto_enumTypes[59].Descriptor()
}

func (ChatMessageAttachmentAttachmentType) Type() protoreflect.EnumType {
	return &file_pkg_lib_pb_model_protos_models_proto_enumTypes[59]
}

func (x ChatMessageAttachmentAttachmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatMessageAttachmentAttachmentType.Descriptor instead.
func (ChatMessageAttachmentAttachmentType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{35, 1, 0}
}

type SmartBlockSnapshotBase struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Blocks  []*Block               `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
	Details *structpb.Struct       `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	// Deprecated: Marked as deprecated in pkg/lib/pb/model/protos/models.proto.
	FileKeys *structpb.Struct `protobuf:"bytes,3,opt,name=fileKeys,proto3" json:"fileKeys,omitempty"`
	// Deprecated: Marked as deprecated in pkg/lib/pb/model/protos/models.proto.
	ExtraRelations           []*Relation      `protobuf:"bytes,4,rep,name=extraRelations,proto3" json:"extraRelations,omitempty"`
	ObjectTypes              []string         `protobuf:"bytes,5,rep,name=objectTypes,proto3" json:"objectTypes,omitempty"`
	Collections              *structpb.Struct `protobuf:"bytes,6,opt,name=collections,proto3" json:"collections,omitempty"`
	RemovedCollectionKeys    []string         `protobuf:"bytes,8,rep,name=removedCollectionKeys,proto3" json:"removedCollectionKeys,omitempty"`
	RelationLinks            []*RelationLink  `protobuf:"bytes,7,rep,name=relationLinks,proto3" json:"relationLinks,omitempty"`
	Key                      string           `protobuf:"bytes,9,opt,name=key,proto3" json:"key,omitempty"`                                             // only used for pb backup purposes, ignored in other cases
	OriginalCreatedTimestamp int64            `protobuf:"varint,10,opt,name=originalCreatedTimestamp,proto3" json:"originalCreatedTimestamp,omitempty"` // ignored in import/export in favor of createdDate relation. Used to store original user-side object creation timestamp
	FileInfo                 *FileInfo        `protobuf:"bytes,11,opt,name=fileInfo,proto3" json:"fileInfo,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *SmartBlockSnapshotBase) Reset() {
	*x = SmartBlockSnapshotBase{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmartBlockSnapshotBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartBlockSnapshotBase) ProtoMessage() {}

func (x *SmartBlockSnapshotBase) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartBlockSnapshotBase.ProtoReflect.Descriptor instead.
func (*SmartBlockSnapshotBase) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{0}
}

func (x *SmartBlockSnapshotBase) GetBlocks() []*Block {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *SmartBlockSnapshotBase) GetDetails() *structpb.Struct {
	if x != nil {
		return x.Details
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/lib/pb/model/protos/models.proto.
func (x *SmartBlockSnapshotBase) GetFileKeys() *structpb.Struct {
	if x != nil {
		return x.FileKeys
	}
	return nil
}

// Deprecated: Marked as deprecated in pkg/lib/pb/model/protos/models.proto.
func (x *SmartBlockSnapshotBase) GetExtraRelations() []*Relation {
	if x != nil {
		return x.ExtraRelations
	}
	return nil
}

func (x *SmartBlockSnapshotBase) GetObjectTypes() []string {
	if x != nil {
		return x.ObjectTypes
	}
	return nil
}

func (x *SmartBlockSnapshotBase) GetCollections() *structpb.Struct {
	if x != nil {
		return x.Collections
	}
	return nil
}

func (x *SmartBlockSnapshotBase) GetRemovedCollectionKeys() []string {
	if x != nil {
		return x.RemovedCollectionKeys
	}
	return nil
}

func (x *SmartBlockSnapshotBase) GetRelationLinks() []*RelationLink {
	if x != nil {
		return x.RelationLinks
	}
	return nil
}

func (x *SmartBlockSnapshotBase) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SmartBlockSnapshotBase) GetOriginalCreatedTimestamp() int64 {
	if x != nil {
		return x.OriginalCreatedTimestamp
	}
	return 0
}

func (x *SmartBlockSnapshotBase) GetFileInfo() *FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

type Search struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Search) Reset() {
	*x = Search{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Search) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Search) ProtoMessage() {}

func (x *Search) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Search.ProtoReflect.Descriptor instead.
func (*Search) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{1}
}

type Block struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Fields          *structpb.Struct       `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
	Restrictions    *BlockRestrictions     `protobuf:"bytes,3,opt,name=restrictions,proto3" json:"restrictions,omitempty"`
	ChildrenIds     []string               `protobuf:"bytes,4,rep,name=childrenIds,proto3" json:"childrenIds,omitempty"`
	BackgroundColor string                 `protobuf:"bytes,5,opt,name=backgroundColor,proto3" json:"backgroundColor,omitempty"`
	Align           BlockAlign             `protobuf:"varint,6,opt,name=align,proto3,enum=anytype.model.BlockAlign" json:"align,omitempty"`
	VerticalAlign   BlockVerticalAlign     `protobuf:"varint,7,opt,name=verticalAlign,proto3,enum=anytype.model.BlockVerticalAlign" json:"verticalAlign,omitempty"`
	// Types that are valid to be assigned to Content:
	//
	//	*BlockContentOfSmartblock
	//	*BlockContentOfText
	//	*BlockContentOfFile
	//	*BlockContentOfLayout
	//	*BlockContentOfDiv
	//	*BlockContentOfBookmark
	//	*BlockContentOfIcon
	//	*BlockContentOfLink
	//	*BlockContentOfDataview
	//	*BlockContentOfRelation
	//	*BlockContentOfFeaturedRelations
	//	*BlockContentOfLatex
	//	*BlockContentOfTableOfContents
	//	*BlockContentOfTable
	//	*BlockContentOfTableColumn
	//	*BlockContentOfTableRow
	//	*BlockContentOfWidget
	//	*BlockContentOfChat
	Content       IsBlockContent `protobuf_oneof:"content"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Block) Reset() {
	*x = Block{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2}
}

func (x *Block) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Block) GetFields() *structpb.Struct {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Block) GetRestrictions() *BlockRestrictions {
	if x != nil {
		return x.Restrictions
	}
	return nil
}

func (x *Block) GetChildrenIds() []string {
	if x != nil {
		return x.ChildrenIds
	}
	return nil
}

func (x *Block) GetBackgroundColor() string {
	if x != nil {
		return x.BackgroundColor
	}
	return ""
}

func (x *Block) GetAlign() BlockAlign {
	if x != nil {
		return x.Align
	}
	return Block_AlignLeft
}

func (x *Block) GetVerticalAlign() BlockVerticalAlign {
	if x != nil {
		return x.VerticalAlign
	}
	return Block_VerticalAlignTop
}

func (x *Block) GetContent() IsBlockContent {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Block) GetSmartblock() *BlockContentSmartblock {
	if x != nil {
		if x, ok := x.Content.(*BlockContentOfSmartblock); ok {
			return x.Smartblock
		}
	}
	return nil
}

func (x *Block) GetText() *BlockContentText {
	if x != nil {
		if x, ok := x.Content.(*BlockContentOfText); ok {
			return x.Text
		}
	}
	return nil
}

func (x *Block) GetFile() *BlockContentFile {
	if x != nil {
		if x, ok := x.Content.(*BlockContentOfFile); ok {
			return x.File
		}
	}
	return nil
}

func (x *Block) GetLayout() *BlockContentLayout {
	if x != nil {
		if x, ok := x.Content.(*BlockContentOfLayout); ok {
			return x.Layout
		}
	}
	return nil
}

func (x *Block) GetDiv() *BlockContentDiv {
	if x != nil {
		if x, ok := x.Content.(*BlockContentOfDiv); ok {
			return x.Div
		}
	}
	return nil
}

func (x *Block) GetBookmark() *BlockContentBookmark {
	if x != nil {
		if x, ok := x.Content.(*BlockContentOfBookmark); ok {
			return x.Bookmark
		}
	}
	return nil
}

func (x *Block) GetIcon() *BlockContentIcon {
	if x != nil {
		if x, ok := x.Content.(*BlockContentOfIcon); ok {
			return x.Icon
		}
	}
	return nil
}

func (x *Block) GetLink() *BlockContentLink {
	if x != nil {
		if x, ok := x.Content.(*BlockContentOfLink); ok {
			return x.Link
		}
	}
	return nil
}

func (x *Block) GetDataview() *BlockContentDataview {
	if x != nil {
		if x, ok := x.Content.(*BlockContentOfDataview); ok {
			return x.Dataview
		}
	}
	return nil
}

func (x *Block) GetRelation() *BlockContentRelation {
	if x != nil {
		if x, ok := x.Content.(*BlockContentOfRelation); ok {
			return x.Relation
		}
	}
	return nil
}

func (x *Block) GetFeaturedRelations() *BlockContentFeaturedRelations {
	if x != nil {
		if x, ok := x.Content.(*BlockContentOfFeaturedRelations); ok {
			return x.FeaturedRelations
		}
	}
	return nil
}

func (x *Block) GetLatex() *BlockContentLatex {
	if x != nil {
		if x, ok := x.Content.(*BlockContentOfLatex); ok {
			return x.Latex
		}
	}
	return nil
}

func (x *Block) GetTableOfContents() *BlockContentTableOfContents {
	if x != nil {
		if x, ok := x.Content.(*BlockContentOfTableOfContents); ok {
			return x.TableOfContents
		}
	}
	return nil
}

func (x *Block) GetTable() *BlockContentTable {
	if x != nil {
		if x, ok := x.Content.(*BlockContentOfTable); ok {
			return x.Table
		}
	}
	return nil
}

func (x *Block) GetTableColumn() *BlockContentTableColumn {
	if x != nil {
		if x, ok := x.Content.(*BlockContentOfTableColumn); ok {
			return x.TableColumn
		}
	}
	return nil
}

func (x *Block) GetTableRow() *BlockContentTableRow {
	if x != nil {
		if x, ok := x.Content.(*BlockContentOfTableRow); ok {
			return x.TableRow
		}
	}
	return nil
}

func (x *Block) GetWidget() *BlockContentWidget {
	if x != nil {
		if x, ok := x.Content.(*BlockContentOfWidget); ok {
			return x.Widget
		}
	}
	return nil
}

func (x *Block) GetChat() *BlockContentChat {
	if x != nil {
		if x, ok := x.Content.(*BlockContentOfChat); ok {
			return x.Chat
		}
	}
	return nil
}

type IsBlockContent interface {
	IsBlockContent()
}

type BlockContentOfSmartblock struct {
	Smartblock *BlockContentSmartblock `protobuf:"bytes,11,opt,name=smartblock,proto3,oneof" json:"smartblock,omitempty"`
}

type BlockContentOfText struct {
	Text *BlockContentText `protobuf:"bytes,14,opt,name=text,proto3,oneof" json:"text,omitempty"`
}

type BlockContentOfFile struct {
	File *BlockContentFile `protobuf:"bytes,15,opt,name=file,proto3,oneof" json:"file,omitempty"`
}

type BlockContentOfLayout struct {
	Layout *BlockContentLayout `protobuf:"bytes,16,opt,name=layout,proto3,oneof" json:"layout,omitempty"`
}

type BlockContentOfDiv struct {
	Div *BlockContentDiv `protobuf:"bytes,17,opt,name=div,proto3,oneof" json:"div,omitempty"`
}

type BlockContentOfBookmark struct {
	Bookmark *BlockContentBookmark `protobuf:"bytes,18,opt,name=bookmark,proto3,oneof" json:"bookmark,omitempty"`
}

type BlockContentOfIcon struct {
	Icon *BlockContentIcon `protobuf:"bytes,19,opt,name=icon,proto3,oneof" json:"icon,omitempty"`
}

type BlockContentOfLink struct {
	Link *BlockContentLink `protobuf:"bytes,20,opt,name=link,proto3,oneof" json:"link,omitempty"`
}

type BlockContentOfDataview struct {
	Dataview *BlockContentDataview `protobuf:"bytes,21,opt,name=dataview,proto3,oneof" json:"dataview,omitempty"`
}

type BlockContentOfRelation struct {
	Relation *BlockContentRelation `protobuf:"bytes,22,opt,name=relation,proto3,oneof" json:"relation,omitempty"`
}

type BlockContentOfFeaturedRelations struct {
	FeaturedRelations *BlockContentFeaturedRelations `protobuf:"bytes,23,opt,name=featuredRelations,proto3,oneof" json:"featuredRelations,omitempty"`
}

type BlockContentOfLatex struct {
	Latex *BlockContentLatex `protobuf:"bytes,24,opt,name=latex,proto3,oneof" json:"latex,omitempty"`
}

type BlockContentOfTableOfContents struct {
	TableOfContents *BlockContentTableOfContents `protobuf:"bytes,25,opt,name=tableOfContents,proto3,oneof" json:"tableOfContents,omitempty"`
}

type BlockContentOfTable struct {
	Table *BlockContentTable `protobuf:"bytes,26,opt,name=table,proto3,oneof" json:"table,omitempty"`
}

type BlockContentOfTableColumn struct {
	TableColumn *BlockContentTableColumn `protobuf:"bytes,27,opt,name=tableColumn,proto3,oneof" json:"tableColumn,omitempty"`
}

type BlockContentOfTableRow struct {
	TableRow *BlockContentTableRow `protobuf:"bytes,28,opt,name=tableRow,proto3,oneof" json:"tableRow,omitempty"`
}

type BlockContentOfWidget struct {
	Widget *BlockContentWidget `protobuf:"bytes,29,opt,name=widget,proto3,oneof" json:"widget,omitempty"`
}

type BlockContentOfChat struct {
	Chat *BlockContentChat `protobuf:"bytes,30,opt,name=chat,proto3,oneof" json:"chat,omitempty"`
}

func (*BlockContentOfSmartblock) IsBlockContent() {}

func (*BlockContentOfText) IsBlockContent() {}

func (*BlockContentOfFile) IsBlockContent() {}

func (*BlockContentOfLayout) IsBlockContent() {}

func (*BlockContentOfDiv) IsBlockContent() {}

func (*BlockContentOfBookmark) IsBlockContent() {}

func (*BlockContentOfIcon) IsBlockContent() {}

func (*BlockContentOfLink) IsBlockContent() {}

func (*BlockContentOfDataview) IsBlockContent() {}

func (*BlockContentOfRelation) IsBlockContent() {}

func (*BlockContentOfFeaturedRelations) IsBlockContent() {}

func (*BlockContentOfLatex) IsBlockContent() {}

func (*BlockContentOfTableOfContents) IsBlockContent() {}

func (*BlockContentOfTable) IsBlockContent() {}

func (*BlockContentOfTableColumn) IsBlockContent() {}

func (*BlockContentOfTableRow) IsBlockContent() {}

func (*BlockContentOfWidget) IsBlockContent() {}

func (*BlockContentOfChat) IsBlockContent() {}

// Used to decode block meta only, without the content itself
type BlockMetaOnly struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Fields        *structpb.Struct       `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockMetaOnly) Reset() {
	*x = BlockMetaOnly{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockMetaOnly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockMetaOnly) ProtoMessage() {}

func (x *BlockMetaOnly) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockMetaOnly.ProtoReflect.Descriptor instead.
func (*BlockMetaOnly) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{3}
}

func (x *BlockMetaOnly) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BlockMetaOnly) GetFields() *structpb.Struct {
	if x != nil {
		return x.Fields
	}
	return nil
}

// General purpose structure, uses in Mark.
type Range struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          int32                  `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To            int32                  `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Range) Reset() {
	*x = Range{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{4}
}

func (x *Range) GetFrom() int32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *Range) GetTo() int32 {
	if x != nil {
		return x.To
	}
	return 0
}

// *
// Contains basic information about a user account
type Account struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // User's thread id
	Config        *AccountConfig         `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	Status        *AccountStatus         `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Info          *AccountInfo           `protobuf:"bytes,6,opt,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Account) Reset() {
	*x = Account{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{5}
}

func (x *Account) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Account) GetConfig() *AccountConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Account) GetStatus() *AccountStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Account) GetInfo() *AccountInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type LinkPreview struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ImageUrl      string                 `protobuf:"bytes,4,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
	FaviconUrl    string                 `protobuf:"bytes,5,opt,name=faviconUrl,proto3" json:"faviconUrl,omitempty"`
	Type          LinkPreviewType        `protobuf:"varint,6,opt,name=type,proto3,enum=anytype.model.LinkPreviewType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinkPreview) Reset() {
	*x = LinkPreview{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkPreview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkPreview) ProtoMessage() {}

func (x *LinkPreview) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkPreview.ProtoReflect.Descriptor instead.
func (*LinkPreview) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{6}
}

func (x *LinkPreview) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *LinkPreview) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *LinkPreview) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LinkPreview) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *LinkPreview) GetFaviconUrl() string {
	if x != nil {
		return x.FaviconUrl
	}
	return ""
}

func (x *LinkPreview) GetType() LinkPreviewType {
	if x != nil {
		return x.Type
	}
	return LinkPreview_Unknown
}

type Restrictions struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Object        []RestrictionsObjectRestriction     `protobuf:"varint,1,rep,packed,name=object,proto3,enum=anytype.model.RestrictionsObjectRestriction" json:"object,omitempty"`
	Dataview      []*RestrictionsDataviewRestrictions `protobuf:"bytes,2,rep,name=dataview,proto3" json:"dataview,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Restrictions) Reset() {
	*x = Restrictions{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Restrictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Restrictions) ProtoMessage() {}

func (x *Restrictions) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Restrictions.ProtoReflect.Descriptor instead.
func (*Restrictions) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{7}
}

func (x *Restrictions) GetObject() []RestrictionsObjectRestriction {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *Restrictions) GetDataview() []*RestrictionsDataviewRestrictions {
	if x != nil {
		return x.Dataview
	}
	return nil
}

type Object struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Object) Reset() {
	*x = Object{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Object) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Object) ProtoMessage() {}

func (x *Object) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Object.ProtoReflect.Descriptor instead.
func (*Object) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{8}
}

type SpaceObjectHeader struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpaceID       string                 `protobuf:"bytes,1,opt,name=spaceID,proto3" json:"spaceID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpaceObjectHeader) Reset() {
	*x = SpaceObjectHeader{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpaceObjectHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpaceObjectHeader) ProtoMessage() {}

func (x *SpaceObjectHeader) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpaceObjectHeader.ProtoReflect.Descriptor instead.
func (*SpaceObjectHeader) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{9}
}

func (x *SpaceObjectHeader) GetSpaceID() string {
	if x != nil {
		return x.SpaceID
	}
	return ""
}

type ObjectType struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Url                    string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`                     // leave empty in case you want to create the new one
	Name                   string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                   // name of objectType (can be localized for bundled types)
	RelationLinks          []*RelationLink        `protobuf:"bytes,3,rep,name=relationLinks,proto3" json:"relationLinks,omitempty"` // cannot contain more than one Relation with the same RelationType
	Layout                 ObjectTypeLayout       `protobuf:"varint,4,opt,name=layout,proto3,enum=anytype.model.ObjectTypeLayout" json:"layout,omitempty"`
	IconEmoji              string                 `protobuf:"bytes,5,opt,name=iconEmoji,proto3" json:"iconEmoji,omitempty"` // emoji symbol
	Description            string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Hidden                 bool                   `protobuf:"varint,7,opt,name=hidden,proto3" json:"hidden,omitempty"`
	Readonly               bool                   `protobuf:"varint,10,opt,name=readonly,proto3" json:"readonly,omitempty"`
	Types                  []SmartBlockType       `protobuf:"varint,8,rep,packed,name=types,proto3,enum=anytype.model.SmartBlockType" json:"types,omitempty"`
	IsArchived             bool                   `protobuf:"varint,9,opt,name=isArchived,proto3" json:"isArchived,omitempty"` // sets locally to hide object type from set and some other places
	InstalledByDefault     bool                   `protobuf:"varint,11,opt,name=installedByDefault,proto3" json:"installedByDefault,omitempty"`
	Key                    string                 `protobuf:"bytes,12,opt,name=key,proto3" json:"key,omitempty"`                                        // name of objectType (can be localized for bundled types)
	Revision               int64                  `protobuf:"varint,13,opt,name=revision,proto3" json:"revision,omitempty"`                             // revision of system objectType. Used to check if we should change type content or not
	RestrictObjectCreation bool                   `protobuf:"varint,14,opt,name=restrictObjectCreation,proto3" json:"restrictObjectCreation,omitempty"` // restricts creating objects of this type for users
	IconColor              int64                  `protobuf:"varint,15,opt,name=iconColor,proto3" json:"iconColor,omitempty"`                           // color of object type icon
	IconName               string                 `protobuf:"bytes,16,opt,name=iconName,proto3" json:"iconName,omitempty"`                              // name of object type icon
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ObjectType) Reset() {
	*x = ObjectType{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectType) ProtoMessage() {}

func (x *ObjectType) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectType.ProtoReflect.Descriptor instead.
func (*ObjectType) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{10}
}

func (x *ObjectType) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ObjectType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ObjectType) GetRelationLinks() []*RelationLink {
	if x != nil {
		return x.RelationLinks
	}
	return nil
}

func (x *ObjectType) GetLayout() ObjectTypeLayout {
	if x != nil {
		return x.Layout
	}
	return ObjectType_basic
}

func (x *ObjectType) GetIconEmoji() string {
	if x != nil {
		return x.IconEmoji
	}
	return ""
}

func (x *ObjectType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ObjectType) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *ObjectType) GetReadonly() bool {
	if x != nil {
		return x.Readonly
	}
	return false
}

func (x *ObjectType) GetTypes() []SmartBlockType {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *ObjectType) GetIsArchived() bool {
	if x != nil {
		return x.IsArchived
	}
	return false
}

func (x *ObjectType) GetInstalledByDefault() bool {
	if x != nil {
		return x.InstalledByDefault
	}
	return false
}

func (x *ObjectType) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ObjectType) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *ObjectType) GetRestrictObjectCreation() bool {
	if x != nil {
		return x.RestrictObjectCreation
	}
	return false
}

func (x *ObjectType) GetIconColor() int64 {
	if x != nil {
		return x.IconColor
	}
	return 0
}

func (x *ObjectType) GetIconName() string {
	if x != nil {
		return x.IconName
	}
	return ""
}

type Layout struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                ObjectTypeLayout       `protobuf:"varint,1,opt,name=id,proto3,enum=anytype.model.ObjectTypeLayout" json:"id,omitempty"`
	Name              string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RequiredRelations []*Relation            `protobuf:"bytes,3,rep,name=requiredRelations,proto3" json:"requiredRelations,omitempty"` // relations required for this object type
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Layout) Reset() {
	*x = Layout{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Layout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layout) ProtoMessage() {}

func (x *Layout) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layout.ProtoReflect.Descriptor instead.
func (*Layout) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{11}
}

func (x *Layout) GetId() ObjectTypeLayout {
	if x != nil {
		return x.Id
	}
	return ObjectType_basic
}

func (x *Layout) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Layout) GetRequiredRelations() []*Relation {
	if x != nil {
		return x.RequiredRelations
	}
	return nil
}

type RelationWithValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Relation      *Relation              `protobuf:"bytes,1,opt,name=relation,proto3" json:"relation,omitempty"`
	Value         *structpb.Value        `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelationWithValue) Reset() {
	*x = RelationWithValue{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelationWithValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationWithValue) ProtoMessage() {}

func (x *RelationWithValue) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationWithValue.ProtoReflect.Descriptor instead.
func (*RelationWithValue) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{12}
}

func (x *RelationWithValue) GetRelation() *Relation {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *RelationWithValue) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Relation describe the human-interpreted relation type. It may be something like "Date of creation, format=date" or "Assignee, format=objectId, objectType=person"
type Relation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	// Key under which the value is stored in the map. Must be unique for the object type.
	// It usually auto-generated bsonid, but also may be something human-readable in case of prebuilt types.
	Key              string             `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Format           RelationFormat     `protobuf:"varint,2,opt,name=format,proto3,enum=anytype.model.RelationFormat" json:"format,omitempty"` // format of the underlying data
	Name             string             `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                        // name to show (can be localized for bundled types)
	DefaultValue     *structpb.Value    `protobuf:"bytes,4,opt,name=defaultValue,proto3" json:"defaultValue,omitempty"`
	DataSource       RelationDataSource `protobuf:"varint,5,opt,name=dataSource,proto3,enum=anytype.model.RelationDataSource" json:"dataSource,omitempty"` // where the data is stored
	Hidden           bool               `protobuf:"varint,6,opt,name=hidden,proto3" json:"hidden,omitempty"`                                               // internal, not displayed to user (e.g. coverX, coverY)
	ReadOnly         bool               `protobuf:"varint,7,opt,name=readOnly,proto3" json:"readOnly,omitempty"`                                           // value not editable by user tobe renamed to readonlyValue
	ReadOnlyRelation bool               `protobuf:"varint,15,opt,name=readOnlyRelation,proto3" json:"readOnlyRelation,omitempty"`                          // relation metadata, eg name and format is not editable by user
	Multi            bool               `protobuf:"varint,8,opt,name=multi,proto3" json:"multi,omitempty"`                                                 // allow multiple values (stored in pb list)
	ObjectTypes      []string           `protobuf:"bytes,9,rep,name=objectTypes,proto3" json:"objectTypes,omitempty"`                                      // URL of object type, empty to allow link to any object
	// index 10, 11 was used in internal-only builds. Can be reused, but may break some test accounts
	SelectDict  []*RelationOption `protobuf:"bytes,12,rep,name=selectDict,proto3" json:"selectDict,omitempty"` // default dictionary with unique values to choose for select/multiSelect format
	MaxCount    int32             `protobuf:"varint,13,opt,name=maxCount,proto3" json:"maxCount,omitempty"`    // max number of values can be set for this relation. 0 means no limit. 1 means the value can be stored in non-repeated field
	Description string            `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
	// on-store fields, injected only locally
	Scope         RelationScope `protobuf:"varint,20,opt,name=scope,proto3,enum=anytype.model.RelationScope" json:"scope,omitempty"` // deprecated, to be removed
	Creator       string        `protobuf:"bytes,21,opt,name=creator,proto3" json:"creator,omitempty"`                               // creator profile id
	Revision      int64         `protobuf:"varint,22,opt,name=revision,proto3" json:"revision,omitempty"`                            // revision of system relation. Used to check if we should change relation content or not
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Relation) Reset() {
	*x = Relation{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Relation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relation) ProtoMessage() {}

func (x *Relation) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relation.ProtoReflect.Descriptor instead.
func (*Relation) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{13}
}

func (x *Relation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Relation) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Relation) GetFormat() RelationFormat {
	if x != nil {
		return x.Format
	}
	return RelationFormat_longtext
}

func (x *Relation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Relation) GetDefaultValue() *structpb.Value {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *Relation) GetDataSource() RelationDataSource {
	if x != nil {
		return x.DataSource
	}
	return Relation_details
}

func (x *Relation) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *Relation) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *Relation) GetReadOnlyRelation() bool {
	if x != nil {
		return x.ReadOnlyRelation
	}
	return false
}

func (x *Relation) GetMulti() bool {
	if x != nil {
		return x.Multi
	}
	return false
}

func (x *Relation) GetObjectTypes() []string {
	if x != nil {
		return x.ObjectTypes
	}
	return nil
}

func (x *Relation) GetSelectDict() []*RelationOption {
	if x != nil {
		return x.SelectDict
	}
	return nil
}

func (x *Relation) GetMaxCount() int32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *Relation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Relation) GetScope() RelationScope {
	if x != nil {
		return x.Scope
	}
	return Relation_object
}

func (x *Relation) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Relation) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

type RelationLink struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Format        RelationFormat         `protobuf:"varint,2,opt,name=format,proto3,enum=anytype.model.RelationFormat" json:"format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelationLink) Reset() {
	*x = RelationLink{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelationLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationLink) ProtoMessage() {}

func (x *RelationLink) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationLink.ProtoReflect.Descriptor instead.
func (*RelationLink) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{14}
}

func (x *RelationLink) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RelationLink) GetFormat() RelationFormat {
	if x != nil {
		return x.Format
	}
	return RelationFormat_longtext
}

type Relations struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Relations     []*Relation            `protobuf:"bytes,1,rep,name=relations,proto3" json:"relations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Relations) Reset() {
	*x = Relations{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Relations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relations) ProtoMessage() {}

func (x *Relations) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relations.ProtoReflect.Descriptor instead.
func (*Relations) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{15}
}

func (x *Relations) GetRelations() []*Relation {
	if x != nil {
		return x.Relations
	}
	return nil
}

type RelationOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Options       []*RelationOption      `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelationOptions) Reset() {
	*x = RelationOptions{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationOptions) ProtoMessage() {}

func (x *RelationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationOptions.ProtoReflect.Descriptor instead.
func (*RelationOptions) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{16}
}

func (x *RelationOptions) GetOptions() []*RelationOption {
	if x != nil {
		return x.Options
	}
	return nil
}

type InternalFlag struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         InternalFlagValue      `protobuf:"varint,1,opt,name=value,proto3,enum=anytype.model.InternalFlagValue" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InternalFlag) Reset() {
	*x = InternalFlag{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InternalFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalFlag) ProtoMessage() {}

func (x *InternalFlag) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalFlag.ProtoReflect.Descriptor instead.
func (*InternalFlag) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{17}
}

func (x *InternalFlag) GetValue() InternalFlagValue {
	if x != nil {
		return x.Value
	}
	return InternalFlag_editorDeleteEmpty
}

// Works with a smart blocks: Page, Dashboard
// Dashboard opened, click on a page, Rpc.Block.open, Block.ShowFullscreen(PageBlock)
type ObjectView struct {
	state             protoimpl.MessageState        `protogen:"open.v1"`
	RootId            string                        `protobuf:"bytes,1,opt,name=rootId,proto3" json:"rootId,omitempty"`   // Root block id
	Blocks            []*Block                      `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks,omitempty"`   // dependent simple blocks (descendants)
	Details           []*ObjectViewDetailsSet       `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty"` // details for the current and dependent objects
	Type              SmartBlockType                `protobuf:"varint,4,opt,name=type,proto3,enum=anytype.model.SmartBlockType" json:"type,omitempty"`
	Relations         []*Relation                   `protobuf:"bytes,7,rep,name=relations,proto3" json:"relations,omitempty"` // DEPRECATED, use relationLinks instead
	RelationLinks     []*RelationLink               `protobuf:"bytes,10,rep,name=relationLinks,proto3" json:"relationLinks,omitempty"`
	Restrictions      *Restrictions                 `protobuf:"bytes,8,opt,name=restrictions,proto3" json:"restrictions,omitempty"` // object restrictions
	History           *ObjectViewHistorySize        `protobuf:"bytes,9,opt,name=history,proto3" json:"history,omitempty"`
	BlockParticipants []*ObjectViewBlockParticipant `protobuf:"bytes,11,rep,name=blockParticipants,proto3" json:"blockParticipants,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ObjectView) Reset() {
	*x = ObjectView{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectView) ProtoMessage() {}

func (x *ObjectView) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectView.ProtoReflect.Descriptor instead.
func (*ObjectView) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{18}
}

func (x *ObjectView) GetRootId() string {
	if x != nil {
		return x.RootId
	}
	return ""
}

func (x *ObjectView) GetBlocks() []*Block {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *ObjectView) GetDetails() []*ObjectViewDetailsSet {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ObjectView) GetType() SmartBlockType {
	if x != nil {
		return x.Type
	}
	return SmartBlockType_AccountOld
}

func (x *ObjectView) GetRelations() []*Relation {
	if x != nil {
		return x.Relations
	}
	return nil
}

func (x *ObjectView) GetRelationLinks() []*RelationLink {
	if x != nil {
		return x.RelationLinks
	}
	return nil
}

func (x *ObjectView) GetRestrictions() *Restrictions {
	if x != nil {
		return x.Restrictions
	}
	return nil
}

func (x *ObjectView) GetHistory() *ObjectViewHistorySize {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *ObjectView) GetBlockParticipants() []*ObjectViewBlockParticipant {
	if x != nil {
		return x.BlockParticipants
	}
	return nil
}

type ParticipantPermissionChange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identity      string                 `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Perms         ParticipantPermissions `protobuf:"varint,2,opt,name=perms,proto3,enum=anytype.model.ParticipantPermissions" json:"perms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParticipantPermissionChange) Reset() {
	*x = ParticipantPermissionChange{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParticipantPermissionChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantPermissionChange) ProtoMessage() {}

func (x *ParticipantPermissionChange) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantPermissionChange.ProtoReflect.Descriptor instead.
func (*ParticipantPermissionChange) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{19}
}

func (x *ParticipantPermissionChange) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *ParticipantPermissionChange) GetPerms() ParticipantPermissions {
	if x != nil {
		return x.Perms
	}
	return ParticipantPermissions_Reader
}

type Metadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*MetadataPayloadOfIdentity
	Payload       IsMetadataPayload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{20}
}

func (x *Metadata) GetPayload() IsMetadataPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Metadata) GetIdentity() *MetadataPayloadIdentityPayload {
	if x != nil {
		if x, ok := x.Payload.(*MetadataPayloadOfIdentity); ok {
			return x.Identity
		}
	}
	return nil
}

type IsMetadataPayload interface {
	IsMetadataPayload()
}

type MetadataPayloadOfIdentity struct {
	Identity *MetadataPayloadIdentityPayload `protobuf:"bytes,1,opt,name=identity,proto3,oneof" json:"identity,omitempty"`
}

func (*MetadataPayloadOfIdentity) IsMetadataPayload() {}

type Notification struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateTime int64                  `protobuf:"varint,2,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Status     NotificationStatus     `protobuf:"varint,4,opt,name=status,proto3,enum=anytype.model.NotificationStatus" json:"status,omitempty"`
	IsLocal    bool                   `protobuf:"varint,5,opt,name=isLocal,proto3" json:"isLocal,omitempty"`
	// Types that are valid to be assigned to Payload:
	//
	//	*NotificationPayloadOfImport
	//	*NotificationPayloadOfExport
	//	*NotificationPayloadOfGalleryImport
	//	*NotificationPayloadOfRequestToJoin
	//	*NotificationPayloadOfTest
	//	*NotificationPayloadOfParticipantRequestApproved
	//	*NotificationPayloadOfRequestToLeave
	//	*NotificationPayloadOfParticipantRemove
	//	*NotificationPayloadOfParticipantRequestDecline
	//	*NotificationPayloadOfParticipantPermissionsChange
	Payload       IsNotificationPayload `protobuf_oneof:"payload"`
	Space         string                `protobuf:"bytes,7,opt,name=space,proto3" json:"space,omitempty"`
	AclHeadId     string                `protobuf:"bytes,14,opt,name=aclHeadId,proto3" json:"aclHeadId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Notification) Reset() {
	*x = Notification{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification) ProtoMessage() {}

func (x *Notification) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{21}
}

func (x *Notification) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Notification) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Notification) GetStatus() NotificationStatus {
	if x != nil {
		return x.Status
	}
	return Notification_Created
}

func (x *Notification) GetIsLocal() bool {
	if x != nil {
		return x.IsLocal
	}
	return false
}

func (x *Notification) GetPayload() IsNotificationPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Notification) GetImport() *NotificationImport {
	if x != nil {
		if x, ok := x.Payload.(*NotificationPayloadOfImport); ok {
			return x.Import
		}
	}
	return nil
}

func (x *Notification) GetExport() *NotificationExport {
	if x != nil {
		if x, ok := x.Payload.(*NotificationPayloadOfExport); ok {
			return x.Export
		}
	}
	return nil
}

func (x *Notification) GetGalleryImport() *NotificationGalleryImport {
	if x != nil {
		if x, ok := x.Payload.(*NotificationPayloadOfGalleryImport); ok {
			return x.GalleryImport
		}
	}
	return nil
}

func (x *Notification) GetRequestToJoin() *NotificationRequestToJoin {
	if x != nil {
		if x, ok := x.Payload.(*NotificationPayloadOfRequestToJoin); ok {
			return x.RequestToJoin
		}
	}
	return nil
}

func (x *Notification) GetTest() *NotificationTest {
	if x != nil {
		if x, ok := x.Payload.(*NotificationPayloadOfTest); ok {
			return x.Test
		}
	}
	return nil
}

func (x *Notification) GetParticipantRequestApproved() *NotificationParticipantRequestApproved {
	if x != nil {
		if x, ok := x.Payload.(*NotificationPayloadOfParticipantRequestApproved); ok {
			return x.ParticipantRequestApproved
		}
	}
	return nil
}

func (x *Notification) GetRequestToLeave() *NotificationRequestToLeave {
	if x != nil {
		if x, ok := x.Payload.(*NotificationPayloadOfRequestToLeave); ok {
			return x.RequestToLeave
		}
	}
	return nil
}

func (x *Notification) GetParticipantRemove() *NotificationParticipantRemove {
	if x != nil {
		if x, ok := x.Payload.(*NotificationPayloadOfParticipantRemove); ok {
			return x.ParticipantRemove
		}
	}
	return nil
}

func (x *Notification) GetParticipantRequestDecline() *NotificationParticipantRequestDecline {
	if x != nil {
		if x, ok := x.Payload.(*NotificationPayloadOfParticipantRequestDecline); ok {
			return x.ParticipantRequestDecline
		}
	}
	return nil
}

func (x *Notification) GetParticipantPermissionsChange() *NotificationParticipantPermissionsChange {
	if x != nil {
		if x, ok := x.Payload.(*NotificationPayloadOfParticipantPermissionsChange); ok {
			return x.ParticipantPermissionsChange
		}
	}
	return nil
}

func (x *Notification) GetSpace() string {
	if x != nil {
		return x.Space
	}
	return ""
}

func (x *Notification) GetAclHeadId() string {
	if x != nil {
		return x.AclHeadId
	}
	return ""
}

type IsNotificationPayload interface {
	IsNotificationPayload()
}

type NotificationPayloadOfImport struct {
	Import *NotificationImport `protobuf:"bytes,6,opt,name=import,proto3,oneof" json:"import,omitempty"`
}

type NotificationPayloadOfExport struct {
	Export *NotificationExport `protobuf:"bytes,8,opt,name=export,proto3,oneof" json:"export,omitempty"`
}

type NotificationPayloadOfGalleryImport struct {
	GalleryImport *NotificationGalleryImport `protobuf:"bytes,9,opt,name=galleryImport,proto3,oneof" json:"galleryImport,omitempty"`
}

type NotificationPayloadOfRequestToJoin struct {
	RequestToJoin *NotificationRequestToJoin `protobuf:"bytes,10,opt,name=requestToJoin,proto3,oneof" json:"requestToJoin,omitempty"`
}

type NotificationPayloadOfTest struct {
	Test *NotificationTest `protobuf:"bytes,11,opt,name=test,proto3,oneof" json:"test,omitempty"`
}

type NotificationPayloadOfParticipantRequestApproved struct {
	ParticipantRequestApproved *NotificationParticipantRequestApproved `protobuf:"bytes,13,opt,name=participantRequestApproved,proto3,oneof" json:"participantRequestApproved,omitempty"`
}

type NotificationPayloadOfRequestToLeave struct {
	RequestToLeave *NotificationRequestToLeave `protobuf:"bytes,15,opt,name=requestToLeave,proto3,oneof" json:"requestToLeave,omitempty"`
}

type NotificationPayloadOfParticipantRemove struct {
	ParticipantRemove *NotificationParticipantRemove `protobuf:"bytes,16,opt,name=participantRemove,proto3,oneof" json:"participantRemove,omitempty"`
}

type NotificationPayloadOfParticipantRequestDecline struct {
	ParticipantRequestDecline *NotificationParticipantRequestDecline `protobuf:"bytes,17,opt,name=participantRequestDecline,proto3,oneof" json:"participantRequestDecline,omitempty"`
}

type NotificationPayloadOfParticipantPermissionsChange struct {
	ParticipantPermissionsChange *NotificationParticipantPermissionsChange `protobuf:"bytes,18,opt,name=participantPermissionsChange,proto3,oneof" json:"participantPermissionsChange,omitempty"`
}

func (*NotificationPayloadOfImport) IsNotificationPayload() {}

func (*NotificationPayloadOfExport) IsNotificationPayload() {}

func (*NotificationPayloadOfGalleryImport) IsNotificationPayload() {}

func (*NotificationPayloadOfRequestToJoin) IsNotificationPayload() {}

func (*NotificationPayloadOfTest) IsNotificationPayload() {}

func (*NotificationPayloadOfParticipantRequestApproved) IsNotificationPayload() {}

func (*NotificationPayloadOfRequestToLeave) IsNotificationPayload() {}

func (*NotificationPayloadOfParticipantRemove) IsNotificationPayload() {}

func (*NotificationPayloadOfParticipantRequestDecline) IsNotificationPayload() {}

func (*NotificationPayloadOfParticipantPermissionsChange) IsNotificationPayload() {}

type Export struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Export) Reset() {
	*x = Export{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Export) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Export) ProtoMessage() {}

func (x *Export) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Export.ProtoReflect.Descriptor instead.
func (*Export) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{22}
}

type Import struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Import) Reset() {
	*x = Import{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Import) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Import) ProtoMessage() {}

func (x *Import) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Import.ProtoReflect.Descriptor instead.
func (*Import) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{23}
}

type Invite struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Payload       []byte                 `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature     []byte                 `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Invite) Reset() {
	*x = Invite{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Invite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Invite) ProtoMessage() {}

func (x *Invite) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Invite.ProtoReflect.Descriptor instead.
func (*Invite) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{24}
}

func (x *Invite) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Invite) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type InvitePayload struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	CreatorIdentity         string                 `protobuf:"bytes,1,opt,name=creatorIdentity,proto3" json:"creatorIdentity,omitempty"`
	CreatorName             string                 `protobuf:"bytes,2,opt,name=creatorName,proto3" json:"creatorName,omitempty"`
	InviteKey               []byte                 `protobuf:"bytes,3,opt,name=inviteKey,proto3" json:"inviteKey,omitempty"`
	SpaceId                 string                 `protobuf:"bytes,4,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
	SpaceName               string                 `protobuf:"bytes,5,opt,name=spaceName,proto3" json:"spaceName,omitempty"`
	SpaceIconCid            string                 `protobuf:"bytes,6,opt,name=spaceIconCid,proto3" json:"spaceIconCid,omitempty"`
	SpaceIconEncryptionKeys []*FileEncryptionKey   `protobuf:"bytes,7,rep,name=spaceIconEncryptionKeys,proto3" json:"spaceIconEncryptionKeys,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *InvitePayload) Reset() {
	*x = InvitePayload{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvitePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvitePayload) ProtoMessage() {}

func (x *InvitePayload) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvitePayload.ProtoReflect.Descriptor instead.
func (*InvitePayload) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{25}
}

func (x *InvitePayload) GetCreatorIdentity() string {
	if x != nil {
		return x.CreatorIdentity
	}
	return ""
}

func (x *InvitePayload) GetCreatorName() string {
	if x != nil {
		return x.CreatorName
	}
	return ""
}

func (x *InvitePayload) GetInviteKey() []byte {
	if x != nil {
		return x.InviteKey
	}
	return nil
}

func (x *InvitePayload) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *InvitePayload) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *InvitePayload) GetSpaceIconCid() string {
	if x != nil {
		return x.SpaceIconCid
	}
	return ""
}

func (x *InvitePayload) GetSpaceIconEncryptionKeys() []*FileEncryptionKey {
	if x != nil {
		return x.SpaceIconEncryptionKeys
	}
	return nil
}

type IdentityProfile struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Identity           string                 `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Name               string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IconCid            string                 `protobuf:"bytes,3,opt,name=iconCid,proto3" json:"iconCid,omitempty"`
	IconEncryptionKeys []*FileEncryptionKey   `protobuf:"bytes,4,rep,name=iconEncryptionKeys,proto3" json:"iconEncryptionKeys,omitempty"`
	Description        string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	GlobalName         string                 `protobuf:"bytes,6,opt,name=globalName,proto3" json:"globalName,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *IdentityProfile) Reset() {
	*x = IdentityProfile{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentityProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityProfile) ProtoMessage() {}

func (x *IdentityProfile) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityProfile.ProtoReflect.Descriptor instead.
func (*IdentityProfile) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{26}
}

func (x *IdentityProfile) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *IdentityProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IdentityProfile) GetIconCid() string {
	if x != nil {
		return x.IconCid
	}
	return ""
}

func (x *IdentityProfile) GetIconEncryptionKeys() []*FileEncryptionKey {
	if x != nil {
		return x.IconEncryptionKeys
	}
	return nil
}

func (x *IdentityProfile) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *IdentityProfile) GetGlobalName() string {
	if x != nil {
		return x.GlobalName
	}
	return ""
}

type FileInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	FileId         string                 `protobuf:"bytes,1,opt,name=fileId,proto3" json:"fileId,omitempty"`
	EncryptionKeys []*FileEncryptionKey   `protobuf:"bytes,2,rep,name=encryptionKeys,proto3" json:"encryptionKeys,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{27}
}

func (x *FileInfo) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *FileInfo) GetEncryptionKeys() []*FileEncryptionKey {
	if x != nil {
		return x.EncryptionKeys
	}
	return nil
}

type FileEncryptionKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Key           string                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileEncryptionKey) Reset() {
	*x = FileEncryptionKey{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileEncryptionKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileEncryptionKey) ProtoMessage() {}

func (x *FileEncryptionKey) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileEncryptionKey.ProtoReflect.Descriptor instead.
func (*FileEncryptionKey) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{28}
}

func (x *FileEncryptionKey) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileEncryptionKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ManifestInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Schema        string                 `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Id            string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Author        string                 `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	License       string                 `protobuf:"bytes,5,opt,name=license,proto3" json:"license,omitempty"`
	Title         string                 `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Screenshots   []string               `protobuf:"bytes,8,rep,name=screenshots,proto3" json:"screenshots,omitempty"`
	DownloadLink  string                 `protobuf:"bytes,9,opt,name=downloadLink,proto3" json:"downloadLink,omitempty"`
	FileSize      int32                  `protobuf:"varint,10,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	Categories    []string               `protobuf:"bytes,11,rep,name=categories,proto3" json:"categories,omitempty"`
	Language      string                 `protobuf:"bytes,12,opt,name=language,proto3" json:"language,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ManifestInfo) Reset() {
	*x = ManifestInfo{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManifestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManifestInfo) ProtoMessage() {}

func (x *ManifestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManifestInfo.ProtoReflect.Descriptor instead.
func (*ManifestInfo) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{29}
}

func (x *ManifestInfo) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *ManifestInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ManifestInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ManifestInfo) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *ManifestInfo) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *ManifestInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ManifestInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ManifestInfo) GetScreenshots() []string {
	if x != nil {
		return x.Screenshots
	}
	return nil
}

func (x *ManifestInfo) GetDownloadLink() string {
	if x != nil {
		return x.DownloadLink
	}
	return ""
}

func (x *ManifestInfo) GetFileSize() int32 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *ManifestInfo) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *ManifestInfo) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type Membership struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// it was Tier before, changed to int32 to allow dynamic values
	Tier          uint32                  `protobuf:"varint,1,opt,name=tier,proto3" json:"tier,omitempty"`
	Status        MembershipStatus        `protobuf:"varint,2,opt,name=status,proto3,enum=anytype.model.MembershipStatus" json:"status,omitempty"`
	DateStarted   uint64                  `protobuf:"varint,3,opt,name=dateStarted,proto3" json:"dateStarted,omitempty"`
	DateEnds      uint64                  `protobuf:"varint,4,opt,name=dateEnds,proto3" json:"dateEnds,omitempty"`
	IsAutoRenew   bool                    `protobuf:"varint,5,opt,name=isAutoRenew,proto3" json:"isAutoRenew,omitempty"`
	PaymentMethod MembershipPaymentMethod `protobuf:"varint,6,opt,name=paymentMethod,proto3,enum=anytype.model.MembershipPaymentMethod" json:"paymentMethod,omitempty"`
	// can be empty if user did not ask for any name
	NsName     string              `protobuf:"bytes,7,opt,name=nsName,proto3" json:"nsName,omitempty"`
	NsNameType NameserviceNameType `protobuf:"varint,8,opt,name=nsNameType,proto3,enum=anytype.model.NameserviceNameType" json:"nsNameType,omitempty"`
	// if the email was verified by the user or set during the checkout - it will be here
	UserEmail             string `protobuf:"bytes,9,opt,name=userEmail,proto3" json:"userEmail,omitempty"`
	SubscribeToNewsletter bool   `protobuf:"varint,10,opt,name=subscribeToNewsletter,proto3" json:"subscribeToNewsletter,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Membership) Reset() {
	*x = Membership{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Membership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Membership) ProtoMessage() {}

func (x *Membership) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Membership.ProtoReflect.Descriptor instead.
func (*Membership) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{30}
}

func (x *Membership) GetTier() uint32 {
	if x != nil {
		return x.Tier
	}
	return 0
}

func (x *Membership) GetStatus() MembershipStatus {
	if x != nil {
		return x.Status
	}
	return Membership_StatusUnknown
}

func (x *Membership) GetDateStarted() uint64 {
	if x != nil {
		return x.DateStarted
	}
	return 0
}

func (x *Membership) GetDateEnds() uint64 {
	if x != nil {
		return x.DateEnds
	}
	return 0
}

func (x *Membership) GetIsAutoRenew() bool {
	if x != nil {
		return x.IsAutoRenew
	}
	return false
}

func (x *Membership) GetPaymentMethod() MembershipPaymentMethod {
	if x != nil {
		return x.PaymentMethod
	}
	return Membership_MethodNone
}

func (x *Membership) GetNsName() string {
	if x != nil {
		return x.NsName
	}
	return ""
}

func (x *Membership) GetNsNameType() NameserviceNameType {
	if x != nil {
		return x.NsNameType
	}
	return NameserviceNameType_AnyName
}

func (x *Membership) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *Membership) GetSubscribeToNewsletter() bool {
	if x != nil {
		return x.SubscribeToNewsletter
	}
	return false
}

type MembershipTierData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// this is a unique Payment Node ID of the tier
	// WARNING: tiers can be sorted differently, not according to their IDs!
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// localazied name of the tier
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// just a short technical description
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// is this tier for testing and debugging only?
	IsTest bool `protobuf:"varint,4,opt,name=isTest,proto3" json:"isTest,omitempty"`
	// how long is the period of the subscription
	PeriodType MembershipTierDataPeriodType `protobuf:"varint,5,opt,name=periodType,proto3,enum=anytype.model.MembershipTierDataPeriodType" json:"periodType,omitempty"`
	// i.e. "5 days" or "3 years"
	PeriodValue uint32 `protobuf:"varint,6,opt,name=periodValue,proto3" json:"periodValue,omitempty"`
	// this one is a price we use ONLY on Stripe platform
	PriceStripeUsdCents uint32 `protobuf:"varint,7,opt,name=priceStripeUsdCents,proto3" json:"priceStripeUsdCents,omitempty"`
	// number of ANY NS names that this tier includes
	// also in the "features" list (see below)
	AnyNamesCountIncluded uint32 `protobuf:"varint,8,opt,name=anyNamesCountIncluded,proto3" json:"anyNamesCountIncluded,omitempty"`
	// somename.any - is of len 8
	AnyNameMinLength uint32 `protobuf:"varint,9,opt,name=anyNameMinLength,proto3" json:"anyNameMinLength,omitempty"`
	// localized strings for the features
	Features []string `protobuf:"bytes,10,rep,name=features,proto3" json:"features,omitempty"`
	// green, blue, red, purple, custom
	ColorStr string `protobuf:"bytes,11,opt,name=colorStr,proto3" json:"colorStr,omitempty"`
	// Stripe platform-specific data:
	StripeProductId string `protobuf:"bytes,12,opt,name=stripeProductId,proto3" json:"stripeProductId,omitempty"`
	StripeManageUrl string `protobuf:"bytes,13,opt,name=stripeManageUrl,proto3" json:"stripeManageUrl,omitempty"`
	// iOS platform-specific data:
	IosProductId string `protobuf:"bytes,15,opt,name=iosProductId,proto3" json:"iosProductId,omitempty"`
	IosManageUrl string `protobuf:"bytes,16,opt,name=iosManageUrl,proto3" json:"iosManageUrl,omitempty"`
	// Android platform-specific data:
	AndroidProductId string `protobuf:"bytes,17,opt,name=androidProductId,proto3" json:"androidProductId,omitempty"`
	AndroidManageUrl string `protobuf:"bytes,18,opt,name=androidManageUrl,proto3" json:"androidManageUrl,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MembershipTierData) Reset() {
	*x = MembershipTierData{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MembershipTierData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MembershipTierData) ProtoMessage() {}

func (x *MembershipTierData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MembershipTierData.ProtoReflect.Descriptor instead.
func (*MembershipTierData) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{31}
}

func (x *MembershipTierData) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MembershipTierData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MembershipTierData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MembershipTierData) GetIsTest() bool {
	if x != nil {
		return x.IsTest
	}
	return false
}

func (x *MembershipTierData) GetPeriodType() MembershipTierDataPeriodType {
	if x != nil {
		return x.PeriodType
	}
	return MembershipTierData_PeriodTypeUnknown
}

func (x *MembershipTierData) GetPeriodValue() uint32 {
	if x != nil {
		return x.PeriodValue
	}
	return 0
}

func (x *MembershipTierData) GetPriceStripeUsdCents() uint32 {
	if x != nil {
		return x.PriceStripeUsdCents
	}
	return 0
}

func (x *MembershipTierData) GetAnyNamesCountIncluded() uint32 {
	if x != nil {
		return x.AnyNamesCountIncluded
	}
	return 0
}

func (x *MembershipTierData) GetAnyNameMinLength() uint32 {
	if x != nil {
		return x.AnyNameMinLength
	}
	return 0
}

func (x *MembershipTierData) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *MembershipTierData) GetColorStr() string {
	if x != nil {
		return x.ColorStr
	}
	return ""
}

func (x *MembershipTierData) GetStripeProductId() string {
	if x != nil {
		return x.StripeProductId
	}
	return ""
}

func (x *MembershipTierData) GetStripeManageUrl() string {
	if x != nil {
		return x.StripeManageUrl
	}
	return ""
}

func (x *MembershipTierData) GetIosProductId() string {
	if x != nil {
		return x.IosProductId
	}
	return ""
}

func (x *MembershipTierData) GetIosManageUrl() string {
	if x != nil {
		return x.IosManageUrl
	}
	return ""
}

func (x *MembershipTierData) GetAndroidProductId() string {
	if x != nil {
		return x.AndroidProductId
	}
	return ""
}

func (x *MembershipTierData) GetAndroidManageUrl() string {
	if x != nil {
		return x.AndroidManageUrl
	}
	return ""
}

type Detail struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         *structpb.Value        `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` // NUll - removes key
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Detail) Reset() {
	*x = Detail{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Detail) ProtoMessage() {}

func (x *Detail) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Detail.ProtoReflect.Descriptor instead.
func (*Detail) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{32}
}

func (x *Detail) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Detail) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type DeviceInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AddDate       int64                  `protobuf:"varint,3,opt,name=addDate,proto3" json:"addDate,omitempty"`
	Archived      bool                   `protobuf:"varint,4,opt,name=archived,proto3" json:"archived,omitempty"`
	IsConnected   bool                   `protobuf:"varint,5,opt,name=isConnected,proto3" json:"isConnected,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{33}
}

func (x *DeviceInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeviceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeviceInfo) GetAddDate() int64 {
	if x != nil {
		return x.AddDate
	}
	return 0
}

func (x *DeviceInfo) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *DeviceInfo) GetIsConnected() bool {
	if x != nil {
		return x.IsConnected
	}
	return false
}

type ChatState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Messages      *ChatStateUnreadState  `protobuf:"bytes,1,opt,name=messages,proto3" json:"messages,omitempty"`        // unread messages
	Mentions      *ChatStateUnreadState  `protobuf:"bytes,2,opt,name=mentions,proto3" json:"mentions,omitempty"`        // unread mentions
	DbTimestamp   int64                  `protobuf:"varint,3,opt,name=dbTimestamp,proto3" json:"dbTimestamp,omitempty"` // reflects the state of the chat db at the moment of sending response/event that includes this state
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatState) Reset() {
	*x = ChatState{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatState) ProtoMessage() {}

func (x *ChatState) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatState.ProtoReflect.Descriptor instead.
func (*ChatState) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{34}
}

func (x *ChatState) GetMessages() *ChatStateUnreadState {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *ChatState) GetMentions() *ChatStateUnreadState {
	if x != nil {
		return x.Mentions
	}
	return nil
}

func (x *ChatState) GetDbTimestamp() int64 {
	if x != nil {
		return x.DbTimestamp
	}
	return 0
}

type ChatMessage struct {
	state            protoimpl.MessageState     `protogen:"open.v1"`
	Id               string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`           // Unique message identifier
	OrderId          string                     `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"` // Used for subscriptions
	Creator          string                     `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"` // Identifier for the message creator
	CreatedAt        int64                      `protobuf:"varint,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	ModifiedAt       int64                      `protobuf:"varint,9,opt,name=modifiedAt,proto3" json:"modifiedAt,omitempty"`
	AddedAt          int64                      `protobuf:"varint,11,opt,name=addedAt,proto3" json:"addedAt,omitempty"`                 // Message received and added to db at
	ReplyToMessageId string                     `protobuf:"bytes,5,opt,name=replyToMessageId,proto3" json:"replyToMessageId,omitempty"` // Identifier for the message being replied to
	Message          *ChatMessageMessageContent `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`                   // Message content
	Attachments      []*ChatMessageAttachment   `protobuf:"bytes,7,rep,name=attachments,proto3" json:"attachments,omitempty"`           // Attachments slice
	Reactions        *ChatMessageReactions      `protobuf:"bytes,8,opt,name=reactions,proto3" json:"reactions,omitempty"`               // Reactions to the message
	Read             bool                       `protobuf:"varint,10,opt,name=read,proto3" json:"read,omitempty"`                       // Message read status
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ChatMessage) Reset() {
	*x = ChatMessage{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessage) ProtoMessage() {}

func (x *ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessage.ProtoReflect.Descriptor instead.
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{35}
}

func (x *ChatMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChatMessage) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *ChatMessage) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *ChatMessage) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ChatMessage) GetModifiedAt() int64 {
	if x != nil {
		return x.ModifiedAt
	}
	return 0
}

func (x *ChatMessage) GetAddedAt() int64 {
	if x != nil {
		return x.AddedAt
	}
	return 0
}

func (x *ChatMessage) GetReplyToMessageId() string {
	if x != nil {
		return x.ReplyToMessageId
	}
	return ""
}

func (x *ChatMessage) GetMessage() *ChatMessageMessageContent {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ChatMessage) GetAttachments() []*ChatMessageAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *ChatMessage) GetReactions() *ChatMessageReactions {
	if x != nil {
		return x.Reactions
	}
	return nil
}

func (x *ChatMessage) GetRead() bool {
	if x != nil {
		return x.Read
	}
	return false
}

type SearchResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ObjectId      string                 `protobuf:"bytes,1,opt,name=objectId,proto3" json:"objectId,omitempty"`
	Details       *structpb.Struct       `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"` //
	Meta          []*SearchMeta          `protobuf:"bytes,3,rep,name=meta,proto3" json:"meta,omitempty"`       // meta information about the search result
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchResult) Reset() {
	*x = SearchResult{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResult) ProtoMessage() {}

func (x *SearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResult.ProtoReflect.Descriptor instead.
func (*SearchResult) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{1, 0}
}

func (x *SearchResult) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *SearchResult) GetDetails() *structpb.Struct {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *SearchResult) GetMeta() []*SearchMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type SearchMeta struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Highlight       string                 `protobuf:"bytes,1,opt,name=highlight,proto3" json:"highlight,omitempty"`             // truncated text with highlights
	HighlightRanges []*Range               `protobuf:"bytes,2,rep,name=highlightRanges,proto3" json:"highlightRanges,omitempty"` // ranges of the highlight in the text (using utf-16 runes)
	BlockId         string                 `protobuf:"bytes,3,opt,name=blockId,proto3" json:"blockId,omitempty"`                 // block id where the highlight has been found
	RelationKey     string                 `protobuf:"bytes,4,opt,name=relationKey,proto3" json:"relationKey,omitempty"`         // relation key of the block where the highlight has been found
	RelationDetails *structpb.Struct       `protobuf:"bytes,5,opt,name=relationDetails,proto3" json:"relationDetails,omitempty"` // contains details for dependent object. E.g. relation option or type. todo: rename to dependantDetails
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SearchMeta) Reset() {
	*x = SearchMeta{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMeta) ProtoMessage() {}

func (x *SearchMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMeta.ProtoReflect.Descriptor instead.
func (*SearchMeta) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{1, 1}
}

func (x *SearchMeta) GetHighlight() string {
	if x != nil {
		return x.Highlight
	}
	return ""
}

func (x *SearchMeta) GetHighlightRanges() []*Range {
	if x != nil {
		return x.HighlightRanges
	}
	return nil
}

func (x *SearchMeta) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *SearchMeta) GetRelationKey() string {
	if x != nil {
		return x.RelationKey
	}
	return ""
}

func (x *SearchMeta) GetRelationDetails() *structpb.Struct {
	if x != nil {
		return x.RelationDetails
	}
	return nil
}

type BlockRestrictions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Read          bool                   `protobuf:"varint,1,opt,name=read,proto3" json:"read,omitempty"`
	Edit          bool                   `protobuf:"varint,2,opt,name=edit,proto3" json:"edit,omitempty"`
	Remove        bool                   `protobuf:"varint,3,opt,name=remove,proto3" json:"remove,omitempty"`
	Drag          bool                   `protobuf:"varint,4,opt,name=drag,proto3" json:"drag,omitempty"`
	DropOn        bool                   `protobuf:"varint,5,opt,name=dropOn,proto3" json:"dropOn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockRestrictions) Reset() {
	*x = BlockRestrictions{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockRestrictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRestrictions) ProtoMessage() {}

func (x *BlockRestrictions) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRestrictions.ProtoReflect.Descriptor instead.
func (*BlockRestrictions) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 0}
}

func (x *BlockRestrictions) GetRead() bool {
	if x != nil {
		return x.Read
	}
	return false
}

func (x *BlockRestrictions) GetEdit() bool {
	if x != nil {
		return x.Edit
	}
	return false
}

func (x *BlockRestrictions) GetRemove() bool {
	if x != nil {
		return x.Remove
	}
	return false
}

func (x *BlockRestrictions) GetDrag() bool {
	if x != nil {
		return x.Drag
	}
	return false
}

func (x *BlockRestrictions) GetDropOn() bool {
	if x != nil {
		return x.DropOn
	}
	return false
}

type BlockContent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockContent) Reset() {
	*x = BlockContent{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContent) ProtoMessage() {}

func (x *BlockContent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContent.ProtoReflect.Descriptor instead.
func (*BlockContent) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1}
}

// Layout have no visual representation, but affects on blocks, that it contains.
// Row/Column layout blocks creates only automatically, after some of a D&D operations, for example
type BlockContentLayout struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Style         BlockContentLayoutStyle `protobuf:"varint,1,opt,name=style,proto3,enum=anytype.model.BlockContentLayoutStyle" json:"style,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockContentLayout) Reset() {
	*x = BlockContentLayout{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentLayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentLayout) ProtoMessage() {}

func (x *BlockContentLayout) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentLayout.ProtoReflect.Descriptor instead.
func (*BlockContentLayout) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 0}
}

func (x *BlockContentLayout) GetStyle() BlockContentLayoutStyle {
	if x != nil {
		return x.Style
	}
	return BlockContentLayout_Row
}

// Link: block to link some content from an external sources.
type BlockContentLink struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	TargetBlockId string                      `protobuf:"bytes,1,opt,name=targetBlockId,proto3" json:"targetBlockId,omitempty"`                           // id of the target block
	Style         BlockContentLinkStyle       `protobuf:"varint,2,opt,name=style,proto3,enum=anytype.model.BlockContentLinkStyle" json:"style,omitempty"` // deprecated
	Fields        *structpb.Struct            `protobuf:"bytes,3,opt,name=fields,proto3" json:"fields,omitempty"`
	IconSize      BlockContentLinkIconSize    `protobuf:"varint,4,opt,name=iconSize,proto3,enum=anytype.model.BlockContentLinkIconSize" json:"iconSize,omitempty"`
	CardStyle     BlockContentLinkCardStyle   `protobuf:"varint,5,opt,name=cardStyle,proto3,enum=anytype.model.BlockContentLinkCardStyle" json:"cardStyle,omitempty"`
	Description   BlockContentLinkDescription `protobuf:"varint,6,opt,name=description,proto3,enum=anytype.model.BlockContentLinkDescription" json:"description,omitempty"`
	Relations     []string                    `protobuf:"bytes,7,rep,name=relations,proto3" json:"relations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockContentLink) Reset() {
	*x = BlockContentLink{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentLink) ProtoMessage() {}

func (x *BlockContentLink) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentLink.ProtoReflect.Descriptor instead.
func (*BlockContentLink) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 1}
}

func (x *BlockContentLink) GetTargetBlockId() string {
	if x != nil {
		return x.TargetBlockId
	}
	return ""
}

func (x *BlockContentLink) GetStyle() BlockContentLinkStyle {
	if x != nil {
		return x.Style
	}
	return BlockContentLink_Page
}

func (x *BlockContentLink) GetFields() *structpb.Struct {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *BlockContentLink) GetIconSize() BlockContentLinkIconSize {
	if x != nil {
		return x.IconSize
	}
	return BlockContentLink_SizeNone
}

func (x *BlockContentLink) GetCardStyle() BlockContentLinkCardStyle {
	if x != nil {
		return x.CardStyle
	}
	return BlockContentLink_Text
}

func (x *BlockContentLink) GetDescription() BlockContentLinkDescription {
	if x != nil {
		return x.Description
	}
	return BlockContentLink_None
}

func (x *BlockContentLink) GetRelations() []string {
	if x != nil {
		return x.Relations
	}
	return nil
}

// Divider: block, that contains only one horizontal thin line
type BlockContentDiv struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Style         BlockContentDivStyle   `protobuf:"varint,1,opt,name=style,proto3,enum=anytype.model.BlockContentDivStyle" json:"style,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockContentDiv) Reset() {
	*x = BlockContentDiv{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentDiv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentDiv) ProtoMessage() {}

func (x *BlockContentDiv) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentDiv.ProtoReflect.Descriptor instead.
func (*BlockContentDiv) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 2}
}

func (x *BlockContentDiv) GetStyle() BlockContentDivStyle {
	if x != nil {
		return x.Style
	}
	return BlockContentDiv_Line
}

// Bookmark is to keep a web-link and to preview a content.
type BlockContentBookmark struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Url   string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Deprecated. Get this data from the target object.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Deprecated. Get this data from the target object.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Deprecated. Get this data from the target object.
	ImageHash string `protobuf:"bytes,4,opt,name=imageHash,proto3" json:"imageHash,omitempty"`
	// Deprecated. Get this data from the target object.
	FaviconHash    string                    `protobuf:"bytes,5,opt,name=faviconHash,proto3" json:"faviconHash,omitempty"`
	Type           LinkPreviewType           `protobuf:"varint,6,opt,name=type,proto3,enum=anytype.model.LinkPreviewType" json:"type,omitempty"`
	TargetObjectId string                    `protobuf:"bytes,7,opt,name=targetObjectId,proto3" json:"targetObjectId,omitempty"`
	State          BlockContentBookmarkState `protobuf:"varint,8,opt,name=state,proto3,enum=anytype.model.BlockContentBookmarkState" json:"state,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BlockContentBookmark) Reset() {
	*x = BlockContentBookmark{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentBookmark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentBookmark) ProtoMessage() {}

func (x *BlockContentBookmark) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentBookmark.ProtoReflect.Descriptor instead.
func (*BlockContentBookmark) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 3}
}

func (x *BlockContentBookmark) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *BlockContentBookmark) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BlockContentBookmark) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BlockContentBookmark) GetImageHash() string {
	if x != nil {
		return x.ImageHash
	}
	return ""
}

func (x *BlockContentBookmark) GetFaviconHash() string {
	if x != nil {
		return x.FaviconHash
	}
	return ""
}

func (x *BlockContentBookmark) GetType() LinkPreviewType {
	if x != nil {
		return x.Type
	}
	return LinkPreview_Unknown
}

func (x *BlockContentBookmark) GetTargetObjectId() string {
	if x != nil {
		return x.TargetObjectId
	}
	return ""
}

func (x *BlockContentBookmark) GetState() BlockContentBookmarkState {
	if x != nil {
		return x.State
	}
	return BlockContentBookmark_Empty
}

type BlockContentIcon struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockContentIcon) Reset() {
	*x = BlockContentIcon{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentIcon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentIcon) ProtoMessage() {}

func (x *BlockContentIcon) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentIcon.ProtoReflect.Descriptor instead.
func (*BlockContentIcon) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 4}
}

func (x *BlockContentIcon) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type BlockContentFeaturedRelations struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockContentFeaturedRelations) Reset() {
	*x = BlockContentFeaturedRelations{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentFeaturedRelations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentFeaturedRelations) ProtoMessage() {}

func (x *BlockContentFeaturedRelations) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentFeaturedRelations.ProtoReflect.Descriptor instead.
func (*BlockContentFeaturedRelations) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 5}
}

type BlockContentText struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Style         BlockContentTextStyle  `protobuf:"varint,2,opt,name=style,proto3,enum=anytype.model.BlockContentTextStyle" json:"style,omitempty"`
	Marks         *BlockContentTextMarks `protobuf:"bytes,3,opt,name=marks,proto3" json:"marks,omitempty"` // list of marks to apply to the text
	Checked       bool                   `protobuf:"varint,4,opt,name=checked,proto3" json:"checked,omitempty"`
	Color         string                 `protobuf:"bytes,5,opt,name=color,proto3" json:"color,omitempty"`
	IconEmoji     string                 `protobuf:"bytes,6,opt,name=iconEmoji,proto3" json:"iconEmoji,omitempty"` // used with style Callout
	IconImage     string                 `protobuf:"bytes,7,opt,name=iconImage,proto3" json:"iconImage,omitempty"` // in case both image and emoji are set, image should has a priority in the UI
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockContentText) Reset() {
	*x = BlockContentText{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentText) ProtoMessage() {}

func (x *BlockContentText) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentText.ProtoReflect.Descriptor instead.
func (*BlockContentText) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 6}
}

func (x *BlockContentText) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *BlockContentText) GetStyle() BlockContentTextStyle {
	if x != nil {
		return x.Style
	}
	return BlockContentText_Paragraph
}

func (x *BlockContentText) GetMarks() *BlockContentTextMarks {
	if x != nil {
		return x.Marks
	}
	return nil
}

func (x *BlockContentText) GetChecked() bool {
	if x != nil {
		return x.Checked
	}
	return false
}

func (x *BlockContentText) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *BlockContentText) GetIconEmoji() string {
	if x != nil {
		return x.IconEmoji
	}
	return ""
}

func (x *BlockContentText) GetIconImage() string {
	if x != nil {
		return x.IconImage
	}
	return ""
}

type BlockContentFile struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Hash           string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type           BlockContentFileType   `protobuf:"varint,3,opt,name=type,proto3,enum=anytype.model.BlockContentFileType" json:"type,omitempty"`
	Mime           string                 `protobuf:"bytes,4,opt,name=mime,proto3" json:"mime,omitempty"`
	Size           int64                  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	AddedAt        int64                  `protobuf:"varint,6,opt,name=addedAt,proto3" json:"addedAt,omitempty"`
	TargetObjectId string                 `protobuf:"bytes,9,opt,name=targetObjectId,proto3" json:"targetObjectId,omitempty"`
	State          BlockContentFileState  `protobuf:"varint,7,opt,name=state,proto3,enum=anytype.model.BlockContentFileState" json:"state,omitempty"`
	Style          BlockContentFileStyle  `protobuf:"varint,8,opt,name=style,proto3,enum=anytype.model.BlockContentFileStyle" json:"style,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BlockContentFile) Reset() {
	*x = BlockContentFile{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentFile) ProtoMessage() {}

func (x *BlockContentFile) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentFile.ProtoReflect.Descriptor instead.
func (*BlockContentFile) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 7}
}

func (x *BlockContentFile) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *BlockContentFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BlockContentFile) GetType() BlockContentFileType {
	if x != nil {
		return x.Type
	}
	return BlockContentFile_None
}

func (x *BlockContentFile) GetMime() string {
	if x != nil {
		return x.Mime
	}
	return ""
}

func (x *BlockContentFile) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BlockContentFile) GetAddedAt() int64 {
	if x != nil {
		return x.AddedAt
	}
	return 0
}

func (x *BlockContentFile) GetTargetObjectId() string {
	if x != nil {
		return x.TargetObjectId
	}
	return ""
}

func (x *BlockContentFile) GetState() BlockContentFileState {
	if x != nil {
		return x.State
	}
	return BlockContentFile_Empty
}

func (x *BlockContentFile) GetStyle() BlockContentFileStyle {
	if x != nil {
		return x.Style
	}
	return BlockContentFile_Auto
}

type BlockContentSmartblock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockContentSmartblock) Reset() {
	*x = BlockContentSmartblock{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentSmartblock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentSmartblock) ProtoMessage() {}

func (x *BlockContentSmartblock) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentSmartblock.ProtoReflect.Descriptor instead.
func (*BlockContentSmartblock) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 8}
}

type BlockContentDataview struct {
	state      protoimpl.MessageState      `protogen:"open.v1"`
	Source     []string                    `protobuf:"bytes,1,rep,name=source,proto3" json:"source,omitempty"` // can be set for detached(without TargetObjectId) inline sets
	Views      []*BlockContentDataviewView `protobuf:"bytes,2,rep,name=views,proto3" json:"views,omitempty"`
	ActiveView string                      `protobuf:"bytes,3,opt,name=activeView,proto3" json:"activeView,omitempty"` // do not generate changes for this field
	// deprecated
	Relations      []*Relation                        `protobuf:"bytes,4,rep,name=relations,proto3" json:"relations,omitempty"`
	GroupOrders    []*BlockContentDataviewGroupOrder  `protobuf:"bytes,12,rep,name=groupOrders,proto3" json:"groupOrders,omitempty"`
	ObjectOrders   []*BlockContentDataviewObjectOrder `protobuf:"bytes,13,rep,name=objectOrders,proto3" json:"objectOrders,omitempty"`
	RelationLinks  []*RelationLink                    `protobuf:"bytes,5,rep,name=relationLinks,proto3" json:"relationLinks,omitempty"`
	TargetObjectId string                             `protobuf:"bytes,6,opt,name=TargetObjectId,proto3" json:"TargetObjectId,omitempty"` // empty for original set/collection objects and for detached inline sets
	IsCollection   bool                               `protobuf:"varint,14,opt,name=isCollection,proto3" json:"isCollection,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BlockContentDataview) Reset() {
	*x = BlockContentDataview{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentDataview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentDataview) ProtoMessage() {}

func (x *BlockContentDataview) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentDataview.ProtoReflect.Descriptor instead.
func (*BlockContentDataview) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 9}
}

func (x *BlockContentDataview) GetSource() []string {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *BlockContentDataview) GetViews() []*BlockContentDataviewView {
	if x != nil {
		return x.Views
	}
	return nil
}

func (x *BlockContentDataview) GetActiveView() string {
	if x != nil {
		return x.ActiveView
	}
	return ""
}

func (x *BlockContentDataview) GetRelations() []*Relation {
	if x != nil {
		return x.Relations
	}
	return nil
}

func (x *BlockContentDataview) GetGroupOrders() []*BlockContentDataviewGroupOrder {
	if x != nil {
		return x.GroupOrders
	}
	return nil
}

func (x *BlockContentDataview) GetObjectOrders() []*BlockContentDataviewObjectOrder {
	if x != nil {
		return x.ObjectOrders
	}
	return nil
}

func (x *BlockContentDataview) GetRelationLinks() []*RelationLink {
	if x != nil {
		return x.RelationLinks
	}
	return nil
}

func (x *BlockContentDataview) GetTargetObjectId() string {
	if x != nil {
		return x.TargetObjectId
	}
	return ""
}

func (x *BlockContentDataview) GetIsCollection() bool {
	if x != nil {
		return x.IsCollection
	}
	return false
}

type BlockContentRelation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockContentRelation) Reset() {
	*x = BlockContentRelation{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentRelation) ProtoMessage() {}

func (x *BlockContentRelation) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentRelation.ProtoReflect.Descriptor instead.
func (*BlockContentRelation) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 10}
}

func (x *BlockContentRelation) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type BlockContentLatex struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Text          string                     `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Processor     BlockContentLatexProcessor `protobuf:"varint,2,opt,name=processor,proto3,enum=anytype.model.BlockContentLatexProcessor" json:"processor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockContentLatex) Reset() {
	*x = BlockContentLatex{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentLatex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentLatex) ProtoMessage() {}

func (x *BlockContentLatex) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentLatex.ProtoReflect.Descriptor instead.
func (*BlockContentLatex) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 11}
}

func (x *BlockContentLatex) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *BlockContentLatex) GetProcessor() BlockContentLatexProcessor {
	if x != nil {
		return x.Processor
	}
	return BlockContentLatex_Latex
}

type BlockContentTableOfContents struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockContentTableOfContents) Reset() {
	*x = BlockContentTableOfContents{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentTableOfContents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentTableOfContents) ProtoMessage() {}

func (x *BlockContentTableOfContents) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentTableOfContents.ProtoReflect.Descriptor instead.
func (*BlockContentTableOfContents) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 12}
}

type BlockContentTable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockContentTable) Reset() {
	*x = BlockContentTable{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentTable) ProtoMessage() {}

func (x *BlockContentTable) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentTable.ProtoReflect.Descriptor instead.
func (*BlockContentTable) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 13}
}

type BlockContentTableColumn struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockContentTableColumn) Reset() {
	*x = BlockContentTableColumn{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentTableColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentTableColumn) ProtoMessage() {}

func (x *BlockContentTableColumn) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentTableColumn.ProtoReflect.Descriptor instead.
func (*BlockContentTableColumn) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 14}
}

type BlockContentTableRow struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsHeader      bool                   `protobuf:"varint,1,opt,name=isHeader,proto3" json:"isHeader,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockContentTableRow) Reset() {
	*x = BlockContentTableRow{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentTableRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentTableRow) ProtoMessage() {}

func (x *BlockContentTableRow) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentTableRow.ProtoReflect.Descriptor instead.
func (*BlockContentTableRow) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 15}
}

func (x *BlockContentTableRow) GetIsHeader() bool {
	if x != nil {
		return x.IsHeader
	}
	return false
}

type BlockContentWidget struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Layout        BlockContentWidgetLayout `protobuf:"varint,1,opt,name=layout,proto3,enum=anytype.model.BlockContentWidgetLayout" json:"layout,omitempty"`
	Limit         int32                    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	ViewId        string                   `protobuf:"bytes,3,opt,name=viewId,proto3" json:"viewId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockContentWidget) Reset() {
	*x = BlockContentWidget{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentWidget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentWidget) ProtoMessage() {}

func (x *BlockContentWidget) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentWidget.ProtoReflect.Descriptor instead.
func (*BlockContentWidget) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 16}
}

func (x *BlockContentWidget) GetLayout() BlockContentWidgetLayout {
	if x != nil {
		return x.Layout
	}
	return BlockContentWidget_Link
}

func (x *BlockContentWidget) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *BlockContentWidget) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

type BlockContentChat struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockContentChat) Reset() {
	*x = BlockContentChat{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentChat) ProtoMessage() {}

func (x *BlockContentChat) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentChat.ProtoReflect.Descriptor instead.
func (*BlockContentChat) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 17}
}

type BlockContentTextMarks struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Marks         []*BlockContentTextMark `protobuf:"bytes,1,rep,name=marks,proto3" json:"marks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockContentTextMarks) Reset() {
	*x = BlockContentTextMarks{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentTextMarks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentTextMarks) ProtoMessage() {}

func (x *BlockContentTextMarks) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentTextMarks.ProtoReflect.Descriptor instead.
func (*BlockContentTextMarks) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 6, 0}
}

func (x *BlockContentTextMarks) GetMarks() []*BlockContentTextMark {
	if x != nil {
		return x.Marks
	}
	return nil
}

type BlockContentTextMark struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Range         *Range                   `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"` // range of symbols to apply this mark. From(symbol) To(symbol)
	Type          BlockContentTextMarkType `protobuf:"varint,2,opt,name=type,proto3,enum=anytype.model.BlockContentTextMarkType" json:"type,omitempty"`
	Param         string                   `protobuf:"bytes,3,opt,name=param,proto3" json:"param,omitempty"` // link, color, etc
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockContentTextMark) Reset() {
	*x = BlockContentTextMark{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentTextMark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentTextMark) ProtoMessage() {}

func (x *BlockContentTextMark) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentTextMark.ProtoReflect.Descriptor instead.
func (*BlockContentTextMark) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 6, 1}
}

func (x *BlockContentTextMark) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *BlockContentTextMark) GetType() BlockContentTextMarkType {
	if x != nil {
		return x.Type
	}
	return BlockContentTextMark_Strikethrough
}

func (x *BlockContentTextMark) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

type BlockContentDataviewView struct {
	state                 protoimpl.MessageState          `protogen:"open.v1"`
	Id                    string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                  BlockContentDataviewViewType    `protobuf:"varint,2,opt,name=type,proto3,enum=anytype.model.BlockContentDataviewViewType" json:"type,omitempty"`
	Name                  string                          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Sorts                 []*BlockContentDataviewSort     `protobuf:"bytes,4,rep,name=sorts,proto3" json:"sorts,omitempty"`
	Filters               []*BlockContentDataviewFilter   `protobuf:"bytes,5,rep,name=filters,proto3" json:"filters,omitempty"`
	Relations             []*BlockContentDataviewRelation `protobuf:"bytes,6,rep,name=relations,proto3" json:"relations,omitempty"`                                                // relations fields/columns options, also used to provide the order
	CoverRelationKey      string                          `protobuf:"bytes,7,opt,name=coverRelationKey,proto3" json:"coverRelationKey,omitempty"`                                  // Relation used for cover in gallery
	HideIcon              bool                            `protobuf:"varint,8,opt,name=hideIcon,proto3" json:"hideIcon,omitempty"`                                                 // Hide icon near name
	CardSize              BlockContentDataviewViewSize    `protobuf:"varint,9,opt,name=cardSize,proto3,enum=anytype.model.BlockContentDataviewViewSize" json:"cardSize,omitempty"` // Gallery card size
	CoverFit              bool                            `protobuf:"varint,10,opt,name=coverFit,proto3" json:"coverFit,omitempty"`                                                // Image fits container
	GroupRelationKey      string                          `protobuf:"bytes,11,opt,name=groupRelationKey,proto3" json:"groupRelationKey,omitempty"`                                 // Group view by this relationKey
	GroupBackgroundColors bool                            `protobuf:"varint,12,opt,name=groupBackgroundColors,proto3" json:"groupBackgroundColors,omitempty"`                      // Enable backgrounds in groups
	PageLimit             int32                           `protobuf:"varint,13,opt,name=pageLimit,proto3" json:"pageLimit,omitempty"`                                              // Limit of objects shown in widget
	DefaultTemplateId     string                          `protobuf:"bytes,14,opt,name=defaultTemplateId,proto3" json:"defaultTemplateId,omitempty"`                               // Default template that is chosen for new object created within the view
	DefaultObjectTypeId   string                          `protobuf:"bytes,15,opt,name=defaultObjectTypeId,proto3" json:"defaultObjectTypeId,omitempty"`                           // Default object type that is chosen for new object created within the view
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *BlockContentDataviewView) Reset() {
	*x = BlockContentDataviewView{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentDataviewView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentDataviewView) ProtoMessage() {}

func (x *BlockContentDataviewView) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentDataviewView.ProtoReflect.Descriptor instead.
func (*BlockContentDataviewView) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 9, 0}
}

func (x *BlockContentDataviewView) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BlockContentDataviewView) GetType() BlockContentDataviewViewType {
	if x != nil {
		return x.Type
	}
	return BlockContentDataviewView_Table
}

func (x *BlockContentDataviewView) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BlockContentDataviewView) GetSorts() []*BlockContentDataviewSort {
	if x != nil {
		return x.Sorts
	}
	return nil
}

func (x *BlockContentDataviewView) GetFilters() []*BlockContentDataviewFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *BlockContentDataviewView) GetRelations() []*BlockContentDataviewRelation {
	if x != nil {
		return x.Relations
	}
	return nil
}

func (x *BlockContentDataviewView) GetCoverRelationKey() string {
	if x != nil {
		return x.CoverRelationKey
	}
	return ""
}

func (x *BlockContentDataviewView) GetHideIcon() bool {
	if x != nil {
		return x.HideIcon
	}
	return false
}

func (x *BlockContentDataviewView) GetCardSize() BlockContentDataviewViewSize {
	if x != nil {
		return x.CardSize
	}
	return BlockContentDataviewView_Small
}

func (x *BlockContentDataviewView) GetCoverFit() bool {
	if x != nil {
		return x.CoverFit
	}
	return false
}

func (x *BlockContentDataviewView) GetGroupRelationKey() string {
	if x != nil {
		return x.GroupRelationKey
	}
	return ""
}

func (x *BlockContentDataviewView) GetGroupBackgroundColors() bool {
	if x != nil {
		return x.GroupBackgroundColors
	}
	return false
}

func (x *BlockContentDataviewView) GetPageLimit() int32 {
	if x != nil {
		return x.PageLimit
	}
	return 0
}

func (x *BlockContentDataviewView) GetDefaultTemplateId() string {
	if x != nil {
		return x.DefaultTemplateId
	}
	return ""
}

func (x *BlockContentDataviewView) GetDefaultObjectTypeId() string {
	if x != nil {
		return x.DefaultObjectTypeId
	}
	return ""
}

type BlockContentDataviewRelation struct {
	state           protoimpl.MessageState                  `protogen:"open.v1"`
	Key             string                                  `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	IsVisible       bool                                    `protobuf:"varint,2,opt,name=isVisible,proto3" json:"isVisible,omitempty"`
	Width           int32                                   `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"` // the displayed column % calculated based on other visible relations
	DateIncludeTime bool                                    `protobuf:"varint,5,opt,name=dateIncludeTime,proto3" json:"dateIncludeTime,omitempty"`
	TimeFormat      BlockContentDataviewRelationTimeFormat  `protobuf:"varint,6,opt,name=timeFormat,proto3,enum=anytype.model.BlockContentDataviewRelationTimeFormat" json:"timeFormat,omitempty"`
	DateFormat      BlockContentDataviewRelationDateFormat  `protobuf:"varint,7,opt,name=dateFormat,proto3,enum=anytype.model.BlockContentDataviewRelationDateFormat" json:"dateFormat,omitempty"`
	Formula         BlockContentDataviewRelationFormulaType `protobuf:"varint,8,opt,name=formula,proto3,enum=anytype.model.BlockContentDataviewRelationFormulaType" json:"formula,omitempty"`
	Align           BlockAlign                              `protobuf:"varint,9,opt,name=align,proto3,enum=anytype.model.BlockAlign" json:"align,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BlockContentDataviewRelation) Reset() {
	*x = BlockContentDataviewRelation{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentDataviewRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentDataviewRelation) ProtoMessage() {}

func (x *BlockContentDataviewRelation) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentDataviewRelation.ProtoReflect.Descriptor instead.
func (*BlockContentDataviewRelation) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 9, 1}
}

func (x *BlockContentDataviewRelation) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *BlockContentDataviewRelation) GetIsVisible() bool {
	if x != nil {
		return x.IsVisible
	}
	return false
}

func (x *BlockContentDataviewRelation) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *BlockContentDataviewRelation) GetDateIncludeTime() bool {
	if x != nil {
		return x.DateIncludeTime
	}
	return false
}

func (x *BlockContentDataviewRelation) GetTimeFormat() BlockContentDataviewRelationTimeFormat {
	if x != nil {
		return x.TimeFormat
	}
	return BlockContentDataviewRelation_Format12
}

func (x *BlockContentDataviewRelation) GetDateFormat() BlockContentDataviewRelationDateFormat {
	if x != nil {
		return x.DateFormat
	}
	return BlockContentDataviewRelation_MonthAbbrBeforeDay
}

func (x *BlockContentDataviewRelation) GetFormula() BlockContentDataviewRelationFormulaType {
	if x != nil {
		return x.Formula
	}
	return BlockContentDataviewRelation_None
}

func (x *BlockContentDataviewRelation) GetAlign() BlockAlign {
	if x != nil {
		return x.Align
	}
	return Block_AlignLeft
}

type BlockContentDataviewSort struct {
	state          protoimpl.MessageState            `protogen:"open.v1"`
	RelationKey    string                            `protobuf:"bytes,1,opt,name=RelationKey,proto3" json:"RelationKey,omitempty"`
	Type           BlockContentDataviewSortType      `protobuf:"varint,2,opt,name=type,proto3,enum=anytype.model.BlockContentDataviewSortType" json:"type,omitempty"`
	CustomOrder    []*structpb.Value                 `protobuf:"bytes,3,rep,name=customOrder,proto3" json:"customOrder,omitempty"`
	Format         RelationFormat                    `protobuf:"varint,4,opt,name=format,proto3,enum=anytype.model.RelationFormat" json:"format,omitempty"`
	IncludeTime    bool                              `protobuf:"varint,5,opt,name=includeTime,proto3" json:"includeTime,omitempty"`
	Id             string                            `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	EmptyPlacement BlockContentDataviewSortEmptyType `protobuf:"varint,7,opt,name=emptyPlacement,proto3,enum=anytype.model.BlockContentDataviewSortEmptyType" json:"emptyPlacement,omitempty"`
	NoCollate      bool                              `protobuf:"varint,8,opt,name=noCollate,proto3" json:"noCollate,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BlockContentDataviewSort) Reset() {
	*x = BlockContentDataviewSort{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentDataviewSort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentDataviewSort) ProtoMessage() {}

func (x *BlockContentDataviewSort) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentDataviewSort.ProtoReflect.Descriptor instead.
func (*BlockContentDataviewSort) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 9, 2}
}

func (x *BlockContentDataviewSort) GetRelationKey() string {
	if x != nil {
		return x.RelationKey
	}
	return ""
}

func (x *BlockContentDataviewSort) GetType() BlockContentDataviewSortType {
	if x != nil {
		return x.Type
	}
	return BlockContentDataviewSort_Asc
}

func (x *BlockContentDataviewSort) GetCustomOrder() []*structpb.Value {
	if x != nil {
		return x.CustomOrder
	}
	return nil
}

func (x *BlockContentDataviewSort) GetFormat() RelationFormat {
	if x != nil {
		return x.Format
	}
	return RelationFormat_longtext
}

func (x *BlockContentDataviewSort) GetIncludeTime() bool {
	if x != nil {
		return x.IncludeTime
	}
	return false
}

func (x *BlockContentDataviewSort) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BlockContentDataviewSort) GetEmptyPlacement() BlockContentDataviewSortEmptyType {
	if x != nil {
		return x.EmptyPlacement
	}
	return BlockContentDataviewSort_NotSpecified
}

func (x *BlockContentDataviewSort) GetNoCollate() bool {
	if x != nil {
		return x.NoCollate
	}
	return false
}

type BlockContentDataviewFilter struct {
	state            protoimpl.MessageState                `protogen:"open.v1"`
	Id               string                                `protobuf:"bytes,9,opt,name=id,proto3" json:"id,omitempty"`
	Operator         BlockContentDataviewFilterOperator    `protobuf:"varint,1,opt,name=operator,proto3,enum=anytype.model.BlockContentDataviewFilterOperator" json:"operator,omitempty"` // looks not applicable?
	RelationKey      string                                `protobuf:"bytes,2,opt,name=RelationKey,proto3" json:"RelationKey,omitempty"`
	RelationProperty string                                `protobuf:"bytes,5,opt,name=relationProperty,proto3" json:"relationProperty,omitempty"`
	Condition        BlockContentDataviewFilterCondition   `protobuf:"varint,3,opt,name=condition,proto3,enum=anytype.model.BlockContentDataviewFilterCondition" json:"condition,omitempty"`
	Value            *structpb.Value                       `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	QuickOption      BlockContentDataviewFilterQuickOption `protobuf:"varint,6,opt,name=quickOption,proto3,enum=anytype.model.BlockContentDataviewFilterQuickOption" json:"quickOption,omitempty"`
	Format           RelationFormat                        `protobuf:"varint,7,opt,name=format,proto3,enum=anytype.model.RelationFormat" json:"format,omitempty"`
	IncludeTime      bool                                  `protobuf:"varint,8,opt,name=includeTime,proto3" json:"includeTime,omitempty"`
	NestedFilters    []*BlockContentDataviewFilter         `protobuf:"bytes,10,rep,name=nestedFilters,proto3" json:"nestedFilters,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *BlockContentDataviewFilter) Reset() {
	*x = BlockContentDataviewFilter{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentDataviewFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentDataviewFilter) ProtoMessage() {}

func (x *BlockContentDataviewFilter) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentDataviewFilter.ProtoReflect.Descriptor instead.
func (*BlockContentDataviewFilter) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 9, 3}
}

func (x *BlockContentDataviewFilter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BlockContentDataviewFilter) GetOperator() BlockContentDataviewFilterOperator {
	if x != nil {
		return x.Operator
	}
	return BlockContentDataviewFilter_No
}

func (x *BlockContentDataviewFilter) GetRelationKey() string {
	if x != nil {
		return x.RelationKey
	}
	return ""
}

func (x *BlockContentDataviewFilter) GetRelationProperty() string {
	if x != nil {
		return x.RelationProperty
	}
	return ""
}

func (x *BlockContentDataviewFilter) GetCondition() BlockContentDataviewFilterCondition {
	if x != nil {
		return x.Condition
	}
	return BlockContentDataviewFilter_None
}

func (x *BlockContentDataviewFilter) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *BlockContentDataviewFilter) GetQuickOption() BlockContentDataviewFilterQuickOption {
	if x != nil {
		return x.QuickOption
	}
	return BlockContentDataviewFilter_ExactDate
}

func (x *BlockContentDataviewFilter) GetFormat() RelationFormat {
	if x != nil {
		return x.Format
	}
	return RelationFormat_longtext
}

func (x *BlockContentDataviewFilter) GetIncludeTime() bool {
	if x != nil {
		return x.IncludeTime
	}
	return false
}

func (x *BlockContentDataviewFilter) GetNestedFilters() []*BlockContentDataviewFilter {
	if x != nil {
		return x.NestedFilters
	}
	return nil
}

type BlockContentDataviewGroupOrder struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	ViewId        string                           `protobuf:"bytes,1,opt,name=viewId,proto3" json:"viewId,omitempty"`
	ViewGroups    []*BlockContentDataviewViewGroup `protobuf:"bytes,2,rep,name=viewGroups,proto3" json:"viewGroups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockContentDataviewGroupOrder) Reset() {
	*x = BlockContentDataviewGroupOrder{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentDataviewGroupOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentDataviewGroupOrder) ProtoMessage() {}

func (x *BlockContentDataviewGroupOrder) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentDataviewGroupOrder.ProtoReflect.Descriptor instead.
func (*BlockContentDataviewGroupOrder) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 9, 4}
}

func (x *BlockContentDataviewGroupOrder) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

func (x *BlockContentDataviewGroupOrder) GetViewGroups() []*BlockContentDataviewViewGroup {
	if x != nil {
		return x.ViewGroups
	}
	return nil
}

type BlockContentDataviewViewGroup struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	GroupId         string                 `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	Index           int32                  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Hidden          bool                   `protobuf:"varint,3,opt,name=hidden,proto3" json:"hidden,omitempty"`
	BackgroundColor string                 `protobuf:"bytes,4,opt,name=backgroundColor,proto3" json:"backgroundColor,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BlockContentDataviewViewGroup) Reset() {
	*x = BlockContentDataviewViewGroup{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentDataviewViewGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentDataviewViewGroup) ProtoMessage() {}

func (x *BlockContentDataviewViewGroup) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentDataviewViewGroup.ProtoReflect.Descriptor instead.
func (*BlockContentDataviewViewGroup) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 9, 5}
}

func (x *BlockContentDataviewViewGroup) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *BlockContentDataviewViewGroup) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BlockContentDataviewViewGroup) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *BlockContentDataviewViewGroup) GetBackgroundColor() string {
	if x != nil {
		return x.BackgroundColor
	}
	return ""
}

type BlockContentDataviewObjectOrder struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ViewId        string                 `protobuf:"bytes,1,opt,name=viewId,proto3" json:"viewId,omitempty"`
	GroupId       string                 `protobuf:"bytes,2,opt,name=groupId,proto3" json:"groupId,omitempty"`
	ObjectIds     []string               `protobuf:"bytes,3,rep,name=objectIds,proto3" json:"objectIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockContentDataviewObjectOrder) Reset() {
	*x = BlockContentDataviewObjectOrder{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentDataviewObjectOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentDataviewObjectOrder) ProtoMessage() {}

func (x *BlockContentDataviewObjectOrder) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentDataviewObjectOrder.ProtoReflect.Descriptor instead.
func (*BlockContentDataviewObjectOrder) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 9, 6}
}

func (x *BlockContentDataviewObjectOrder) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

func (x *BlockContentDataviewObjectOrder) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *BlockContentDataviewObjectOrder) GetObjectIds() []string {
	if x != nil {
		return x.ObjectIds
	}
	return nil
}

type BlockContentDataviewGroup struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are valid to be assigned to Value:
	//
	//	*BlockContentDataviewGroupValueOfStatus
	//	*BlockContentDataviewGroupValueOfTag
	//	*BlockContentDataviewGroupValueOfCheckbox
	//	*BlockContentDataviewGroupValueOfDate
	Value         IsBlockContentDataviewGroupValue `protobuf_oneof:"Value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockContentDataviewGroup) Reset() {
	*x = BlockContentDataviewGroup{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentDataviewGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentDataviewGroup) ProtoMessage() {}

func (x *BlockContentDataviewGroup) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentDataviewGroup.ProtoReflect.Descriptor instead.
func (*BlockContentDataviewGroup) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 9, 7}
}

func (x *BlockContentDataviewGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BlockContentDataviewGroup) GetValue() IsBlockContentDataviewGroupValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *BlockContentDataviewGroup) GetStatus() *BlockContentDataviewStatus {
	if x != nil {
		if x, ok := x.Value.(*BlockContentDataviewGroupValueOfStatus); ok {
			return x.Status
		}
	}
	return nil
}

func (x *BlockContentDataviewGroup) GetTag() *BlockContentDataviewTag {
	if x != nil {
		if x, ok := x.Value.(*BlockContentDataviewGroupValueOfTag); ok {
			return x.Tag
		}
	}
	return nil
}

func (x *BlockContentDataviewGroup) GetCheckbox() *BlockContentDataviewCheckbox {
	if x != nil {
		if x, ok := x.Value.(*BlockContentDataviewGroupValueOfCheckbox); ok {
			return x.Checkbox
		}
	}
	return nil
}

func (x *BlockContentDataviewGroup) GetDate() *BlockContentDataviewDate {
	if x != nil {
		if x, ok := x.Value.(*BlockContentDataviewGroupValueOfDate); ok {
			return x.Date
		}
	}
	return nil
}

type IsBlockContentDataviewGroupValue interface {
	IsBlockContentDataviewGroupValue()
}

type BlockContentDataviewGroupValueOfStatus struct {
	Status *BlockContentDataviewStatus `protobuf:"bytes,2,opt,name=status,proto3,oneof" json:"status,omitempty"`
}

type BlockContentDataviewGroupValueOfTag struct {
	Tag *BlockContentDataviewTag `protobuf:"bytes,3,opt,name=tag,proto3,oneof" json:"tag,omitempty"`
}

type BlockContentDataviewGroupValueOfCheckbox struct {
	Checkbox *BlockContentDataviewCheckbox `protobuf:"bytes,4,opt,name=checkbox,proto3,oneof" json:"checkbox,omitempty"`
}

type BlockContentDataviewGroupValueOfDate struct {
	Date *BlockContentDataviewDate `protobuf:"bytes,5,opt,name=date,proto3,oneof" json:"date,omitempty"`
}

func (*BlockContentDataviewGroupValueOfStatus) IsBlockContentDataviewGroupValue() {}

func (*BlockContentDataviewGroupValueOfTag) IsBlockContentDataviewGroupValue() {}

func (*BlockContentDataviewGroupValueOfCheckbox) IsBlockContentDataviewGroupValue() {}

func (*BlockContentDataviewGroupValueOfDate) IsBlockContentDataviewGroupValue() {}

type BlockContentDataviewStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockContentDataviewStatus) Reset() {
	*x = BlockContentDataviewStatus{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentDataviewStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentDataviewStatus) ProtoMessage() {}

func (x *BlockContentDataviewStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentDataviewStatus.ProtoReflect.Descriptor instead.
func (*BlockContentDataviewStatus) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 9, 8}
}

func (x *BlockContentDataviewStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type BlockContentDataviewTag struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []string               `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockContentDataviewTag) Reset() {
	*x = BlockContentDataviewTag{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentDataviewTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentDataviewTag) ProtoMessage() {}

func (x *BlockContentDataviewTag) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentDataviewTag.ProtoReflect.Descriptor instead.
func (*BlockContentDataviewTag) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 9, 9}
}

func (x *BlockContentDataviewTag) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type BlockContentDataviewCheckbox struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Checked       bool                   `protobuf:"varint,1,opt,name=checked,proto3" json:"checked,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockContentDataviewCheckbox) Reset() {
	*x = BlockContentDataviewCheckbox{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentDataviewCheckbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentDataviewCheckbox) ProtoMessage() {}

func (x *BlockContentDataviewCheckbox) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentDataviewCheckbox.ProtoReflect.Descriptor instead.
func (*BlockContentDataviewCheckbox) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 9, 10}
}

func (x *BlockContentDataviewCheckbox) GetChecked() bool {
	if x != nil {
		return x.Checked
	}
	return false
}

type BlockContentDataviewDate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockContentDataviewDate) Reset() {
	*x = BlockContentDataviewDate{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockContentDataviewDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockContentDataviewDate) ProtoMessage() {}

func (x *BlockContentDataviewDate) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockContentDataviewDate.ProtoReflect.Descriptor instead.
func (*BlockContentDataviewDate) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{2, 1, 9, 11}
}

type AccountConfig struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	EnableDataview          bool                   `protobuf:"varint,1,opt,name=enableDataview,proto3" json:"enableDataview,omitempty"`
	EnableDebug             bool                   `protobuf:"varint,2,opt,name=enableDebug,proto3" json:"enableDebug,omitempty"`
	EnablePrereleaseChannel bool                   `protobuf:"varint,3,opt,name=enablePrereleaseChannel,proto3" json:"enablePrereleaseChannel,omitempty"`
	EnableSpaces            bool                   `protobuf:"varint,4,opt,name=enableSpaces,proto3" json:"enableSpaces,omitempty"`
	Extra                   *structpb.Struct       `protobuf:"bytes,100,opt,name=extra,proto3" json:"extra,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *AccountConfig) Reset() {
	*x = AccountConfig{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountConfig) ProtoMessage() {}

func (x *AccountConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountConfig.ProtoReflect.Descriptor instead.
func (*AccountConfig) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{5, 0}
}

func (x *AccountConfig) GetEnableDataview() bool {
	if x != nil {
		return x.EnableDataview
	}
	return false
}

func (x *AccountConfig) GetEnableDebug() bool {
	if x != nil {
		return x.EnableDebug
	}
	return false
}

func (x *AccountConfig) GetEnablePrereleaseChannel() bool {
	if x != nil {
		return x.EnablePrereleaseChannel
	}
	return false
}

func (x *AccountConfig) GetEnableSpaces() bool {
	if x != nil {
		return x.EnableSpaces
	}
	return false
}

func (x *AccountConfig) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AccountStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StatusType    AccountStatusType      `protobuf:"varint,1,opt,name=statusType,proto3,enum=anytype.model.AccountStatusType" json:"statusType,omitempty"`
	DeletionDate  int64                  `protobuf:"varint,2,opt,name=deletionDate,proto3" json:"deletionDate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountStatus) Reset() {
	*x = AccountStatus{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountStatus) ProtoMessage() {}

func (x *AccountStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountStatus.ProtoReflect.Descriptor instead.
func (*AccountStatus) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{5, 1}
}

func (x *AccountStatus) GetStatusType() AccountStatusType {
	if x != nil {
		return x.StatusType
	}
	return Account_Active
}

func (x *AccountStatus) GetDeletionDate() int64 {
	if x != nil {
		return x.DeletionDate
	}
	return 0
}

type AccountInfo struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	HomeObjectId           string                 `protobuf:"bytes,2,opt,name=homeObjectId,proto3" json:"homeObjectId,omitempty"`                      // home dashboard block id
	ArchiveObjectId        string                 `protobuf:"bytes,3,opt,name=archiveObjectId,proto3" json:"archiveObjectId,omitempty"`                // archive block id
	ProfileObjectId        string                 `protobuf:"bytes,4,opt,name=profileObjectId,proto3" json:"profileObjectId,omitempty"`                // profile block id
	MarketplaceWorkspaceId string                 `protobuf:"bytes,11,opt,name=marketplaceWorkspaceId,proto3" json:"marketplaceWorkspaceId,omitempty"` // marketplace workspace id
	WorkspaceObjectId      string                 `protobuf:"bytes,15,opt,name=workspaceObjectId,proto3" json:"workspaceObjectId,omitempty"`           // workspace object id. used for space-level chat
	DeviceId               string                 `protobuf:"bytes,8,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	AccountSpaceId         string                 `protobuf:"bytes,9,opt,name=accountSpaceId,proto3" json:"accountSpaceId,omitempty"` // the first created private space. It's filled only when account is created
	WidgetsId              string                 `protobuf:"bytes,10,opt,name=widgetsId,proto3" json:"widgetsId,omitempty"`
	SpaceViewId            string                 `protobuf:"bytes,13,opt,name=spaceViewId,proto3" json:"spaceViewId,omitempty"`
	TechSpaceId            string                 `protobuf:"bytes,14,opt,name=techSpaceId,proto3" json:"techSpaceId,omitempty"`
	GatewayUrl             string                 `protobuf:"bytes,101,opt,name=gatewayUrl,proto3" json:"gatewayUrl,omitempty"`             // gateway url for fetching static files
	LocalStoragePath       string                 `protobuf:"bytes,103,opt,name=localStoragePath,proto3" json:"localStoragePath,omitempty"` // path to local storage
	TimeZone               string                 `protobuf:"bytes,104,opt,name=timeZone,proto3" json:"timeZone,omitempty"`                 // time zone from config
	AnalyticsId            string                 `protobuf:"bytes,105,opt,name=analyticsId,proto3" json:"analyticsId,omitempty"`
	NetworkId              string                 `protobuf:"bytes,106,opt,name=networkId,proto3" json:"networkId,omitempty"`             // network id to which anytype is connected
	EthereumAddress        string                 `protobuf:"bytes,107,opt,name=ethereumAddress,proto3" json:"ethereumAddress,omitempty"` // we have Any PK AND Ethereum PK derived from one seed phrase
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *AccountInfo) Reset() {
	*x = AccountInfo{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountInfo) ProtoMessage() {}

func (x *AccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountInfo.ProtoReflect.Descriptor instead.
func (*AccountInfo) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{5, 2}
}

func (x *AccountInfo) GetHomeObjectId() string {
	if x != nil {
		return x.HomeObjectId
	}
	return ""
}

func (x *AccountInfo) GetArchiveObjectId() string {
	if x != nil {
		return x.ArchiveObjectId
	}
	return ""
}

func (x *AccountInfo) GetProfileObjectId() string {
	if x != nil {
		return x.ProfileObjectId
	}
	return ""
}

func (x *AccountInfo) GetMarketplaceWorkspaceId() string {
	if x != nil {
		return x.MarketplaceWorkspaceId
	}
	return ""
}

func (x *AccountInfo) GetWorkspaceObjectId() string {
	if x != nil {
		return x.WorkspaceObjectId
	}
	return ""
}

func (x *AccountInfo) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *AccountInfo) GetAccountSpaceId() string {
	if x != nil {
		return x.AccountSpaceId
	}
	return ""
}

func (x *AccountInfo) GetWidgetsId() string {
	if x != nil {
		return x.WidgetsId
	}
	return ""
}

func (x *AccountInfo) GetSpaceViewId() string {
	if x != nil {
		return x.SpaceViewId
	}
	return ""
}

func (x *AccountInfo) GetTechSpaceId() string {
	if x != nil {
		return x.TechSpaceId
	}
	return ""
}

func (x *AccountInfo) GetGatewayUrl() string {
	if x != nil {
		return x.GatewayUrl
	}
	return ""
}

func (x *AccountInfo) GetLocalStoragePath() string {
	if x != nil {
		return x.LocalStoragePath
	}
	return ""
}

func (x *AccountInfo) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *AccountInfo) GetAnalyticsId() string {
	if x != nil {
		return x.AnalyticsId
	}
	return ""
}

func (x *AccountInfo) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *AccountInfo) GetEthereumAddress() string {
	if x != nil {
		return x.EthereumAddress
	}
	return ""
}

type AccountAuth struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountAuth) Reset() {
	*x = AccountAuth{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountAuth) ProtoMessage() {}

func (x *AccountAuth) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountAuth.ProtoReflect.Descriptor instead.
func (*AccountAuth) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{5, 3}
}

type RestrictionsDataviewRestrictions struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	BlockId       string                            `protobuf:"bytes,1,opt,name=blockId,proto3" json:"blockId,omitempty"`
	Restrictions  []RestrictionsDataviewRestriction `protobuf:"varint,2,rep,packed,name=restrictions,proto3,enum=anytype.model.RestrictionsDataviewRestriction" json:"restrictions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestrictionsDataviewRestrictions) Reset() {
	*x = RestrictionsDataviewRestrictions{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestrictionsDataviewRestrictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestrictionsDataviewRestrictions) ProtoMessage() {}

func (x *RestrictionsDataviewRestrictions) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestrictionsDataviewRestrictions.ProtoReflect.Descriptor instead.
func (*RestrictionsDataviewRestrictions) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{7, 0}
}

func (x *RestrictionsDataviewRestrictions) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *RestrictionsDataviewRestrictions) GetRestrictions() []RestrictionsDataviewRestriction {
	if x != nil {
		return x.Restrictions
	}
	return nil
}

type ObjectChangePayload struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SmartBlockType SmartBlockType         `protobuf:"varint,1,opt,name=smartBlockType,proto3,enum=anytype.model.SmartBlockType" json:"smartBlockType,omitempty"`
	Key            string                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Data           []byte                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ObjectChangePayload) Reset() {
	*x = ObjectChangePayload{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectChangePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectChangePayload) ProtoMessage() {}

func (x *ObjectChangePayload) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectChangePayload.ProtoReflect.Descriptor instead.
func (*ObjectChangePayload) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ObjectChangePayload) GetSmartBlockType() SmartBlockType {
	if x != nil {
		return x.SmartBlockType
	}
	return SmartBlockType_AccountOld
}

func (x *ObjectChangePayload) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ObjectChangePayload) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type RelationOption struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // id generated automatically if omitted
	Text  string                 `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Color string                 `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"` // stored
	// 4 is reserved for old relation format
	RelationKey   string `protobuf:"bytes,5,opt,name=relationKey,proto3" json:"relationKey,omitempty"` // stored
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelationOption) Reset() {
	*x = RelationOption{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelationOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationOption) ProtoMessage() {}

func (x *RelationOption) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationOption.ProtoReflect.Descriptor instead.
func (*RelationOption) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{13, 0}
}

func (x *RelationOption) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RelationOption) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *RelationOption) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *RelationOption) GetRelationKey() string {
	if x != nil {
		return x.RelationKey
	}
	return ""
}

type ObjectViewDetailsSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`           // context objectId
	Details       *structpb.Struct       `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"` // can not be a partial state. Should replace client details state
	SubIds        []string               `protobuf:"bytes,3,rep,name=subIds,proto3" json:"subIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ObjectViewDetailsSet) Reset() {
	*x = ObjectViewDetailsSet{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectViewDetailsSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectViewDetailsSet) ProtoMessage() {}

func (x *ObjectViewDetailsSet) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectViewDetailsSet.ProtoReflect.Descriptor instead.
func (*ObjectViewDetailsSet) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{18, 0}
}

func (x *ObjectViewDetailsSet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ObjectViewDetailsSet) GetDetails() *structpb.Struct {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ObjectViewDetailsSet) GetSubIds() []string {
	if x != nil {
		return x.SubIds
	}
	return nil
}

type ObjectViewRelationWithValuePerObject struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ObjectId      string                 `protobuf:"bytes,1,opt,name=objectId,proto3" json:"objectId,omitempty"`
	Relations     []*RelationWithValue   `protobuf:"bytes,2,rep,name=relations,proto3" json:"relations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ObjectViewRelationWithValuePerObject) Reset() {
	*x = ObjectViewRelationWithValuePerObject{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectViewRelationWithValuePerObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectViewRelationWithValuePerObject) ProtoMessage() {}

func (x *ObjectViewRelationWithValuePerObject) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectViewRelationWithValuePerObject.ProtoReflect.Descriptor instead.
func (*ObjectViewRelationWithValuePerObject) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{18, 1}
}

func (x *ObjectViewRelationWithValuePerObject) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *ObjectViewRelationWithValuePerObject) GetRelations() []*RelationWithValue {
	if x != nil {
		return x.Relations
	}
	return nil
}

type ObjectViewHistorySize struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Undo          int32                  `protobuf:"varint,1,opt,name=undo,proto3" json:"undo,omitempty"`
	Redo          int32                  `protobuf:"varint,2,opt,name=redo,proto3" json:"redo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ObjectViewHistorySize) Reset() {
	*x = ObjectViewHistorySize{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectViewHistorySize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectViewHistorySize) ProtoMessage() {}

func (x *ObjectViewHistorySize) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectViewHistorySize.ProtoReflect.Descriptor instead.
func (*ObjectViewHistorySize) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{18, 2}
}

func (x *ObjectViewHistorySize) GetUndo() int32 {
	if x != nil {
		return x.Undo
	}
	return 0
}

func (x *ObjectViewHistorySize) GetRedo() int32 {
	if x != nil {
		return x.Redo
	}
	return 0
}

type ObjectViewBlockParticipant struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockId       string                 `protobuf:"bytes,1,opt,name=blockId,proto3" json:"blockId,omitempty"`
	ParticipantId string                 `protobuf:"bytes,2,opt,name=participantId,proto3" json:"participantId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ObjectViewBlockParticipant) Reset() {
	*x = ObjectViewBlockParticipant{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectViewBlockParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectViewBlockParticipant) ProtoMessage() {}

func (x *ObjectViewBlockParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectViewBlockParticipant.ProtoReflect.Descriptor instead.
func (*ObjectViewBlockParticipant) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{18, 3}
}

func (x *ObjectViewBlockParticipant) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

func (x *ObjectViewBlockParticipant) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

type MetadataPayload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadataPayload) Reset() {
	*x = MetadataPayload{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataPayload) ProtoMessage() {}

func (x *MetadataPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataPayload.ProtoReflect.Descriptor instead.
func (*MetadataPayload) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{20, 0}
}

type MetadataPayloadIdentityPayload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProfileSymKey []byte                 `protobuf:"bytes,1,opt,name=profileSymKey,proto3" json:"profileSymKey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadataPayloadIdentityPayload) Reset() {
	*x = MetadataPayloadIdentityPayload{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataPayloadIdentityPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataPayloadIdentityPayload) ProtoMessage() {}

func (x *MetadataPayloadIdentityPayload) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataPayloadIdentityPayload.ProtoReflect.Descriptor instead.
func (*MetadataPayloadIdentityPayload) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{20, 0, 0}
}

func (x *MetadataPayloadIdentityPayload) GetProfileSymKey() []byte {
	if x != nil {
		return x.ProfileSymKey
	}
	return nil
}

type NotificationImport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProcessId     string                 `protobuf:"bytes,1,opt,name=processId,proto3" json:"processId,omitempty"`
	ErrorCode     ImportErrorCode        `protobuf:"varint,2,opt,name=errorCode,proto3,enum=anytype.model.ImportErrorCode" json:"errorCode,omitempty"`
	ImportType    ImportType             `protobuf:"varint,3,opt,name=importType,proto3,enum=anytype.model.ImportType" json:"importType,omitempty"`
	SpaceId       string                 `protobuf:"bytes,4,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
	Name          string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	SpaceName     string                 `protobuf:"bytes,6,opt,name=spaceName,proto3" json:"spaceName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotificationImport) Reset() {
	*x = NotificationImport{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotificationImport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationImport) ProtoMessage() {}

func (x *NotificationImport) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationImport.ProtoReflect.Descriptor instead.
func (*NotificationImport) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{21, 0}
}

func (x *NotificationImport) GetProcessId() string {
	if x != nil {
		return x.ProcessId
	}
	return ""
}

func (x *NotificationImport) GetErrorCode() ImportErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return Import_NULL
}

func (x *NotificationImport) GetImportType() ImportType {
	if x != nil {
		return x.ImportType
	}
	return Import_Notion
}

func (x *NotificationImport) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *NotificationImport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NotificationImport) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

type NotificationExport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ErrorCode     NotificationExportCode `protobuf:"varint,2,opt,name=errorCode,proto3,enum=anytype.model.NotificationExportCode" json:"errorCode,omitempty"`
	ExportType    ExportFormat           `protobuf:"varint,3,opt,name=exportType,proto3,enum=anytype.model.ExportFormat" json:"exportType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotificationExport) Reset() {
	*x = NotificationExport{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotificationExport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationExport) ProtoMessage() {}

func (x *NotificationExport) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationExport.ProtoReflect.Descriptor instead.
func (*NotificationExport) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{21, 1}
}

func (x *NotificationExport) GetErrorCode() NotificationExportCode {
	if x != nil {
		return x.ErrorCode
	}
	return NotificationExport_NULL
}

func (x *NotificationExport) GetExportType() ExportFormat {
	if x != nil {
		return x.ExportType
	}
	return Export_Markdown
}

type NotificationGalleryImport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProcessId     string                 `protobuf:"bytes,1,opt,name=processId,proto3" json:"processId,omitempty"`
	ErrorCode     ImportErrorCode        `protobuf:"varint,2,opt,name=errorCode,proto3,enum=anytype.model.ImportErrorCode" json:"errorCode,omitempty"`
	SpaceId       string                 `protobuf:"bytes,3,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	SpaceName     string                 `protobuf:"bytes,5,opt,name=spaceName,proto3" json:"spaceName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotificationGalleryImport) Reset() {
	*x = NotificationGalleryImport{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotificationGalleryImport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationGalleryImport) ProtoMessage() {}

func (x *NotificationGalleryImport) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationGalleryImport.ProtoReflect.Descriptor instead.
func (*NotificationGalleryImport) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{21, 2}
}

func (x *NotificationGalleryImport) GetProcessId() string {
	if x != nil {
		return x.ProcessId
	}
	return ""
}

func (x *NotificationGalleryImport) GetErrorCode() ImportErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return Import_NULL
}

func (x *NotificationGalleryImport) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *NotificationGalleryImport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NotificationGalleryImport) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

type NotificationRequestToJoin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpaceId       string                 `protobuf:"bytes,1,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
	Identity      string                 `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	IdentityName  string                 `protobuf:"bytes,3,opt,name=identityName,proto3" json:"identityName,omitempty"`
	IdentityIcon  string                 `protobuf:"bytes,4,opt,name=identityIcon,proto3" json:"identityIcon,omitempty"`
	SpaceName     string                 `protobuf:"bytes,5,opt,name=spaceName,proto3" json:"spaceName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotificationRequestToJoin) Reset() {
	*x = NotificationRequestToJoin{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotificationRequestToJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationRequestToJoin) ProtoMessage() {}

func (x *NotificationRequestToJoin) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationRequestToJoin.ProtoReflect.Descriptor instead.
func (*NotificationRequestToJoin) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{21, 3}
}

func (x *NotificationRequestToJoin) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *NotificationRequestToJoin) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *NotificationRequestToJoin) GetIdentityName() string {
	if x != nil {
		return x.IdentityName
	}
	return ""
}

func (x *NotificationRequestToJoin) GetIdentityIcon() string {
	if x != nil {
		return x.IdentityIcon
	}
	return ""
}

func (x *NotificationRequestToJoin) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

type NotificationTest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotificationTest) Reset() {
	*x = NotificationTest{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotificationTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationTest) ProtoMessage() {}

func (x *NotificationTest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationTest.ProtoReflect.Descriptor instead.
func (*NotificationTest) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{21, 4}
}

type NotificationParticipantRequestApproved struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpaceId       string                 `protobuf:"bytes,1,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
	Permissions   ParticipantPermissions `protobuf:"varint,2,opt,name=permissions,proto3,enum=anytype.model.ParticipantPermissions" json:"permissions,omitempty"`
	SpaceName     string                 `protobuf:"bytes,5,opt,name=spaceName,proto3" json:"spaceName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotificationParticipantRequestApproved) Reset() {
	*x = NotificationParticipantRequestApproved{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotificationParticipantRequestApproved) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationParticipantRequestApproved) ProtoMessage() {}

func (x *NotificationParticipantRequestApproved) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationParticipantRequestApproved.ProtoReflect.Descriptor instead.
func (*NotificationParticipantRequestApproved) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{21, 5}
}

func (x *NotificationParticipantRequestApproved) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *NotificationParticipantRequestApproved) GetPermissions() ParticipantPermissions {
	if x != nil {
		return x.Permissions
	}
	return ParticipantPermissions_Reader
}

func (x *NotificationParticipantRequestApproved) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

type NotificationRequestToLeave struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpaceId       string                 `protobuf:"bytes,1,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
	Identity      string                 `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	IdentityName  string                 `protobuf:"bytes,3,opt,name=identityName,proto3" json:"identityName,omitempty"`
	IdentityIcon  string                 `protobuf:"bytes,4,opt,name=identityIcon,proto3" json:"identityIcon,omitempty"`
	SpaceName     string                 `protobuf:"bytes,5,opt,name=spaceName,proto3" json:"spaceName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotificationRequestToLeave) Reset() {
	*x = NotificationRequestToLeave{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotificationRequestToLeave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationRequestToLeave) ProtoMessage() {}

func (x *NotificationRequestToLeave) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationRequestToLeave.ProtoReflect.Descriptor instead.
func (*NotificationRequestToLeave) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{21, 6}
}

func (x *NotificationRequestToLeave) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *NotificationRequestToLeave) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *NotificationRequestToLeave) GetIdentityName() string {
	if x != nil {
		return x.IdentityName
	}
	return ""
}

func (x *NotificationRequestToLeave) GetIdentityIcon() string {
	if x != nil {
		return x.IdentityIcon
	}
	return ""
}

func (x *NotificationRequestToLeave) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

type NotificationParticipantRemove struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identity      string                 `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	IdentityName  string                 `protobuf:"bytes,2,opt,name=identityName,proto3" json:"identityName,omitempty"`
	IdentityIcon  string                 `protobuf:"bytes,3,opt,name=identityIcon,proto3" json:"identityIcon,omitempty"`
	SpaceId       string                 `protobuf:"bytes,4,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
	SpaceName     string                 `protobuf:"bytes,5,opt,name=spaceName,proto3" json:"spaceName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotificationParticipantRemove) Reset() {
	*x = NotificationParticipantRemove{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotificationParticipantRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationParticipantRemove) ProtoMessage() {}

func (x *NotificationParticipantRemove) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationParticipantRemove.ProtoReflect.Descriptor instead.
func (*NotificationParticipantRemove) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{21, 7}
}

func (x *NotificationParticipantRemove) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *NotificationParticipantRemove) GetIdentityName() string {
	if x != nil {
		return x.IdentityName
	}
	return ""
}

func (x *NotificationParticipantRemove) GetIdentityIcon() string {
	if x != nil {
		return x.IdentityIcon
	}
	return ""
}

func (x *NotificationParticipantRemove) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *NotificationParticipantRemove) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

type NotificationParticipantRequestDecline struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpaceId       string                 `protobuf:"bytes,1,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
	SpaceName     string                 `protobuf:"bytes,3,opt,name=spaceName,proto3" json:"spaceName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotificationParticipantRequestDecline) Reset() {
	*x = NotificationParticipantRequestDecline{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotificationParticipantRequestDecline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationParticipantRequestDecline) ProtoMessage() {}

func (x *NotificationParticipantRequestDecline) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationParticipantRequestDecline.ProtoReflect.Descriptor instead.
func (*NotificationParticipantRequestDecline) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{21, 8}
}

func (x *NotificationParticipantRequestDecline) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *NotificationParticipantRequestDecline) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

type NotificationParticipantPermissionsChange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpaceId       string                 `protobuf:"bytes,1,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
	Permissions   ParticipantPermissions `protobuf:"varint,2,opt,name=permissions,proto3,enum=anytype.model.ParticipantPermissions" json:"permissions,omitempty"`
	SpaceName     string                 `protobuf:"bytes,3,opt,name=spaceName,proto3" json:"spaceName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotificationParticipantPermissionsChange) Reset() {
	*x = NotificationParticipantPermissionsChange{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotificationParticipantPermissionsChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationParticipantPermissionsChange) ProtoMessage() {}

func (x *NotificationParticipantPermissionsChange) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationParticipantPermissionsChange.ProtoReflect.Descriptor instead.
func (*NotificationParticipantPermissionsChange) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{21, 9}
}

func (x *NotificationParticipantPermissionsChange) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *NotificationParticipantPermissionsChange) GetPermissions() ParticipantPermissions {
	if x != nil {
		return x.Permissions
	}
	return ParticipantPermissions_Reader
}

func (x *NotificationParticipantPermissionsChange) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

type ChatStateUnreadState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OldestOrderId string                 `protobuf:"bytes,1,opt,name=oldestOrderId,proto3" json:"oldestOrderId,omitempty"` // oldest(in the lex sorting) unread message order id. Client should ALWAYS scroll through unread messages from the oldest to the newest
	Counter       int32                  `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`            // total number of unread messages
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatStateUnreadState) Reset() {
	*x = ChatStateUnreadState{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatStateUnreadState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatStateUnreadState) ProtoMessage() {}

func (x *ChatStateUnreadState) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatStateUnreadState.ProtoReflect.Descriptor instead.
func (*ChatStateUnreadState) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{34, 0}
}

func (x *ChatStateUnreadState) GetOldestOrderId() string {
	if x != nil {
		return x.OldestOrderId
	}
	return ""
}

func (x *ChatStateUnreadState) GetCounter() int32 {
	if x != nil {
		return x.Counter
	}
	return 0
}

type ChatMessageMessageContent struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Text          string                  `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`                                             // The text content of the message part
	Style         BlockContentTextStyle   `protobuf:"varint,2,opt,name=style,proto3,enum=anytype.model.BlockContentTextStyle" json:"style,omitempty"` // The style/type of the message part
	Marks         []*BlockContentTextMark `protobuf:"bytes,3,rep,name=marks,proto3" json:"marks,omitempty"`                                           // List of marks applied to the text
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatMessageMessageContent) Reset() {
	*x = ChatMessageMessageContent{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessageMessageContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessageMessageContent) ProtoMessage() {}

func (x *ChatMessageMessageContent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessageMessageContent.ProtoReflect.Descriptor instead.
func (*ChatMessageMessageContent) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{35, 0}
}

func (x *ChatMessageMessageContent) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ChatMessageMessageContent) GetStyle() BlockContentTextStyle {
	if x != nil {
		return x.Style
	}
	return BlockContentText_Paragraph
}

func (x *ChatMessageMessageContent) GetMarks() []*BlockContentTextMark {
	if x != nil {
		return x.Marks
	}
	return nil
}

type ChatMessageAttachment struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Target        string                              `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`                                                     // Identifier for the attachment object
	Type          ChatMessageAttachmentAttachmentType `protobuf:"varint,2,opt,name=type,proto3,enum=anytype.model.ChatMessageAttachmentAttachmentType" json:"type,omitempty"` // Type of attachment
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatMessageAttachment) Reset() {
	*x = ChatMessageAttachment{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessageAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessageAttachment) ProtoMessage() {}

func (x *ChatMessageAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessageAttachment.ProtoReflect.Descriptor instead.
func (*ChatMessageAttachment) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{35, 1}
}

func (x *ChatMessageAttachment) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ChatMessageAttachment) GetType() ChatMessageAttachmentAttachmentType {
	if x != nil {
		return x.Type
	}
	return ChatMessageAttachment_FILE
}

type ChatMessageReactions struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	Reactions     map[string]*ChatMessageReactionsIdentityList `protobuf:"bytes,1,rep,name=reactions,proto3" json:"reactions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Map of emoji to list of user IDs
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatMessageReactions) Reset() {
	*x = ChatMessageReactions{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessageReactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessageReactions) ProtoMessage() {}

func (x *ChatMessageReactions) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessageReactions.ProtoReflect.Descriptor instead.
func (*ChatMessageReactions) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{35, 2}
}

func (x *ChatMessageReactions) GetReactions() map[string]*ChatMessageReactionsIdentityList {
	if x != nil {
		return x.Reactions
	}
	return nil
}

type ChatMessageReactionsIdentityList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []string               `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"` // List of user IDs
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatMessageReactionsIdentityList) Reset() {
	*x = ChatMessageReactionsIdentityList{}
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessageReactionsIdentityList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessageReactionsIdentityList) ProtoMessage() {}

func (x *ChatMessageReactionsIdentityList) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_lib_pb_model_protos_models_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessageReactionsIdentityList.ProtoReflect.Descriptor instead.
func (*ChatMessageReactionsIdentityList) Descriptor() ([]byte, []int) {
	return file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP(), []int{35, 2, 1}
}

func (x *ChatMessageReactionsIdentityList) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

var File_pkg_lib_pb_model_protos_models_proto protoreflect.FileDescriptor

var file_pkg_lib_pb_model_protos_models_proto_rawDesc = string([]byte{
	0x0a, 0x24, 0x70, 0x6b, 0x67, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x70, 0x62, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xd0, 0x04, 0x0a, 0x16, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x61, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x31, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x37, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x39, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0b, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73,
	0x12, 0x41, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x18, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x33, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xf8, 0x02, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x1a, 0x87, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6e, 0x79, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x1a, 0xe3, 0x01, 0x0a, 0x04,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x3e, 0x0a, 0x0f, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x6e,
	0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x0f, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x41,
	0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x22, 0xe2, 0x4c, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x45, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x49,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x30, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x67,
	0x6e, 0x12, 0x48, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6c, 0x69,
	0x67, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x56,
	0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x52, 0x0d, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x12, 0x49, 0x0a, 0x0a, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x6d,
	0x61, 0x72, 0x74, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x37, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x48, 0x00, 0x52,
	0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x34, 0x0a, 0x03, 0x64, 0x69, 0x76, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x69, 0x76, 0x48, 0x00, 0x52, 0x03, 0x64, 0x69, 0x76, 0x12, 0x43, 0x0a,
	0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x37, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x49,
	0x63, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6e, 0x79, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x43, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x48, 0x00, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x12, 0x43, 0x0a, 0x08, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e,
	0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e,
	0x0a, 0x11, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x6e, 0x79, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x11, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a,
	0x0a, 0x05, 0x6c, 0x61, 0x74, 0x65, 0x78, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x74, 0x65,
	0x78, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x61, 0x74, 0x65, 0x78, 0x12, 0x58, 0x0a, 0x0f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x4c, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x48,
	0x00, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x43,
	0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x6f, 0x77, 0x12, 0x3d, 0x0a, 0x06, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x77, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x48, 0x00, 0x52, 0x04, 0x63, 0x68, 0x61, 0x74, 0x1a, 0x7a, 0x0a, 0x0c, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x72, 0x65, 0x61, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x65, 0x64, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x65,
	0x64, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x72, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x72, 0x61, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x72, 0x6f, 0x70, 0x4f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x64, 0x72, 0x6f, 0x70, 0x4f, 0x6e, 0x1a, 0xc5, 0x3d, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x1a, 0x9d, 0x01, 0x0a, 0x06, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x3f,
	0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x22,
	0x52, 0x0a, 0x05, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x6f, 0x77, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x44, 0x69, 0x76, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x10,
	0x04, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x10, 0x05, 0x1a, 0xf2, 0x04, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x24, 0x0a, 0x0d,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x46, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x49, 0x63, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65,
	0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x63, 0x61,
	0x72, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x09, 0x63, 0x61, 0x72, 0x64,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x37, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x10, 0x02, 0x22, 0x3b, 0x0a,
	0x05, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x10, 0x03, 0x22, 0x2f, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x64, 0x64, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x22, 0x2b, 0x0a, 0x09, 0x43,
	0x61, 0x72, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x02, 0x1a, 0x60, 0x0a, 0x03, 0x44, 0x69, 0x76, 0x12,
	0x3c, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x76,
	0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x22, 0x1b, 0x0a,
	0x05, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x65, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x44, 0x6f, 0x74, 0x73, 0x10, 0x01, 0x1a, 0xeb, 0x02, 0x0a, 0x08, 0x42,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x20, 0x0a, 0x0b, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x41,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x35, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x65, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x6f, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x1a, 0x1a, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x13, 0x0a, 0x11, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xb9, 0x06, 0x0a, 0x04, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x73, 0x52, 0x05, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x45, 0x6d, 0x6f, 0x6a,
	0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x45, 0x6d, 0x6f,
	0x6a, 0x69, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x1a, 0x45, 0x0a, 0x05, 0x4d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x52, 0x05, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x1a, 0xac, 0x02, 0x0a, 0x04, 0x4d, 0x61, 0x72, 0x6b,
	0x12, 0x2a, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x22, 0xa0, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x49, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x6f, 0x6c,
	0x64, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x64, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x10, 0x05, 0x12, 0x0d,
	0x0a, 0x09, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x10, 0x06, 0x12, 0x13, 0x0a,
	0x0f, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x08, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x10, 0x0a, 0x22, 0xbc, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x0d, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x31, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x32, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x33, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x34, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x10, 0x05, 0x12, 0x08,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x10,
	0x08, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x10, 0x09, 0x12, 0x0c, 0x0a,
	0x08, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x54,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x61, 0x6c, 0x6c,
	0x6f, 0x75, 0x74, 0x10, 0x0d, 0x1a, 0xf8, 0x03, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6e,
	0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x22, 0x44, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x69, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x44, 0x46, 0x10, 0x05,
	0x22, 0x26, 0x0a, 0x05, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x75, 0x74,
	0x6f, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x10, 0x02, 0x22, 0x36, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44,
	0x6f, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03,
	0x1a, 0x0c, 0x0a, 0x0a, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0xf8,
	0x22, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x05,
	0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56,
	0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x35, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x52, 0x0a, 0x0b,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x55, 0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0d, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xd1, 0x06, 0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x53,
	0x6f, 0x72, 0x74, 0x52, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x6e,
	0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69,
	0x65, 0x77, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x4c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x69, 0x64, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x68, 0x69, 0x64, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65,
	0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x08, 0x63, 0x61, 0x72,
	0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x46, 0x69,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x46, 0x69,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a,
	0x15, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x22, 0x4d, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4b,
	0x61, 0x6e, 0x62, 0x61, 0x6e, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x70, 0x68, 0x10, 0x05,
	0x22, 0x28, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x6d, 0x61, 0x6c,
	0x6c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x10, 0x02, 0x1a, 0xa5, 0x06, 0x0a, 0x08, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x28, 0x0a,
	0x0f, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x61, 0x6e,
	0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69,
	0x65, 0x77, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x59, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x54, 0x0a,
	0x07, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a,
	0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x52, 0x05,
	0x61, 0x6c, 0x69, 0x67, 0x6e, 0x22, 0x5c, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x41, 0x62, 0x62, 0x72,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x79, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x41, 0x62, 0x62, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x44, 0x61, 0x79,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x55, 0x53, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x53,
	0x4f, 0x10, 0x04, 0x22, 0x28, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x31, 0x32, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x32, 0x34, 0x10, 0x01, 0x22, 0xe2, 0x01,
	0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x63, 0x74, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f,
	0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x07, 0x12,
	0x0b, 0x0a, 0x07, 0x4d, 0x61, 0x74, 0x68, 0x53, 0x75, 0x6d, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b,
	0x4d, 0x61, 0x74, 0x68, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x10, 0x09, 0x12, 0x0e, 0x0a,
	0x0a, 0x4d, 0x61, 0x74, 0x68, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x10, 0x0a, 0x12, 0x0b, 0x0a,
	0x07, 0x4d, 0x61, 0x74, 0x68, 0x4d, 0x69, 0x6e, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x61,
	0x74, 0x68, 0x4d, 0x61, 0x78, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x10, 0x0d, 0x1a, 0xe6, 0x03, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x43, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x61, 0x6e,
	0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69,
	0x65, 0x77, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5c, 0x0a, 0x0e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x76, 0x69, 0x65, 0x77, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74,
	0x65, 0x22, 0x25, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x73, 0x63,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10, 0x02, 0x22, 0x31, 0x0a, 0x09, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x10, 0x02, 0x1a, 0xab, 0x08, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65,
	0x77, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x71,
	0x75, 0x69, 0x63, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x38, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x51,
	0x75, 0x69, 0x63, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x71, 0x75, 0x69, 0x63,
	0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x52, 0x0a, 0x0d, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x22, 0x23, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x06, 0x0a, 0x02, 0x4e, 0x6f, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x72, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x6e, 0x64, 0x10, 0x02, 0x22, 0xef, 0x01, 0x0a, 0x09, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x4e, 0x6f, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x65, 0x73, 0x73, 0x10,
	0x04, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x45, 0x71,
	0x75, 0x61, 0x6c, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x45,
	0x71, 0x75, 0x61, 0x6c, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x69, 0x6b, 0x65, 0x10, 0x07,
	0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x6f, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x10, 0x08, 0x12, 0x06, 0x0a,
	0x02, 0x49, 0x6e, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x10, 0x0a,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x4e,
	0x6f, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x6c, 0x6c,
	0x49, 0x6e, 0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x49, 0x6e,
	0x10, 0x0e, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x78, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x10, 0x0f, 0x12,
	0x0e, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x10, 0x10, 0x12,
	0x0a, 0x0a, 0x06, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0x11, 0x22, 0xcb, 0x01, 0x0a, 0x0b,
	0x51, 0x75, 0x69, 0x63, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x45,
	0x78, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x59, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x6f, 0x64,
	0x61, 0x79, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x6f, 0x6d, 0x6f, 0x72, 0x72, 0x6f, 0x77,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x10, 0x04,
	0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x10,
	0x05, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x65, 0x78, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x10, 0x06, 0x12,
	0x0d, 0x0a, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x10, 0x07, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x10, 0x08,
	0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x65, 0x78, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x10, 0x09, 0x12,
	0x13, 0x0a, 0x0f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x73, 0x41,
	0x67, 0x6f, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x44, 0x61, 0x79, 0x73, 0x4e, 0x6f, 0x77, 0x10, 0x0b, 0x1a, 0x75, 0x0a, 0x0a, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12,
	0x4f, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x1a, 0x7d, 0x0a, 0x09, 0x56, 0x69, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x1a,
	0x5d, 0x0a, 0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x1a, 0xb7,
	0x02, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3d, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x76, 0x69, 0x65, 0x77, 0x2e, 0x54, 0x61, 0x67, 0x48, 0x00, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12,
	0x4c, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f,
	0x78, 0x48, 0x00, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x12, 0x40, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6e,
	0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69,
	0x65, 0x77, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x18, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x1a, 0x17, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x1a, 0x24, 0x0a, 0x08, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x64, 0x1a, 0x06, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x1a, 0x1c, 0x0a, 0x08, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0xaa, 0x03, 0x0a, 0x05, 0x4c, 0x61, 0x74, 0x65,
	0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4a, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x78, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x22, 0xc0, 0x02, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12,
	0x09, 0x0a, 0x05, 0x4c, 0x61, 0x74, 0x65, 0x78, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x65,
	0x72, 0x6d, 0x61, 0x69, 0x64, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x59, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x10, 0x03, 0x12,
	0x09, 0x0a, 0x05, 0x56, 0x69, 0x6d, 0x65, 0x6f, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x6f,
	0x75, 0x6e, 0x64, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x73, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x69,
	0x72, 0x6f, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x69, 0x67, 0x6d, 0x61, 0x10, 0x08, 0x12,
	0x0b, 0x0a, 0x07, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d,
	0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x10, 0x0a, 0x12,
	0x0a, 0x0a, 0x06, 0x52, 0x65, 0x64, 0x64, 0x69, 0x74, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x46,
	0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x47, 0x69, 0x73, 0x74, 0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x10, 0x10, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x10,
	0x11, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x61, 0x6c, 0x69, 0x64, 0x72, 0x61, 0x77, 0x10,
	0x12, 0x12, 0x09, 0x0a, 0x05, 0x4b, 0x72, 0x6f, 0x6b, 0x69, 0x10, 0x13, 0x12, 0x0c, 0x0a, 0x08,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x76, 0x69, 0x7a, 0x10, 0x14, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x6b,
	0x65, 0x74, 0x63, 0x68, 0x66, 0x61, 0x62, 0x10, 0x15, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x10, 0x16, 0x1a, 0x11, 0x0a, 0x0f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x66, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x07, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x1a, 0x0d, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x1a,
	0x26, 0x0a, 0x08, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x73, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x1a, 0xbd, 0x01, 0x0a, 0x06, 0x57, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x06,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69,
	0x65, 0x77, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x06, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x08,
	0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x72, 0x65, 0x65,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x03, 0x12, 0x08, 0x0a,
	0x04, 0x56, 0x69, 0x65, 0x77, 0x10, 0x04, 0x1a, 0x06, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x74, 0x22,
	0x66, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x6f, 0x70, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x65,
	0x66, 0x74, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x04, 0x12,
	0x09, 0x0a, 0x05, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x6e, 0x65, 0x72,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x10, 0x07, 0x22, 0x49, 0x0a, 0x05, 0x41, 0x6c, 0x69, 0x67, 0x6e,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x02,
	0x12, 0x10, 0x0a, 0x0c, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x4a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x79,
	0x10, 0x03, 0x22, 0x57, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6c,
	0x69, 0x67, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41,
	0x6c, 0x69, 0x67, 0x6e, 0x54, 0x6f, 0x70, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6c,
	0x69, 0x67, 0x6e, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x10, 0x02, 0x42, 0x09, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x50, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d,
	0x65, 0x74, 0x61, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x2b, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x74, 0x6f, 0x22, 0xf8, 0x09, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2f, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x1a, 0xdf, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x12, 0x38, 0x0a, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x72, 0x65, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72,
	0x65, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x6f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x1a, 0xdc, 0x04, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c,
	0x68, 0x6f, 0x6d, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x56, 0x69, 0x65, 0x77, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x56, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x65, 0x63, 0x68, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x63, 0x68, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x55, 0x72, 0x6c,
	0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x49, 0x64, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x6b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x1a, 0x3b, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x22, 0x33, 0x0a, 0x0d, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x41, 0x70, 0x69, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4a, 0x73, 0x6f, 0x6e,
	0x41, 0x50, 0x49, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0x02, 0x22,
	0x4f, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x03,
	0x22, 0xfc, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f,
	0x6e, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x76, 0x69,
	0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x32, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x10, 0x03, 0x22,
	0xbb, 0x04, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x45, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4c, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x6e, 0x79, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x76, 0x69, 0x65, 0x77, 0x1a, 0x85, 0x01, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x76, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2f,
	0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb9, 0x01,
	0x0a, 0x11, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x10,
	0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10,
	0x05, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x10,
	0x07, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x10, 0x08,
	0x12, 0x1a, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4f, 0x66, 0x54, 0x68, 0x69, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x10, 0x0a, 0x22, 0x52, 0x0a, 0x13, 0x44, 0x61, 0x74,
	0x61, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0a, 0x0a, 0x06, 0x44, 0x56, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x44, 0x56, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x44, 0x56, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x56, 0x56, 0x69, 0x65, 0x77, 0x73, 0x10, 0x03, 0x22, 0x86, 0x01,
	0x0a, 0x06, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x7c, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2d, 0x0a, 0x11, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x44, 0x22, 0x8d, 0x07, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0d,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x38, 0x0a,
	0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52,
	0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x45,
	0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e,
	0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x2e, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x16, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xc2, 0x02, 0x0a, 0x06, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x09, 0x0a, 0x05, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x74, 0x6f, 0x64, 0x6f, 0x10, 0x02, 0x12, 0x07, 0x0a,
	0x03, 0x73, 0x65, 0x74, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x10, 0x06, 0x12, 0x0d,
	0x0a, 0x09, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x10, 0x07, 0x12, 0x09, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x10, 0x0a, 0x12, 0x0c, 0x0a,
	0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0e, 0x12, 0x09, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x10, 0x0f, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x10, 0x10, 0x12, 0x08,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x10, 0x11, 0x12, 0x0d, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x56, 0x69, 0x65, 0x77, 0x10, 0x12, 0x12, 0x0f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x10, 0x13, 0x12, 0x07, 0x0a, 0x03, 0x70, 0x64, 0x66, 0x10,
	0x14, 0x12, 0x08, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x74, 0x10, 0x15, 0x12, 0x0f, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x74, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x10, 0x16, 0x12, 0x07, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x10, 0x17, 0x22, 0x95, 0x01, 0x0a, 0x06, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x12, 0x30, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x76, 0x0a,
	0x11, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfa, 0x06, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3a, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f,
	0x6e, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f,
	0x6e, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72,
	0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x44, 0x69, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6e,
	0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x44, 0x69, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x1a, 0x64, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x5a, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x4f, 0x66, 0x54, 0x68,
	0x65, 0x53, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4f, 0x66, 0x54, 0x68, 0x65, 0x53, 0x61, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x10, 0x04, 0x22, 0x3e, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x10, 0x03, 0x22, 0x57, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x6e, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x42, 0x0a, 0x09, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6e,
	0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x4b, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb5, 0x01, 0x0a,
	0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x37, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6c, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x10, 0x03, 0x22, 0x89, 0x07, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56,
	0x69, 0x65, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x6e,
	0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x56, 0x69, 0x65, 0x77, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x53, 0x65, 0x74,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x09,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x6e, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56,
	0x69, 0x65, 0x77, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x52,
	0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x58, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x69, 0x65, 0x77, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52,
	0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x73, 0x1a, 0x67, 0x0a, 0x0a, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x53, 0x65, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x49, 0x64, 0x73, 0x1a, 0x78, 0x0a, 0x1a, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x50, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x69, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x35, 0x0a, 0x0b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x64, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x75, 0x6e, 0x64, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x64, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x65, 0x64, 0x6f, 0x1a, 0x52, 0x0a, 0x10,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x76, 0x0a, 0x1b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x70,
	0x65, 0x72, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x05, 0x70, 0x65, 0x72, 0x6d, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x08, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x1a, 0x42, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a,
	0x37, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x6d,
	0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x79, 0x6d, 0x4b, 0x65, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0xc2, 0x15, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x06, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x06, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x06,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x51, 0x0a, 0x0d, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x79, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x51, 0x0a, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x4a, 0x6f, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x4a, 0x6f, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x04,
	0x74, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04,
	0x74, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x1a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x1a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x54,
	0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x12, 0x5d, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x00,
	0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x12, 0x75, 0x0a, 0x19, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52,
	0x19, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x7e, 0x0a, 0x1c, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x49, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x49, 0x64, 0x1a, 0xed,
	0x01, 0x0a, 0x06, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xc1,
	0x01, 0x0a, 0x06, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x3c, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x32,
	0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x41, 0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54,
	0x10, 0x02, 0x1a, 0xb8, 0x01, 0x0a, 0x0d, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xab, 0x01,
	0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x4a, 0x6f, 0x69, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x06, 0x0a, 0x04, 0x54,
	0x65, 0x73, 0x74, 0x1a, 0x9d, 0x01, 0x0a, 0x1a, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0b,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x1a, 0xac, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x6f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x63, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x1a, 0xaf, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x53, 0x0a, 0x19, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x9f, 0x01, 0x0a, 0x1c, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x79, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x52, 0x65, 0x61, 0x64, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x10, 0x03, 0x22, 0x17, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x00, 0x42, 0x09, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x5a, 0x0a, 0x06, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0x50, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x0c, 0x0a, 0x08,
	0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e,
	0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x4f, 0x54, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x53,
	0x56, 0x47, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x52, 0x41, 0x50, 0x48, 0x5f, 0x4a, 0x53,
	0x4f, 0x4e, 0x10, 0x05, 0x22, 0x99, 0x04, 0x0a, 0x06, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x22,
	0x52, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x10, 0x02, 0x12,
	0x06, 0x0a, 0x02, 0x50, 0x62, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x74, 0x6d, 0x6c, 0x10,
	0x04, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x78, 0x74, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x73,
	0x76, 0x10, 0x06, 0x22, 0xba, 0x03, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x42, 0x41, 0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x03, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x49, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x24,
	0x0a, 0x20, 0x4e, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x49, 0x53, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x4f, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45,
	0x45, 0x44, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x29, 0x0a, 0x25, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x49,
	0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x53,
	0x5f, 0x49, 0x4e, 0x5f, 0x5a, 0x49, 0x50, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x10,
	0x0e, 0x12, 0x27, 0x0a, 0x23, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x4e, 0x4f, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x11, 0x12, 0x1d, 0x0a, 0x19, 0x48, 0x54,
	0x4d, 0x4c, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x48, 0x54, 0x4d, 0x4c, 0x5f, 0x53, 0x54,
	0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x42, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4e, 0x59, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x10, 0x0b, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x53, 0x56, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x52, 0x4f, 0x57, 0x53, 0x5f, 0x4f, 0x52, 0x5f, 0x52, 0x45,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44,
	0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x09,
	0x22, 0x40, 0x0a, 0x06, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x22, 0xb1, 0x02, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x63, 0x6f, 0x6e, 0x43, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x43, 0x69, 0x64, 0x12, 0x5a, 0x0a, 0x17, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e,
	0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x17, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x63,
	0x6f, 0x6e, 0x43, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f,
	0x6e, 0x43, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x12, 0x69, 0x63, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x52, 0x12, 0x69, 0x63, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6c, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0e,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x39, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x22, 0xd2, 0x02, 0x0a, 0x0c, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xee, 0x05, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x79, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65,
	0x6e, 0x65, 0x77, 0x12, 0x4d, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x6e, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x34, 0x0a, 0x15,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x4e, 0x65, 0x77, 0x73, 0x6c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x22, 0x67, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x22, 0x70, 0x0a, 0x0d, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x0a,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x6e, 0x61, 0x70, 0x70, 0x41,
	0x70, 0x70, 0x6c, 0x65, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x49, 0x6e, 0x61, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x10, 0x04, 0x22, 0x58, 0x0a,
	0x17, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4e, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6e,
	0x74, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x02, 0x22, 0xb5, 0x06, 0x0a, 0x12, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x69, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x54, 0x65, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x54, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0a,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2c, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x69, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x13,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x55, 0x73, 0x64, 0x43, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x55, 0x73, 0x64, 0x43, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x34,
	0x0a, 0x15, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x61,
	0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4d,
	0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x69,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x72,
	0x69, 0x70, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c,
	0x69, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6f, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6f, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x55, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x90, 0x01, 0x0a,
	0x0a, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x55, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x79, 0x73, 0x10, 0x02, 0x12,
	0x13, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x57, 0x65, 0x65,
	0x6b, 0x73, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x59, 0x65, 0x61, 0x72, 0x73, 0x10, 0x05, 0x22,
	0x48, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x0a, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x22, 0x80, 0x02, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6d, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x62, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x62, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x4d, 0x0a, 0x0b, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x6c, 0x64, 0x65, 0x73,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0xf5, 0x07, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x64, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x43, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x79, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a,
	0x09, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x72, 0x65, 0x61, 0x64, 0x1a, 0xa1, 0x01, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3d, 0x0a, 0x05,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x6e,
	0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x52, 0x05, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x1a, 0x9f, 0x01, 0x0a, 0x0a, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x48, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2f, 0x0a, 0x0e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x49, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x02, 0x1a, 0xf1, 0x01, 0x0a, 0x09,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x51, 0x0a, 0x09, 0x72, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61,
	0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x6f, 0x0a, 0x0e,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x20, 0x0a,
	0x0c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x2a,
	0xf1, 0x03, 0x0a, 0x0e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6c, 0x64,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x67, 0x65, 0x10, 0x11, 0x12, 0x08, 0x0a,
	0x04, 0x48, 0x6f, 0x6d, 0x65, 0x10, 0x20, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x10, 0x30, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x10, 0x70,
	0x12, 0x09, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x10, 0x80, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x10, 0xa0, 0x02, 0x12, 0x14, 0x0a, 0x0f, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x10, 0xa1, 0x02,
	0x12, 0x14, 0x0a, 0x0f, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x80, 0x04, 0x12, 0x0e, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x10, 0x81, 0x04, 0x12, 0x16, 0x0a, 0x11, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x82, 0x04, 0x12, 0x13,
	0x0a, 0x0e, 0x41, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x10, 0x83, 0x04, 0x12, 0x09, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x10, 0x84, 0x04, 0x12, 0x0e,
	0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x10, 0x86, 0x04, 0x12, 0x0f,
	0x0a, 0x0a, 0x53, 0x54, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x89, 0x04, 0x12,
	0x0b, 0x0a, 0x06, 0x53, 0x54, 0x54, 0x79, 0x70, 0x65, 0x10, 0x90, 0x04, 0x12, 0x15, 0x0a, 0x10,
	0x53, 0x54, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x91, 0x04, 0x12, 0x0e, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x56, 0x69, 0x65, 0x77,
	0x10, 0x92, 0x04, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x10,
	0x94, 0x04, 0x12, 0x10, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x10, 0x96, 0x04, 0x12, 0x12, 0x0a, 0x0d, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x87, 0x04, 0x12, 0x0f, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x95, 0x04, 0x12, 0x17, 0x0a, 0x12, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x10,
	0x97, 0x04, 0x12, 0x12, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x10, 0x98, 0x04, 0x12, 0x0f, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x10, 0x99, 0x04, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x74, 0x44,
	0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x10, 0xa0, 0x04, 0x12,
	0x12, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x10, 0xa1, 0x04, 0x2a, 0xb5, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x0c, 0x0a, 0x08, 0x6c, 0x6f, 0x6e, 0x67, 0x74, 0x65,
	0x78, 0x74, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x74, 0x65, 0x78,
	0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x10, 0x04, 0x12, 0x08,
	0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x62, 0x6f, 0x78, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x10, 0x07, 0x12,
	0x09, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x10, 0x0a,
	0x12, 0x0a, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x64, 0x12, 0x0d, 0x0a, 0x09,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x65, 0x2a, 0x9b, 0x01, 0x0a, 0x0c,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x08, 0x0a, 0x04,
	0x6e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x70, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x64, 0x72, 0x61, 0x67, 0x41, 0x6e, 0x64,
	0x44, 0x72, 0x6f, 0x70, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x63, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72,
	0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x63,
	0x61, 0x73, 0x65, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x10, 0x08,
	0x12, 0x07, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x10, 0x09, 0x2a, 0xbd, 0x01, 0x0a, 0x0b, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x6b, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x05, 0x12, 0x11,
	0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10,
	0x06, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4a, 0x6f, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x10, 0x0a, 0x2a, 0x4e, 0x0a, 0x16, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x6f, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x03, 0x2a, 0x63, 0x0a, 0x11, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x4a, 0x6f, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x64,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x10, 0x04,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x05, 0x2a, 0x38,
	0x0a, 0x0f, 0x53, 0x70, 0x61, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x10, 0x02, 0x2a, 0x2d, 0x0a, 0x0b, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x55, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x74, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x10, 0x02, 0x2a, 0x43, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x61, 0x73, 0x69, 0x63, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x63,
	0x6f, 0x6e, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x6c, 0x79, 0x41, 0x64, 0x64, 0x65, 0x64, 0x10, 0x03, 0x2a, 0x3f, 0x0a, 0x12,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x02, 0x2a, 0x56, 0x0a,
	0x14, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x10, 0x02, 0x2a, 0x22, 0x0a, 0x13, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x00, 0x2a, 0x3e, 0x0a, 0x11, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x57, 0x49, 0x46, 0x49, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x45, 0x4c, 0x4c,
	0x55, 0x4c, 0x41, 0x52, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x61, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2d, 0x68, 0x65, 0x61, 0x72, 0x74, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x70, 0x62, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_pkg_lib_pb_model_protos_models_proto_rawDescOnce sync.Once
	file_pkg_lib_pb_model_protos_models_proto_rawDescData []byte
)

func file_pkg_lib_pb_model_protos_models_proto_rawDescGZIP() []byte {
	file_pkg_lib_pb_model_protos_models_proto_rawDescOnce.Do(func() {
		file_pkg_lib_pb_model_protos_models_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_lib_pb_model_protos_models_proto_rawDesc), len(file_pkg_lib_pb_model_protos_models_proto_rawDesc)))
	})
	return file_pkg_lib_pb_model_protos_models_proto_rawDescData
}

var file_pkg_lib_pb_model_protos_models_proto_enumTypes = make([]protoimpl.EnumInfo, 60)
var file_pkg_lib_pb_model_protos_models_proto_msgTypes = make([]protoimpl.MessageInfo, 101)
var file_pkg_lib_pb_model_protos_models_proto_goTypes = []any{
	(SmartBlockType)(0),                              // 0: anytype.model.SmartBlockType
	(RelationFormat)(0),                              // 1: anytype.model.RelationFormat
	(ObjectOrigin)(0),                                // 2: anytype.model.ObjectOrigin
	(SpaceStatus)(0),                                 // 3: anytype.model.SpaceStatus
	(ParticipantPermissions)(0),                      // 4: anytype.model.ParticipantPermissions
	(ParticipantStatus)(0),                           // 5: anytype.model.ParticipantStatus
	(SpaceAccessType)(0),                             // 6: anytype.model.SpaceAccessType
	(SpaceUxType)(0),                                 // 7: anytype.model.SpaceUxType
	(ImageKind)(0),                                   // 8: anytype.model.ImageKind
	(FileIndexingStatus)(0),                          // 9: anytype.model.FileIndexingStatus
	(SpaceShareableStatus)(0),                        // 10: anytype.model.SpaceShareableStatus
	(NameserviceNameType)(0),                         // 11: anytype.model.NameserviceNameType
	(DeviceNetworkType)(0),                           // 12: anytype.model.DeviceNetworkType
	(BlockPosition)(0),                               // 13: anytype.model.Block.Position
	(BlockAlign)(0),                                  // 14: anytype.model.Block.Align
	(BlockVerticalAlign)(0),                          // 15: anytype.model.Block.VerticalAlign
	(BlockContentLayoutStyle)(0),                     // 16: anytype.model.Block.Content.Layout.Style
	(BlockContentLinkIconSize)(0),                    // 17: anytype.model.Block.Content.Link.IconSize
	(BlockContentLinkStyle)(0),                       // 18: anytype.model.Block.Content.Link.Style
	(BlockContentLinkDescription)(0),                 // 19: anytype.model.Block.Content.Link.Description
	(BlockContentLinkCardStyle)(0),                   // 20: anytype.model.Block.Content.Link.CardStyle
	(BlockContentDivStyle)(0),                        // 21: anytype.model.Block.Content.Div.Style
	(BlockContentBookmarkState)(0),                   // 22: anytype.model.Block.Content.Bookmark.State
	(BlockContentTextStyle)(0),                       // 23: anytype.model.Block.Content.Text.Style
	(BlockContentTextMarkType)(0),                    // 24: anytype.model.Block.Content.Text.Mark.Type
	(BlockContentFileType)(0),                        // 25: anytype.model.Block.Content.File.Type
	(BlockContentFileStyle)(0),                       // 26: anytype.model.Block.Content.File.Style
	(BlockContentFileState)(0),                       // 27: anytype.model.Block.Content.File.State
	(BlockContentDataviewViewType)(0),                // 28: anytype.model.Block.Content.Dataview.View.Type
	(BlockContentDataviewViewSize)(0),                // 29: anytype.model.Block.Content.Dataview.View.Size
	(BlockContentDataviewRelationDateFormat)(0),      // 30: anytype.model.Block.Content.Dataview.Relation.DateFormat
	(BlockContentDataviewRelationTimeFormat)(0),      // 31: anytype.model.Block.Content.Dataview.Relation.TimeFormat
	(BlockContentDataviewRelationFormulaType)(0),     // 32: anytype.model.Block.Content.Dataview.Relation.FormulaType
	(BlockContentDataviewSortType)(0),                // 33: anytype.model.Block.Content.Dataview.Sort.Type
	(BlockContentDataviewSortEmptyType)(0),           // 34: anytype.model.Block.Content.Dataview.Sort.EmptyType
	(BlockContentDataviewFilterOperator)(0),          // 35: anytype.model.Block.Content.Dataview.Filter.Operator
	(BlockContentDataviewFilterCondition)(0),         // 36: anytype.model.Block.Content.Dataview.Filter.Condition
	(BlockContentDataviewFilterQuickOption)(0),       // 37: anytype.model.Block.Content.Dataview.Filter.QuickOption
	(BlockContentLatexProcessor)(0),                  // 38: anytype.model.Block.Content.Latex.Processor
	(BlockContentWidgetLayout)(0),                    // 39: anytype.model.Block.Content.Widget.Layout
	(AccountStatusType)(0),                           // 40: anytype.model.Account.StatusType
	(AccountAuthLocalApiScope)(0),                    // 41: anytype.model.Account.Auth.LocalApiScope
	(LinkPreviewType)(0),                             // 42: anytype.model.LinkPreview.Type
	(RestrictionsObjectRestriction)(0),               // 43: anytype.model.Restrictions.ObjectRestriction
	(RestrictionsDataviewRestriction)(0),             // 44: anytype.model.Restrictions.DataviewRestriction
	(ObjectTypeLayout)(0),                            // 45: anytype.model.ObjectType.Layout
	(RelationScope)(0),                               // 46: anytype.model.Relation.Scope
	(RelationDataSource)(0),                          // 47: anytype.model.Relation.DataSource
	(InternalFlagValue)(0),                           // 48: anytype.model.InternalFlag.Value
	(NotificationStatus)(0),                          // 49: anytype.model.Notification.Status
	(NotificationActionType)(0),                      // 50: anytype.model.Notification.ActionType
	(NotificationExportCode)(0),                      // 51: anytype.model.Notification.Export.Code
	(ExportFormat)(0),                                // 52: anytype.model.Export.Format
	(ImportType)(0),                                  // 53: anytype.model.Import.Type
	(ImportErrorCode)(0),                             // 54: anytype.model.Import.ErrorCode
	(MembershipStatus)(0),                            // 55: anytype.model.Membership.Status
	(MembershipPaymentMethod)(0),                     // 56: anytype.model.Membership.PaymentMethod
	(MembershipEmailVerificationStatus)(0),           // 57: anytype.model.Membership.EmailVerificationStatus
	(MembershipTierDataPeriodType)(0),                // 58: anytype.model.MembershipTierData.PeriodType
	(ChatMessageAttachmentAttachmentType)(0),         // 59: anytype.model.ChatMessage.Attachment.AttachmentType
	(*SmartBlockSnapshotBase)(nil),                   // 60: anytype.model.SmartBlockSnapshotBase
	(*Search)(nil),                                   // 61: anytype.model.Search
	(*Block)(nil),                                    // 62: anytype.model.Block
	(*BlockMetaOnly)(nil),                            // 63: anytype.model.BlockMetaOnly
	(*Range)(nil),                                    // 64: anytype.model.Range
	(*Account)(nil),                                  // 65: anytype.model.Account
	(*LinkPreview)(nil),                              // 66: anytype.model.LinkPreview
	(*Restrictions)(nil),                             // 67: anytype.model.Restrictions
	(*Object)(nil),                                   // 68: anytype.model.Object
	(*SpaceObjectHeader)(nil),                        // 69: anytype.model.SpaceObjectHeader
	(*ObjectType)(nil),                               // 70: anytype.model.ObjectType
	(*Layout)(nil),                                   // 71: anytype.model.Layout
	(*RelationWithValue)(nil),                        // 72: anytype.model.RelationWithValue
	(*Relation)(nil),                                 // 73: anytype.model.Relation
	(*RelationLink)(nil),                             // 74: anytype.model.RelationLink
	(*Relations)(nil),                                // 75: anytype.model.Relations
	(*RelationOptions)(nil),                          // 76: anytype.model.RelationOptions
	(*InternalFlag)(nil),                             // 77: anytype.model.InternalFlag
	(*ObjectView)(nil),                               // 78: anytype.model.ObjectView
	(*ParticipantPermissionChange)(nil),              // 79: anytype.model.ParticipantPermissionChange
	(*Metadata)(nil),                                 // 80: anytype.model.Metadata
	(*Notification)(nil),                             // 81: anytype.model.Notification
	(*Export)(nil),                                   // 82: anytype.model.Export
	(*Import)(nil),                                   // 83: anytype.model.Import
	(*Invite)(nil),                                   // 84: anytype.model.Invite
	(*InvitePayload)(nil),                            // 85: anytype.model.InvitePayload
	(*IdentityProfile)(nil),                          // 86: anytype.model.IdentityProfile
	(*FileInfo)(nil),                                 // 87: anytype.model.FileInfo
	(*FileEncryptionKey)(nil),                        // 88: anytype.model.FileEncryptionKey
	(*ManifestInfo)(nil),                             // 89: anytype.model.ManifestInfo
	(*Membership)(nil),                               // 90: anytype.model.Membership
	(*MembershipTierData)(nil),                       // 91: anytype.model.MembershipTierData
	(*Detail)(nil),                                   // 92: anytype.model.Detail
	(*DeviceInfo)(nil),                               // 93: anytype.model.DeviceInfo
	(*ChatState)(nil),                                // 94: anytype.model.ChatState
	(*ChatMessage)(nil),                              // 95: anytype.model.ChatMessage
	(*SearchResult)(nil),                             // 96: anytype.model.Search.Result
	(*SearchMeta)(nil),                               // 97: anytype.model.Search.Meta
	(*BlockRestrictions)(nil),                        // 98: anytype.model.Block.Restrictions
	(*BlockContent)(nil),                             // 99: anytype.model.Block.Content
	(*BlockContentLayout)(nil),                       // 100: anytype.model.Block.Content.Layout
	(*BlockContentLink)(nil),                         // 101: anytype.model.Block.Content.Link
	(*BlockContentDiv)(nil),                          // 102: anytype.model.Block.Content.Div
	(*BlockContentBookmark)(nil),                     // 103: anytype.model.Block.Content.Bookmark
	(*BlockContentIcon)(nil),                         // 104: anytype.model.Block.Content.Icon
	(*BlockContentFeaturedRelations)(nil),            // 105: anytype.model.Block.Content.FeaturedRelations
	(*BlockContentText)(nil),                         // 106: anytype.model.Block.Content.Text
	(*BlockContentFile)(nil),                         // 107: anytype.model.Block.Content.File
	(*BlockContentSmartblock)(nil),                   // 108: anytype.model.Block.Content.Smartblock
	(*BlockContentDataview)(nil),                     // 109: anytype.model.Block.Content.Dataview
	(*BlockContentRelation)(nil),                     // 110: anytype.model.Block.Content.Relation
	(*BlockContentLatex)(nil),                        // 111: anytype.model.Block.Content.Latex
	(*BlockContentTableOfContents)(nil),              // 112: anytype.model.Block.Content.TableOfContents
	(*BlockContentTable)(nil),                        // 113: anytype.model.Block.Content.Table
	(*BlockContentTableColumn)(nil),                  // 114: anytype.model.Block.Content.TableColumn
	(*BlockContentTableRow)(nil),                     // 115: anytype.model.Block.Content.TableRow
	(*BlockContentWidget)(nil),                       // 116: anytype.model.Block.Content.Widget
	(*BlockContentChat)(nil),                         // 117: anytype.model.Block.Content.Chat
	(*BlockContentTextMarks)(nil),                    // 118: anytype.model.Block.Content.Text.Marks
	(*BlockContentTextMark)(nil),                     // 119: anytype.model.Block.Content.Text.Mark
	(*BlockContentDataviewView)(nil),                 // 120: anytype.model.Block.Content.Dataview.View
	(*BlockContentDataviewRelation)(nil),             // 121: anytype.model.Block.Content.Dataview.Relation
	(*BlockContentDataviewSort)(nil),                 // 122: anytype.model.Block.Content.Dataview.Sort
	(*BlockContentDataviewFilter)(nil),               // 123: anytype.model.Block.Content.Dataview.Filter
	(*BlockContentDataviewGroupOrder)(nil),           // 124: anytype.model.Block.Content.Dataview.GroupOrder
	(*BlockContentDataviewViewGroup)(nil),            // 125: anytype.model.Block.Content.Dataview.ViewGroup
	(*BlockContentDataviewObjectOrder)(nil),          // 126: anytype.model.Block.Content.Dataview.ObjectOrder
	(*BlockContentDataviewGroup)(nil),                // 127: anytype.model.Block.Content.Dataview.Group
	(*BlockContentDataviewStatus)(nil),               // 128: anytype.model.Block.Content.Dataview.Status
	(*BlockContentDataviewTag)(nil),                  // 129: anytype.model.Block.Content.Dataview.Tag
	(*BlockContentDataviewCheckbox)(nil),             // 130: anytype.model.Block.Content.Dataview.Checkbox
	(*BlockContentDataviewDate)(nil),                 // 131: anytype.model.Block.Content.Dataview.Date
	(*AccountConfig)(nil),                            // 132: anytype.model.Account.Config
	(*AccountStatus)(nil),                            // 133: anytype.model.Account.Status
	(*AccountInfo)(nil),                              // 134: anytype.model.Account.Info
	(*AccountAuth)(nil),                              // 135: anytype.model.Account.Auth
	(*RestrictionsDataviewRestrictions)(nil),         // 136: anytype.model.Restrictions.DataviewRestrictions
	(*ObjectChangePayload)(nil),                      // 137: anytype.model.Object.ChangePayload
	(*RelationOption)(nil),                           // 138: anytype.model.Relation.Option
	(*ObjectViewDetailsSet)(nil),                     // 139: anytype.model.ObjectView.DetailsSet
	(*ObjectViewRelationWithValuePerObject)(nil),     // 140: anytype.model.ObjectView.RelationWithValuePerObject
	(*ObjectViewHistorySize)(nil),                    // 141: anytype.model.ObjectView.HistorySize
	(*ObjectViewBlockParticipant)(nil),               // 142: anytype.model.ObjectView.BlockParticipant
	(*MetadataPayload)(nil),                          // 143: anytype.model.Metadata.Payload
	(*MetadataPayloadIdentityPayload)(nil),           // 144: anytype.model.Metadata.Payload.IdentityPayload
	(*NotificationImport)(nil),                       // 145: anytype.model.Notification.Import
	(*NotificationExport)(nil),                       // 146: anytype.model.Notification.Export
	(*NotificationGalleryImport)(nil),                // 147: anytype.model.Notification.GalleryImport
	(*NotificationRequestToJoin)(nil),                // 148: anytype.model.Notification.RequestToJoin
	(*NotificationTest)(nil),                         // 149: anytype.model.Notification.Test
	(*NotificationParticipantRequestApproved)(nil),   // 150: anytype.model.Notification.ParticipantRequestApproved
	(*NotificationRequestToLeave)(nil),               // 151: anytype.model.Notification.RequestToLeave
	(*NotificationParticipantRemove)(nil),            // 152: anytype.model.Notification.ParticipantRemove
	(*NotificationParticipantRequestDecline)(nil),    // 153: anytype.model.Notification.ParticipantRequestDecline
	(*NotificationParticipantPermissionsChange)(nil), // 154: anytype.model.Notification.ParticipantPermissionsChange
	(*ChatStateUnreadState)(nil),                     // 155: anytype.model.ChatState.UnreadState
	(*ChatMessageMessageContent)(nil),                // 156: anytype.model.ChatMessage.MessageContent
	(*ChatMessageAttachment)(nil),                    // 157: anytype.model.ChatMessage.Attachment
	(*ChatMessageReactions)(nil),                     // 158: anytype.model.ChatMessage.Reactions
	nil,                                              // 159: anytype.model.ChatMessage.Reactions.ReactionsEntry
	(*ChatMessageReactionsIdentityList)(nil),         // 160: anytype.model.ChatMessage.Reactions.IdentityList
	(*structpb.Struct)(nil),                          // 161: google.protobuf.Struct
	(*structpb.Value)(nil),                           // 162: google.protobuf.Value
}
var file_pkg_lib_pb_model_protos_models_proto_depIdxs = []int32{
	62,  // 0: anytype.model.SmartBlockSnapshotBase.blocks:type_name -> anytype.model.Block
	161, // 1: anytype.model.SmartBlockSnapshotBase.details:type_name -> google.protobuf.Struct
	161, // 2: anytype.model.SmartBlockSnapshotBase.fileKeys:type_name -> google.protobuf.Struct
	73,  // 3: anytype.model.SmartBlockSnapshotBase.extraRelations:type_name -> anytype.model.Relation
	161, // 4: anytype.model.SmartBlockSnapshotBase.collections:type_name -> google.protobuf.Struct
	74,  // 5: anytype.model.SmartBlockSnapshotBase.relationLinks:type_name -> anytype.model.RelationLink
	87,  // 6: anytype.model.SmartBlockSnapshotBase.fileInfo:type_name -> anytype.model.FileInfo
	161, // 7: anytype.model.Block.fields:type_name -> google.protobuf.Struct
	98,  // 8: anytype.model.Block.restrictions:type_name -> anytype.model.Block.Restrictions
	14,  // 9: anytype.model.Block.align:type_name -> anytype.model.Block.Align
	15,  // 10: anytype.model.Block.verticalAlign:type_name -> anytype.model.Block.VerticalAlign
	108, // 11: anytype.model.Block.smartblock:type_name -> anytype.model.Block.Content.Smartblock
	106, // 12: anytype.model.Block.text:type_name -> anytype.model.Block.Content.Text
	107, // 13: anytype.model.Block.file:type_name -> anytype.model.Block.Content.File
	100, // 14: anytype.model.Block.layout:type_name -> anytype.model.Block.Content.Layout
	102, // 15: anytype.model.Block.div:type_name -> anytype.model.Block.Content.Div
	103, // 16: anytype.model.Block.bookmark:type_name -> anytype.model.Block.Content.Bookmark
	104, // 17: anytype.model.Block.icon:type_name -> anytype.model.Block.Content.Icon
	101, // 18: anytype.model.Block.link:type_name -> anytype.model.Block.Content.Link
	109, // 19: anytype.model.Block.dataview:type_name -> anytype.model.Block.Content.Dataview
	110, // 20: anytype.model.Block.relation:type_name -> anytype.model.Block.Content.Relation
	105, // 21: anytype.model.Block.featuredRelations:type_name -> anytype.model.Block.Content.FeaturedRelations
	111, // 22: anytype.model.Block.latex:type_name -> anytype.model.Block.Content.Latex
	112, // 23: anytype.model.Block.tableOfContents:type_name -> anytype.model.Block.Content.TableOfContents
	113, // 24: anytype.model.Block.table:type_name -> anytype.model.Block.Content.Table
	114, // 25: anytype.model.Block.tableColumn:type_name -> anytype.model.Block.Content.TableColumn
	115, // 26: anytype.model.Block.tableRow:type_name -> anytype.model.Block.Content.TableRow
	116, // 27: anytype.model.Block.widget:type_name -> anytype.model.Block.Content.Widget
	117, // 28: anytype.model.Block.chat:type_name -> anytype.model.Block.Content.Chat
	161, // 29: anytype.model.BlockMetaOnly.fields:type_name -> google.protobuf.Struct
	132, // 30: anytype.model.Account.config:type_name -> anytype.model.Account.Config
	133, // 31: anytype.model.Account.status:type_name -> anytype.model.Account.Status
	134, // 32: anytype.model.Account.info:type_name -> anytype.model.Account.Info
	42,  // 33: anytype.model.LinkPreview.type:type_name -> anytype.model.LinkPreview.Type
	43,  // 34: anytype.model.Restrictions.object:type_name -> anytype.model.Restrictions.ObjectRestriction
	136, // 35: anytype.model.Restrictions.dataview:type_name -> anytype.model.Restrictions.DataviewRestrictions
	74,  // 36: anytype.model.ObjectType.relationLinks:type_name -> anytype.model.RelationLink
	45,  // 37: anytype.model.ObjectType.layout:type_name -> anytype.model.ObjectType.Layout
	0,   // 38: anytype.model.ObjectType.types:type_name -> anytype.model.SmartBlockType
	45,  // 39: anytype.model.Layout.id:type_name -> anytype.model.ObjectType.Layout
	73,  // 40: anytype.model.Layout.requiredRelations:type_name -> anytype.model.Relation
	73,  // 41: anytype.model.RelationWithValue.relation:type_name -> anytype.model.Relation
	162, // 42: anytype.model.RelationWithValue.value:type_name -> google.protobuf.Value
	1,   // 43: anytype.model.Relation.format:type_name -> anytype.model.RelationFormat
	162, // 44: anytype.model.Relation.defaultValue:type_name -> google.protobuf.Value
	47,  // 45: anytype.model.Relation.dataSource:type_name -> anytype.model.Relation.DataSource
	138, // 46: anytype.model.Relation.selectDict:type_name -> anytype.model.Relation.Option
	46,  // 47: anytype.model.Relation.scope:type_name -> anytype.model.Relation.Scope
	1,   // 48: anytype.model.RelationLink.format:type_name -> anytype.model.RelationFormat
	73,  // 49: anytype.model.Relations.relations:type_name -> anytype.model.Relation
	138, // 50: anytype.model.RelationOptions.options:type_name -> anytype.model.Relation.Option
	48,  // 51: anytype.model.InternalFlag.value:type_name -> anytype.model.InternalFlag.Value
	62,  // 52: anytype.model.ObjectView.blocks:type_name -> anytype.model.Block
	139, // 53: anytype.model.ObjectView.details:type_name -> anytype.model.ObjectView.DetailsSet
	0,   // 54: anytype.model.ObjectView.type:type_name -> anytype.model.SmartBlockType
	73,  // 55: anytype.model.ObjectView.relations:type_name -> anytype.model.Relation
	74,  // 56: anytype.model.ObjectView.relationLinks:type_name -> anytype.model.RelationLink
	67,  // 57: anytype.model.ObjectView.restrictions:type_name -> anytype.model.Restrictions
	141, // 58: anytype.model.ObjectView.history:type_name -> anytype.model.ObjectView.HistorySize
	142, // 59: anytype.model.ObjectView.blockParticipants:type_name -> anytype.model.ObjectView.BlockParticipant
	4,   // 60: anytype.model.ParticipantPermissionChange.perms:type_name -> anytype.model.ParticipantPermissions
	144, // 61: anytype.model.Metadata.identity:type_name -> anytype.model.Metadata.Payload.IdentityPayload
	49,  // 62: anytype.model.Notification.status:type_name -> anytype.model.Notification.Status
	145, // 63: anytype.model.Notification.import:type_name -> anytype.model.Notification.Import
	146, // 64: anytype.model.Notification.export:type_name -> anytype.model.Notification.Export
	147, // 65: anytype.model.Notification.galleryImport:type_name -> anytype.model.Notification.GalleryImport
	148, // 66: anytype.model.Notification.requestToJoin:type_name -> anytype.model.Notification.RequestToJoin
	149, // 67: anytype.model.Notification.test:type_name -> anytype.model.Notification.Test
	150, // 68: anytype.model.Notification.participantRequestApproved:type_name -> anytype.model.Notification.ParticipantRequestApproved
	151, // 69: anytype.model.Notification.requestToLeave:type_name -> anytype.model.Notification.RequestToLeave
	152, // 70: anytype.model.Notification.participantRemove:type_name -> anytype.model.Notification.ParticipantRemove
	153, // 71: anytype.model.Notification.participantRequestDecline:type_name -> anytype.model.Notification.ParticipantRequestDecline
	154, // 72: anytype.model.Notification.participantPermissionsChange:type_name -> anytype.model.Notification.ParticipantPermissionsChange
	88,  // 73: anytype.model.InvitePayload.spaceIconEncryptionKeys:type_name -> anytype.model.FileEncryptionKey
	88,  // 74: anytype.model.IdentityProfile.iconEncryptionKeys:type_name -> anytype.model.FileEncryptionKey
	88,  // 75: anytype.model.FileInfo.encryptionKeys:type_name -> anytype.model.FileEncryptionKey
	55,  // 76: anytype.model.Membership.status:type_name -> anytype.model.Membership.Status
	56,  // 77: anytype.model.Membership.paymentMethod:type_name -> anytype.model.Membership.PaymentMethod
	11,  // 78: anytype.model.Membership.nsNameType:type_name -> anytype.model.NameserviceNameType
	58,  // 79: anytype.model.MembershipTierData.periodType:type_name -> anytype.model.MembershipTierData.PeriodType
	162, // 80: anytype.model.Detail.value:type_name -> google.protobuf.Value
	155, // 81: anytype.model.ChatState.messages:type_name -> anytype.model.ChatState.UnreadState
	155, // 82: anytype.model.ChatState.mentions:type_name -> anytype.model.ChatState.UnreadState
	156, // 83: anytype.model.ChatMessage.message:type_name -> anytype.model.ChatMessage.MessageContent
	157, // 84: anytype.model.ChatMessage.attachments:type_name -> anytype.model.ChatMessage.Attachment
	158, // 85: anytype.model.ChatMessage.reactions:type_name -> anytype.model.ChatMessage.Reactions
	161, // 86: anytype.model.Search.Result.details:type_name -> google.protobuf.Struct
	97,  // 87: anytype.model.Search.Result.meta:type_name -> anytype.model.Search.Meta
	64,  // 88: anytype.model.Search.Meta.highlightRanges:type_name -> anytype.model.Range
	161, // 89: anytype.model.Search.Meta.relationDetails:type_name -> google.protobuf.Struct
	16,  // 90: anytype.model.Block.Content.Layout.style:type_name -> anytype.model.Block.Content.Layout.Style
	18,  // 91: anytype.model.Block.Content.Link.style:type_name -> anytype.model.Block.Content.Link.Style
	161, // 92: anytype.model.Block.Content.Link.fields:type_name -> google.protobuf.Struct
	17,  // 93: anytype.model.Block.Content.Link.iconSize:type_name -> anytype.model.Block.Content.Link.IconSize
	20,  // 94: anytype.model.Block.Content.Link.cardStyle:type_name -> anytype.model.Block.Content.Link.CardStyle
	19,  // 95: anytype.model.Block.Content.Link.description:type_name -> anytype.model.Block.Content.Link.Description
	21,  // 96: anytype.model.Block.Content.Div.style:type_name -> anytype.model.Block.Content.Div.Style
	42,  // 97: anytype.model.Block.Content.Bookmark.type:type_name -> anytype.model.LinkPreview.Type
	22,  // 98: anytype.model.Block.Content.Bookmark.state:type_name -> anytype.model.Block.Content.Bookmark.State
	23,  // 99: anytype.model.Block.Content.Text.style:type_name -> anytype.model.Block.Content.Text.Style
	118, // 100: anytype.model.Block.Content.Text.marks:type_name -> anytype.model.Block.Content.Text.Marks
	25,  // 101: anytype.model.Block.Content.File.type:type_name -> anytype.model.Block.Content.File.Type
	27,  // 102: anytype.model.Block.Content.File.state:type_name -> anytype.model.Block.Content.File.State
	26,  // 103: anytype.model.Block.Content.File.style:type_name -> anytype.model.Block.Content.File.Style
	120, // 104: anytype.model.Block.Content.Dataview.views:type_name -> anytype.model.Block.Content.Dataview.View
	73,  // 105: anytype.model.Block.Content.Dataview.relations:type_name -> anytype.model.Relation
	124, // 106: anytype.model.Block.Content.Dataview.groupOrders:type_name -> anytype.model.Block.Content.Dataview.GroupOrder
	126, // 107: anytype.model.Block.Content.Dataview.objectOrders:type_name -> anytype.model.Block.Content.Dataview.ObjectOrder
	74,  // 108: anytype.model.Block.Content.Dataview.relationLinks:type_name -> anytype.model.RelationLink
	38,  // 109: anytype.model.Block.Content.Latex.processor:type_name -> anytype.model.Block.Content.Latex.Processor
	39,  // 110: anytype.model.Block.Content.Widget.layout:type_name -> anytype.model.Block.Content.Widget.Layout
	119, // 111: anytype.model.Block.Content.Text.Marks.marks:type_name -> anytype.model.Block.Content.Text.Mark
	64,  // 112: anytype.model.Block.Content.Text.Mark.range:type_name -> anytype.model.Range
	24,  // 113: anytype.model.Block.Content.Text.Mark.type:type_name -> anytype.model.Block.Content.Text.Mark.Type
	28,  // 114: anytype.model.Block.Content.Dataview.View.type:type_name -> anytype.model.Block.Content.Dataview.View.Type
	122, // 115: anytype.model.Block.Content.Dataview.View.sorts:type_name -> anytype.model.Block.Content.Dataview.Sort
	123, // 116: anytype.model.Block.Content.Dataview.View.filters:type_name -> anytype.model.Block.Content.Dataview.Filter
	121, // 117: anytype.model.Block.Content.Dataview.View.relations:type_name -> anytype.model.Block.Content.Dataview.Relation
	29,  // 118: anytype.model.Block.Content.Dataview.View.cardSize:type_name -> anytype.model.Block.Content.Dataview.View.Size
	31,  // 119: anytype.model.Block.Content.Dataview.Relation.timeFormat:type_name -> anytype.model.Block.Content.Dataview.Relation.TimeFormat
	30,  // 120: anytype.model.Block.Content.Dataview.Relation.dateFormat:type_name -> anytype.model.Block.Content.Dataview.Relation.DateFormat
	32,  // 121: anytype.model.Block.Content.Dataview.Relation.formula:type_name -> anytype.model.Block.Content.Dataview.Relation.FormulaType
	14,  // 122: anytype.model.Block.Content.Dataview.Relation.align:type_name -> anytype.model.Block.Align
	33,  // 123: anytype.model.Block.Content.Dataview.Sort.type:type_name -> anytype.model.Block.Content.Dataview.Sort.Type
	162, // 124: anytype.model.Block.Content.Dataview.Sort.customOrder:type_name -> google.protobuf.Value
	1,   // 125: anytype.model.Block.Content.Dataview.Sort.format:type_name -> anytype.model.RelationFormat
	34,  // 126: anytype.model.Block.Content.Dataview.Sort.emptyPlacement:type_name -> anytype.model.Block.Content.Dataview.Sort.EmptyType
	35,  // 127: anytype.model.Block.Content.Dataview.Filter.operator:type_name -> anytype.model.Block.Content.Dataview.Filter.Operator
	36,  // 128: anytype.model.Block.Content.Dataview.Filter.condition:type_name -> anytype.model.Block.Content.Dataview.Filter.Condition
	162, // 129: anytype.model.Block.Content.Dataview.Filter.value:type_name -> google.protobuf.Value
	37,  // 130: anytype.model.Block.Content.Dataview.Filter.quickOption:type_name -> anytype.model.Block.Content.Dataview.Filter.QuickOption
	1,   // 131: anytype.model.Block.Content.Dataview.Filter.format:type_name -> anytype.model.RelationFormat
	123, // 132: anytype.model.Block.Content.Dataview.Filter.nestedFilters:type_name -> anytype.model.Block.Content.Dataview.Filter
	125, // 133: anytype.model.Block.Content.Dataview.GroupOrder.viewGroups:type_name -> anytype.model.Block.Content.Dataview.ViewGroup
	128, // 134: anytype.model.Block.Content.Dataview.Group.status:type_name -> anytype.model.Block.Content.Dataview.Status
	129, // 135: anytype.model.Block.Content.Dataview.Group.tag:type_name -> anytype.model.Block.Content.Dataview.Tag
	130, // 136: anytype.model.Block.Content.Dataview.Group.checkbox:type_name -> anytype.model.Block.Content.Dataview.Checkbox
	131, // 137: anytype.model.Block.Content.Dataview.Group.date:type_name -> anytype.model.Block.Content.Dataview.Date
	161, // 138: anytype.model.Account.Config.extra:type_name -> google.protobuf.Struct
	40,  // 139: anytype.model.Account.Status.statusType:type_name -> anytype.model.Account.StatusType
	44,  // 140: anytype.model.Restrictions.DataviewRestrictions.restrictions:type_name -> anytype.model.Restrictions.DataviewRestriction
	0,   // 141: anytype.model.Object.ChangePayload.smartBlockType:type_name -> anytype.model.SmartBlockType
	161, // 142: anytype.model.ObjectView.DetailsSet.details:type_name -> google.protobuf.Struct
	72,  // 143: anytype.model.ObjectView.RelationWithValuePerObject.relations:type_name -> anytype.model.RelationWithValue
	54,  // 144: anytype.model.Notification.Import.errorCode:type_name -> anytype.model.Import.ErrorCode
	53,  // 145: anytype.model.Notification.Import.importType:type_name -> anytype.model.Import.Type
	51,  // 146: anytype.model.Notification.Export.errorCode:type_name -> anytype.model.Notification.Export.Code
	52,  // 147: anytype.model.Notification.Export.exportType:type_name -> anytype.model.Export.Format
	54,  // 148: anytype.model.Notification.GalleryImport.errorCode:type_name -> anytype.model.Import.ErrorCode
	4,   // 149: anytype.model.Notification.ParticipantRequestApproved.permissions:type_name -> anytype.model.ParticipantPermissions
	4,   // 150: anytype.model.Notification.ParticipantPermissionsChange.permissions:type_name -> anytype.model.ParticipantPermissions
	23,  // 151: anytype.model.ChatMessage.MessageContent.style:type_name -> anytype.model.Block.Content.Text.Style
	119, // 152: anytype.model.ChatMessage.MessageContent.marks:type_name -> anytype.model.Block.Content.Text.Mark
	59,  // 153: anytype.model.ChatMessage.Attachment.type:type_name -> anytype.model.ChatMessage.Attachment.AttachmentType
	159, // 154: anytype.model.ChatMessage.Reactions.reactions:type_name -> anytype.model.ChatMessage.Reactions.ReactionsEntry
	160, // 155: anytype.model.ChatMessage.Reactions.ReactionsEntry.value:type_name -> anytype.model.ChatMessage.Reactions.IdentityList
	156, // [156:156] is the sub-list for method output_type
	156, // [156:156] is the sub-list for method input_type
	156, // [156:156] is the sub-list for extension type_name
	156, // [156:156] is the sub-list for extension extendee
	0,   // [0:156] is the sub-list for field type_name
}

func init() { file_pkg_lib_pb_model_protos_models_proto_init() }
func file_pkg_lib_pb_model_protos_models_proto_init() {
	if File_pkg_lib_pb_model_protos_models_proto != nil {
		return
	}
	file_pkg_lib_pb_model_protos_models_proto_msgTypes[2].OneofWrappers = []any{
		(*BlockContentOfSmartblock)(nil),
		(*BlockContentOfText)(nil),
		(*BlockContentOfFile)(nil),
		(*BlockContentOfLayout)(nil),
		(*BlockContentOfDiv)(nil),
		(*BlockContentOfBookmark)(nil),
		(*BlockContentOfIcon)(nil),
		(*BlockContentOfLink)(nil),
		(*BlockContentOfDataview)(nil),
		(*BlockContentOfRelation)(nil),
		(*BlockContentOfFeaturedRelations)(nil),
		(*BlockContentOfLatex)(nil),
		(*BlockContentOfTableOfContents)(nil),
		(*BlockContentOfTable)(nil),
		(*BlockContentOfTableColumn)(nil),
		(*BlockContentOfTableRow)(nil),
		(*BlockContentOfWidget)(nil),
		(*BlockContentOfChat)(nil),
	}
	file_pkg_lib_pb_model_protos_models_proto_msgTypes[20].OneofWrappers = []any{
		(*MetadataPayloadOfIdentity)(nil),
	}
	file_pkg_lib_pb_model_protos_models_proto_msgTypes[21].OneofWrappers = []any{
		(*NotificationPayloadOfImport)(nil),
		(*NotificationPayloadOfExport)(nil),
		(*NotificationPayloadOfGalleryImport)(nil),
		(*NotificationPayloadOfRequestToJoin)(nil),
		(*NotificationPayloadOfTest)(nil),
		(*NotificationPayloadOfParticipantRequestApproved)(nil),
		(*NotificationPayloadOfRequestToLeave)(nil),
		(*NotificationPayloadOfParticipantRemove)(nil),
		(*NotificationPayloadOfParticipantRequestDecline)(nil),
		(*NotificationPayloadOfParticipantPermissionsChange)(nil),
	}
	file_pkg_lib_pb_model_protos_models_proto_msgTypes[67].OneofWrappers = []any{
		(*BlockContentDataviewGroupValueOfStatus)(nil),
		(*BlockContentDataviewGroupValueOfTag)(nil),
		(*BlockContentDataviewGroupValueOfCheckbox)(nil),
		(*BlockContentDataviewGroupValueOfDate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_lib_pb_model_protos_models_proto_rawDesc), len(file_pkg_lib_pb_model_protos_models_proto_rawDesc)),
			NumEnums:      60,
			NumMessages:   101,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_lib_pb_model_protos_models_proto_goTypes,
		DependencyIndexes: file_pkg_lib_pb_model_protos_models_proto_depIdxs,
		EnumInfos:         file_pkg_lib_pb_model_protos_models_proto_enumTypes,
		MessageInfos:      file_pkg_lib_pb_model_protos_models_proto_msgTypes,
	}.Build()
	File_pkg_lib_pb_model_protos_models_proto = out.File
	file_pkg_lib_pb_model_protos_models_proto_goTypes = nil
	file_pkg_lib_pb_model_protos_models_proto_depIdxs = nil
}
